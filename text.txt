package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.util.Enumeration;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.SessionData;
import com.apptmyz.fpcontrolpanel.response.AnalyticsAuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/analytics/new")
public class AnalyticsNewReportsController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@GetMapping("/supermerchant/all")
	public ResponseEntity<GeneralResponse> fundTransfer(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token)
	{
		System.out.println("ASS");
		
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			String ip = commonTasks.getIpAddress(httprequest);

			boolean permission = false;

			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());

			try
				{

				AnalyticsAuthenticateUserResponse sessionData = new AnalyticsAuthenticateUserResponse();
				sessionData.setActiveFlag(1);
				sessionData.setUsername(authenticateUserResponse.getUserName());
				sessionData.setUserType(101);
				sessionData.setAdminRadioButton(1);
				String token1 = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
				
					HttpClient httpClient = new DefaultHttpClient();

					System.out.println("https://fpanalytics.tapits.in/fpreportscore/api/superMerchant/all1");

								   	   	
				   	 HttpGet httpGet = new HttpGet("https://fpanalytics.tapits.in/fpreportscore/api/superMerchant/all1");
			   	   	 httpGet.setHeader("Content-type", "application/json");
			   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
			   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			   	   	 httpGet.setHeader("token", token1);
		
					 
					 HttpResponse responseData = httpClient.execute(httpGet);

					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";

					//			     commonTasks.getFullResponse(responseData);

					System.out.println(responseCode);
					System.out.println(responseData);

					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);

						System.out.println("DATA:"+ data);

						GeneralResponse geres = gson.fromJson(data,GeneralResponse.class);
						
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED,geres.getData()), HttpStatus.OK);
						
						
					}    
					else
					{
						response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
					}
				}
				catch(Exception e)
				{
					response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	
	}
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		System.out.println("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

		System.out.println(" Successfully");

		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.Anomalymodel;
import com.apptmyz.fpcontrolpanel.data.InstantSettlementDetailsModel;
import com.apptmyz.fpcontrolpanel.data.SettlementInfoDataModel;
import com.apptmyz.fpcontrolpanel.data.SettlementInfoDataReportModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AnalyticsAuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.BaseService;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
//import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
//import com.apptmyz.fpcontrolpanel.response.AnalyticsAuthenticateUserResponse;
//import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
//import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
//import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
//import com.apptmyz.fpcontrolpanel.utils.Constants;
//import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpsettlementdb.entity.InstantSettlementDetails;
import com.apptmyz.fpsettlementdb.entity.SettlementInfo;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.InstantSettlementDetailsRepository;
import com.apptmyz.fpsettlementdb.repository.SettlementInfoRepository;
//import com.apptmyz.globalverification.util.CommonTasks;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
@RestController
@RequestMapping(value="/api/analytics")
public class AnalyticsReportsController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private InstantSettlementDetailsRepository instantSettlementDetailsRepository;

	@Autowired
	private SettlementInfoRepository settlementInfoRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private BaseService baseService;
	
	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@GetMapping(path ="/unrepoted/{fromDate}/{toDate}/{value}")
	public ResponseEntity<GeneralResponse> getunreporteddata(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate,@PathVariable String value)
	{

		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			String ip = commonTasks.getIpAddress(httprequest);

			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			boolean perm = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm) {
				try
				{
					AnalyticsAuthenticateUserResponse sessionData = new AnalyticsAuthenticateUserResponse();
					sessionData.setActiveFlag(1);
					sessionData.setUsername(authenticateUserResponse.getUserName());
					sessionData.setUserType(101);
					sessionData.setAdminRadioButton(1);
					String analyticstoken = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
					HttpClient httpClient = new DefaultHttpClient();

					System.out.println("https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/unreported/report/"+fromDate+"/"+toDate+"/"+value);
					//		String invalidRespBody = "";
					String url="https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/unreported/report/"+fromDate+"/"+toDate+"/"+value;
					url = url.replace(" ", "%20");
					HttpGet httpGet = new HttpGet(url);
					httpGet.setHeader("Content-type", "application/json");
					httpGet.setHeader("User-Agent", "Mozilla/5.0");
					httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpGet.setHeader("token",analyticstoken);


					HttpResponse responseData = httpClient.execute(httpGet);
					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";
					System.out.println(responseCode);
					//System.out.println(responseData);
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);
						//System.out.println("DATA:"+ data);
						GeneralResponse geres =gson.fromJson(data,GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED,geres.getData()), HttpStatus.OK);
					}      
					else
					{
						response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);

					}


				}
				catch(Exception e)
				{
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}	
			}

		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}


	@GetMapping(path ="/supermerchant/all")
	public ResponseEntity<GeneralResponse> getsupermerchantdata(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token)
	{
		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			String ip = commonTasks.getIpAddress(httprequest);
			boolean permission = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			boolean perm = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm)
			{
				try
				{
					AnalyticsAuthenticateUserResponse sessionData = new AnalyticsAuthenticateUserResponse();
					sessionData.setActiveFlag(1);
					sessionData.setUsername(authenticateUserResponse.getUserName());
					sessionData.setUserType(101);
					sessionData.setAdminRadioButton(1);
					String analyticstoken = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
					HttpClient httpClient = new DefaultHttpClient();

					System.out.println("https://fpanalytics.tapits.in/fpreportscore/api/superMerchant/all1");
					//		String invalidRespBody = "";
					HttpGet httpGet = new HttpGet("https://fpanalytics.tapits.in/fpreportscore/api/superMerchant/all1");
					httpGet.setHeader("Content-type", "application/json");
					httpGet.setHeader("User-Agent", "Mozilla/5.0");
					httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpGet.setHeader("token", analyticstoken);

					HttpResponse responseData = httpClient.execute(httpGet);
					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";
					System.out.println(responseCode);
					//System.out.println(responseData);
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);
						//System.out.println("DATA:"+ data);
						GeneralResponse geres =gson.fromJson(data,GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED,geres.getData()), HttpStatus.OK);
					}      
					else
					{
						response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);

					}

				}
				catch(Exception e)
				{
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}	
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;


	}

	@GetMapping(path ="/anomalyreport/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getsupermerchantdata(HttpServletRequest httprequest,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate)
	{

		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			String ip = commonTasks.getIpAddress(httprequest);
			boolean permission = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			boolean perm = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm) {
				try
				{
					AnalyticsAuthenticateUserResponse sessionData = new AnalyticsAuthenticateUserResponse();
					sessionData.setActiveFlag(1);
					sessionData.setUsername(authenticateUserResponse.getUserName());
					sessionData.setUserType(101);
					sessionData.setAdminRadioButton(1);
					String analyticstoken = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
					HttpClient httpClient = new DefaultHttpClient();

					System.out.println("https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/threewayrecon/"+fromDate+"/"+toDate);
					//		String invalidRespBody = "";
					String url="https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/threewayrecon/"+fromDate+"/"+toDate;
					url = url.replace(" ", "%20");
					HttpGet httpGet = new HttpGet(url);
					httpGet.setHeader("Content-type", "application/json");
					httpGet.setHeader("User-Agent", "Mozilla/5.0");
					httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpGet.setHeader("token",analyticstoken);


					HttpResponse responseData = httpClient.execute(httpGet);
					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";
					System.out.println(responseCode);
					//System.out.println(responseData);
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);
						//System.out.println("DATA:"+ data);
						GeneralResponse geres =gson.fromJson(data,GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED,geres.getData()), HttpStatus.OK);
					}      
					else
					{
						response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);

					}


				}
				catch(Exception e)
				{
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}	
			}


		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;

	}


	@GetMapping(path ="/anomalyreportadmin/{fromDate}/{toDate}/{value}")
	public ResponseEntity<GeneralResponse> getanomalyadmindata(HttpServletRequest httprequest,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate,@PathVariable String value)
	{
		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			String ip = commonTasks.getIpAddress(httprequest);
			boolean permission = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			boolean perm = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm) {
				try
				{
					AnalyticsAuthenticateUserResponse sessionData = new AnalyticsAuthenticateUserResponse();
					sessionData.setActiveFlag(1);
					sessionData.setUsername(authenticateUserResponse.getUserName());
					sessionData.setUserType(101);
					sessionData.setAdminRadioButton(1);
					String analyticstoken = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
					HttpClient httpClient = new DefaultHttpClient();

					System.out.println("https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/threewayrecon/admin/"+fromDate+"/"+toDate+"/"+value);
					//		String invalidRespBody = "";
					String url="https://fpanalytics.tapits.in/fpaepsanalytics/api/reports/threewayrecon/admin/"+fromDate+"/"+toDate+"/"+value;
					url = url.replace(" ", "%20");
					HttpGet httpGet = new HttpGet(url);
					httpGet.setHeader("Content-type", "application/json");
					httpGet.setHeader("User-Agent", "Mozilla/5.0");
					httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpGet.setHeader("token",analyticstoken);


					HttpResponse responseData = httpClient.execute(httpGet);
					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";
					System.out.println(responseCode);
					//System.out.println(responseData);
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);
						//System.out.println("DATA:"+ data);
						GeneralResponse geres =gson.fromJson(data,GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED,geres.getData()), HttpStatus.OK);
					}      
					else
					{
						response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);

					}


				}
				catch(Exception e)
				{
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}	
			}


		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;

	}

	@GetMapping("instantSettlement/report/date/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> test(@PathVariable String fromDate, @PathVariable String toDate, HttpSession httpSession ,@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException
	{
		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;

		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
			String date =null;
			System.out.println("fromdate"+(fromDate));
			System.out.println("toDate"+(toDate));
			List<InstantSettlementDetailsModel> dataList=new ArrayList<InstantSettlementDetailsModel>();
			boolean perm = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			Double anomalyamount = null;
			Date anomalyfromDate =null;
			Date anomalytoDate =null;

			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm)
			{
				try
				{
					Iterable<SuperMerchantMaster> supermerchantList=superMerchantMasterRepository.findAll();
					Map<Integer, SuperMerchantMaster> supermerchantMap= new HashMap<Integer, SuperMerchantMaster>();
					for(SuperMerchantMaster s: supermerchantList){
						supermerchantMap.put(s.getId(),s);
					}

					Iterable<ParentMerchantMaster> parentList=parentMerchantMasterRepository.findAll();
					Map<Integer, ParentMerchantMaster> parentMap= new HashMap<Integer, ParentMerchantMaster>();
					for(ParentMerchantMaster s: parentList){
						parentMap.put(s.getId(),s);
					}
					List<InstantSettlementDetails> details=instantSettlementDetailsRepository.findByRequestedTimestampBetween(dateFormat.parse(fromDate), dateFormat.parse(toDate));
//					Map<String,Anomalymodel> superMerchantCashDepositmap = new HashMap<>();
//					Map<String,Anomalymodel> parentCashDepositmap = new HashMap<>();
//					superMerchantCashDepositmap = baseService.getAnomoliesBySuperMerchant(superMerchantCashDepositmap,anomalyfromDate, anomalytoDate);
//					parentCashDepositmap = baseService.getAnomoliesByParent(parentCashDepositmap,anomalyfromDate, anomalytoDate);
					if(details.size() > 0)
					{
						Anomalymodel anomalymodel = new Anomalymodel();
						InstantSettlementDetailsModel d=null;
						for(InstantSettlementDetails data : details)
						{
							try {
								d=new InstantSettlementDetailsModel();
								d.setId(data.getId());
								d.setFilename(data.getFilename());
								d.setRequestedTimestamp(data.getRequestedTimestamp());
								d.setRequestRemarks(data.getRequestRemarks());
								d.setResponseTimestamp(data.getResponseTimestamp());
								d.setResponseRemarks(data.getResponseRemarks());
								d.setTypeOfSettlement(data.getTypeOfSettlement());
								d.setTotalAmount(data.getTotalAmount());
								d.setMerchantAmount(data.getMerchantAmount());
								d.setAccountNumber(data.getAccountNumber());
								d.setIfscCode(data.getIfscCode());
								d.setFromAccount(data.getFromAccount());
								d.setReferrenceNumber(data.getReferrenceNumber());
								d.setLoginId(data.getLoginId());
								d.setName(data.getName());
								d.setCmsNumber(data.getCmsNumber());
								d.setStatus(data.getStatus());
								d.setStatusMessage(data.getStatusMessage());
								d.setStatusUpdatedTimestamp(data.getStatusUpdatedTimestamp());
								d.setSettleAmount(data.getSettleAmount());
								d.setPrimarykey(data.getPrimarykeyId());
								d.setHoldAmount(data.getHoldAmount());
								d.setCreatedTimestamp(data.getCreatedTimestamp());
								d.setSettleTo(data.getSettleTo());
								if(data.getSettleTo().equals("P"))
									d.setCorporateName(parentMap.get(data.getPrimarykeyId()).getParentMerchantName());
								if(data.getSettleTo().equals("S")) 
									d.setCorporateName(supermerchantMap.get(data.getPrimarykeyId()).getSuperMerchantName());
								if(data.getSettleTo()!=null && data.getTimeSlot() != null && data.getTimeSlot().equalsIgnoreCase("13:00:00")) {									
									try {
										Calendar threewaycalendar = Calendar.getInstance();
										threewaycalendar.setTime(data.getTransactionDate());
										threewaycalendar.add(Calendar.DATE,-1);
										
										String wantedDate = new SimpleDateFormat("ddMMyyyy").format(threewaycalendar.getTime());
										anomalyfromDate = new SimpleDateFormat("ddMMyyyyHHmmss").parse(wantedDate+"000000");
										 anomalytoDate = new SimpleDateFormat("ddMMyyyyHHmmss").parse(wantedDate+"235959");
										 
//										 System.out.println("from date:"+anomalyfromDate+" todate :"+anomalytoDate);
									} catch (Exception e) {
										e.printStackTrace();
										response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
									}
									
									if(data.getSettleTo().equals("P")) {
										
										 anomalyamount = aggregatorThreewayAnomalyCoreRepository.getAnomaliesTransactionsParentForInstantReport(anomalyfromDate,anomalytoDate,data.getPrimarykeyId(),data.getServiceType());
											if(anomalyamount!=null) {
												d.setAnomalyAmount(anomalyamount);
											}
									}
									if(data.getSettleTo().equals("S")) {
										d.setCorporateName(supermerchantMap.get(data.getPrimarykeyId()).getSuperMerchantName());
										anomalyamount = aggregatorThreewayAnomalyCoreRepository.getAnomaliesTransactionsSuperMerchantForInstantReport(anomalyfromDate,anomalytoDate,data.getPrimarykeyId(),data.getServiceType());
										if(anomalyamount!=null) {
											d.setAnomalyAmount(anomalyamount);
										}
									}
								}
								if(data.getTransactionInquiryStatus()!=null){
									d.setTransactionInquiryStatus(data.getTransactionInquiryStatus());
								}
								dataList.add(d);
							}catch(Exception e) {
								e.printStackTrace();
								System.out.println("Exception Id :"+data.getId());
							}
						}
						response=new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.REQUEST_COMPLETED, dataList), HttpStatus.OK);
					}
					else
					{
						response=new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"NO DATA AVAILBALE", null), HttpStatus.OK);
					}
				}
				catch(Exception e)
				{
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
			}
		}catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}

		return response;

	}

	@GetMapping("history/settlementInfo/{fromDate}/{toDate}") 
	public ResponseEntity<GeneralResponse> history(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@PathVariable String fromDate,@PathVariable String toDate,@RequestHeader("token") String token) 
	{
		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;

		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:SS");
			List<SettlementInfoDataReportModel> dataList=new ArrayList<SettlementInfoDataReportModel>();
			boolean perm = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm) {
				try{
					List<SettlementInfo> list=settlementInfoRepository.findByTransactionDateBetween(dateformat.parse(fromDate), dateformat.parse(toDate));

//					Map<String,Anomalymodel> superMerchantCashDepositmap = new HashMap<>();
//					Map<String,Anomalymodel> parentCashDepositmap = new HashMap<>();
//					superMerchantCashDepositmap = baseService.getAnomoliesBySuperMerchant(superMerchantCashDepositmap, dateformat.parse(fromDate), dateformat.parse(toDate));
//					parentCashDepositmap = baseService.getAnomoliesByParent(parentCashDepositmap, dateformat.parse(fromDate), dateformat.parse(toDate));
					if(list.size()>0){
						dataList = getSettlementData(list);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.REQUEST_COMPLETED,dataList), HttpStatus.OK);
					} else{
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
					}

				}catch(Exception e){
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
			}

		}catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;

	}

	public List<SettlementInfoDataReportModel> getSettlementData(List<SettlementInfo> list){
		List<SettlementInfoDataReportModel> dataList=new ArrayList<SettlementInfoDataReportModel>();
		SettlementInfoDataReportModel model=null;
		Anomalymodel anomalymodel = new Anomalymodel();
		Double anomalyamount = null;
		Date anomalyfromDate =null;
		Date anomalytoDate =null;
		for(SettlementInfo s:list)
		{
			model=new SettlementInfoDataReportModel();
			model.setId(s.getId());
			model.setAmount(s.getAmount());
			model.setCompanyBankAccountName(s.getCompanyBankAccountName());
			model.setCompanyBankAccountNumber(s.getCompanyBankAccountNumber());
			model.setCompanyIfscCode(s.getCompanyIfscCode());
			model.setMismatchByUsername(s.getMismatchByUsername());
			model.setFileGenerationRemarks(s.getFileGenerationRemarks());
			model.setFileName(s.getFileName());
			model.setFilePath(s.getFilePath());
			model.setMismatchTransactionAmount(s.getMismatchTransactionAmount());
			model.setMismatchTransactionCount(s.getMismatchTransactionCount());
			model.setNoOfTransactions(s.getNoOfTransactions());
			model.setPrimaryKeyId(s.getPrimaryKeyId());
			model.setRemarks(s.getRemarks());	
			model.setResponseMessage(s.getResponseMessage());
			model.setServiceType(s.getServiceType());
			model.setSettledByUsername(s.getSettledByUsername());
			model.setSettleTimestamp(s.getSettleTimestamp());
			model.setSettleFlag(s.getSettleFlag()==null?0:s.getSettleFlag());
			model.setTransactionDate(s.getTransactionDate());
			model.setTypeOfSettlement(s.getTypeOfSettlement());
			model.setValidateFlag(s.getValidateFlag()==null?0:s.getValidateFlag());
			model.setValidatedByUsername(s.getValidatedByUsername());
			model.setValidateTimestamp(s.getValidateTimestamp());
			model.setMismatchRemarks(s.getMismatchRemarks());
			model.setMismatchTimestamp(s.getMismatchTimestamp());
			model.setFileGenerationTimestamp(s.getFileGenerationTimestamp());
			model.setEmailId(s.getEmailId());
			model.setMigratedTimestamp(s.getMigratedTimestamp());
			model.setMobileNumber(s.getMobileNumber());
			model.setFileReferenceNumber(s.getFileReferenceNumber());
			model.setName(s.getName());
			model.setStatus(s.getStatus());
			model.setStatusMessage(s.getStatusMessage());
			model.setStatusUpdatedTimestamp(s.getStatusUpdatedTimestamp());
			model.setCmsNumber(s.getCmsNumber());
			model.setSettleAmount(s.getSettleAmount());
			model.setHoldAmount(s.getHoldAmount());
			try {
				Calendar threewaycalendar = Calendar.getInstance();
				threewaycalendar.setTime(s.getTransactionDate());
//				threewaycalendar.add(Calendar.DATE,-1);
				
				String wantedDate = new SimpleDateFormat("ddMMyyyy").format(threewaycalendar.getTime());
				anomalyfromDate = new SimpleDateFormat("ddMMyyyyHHmmss").parse(wantedDate+"000000");
				 anomalytoDate = new SimpleDateFormat("ddMMyyyyHHmmss").parse(wantedDate+"235959");
				 
//				 System.out.println("from date:"+anomalyfromDate+" todate :"+anomalytoDate);
			} catch (Exception e) {
				e.printStackTrace();
				
			}
			if(s.getTypeOfSettlement().equals("P")) {
				
				 anomalyamount = aggregatorThreewayAnomalyCoreRepository.getAnomaliesTransactionsParentForInstantReport(anomalyfromDate,anomalytoDate,s.getPrimaryKeyId(),s.getServiceType());
					if(anomalyamount!=null) {
						model.setAnomalyAmount(anomalyamount);
					}
//				if(parentCashDepositmap.containsKey(s.getPrimaryKeyId()+"-"+s.getServiceType())) {
//					anomalymodel=parentCashDepositmap.get(s.getPrimaryKeyId()+"-"+s.getServiceType());
//					if(anomalymodel!=null) {
//						model.setAnomalyAmount(anomalymodel.getAnomalyAmount());
//
//					}
//				}
			}
			else if(s.getTypeOfSettlement().equals("S")) {
				anomalyamount = aggregatorThreewayAnomalyCoreRepository.getAnomaliesTransactionsSuperMerchantForInstantReport(anomalyfromDate,anomalytoDate,s.getPrimaryKeyId(),s.getServiceType());
				if(anomalyamount!=null) {
					model.setAnomalyAmount(anomalyamount);
				}
//				if(superMerchantCashDepositmap.containsKey(s.getPrimaryKeyId()+"-"+s.getServiceType())) {
//					anomalymodel = superMerchantCashDepositmap.get(s.getPrimaryKeyId()+"-"+s.getServiceType());
//					if(anomalymodel!=null) {
//						model.setAnomalyAmount(anomalymodel.getAnomalyAmount());
//
//					}
//				}
				
				
			}
			dataList.add(model);
		}
		return dataList;
	}

	@GetMapping("/history/settlementInfo/user/{fromDate}/{toDate}/{userId}/{typeOfSettlement}") 
	public ResponseEntity<GeneralResponse> settlementInfoByUser(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate,@PathVariable Integer userId, @PathVariable String typeOfSettlement)
	{
		System.out.println("ASS");
		Gson gson = new GsonBuilder().serializeNulls().create();
		ResponseEntity<GeneralResponse> response = null;

		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	

			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:SS");

			List<SettlementInfoDataReportModel> dataList=new ArrayList<SettlementInfoDataReportModel>();
			boolean perm = false;
			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("RECONCILATION")) {
					if(data.getFeatureCode().equals("RECONCILATION_DATA")) {
						if(data.getPermRead() == 1) {
							perm = true;
							break;
						}
					}
				}
			}
			if(perm) {
				try{
					List<SettlementInfo> list=settlementInfoRepository.findByPrimaryKeyIdAndTypeOfSettlementAndTransactionDateBetween(userId,typeOfSettlement,dateformat.parse(fromDate), dateformat.parse(toDate));
//
//					Map<String,Anomalymodel> superMerchantCashDepositmap = new HashMap<>();
//					Map<String,Anomalymodel> parentCashDepositmap = new HashMap<>();
//					superMerchantCashDepositmap = baseService.getAnomoliesBySuperMerchant(superMerchantCashDepositmap, dateformat.parse(fromDate), dateformat.parse(toDate));
//					parentCashDepositmap = baseService.getAnomoliesByParent(parentCashDepositmap, dateformat.parse(fromDate), dateformat.parse(toDate));
					if(list.size()>0){
						dataList = getSettlementData(list);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.REQUEST_COMPLETED,dataList), HttpStatus.OK);
					}else{
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

					}

				}catch(Exception e){
					e.printStackTrace();
					response = commonTasks.errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
			}
		}  catch (Exception e) 
		{
			e.printStackTrace();
			response = commonTasks.errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;

	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.AssignFeaturePermissionModel;
import com.apptmyz.fpcontrolpanel.data.FpCpUserPermissionDetails;
import com.apptmyz.fpcontrolpanel.data.FpUserNameModel;
import com.apptmyz.fpcontrolpanel.data.FpfeatureCodeModel;
import com.apptmyz.fpcontrolpanel.data.UpdateFeaturePermissionsModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpFeatures;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUser;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpFeatureGroupRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpFeaturesRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserPermissionsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api")
public class AssignFeaturePermission 
{
	private static final Logger log = Logger.getLogger("AssignFeaturePermission");
	
	@Autowired
	private FpCpUserRepository fpCpUserRepository ; 
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private FpCpUserPermissionsRepository fpCpUserPermissionsRepository;

	@Autowired
	private FpCpFeaturesRepository fpCpFeaturesRepository;

	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private CommonTasks commonTasks;

	private AssignFeaturePermissionModel authenticateUserResponse;
	

	@PostMapping(path ="/assignPermission/toUser")
	public ResponseEntity<GeneralResponse> assignPermission(HttpServletRequest request,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token, @RequestBody String assignModel)
	{

		System.out.println("request : "+assignModel);
		log.info("******************* Giving new feature permissions to user **************************");

		Gson gson = new GsonBuilder().serializeNulls().create();
		AssignFeaturePermissionModel asgnModel= null;
		ResponseEntity<GeneralResponse> generalResponse = null;

		generalResponse = checkAuthentication1(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;
		
		FpCpAuditLogs auditLogs = null;
		String ip = commonTasks.getIpAddress(request);
		auditLogs = new FpCpAuditLogs();


		AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse) generalResponse.getBody().getData();
		
		boolean perm = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("PERMISSIONS")) {
				if(data.getFeatureCode().equals("ASSIGN_FEATURE_PERMISSION")) {
					if(data.getPermRead() == 1) {
						perm = true;
						break;
					}
				}
			}
		}
		if(perm && authenticateUserResponse.getActiveFlag() == 1)
		{
			try
			{
				asgnModel=gson.fromJson(assignModel, AssignFeaturePermissionModel.class);
				generalResponse = validations(asgnModel);
				if(generalResponse != null)
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"Incomplete data", null), HttpStatus.OK);
				FpCpUser users = fpCpUserRepository.findByUserName(asgnModel.getUserName());

				if(users != null)
				{

					FpCpUserPermissions hasPermission = fpCpUserPermissionsRepository.findByFpCpUserUserNameAndFeatureCodeAndActiveFlag(users.getUserName(),asgnModel.getFeatureCode(),1);
					if(hasPermission != null)
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								"This user already have permission",200,null), HttpStatus.OK);

					FpCpFeatures grpCode =  fpCpFeaturesRepository.findByFpCpFeatureCode(asgnModel.getFeatureCode());
					FpCpUserPermissions permission=new FpCpUserPermissions();
					permission.setFeatureGrpCode(grpCode.getFpCpFeatureGroup());
					permission.setFeatureCode(asgnModel.getFeatureCode());
					permission.setFpCpUser(users);
					permission.setPermCreate(asgnModel.getPermCreate()!= null ? ((asgnModel.getPermCreate().equals("true")) ? 1 : (asgnModel.getPermCreate().equals("null")) ? 0 : 0):0);
					permission.setPermDelete(asgnModel.getPermDelete()!= null ? ((asgnModel.getPermDelete().equals("true")) ? 1 : (asgnModel.getPermDelete().equals("null")) ? 0 : 0):0);
					permission.setPermApprove(asgnModel.getPermApprove()!= null ? ((asgnModel.getPermApprove().equals("true")) ? 1 : (asgnModel.getPermApprove().equals("null")) ? 0 : 0):0);
					permission.setPermUpdate(asgnModel.getPermUpdate()!= null ? ((asgnModel.getPermUpdate().equals("true")) ? 1 : (asgnModel.getPermUpdate().equals("null")) ? 0 : 0):0);
					permission.setPermRead(asgnModel.getPermRead()!= null ? ((asgnModel.getPermRead().equals("true")) ? 1 : (asgnModel.getPermRead().equals("null")) ? 0 : 0):0);
					permission.setCreatedTimestamp(new Date());
					permission.setActiveFlag(1);
					permission.setUpdatedTimestamp(new Date());
					fpCpUserPermissionsRepository.save(permission);
					log.info("******************* Saving user permissions into database **************************");

					
//					AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("PERMISSIONS");
					auditLogs.setFeatureId("ASSIGN_FEATURE_PERMISSION");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection
					auditLogs.setOperation(1);
					auditLogs.setViewData("Assigning permission to user");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							"Given Permission Successfully",null), HttpStatus.OK);
				}
				else
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Invalid UserName", null), HttpStatus.OK);
			}

			catch(Exception e)
			{
				e.printStackTrace();
				log.info("******************* Error while giving pemissions to user **************************");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, null), HttpStatus.OK);

			}
		}
		else
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					"Permission invalid to this user", null), HttpStatus.OK);

	}
	
	@GetMapping(path = "/get/featureCodes")
	public ResponseEntity<GeneralResponse> getFeatureCode(HttpServletRequest request, @RequestHeader("token") String token)
	{
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		generalResponse = checkAuthentication1(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;
		
		AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse)generalResponse.getBody().getData();

		FpCpAuditLogs auditLogs = null;
		String ip = commonTasks.getIpAddress(request);
		auditLogs = new FpCpAuditLogs();

		List<FpfeatureCodeModel> names = new ArrayList<FpfeatureCodeModel>();
		FpfeatureCodeModel info =null; 
		try
		{
			
			List<FpCpFeatures> featurecode = fpCpFeaturesRepository.findAll();
			if(featurecode == null)
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						"No names found",200,null), HttpStatus.OK);
			for(FpCpFeatures data:featurecode)
			{
				info = new FpfeatureCodeModel();
				info.setFeatureCode(data.getFpCpFeatureCode());
				names.add(info);
			}
			log.info("******************* Fetching featureCode Dropdown **************************");

			Comparator sortingByfeatureCode = new Comparator<FpfeatureCodeModel>()
			{
				@Override
				public int compare(FpfeatureCodeModel s1, FpfeatureCodeModel s2)
				{
					return s1.getFeatureCode().compareTo(s2.getFeatureCode());
				}
			};
			Collections.sort(names,sortingByfeatureCode);
			
//			AUDIT LOGS
			auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("PERMISSIONS");
			auditLogs.setFeatureId("ASSIGN_FEATURE_PERMISSION");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection
			auditLogs.setOperation(1);
			auditLogs.setViewData("Fetching all feature codes");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);



			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"FeatureCodes Fetched Successfully",200,names), HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("******************* Error while fetching featureCode **************************");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, null), HttpStatus.OK);	
		}
	}
	
	@GetMapping(path = "/get/usernames")
	public ResponseEntity<GeneralResponse> getUsernames(HttpServletRequest request, @RequestHeader("token") String token)
	{
		ResponseEntity<GeneralResponse> generalResponse = null;
		generalResponse = checkAuthentication1(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;
		
		AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse)generalResponse.getBody().getData();

		try
		{
			List<FpCpUser> usernames = fpCpUserRepository.findAll();
			List<FpUserNameModel> names = new ArrayList<FpUserNameModel>();
			FpUserNameModel info =null; 
			
			FpCpAuditLogs auditLogs = null;
			String ip = commonTasks.getIpAddress(request);
			auditLogs = new FpCpAuditLogs();
			
			if(usernames == null)
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						"No names found",200,null), HttpStatus.OK);
			for(FpCpUser data:usernames)
			{
				info = new FpUserNameModel();
				info.setUserName(data.getUserName());
				names.add(info);
			}
			log.info("******************* Fetching username Dropdown **************************");

			Comparator sortingByUserName = new Comparator<FpUserNameModel>()
			{
				@Override
				public int compare(FpUserNameModel s1, FpUserNameModel s2)
				{
					return s1.getUserName().compareTo(s2.getUserName());
				}
			};
			Collections.sort(names,sortingByUserName);
//			AUDIT LOGS
			auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("PERMISSIONS");
			auditLogs.setFeatureId("ASSIGN_FEATURE_PERMISSION");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection
			auditLogs.setOperation(1);
			auditLogs.setViewData("Fetching all fpusers");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);

			
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Names Fetched Successfully",200,names), HttpStatus.OK);
		}
		catch (Exception e) {
			e.printStackTrace();
			log.info("******************* Error while fetching usernames dropdown **************************");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, null), HttpStatus.OK);	
		}
	}

	@GetMapping(path = "/get/fpUserPermissions/tableData/{username}")
	public ResponseEntity<GeneralResponse> getuserPermissionsTableData(HttpServletRequest request, @RequestHeader("token") String token,@PathVariable String username)
	{
		log.info("******************* Getting info of user permissions **************************");

		
		ResponseEntity<GeneralResponse> generalResponse = null;
		generalResponse = checkAuthentication1(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;
		
		FpCpAuditLogs auditLogs = null;
		String ip = commonTasks.getIpAddress(request);
		auditLogs = new FpCpAuditLogs();
		AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse) generalResponse.getBody().getData();

		
		List<FpCpUserPermissions> usernamess = fpCpUserPermissionsRepository.getbyUsername(username);
		if(usernamess != null)
		{
			List<FpCpUserPermissionDetails> tabledata = new ArrayList<FpCpUserPermissionDetails>();
			try
			{
				for (FpCpUserPermissions data : usernamess) 
				{
					FpCpUserPermissionDetails c = new FpCpUserPermissionDetails();

					c.setId(String.valueOf(data.getId()));
					c.setUserName(username);
					c.setFeatureGrpCode(data.getFeatureGrpCode());
					c.setFeatureCode(data.getFeatureCode());
					c.setPermCreate(data.getPermCreate() !=null ?(data.getPermCreate() == 1?"Yes":"No"):"null");
					c.setPermRead(data.getPermRead() !=null ?(data.getPermRead() == 1?"Yes":"No"):"null");
					c.setPermUpdate(data.getPermUpdate() !=null ?(data.getPermUpdate() == 1?"Yes":"No"):"null");
					c.setPermDelete(data.getPermDelete() !=null ?(data.getPermDelete() == 1?"Yes":"No"):"null");
					c.setPermApprove(data.getPermApprove() !=null ?(data.getPermApprove() == 1?"Yes":"No"):"null");
					c.setPermInfo(data.getPermInfo() !=null ?(data.getPermInfo() == 1?"Yes":"null"):"null");
					c.setActiveFlag(data.getActiveFlag()!=null ?(data.getActiveFlag() == 1?"Yes":"No"):"null");
					c.setCreatedTimestamp(String.valueOf(data.getCreatedTimestamp()));
					c.setUpdatedTimestamp(String.valueOf(data.getUpdatedTimestamp()));
					tabledata.add(c);
				}
				
					if(tabledata.size() == 0)
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"This user doesn't have any of the permission",200,null), HttpStatus.OK);
					else
					{
//					AUDIT LOGS
					auditLogs = new FpCpAuditLogs();
					auditLogs.setFeatureGrpId("PERMISSIONS");
					auditLogs.setFeatureId("ASSIGN_FEATURE_PERMISSION");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection
					auditLogs.setOperation(1);
					auditLogs.setViewData("Viewing particular users all feature permissions");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							"Names Fetched Successfully",200,tabledata), HttpStatus.OK);
					}
				}
			catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, null), HttpStatus.OK);	
			}

		}
		else
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					"This User doesn't have any of the permission",200,null), HttpStatus.OK);

	}
	@PostMapping(path = "/update/fpUserPermissions/details")
	public ResponseEntity<GeneralResponse> updateDetails(HttpServletRequest request,@RequestHeader("token") String token, @RequestBody String updateModel)
	{
		log.info("******************* Updating featurePermission of User **************************");


		System.out.println("request : "+updateModel);
		Gson gson = new GsonBuilder().serializeNulls().create();
		UpdateFeaturePermissionsModel updateM = null;
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		generalResponse = checkAuthentication1(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;

		AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse) generalResponse.getBody().getData();

		boolean perm = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("PERMISSIONS")) {
				if(data.getFeatureCode().equals("ASSIGN_FEATURE_PERMISSION")) {
					if(data.getPermApprove() == 1) {
						perm = true;
						break;
					}
				}
			}
		}
		if(perm && authenticateUserResponse.getActiveFlag() == 1)
		{
			try
			{
				updateM=gson.fromJson(updateModel, UpdateFeaturePermissionsModel.class);
				generalResponse = validations1(updateM);
				if(generalResponse != null)
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Incomplete data", null), HttpStatus.OK);
				

				FpCpAuditLogs auditLogs = null;
				String ip = commonTasks.getIpAddress(request);
				auditLogs = new FpCpAuditLogs();
				FpCpUserPermissions updating = fpCpUserPermissionsRepository.findById(Integer.valueOf(updateM.getId()));

				updating.setPermCreate(updateM.getPermCreate()!= null ? ((updateM.getPermCreate().equals("true")) ? 1 : (updateM.getPermCreate().equals("false")) ? 0 : 0):0);
				updating.setPermRead(updateM.getPermRead()!= null ? ((updateM.getPermRead().equals("true")) ? 1 : (updateM.getPermRead().equals("false")) ? 0 : 0):0);
				updating.setPermUpdate(updateM.getPermUpdate()!= null ? ((updateM.getPermUpdate().equals("true")) ? 1 : (updateM.getPermUpdate().equals("false")) ? 0 : 0):0);
				updating.setPermDelete(updateM.getPermDelete()!= null ? ((updateM.getPermDelete().equals("true")) ? 1 : (updateM.getPermDelete().equals("false")) ? 0 : 0):0);
				updating.setPermApprove(updateM.getPermApprove()!= null ? ((updateM.getPermApprove().equals("true")) ? 1 : (updateM.getPermApprove().equals("false")) ? 0 : 0):0);
				updating.setActiveFlag(updateM.getActiveFlag()!= null ? ((updateM.getActiveFlag().equals("true")) ? 1 : (updateM.getActiveFlag().equals("false")) ? 0 : 0):0);
				updating.setUpdatedTimestamp(new Date());
				fpCpUserPermissionsRepository.save(updating);
				
//				AUDIT LOGS
				auditLogs = new FpCpAuditLogs();

				auditLogs.setFeatureGrpId("PERMISSIONS");
				auditLogs.setFeatureId("ASSIGN_FEATURE_PERMISSION");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
//				0-login,1-read,2-update,3-approval,4-rejection
				auditLogs.setOperation(1);
				auditLogs.setViewData("Updating user featurePermission");
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);
				
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						"Permissions Updated successfully",200,null), HttpStatus.OK);
				}

			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, null), HttpStatus.OK);
			}


		}
		else
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					"Permission invalid to this user", null), HttpStatus.OK);
	}

	private ResponseEntity<GeneralResponse> checkAuthentication1(String token)
	{
		System.out.println("AUTHENTICATION");
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			System.out.println("TOKEN FOR DECRYPTING:: " + token);
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			System.out.println("AUTHENTICATION AHA :" + authenticateUserResponse.toString());
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN,Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
	}
	public ResponseEntity<GeneralResponse> validations(AssignFeaturePermissionModel assignModel) throws Exception
	{
		//System.out.println("Started validations:");
		ResponseEntity<GeneralResponse> generalResponse = null;
		try
		{

			if(isEmpty(assignModel.getFeatureCode()))
				return errorResponse(false,"FeatureCode Entered is null",200,null);

			if(isEmpty(assignModel.getUserName()))
				return errorResponse(false,"UserName Entered is null",200,null);

			if(assignModel.getPermApprove() == null && assignModel.getPermCreate() == null &&
					assignModel.getPermDelete() == null && assignModel.getPermRead() == null && assignModel.getPermUpdate() == null)
				return errorResponse(false,"select any of the checkbox ",200,null);
		}
		catch (Exception e) {

			e.printStackTrace();			
			errorResponse(false,"Error Occured validations........",400,null);

			throw e;
		}
		return generalResponse;
	}
	public ResponseEntity<GeneralResponse> validations1(UpdateFeaturePermissionsModel updateModel) throws Exception
	{
		//System.out.println("Started validations:");
		ResponseEntity<GeneralResponse> generalResponse = null;
		try
		{

			if(isEmpty(updateModel.getPermCreate()))
				return errorResponse(false,"PermCreate Entered is null",200,null);

			if(isEmpty(updateModel.getPermRead()))
				return errorResponse(false,"PermRead Entered is null",200,null);

			if(isEmpty(updateModel.getPermUpdate()))
				return errorResponse(false,"PermUpdate Entered is null",200,null);

			if(isEmpty(updateModel.getPermDelete()))
				return errorResponse(false,"PermDelete Entered is null",200,null);

			if(isEmpty(updateModel.getPermApprove()))
				return errorResponse(false,"PermApprove Entered is null",200,null);



			if(isEmpty(updateModel.getActiveFlag()))
				return errorResponse(false,"Active Flag Entered is null",200,null);
		}
		catch (Exception e) {

			e.printStackTrace();			
			errorResponse(false,"Error Occured validations........",400,null);

			throw e;
		}
		return generalResponse;
	}
	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String msg,long statusCode, Object data)
	{
		System.out.println("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

		System.out.println(" Successfully");

		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}



}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.AuditLogsModel;
import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.BlockedLoginModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBlockedLogin;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBlockedLoginRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api")
public class AuditLogsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private FpCpBlockedLoginRepository fpCpBlockedLoginRepository;
	
	@GetMapping("/auditLogs/{fromDate}/{toDate}/{operation}")
	public ResponseEntity<GeneralResponse> readAuditDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String operation)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		int op = Integer.parseInt(operation);
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(authenticateUserResponse.getUserRole().equals("admin")) {
				permission = true;
				break;
					
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

		AuditLogsModel auditModel = null;
			
			try
			 {

				if(op >= 0) {
					System.out.println(op);

					List<FpCpAuditLogs> auditLogsRepList = fpCpAuditLogsRepository.findByOperationAndAuditTimestampBetween(op,dateFormat.parse(fromDate),dateFormat.parse(toDate));

					List<AuditLogsModel> auditLogsModelList =new ArrayList<AuditLogsModel>();

					if(auditLogsRepList.size() > 0) {
						
						for(FpCpAuditLogs auditRep: auditLogsRepList) {
							
							auditModel= new AuditLogsModel();
							
							auditModel.setFeatureGroup(auditRep.getFeatureGrpId());
							auditModel.setFeature(auditRep.getFeatureId());
							auditModel.setUserName(auditRep.getUserName());
							auditModel.setOperation(auditRep.getOperation());
							auditModel.setViewData(auditRep.getViewData());
							auditModel.setOldData(auditRep.getOldData());
							auditModel.setNewData(auditRep.getNewData());
							auditModel.setAuditTimestamp(auditRep.getAuditTimestamp());
							auditModel.setApprUser(auditRep.getApprovedByUser());
							auditModel.setRejUser(auditRep.getRejectedByUser());
							auditModel.setIpAddress(auditRep.getIpAddress());
							
							auditLogsModelList.add(auditModel);
							
							
						}
						
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED, auditLogsModelList), HttpStatus.OK);
					}
					else {
						 
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

					}
					
				}
//				send -1 from frontend for any operation
				else if(op < 0) {
					System.out.println("in -ve"+op);

					List<FpCpAuditLogs> auditLogsRepList = fpCpAuditLogsRepository.findByAuditTimestampBetween(dateFormat.parse(fromDate),dateFormat.parse(toDate));
					List<AuditLogsModel> auditLogsModelList =new ArrayList<AuditLogsModel>();

					if(auditLogsRepList.size() > 0) {
						
						for(FpCpAuditLogs auditRep: auditLogsRepList) {
							
							auditModel= new AuditLogsModel();
							
							auditModel.setFeatureGroup(auditRep.getFeatureGrpId());
							auditModel.setFeature(auditRep.getFeatureId());
							auditModel.setUserName(auditRep.getUserName());
							auditModel.setOperation(auditRep.getOperation());
							auditModel.setViewData(auditRep.getViewData());
							auditModel.setOldData(auditRep.getOldData());
							auditModel.setNewData(auditRep.getNewData());
							auditModel.setAuditTimestamp(auditRep.getAuditTimestamp());
							auditModel.setApprUser(auditRep.getApprovedByUser());
							auditModel.setRejUser(auditRep.getRejectedByUser());
							auditModel.setIpAddress(auditRep.getIpAddress());
							
							auditLogsModelList.add(auditModel);
							
							
						}
						
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED, auditLogsModelList), HttpStatus.OK);
					}
					
					else {	 
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
					}
				
				}
					
				else {	 
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERROR_INCOMPLETE_DATA,null), HttpStatus.OK);
				}
				
				 
				 
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
				
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/blockedLogin/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> readBlockedDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		BlockedLoginModel blockedModel = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(authenticateUserResponse.getUserRole().equals("admin")) {
				permission = true;
				break;
					
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			
			try
			 {
		
					List<FpCpBlockedLogin> fpCpBlockedList = fpCpBlockedLoginRepository.findByTimestampBetween(dateFormat.parse(fromDate),dateFormat.parse(toDate));

					List<BlockedLoginModel> blockedModelList =new ArrayList<BlockedLoginModel>();

					if(fpCpBlockedList.size() > 0) {
						
						for(FpCpBlockedLogin blockedRep: fpCpBlockedList) {
							
							blockedModel= new BlockedLoginModel();
							
							blockedModel.setId(blockedRep.getId());
							blockedModel.setIpAddress(blockedRep.getIpAddress());
							blockedModel.setTimestamp(blockedRep.getTimestamp());
							blockedModel.setRemarks(blockedRep.getRemarks());
							blockedModel.setUserExists(blockedRep.getUserExists());
							blockedModel.setUserName(blockedRep.getUserName());
							
							blockedModelList.add(blockedModel);
							
							
						}
					}
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								Constants.REQUEST_COMPLETED, blockedModelList), HttpStatus.OK);
				 
				 
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}			

	}


}
 package com.apptmyz.fpcontrolpanel.controller;

import java.net.InetAddress;

import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.function.BiConsumer;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBlockedLogin;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpFeatureGroup;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUser;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBlockedLoginRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserRepository;
import com.google.gson.Gson;
import com.apptmyz.fpcontrolpanel.data.SidenavModel;
import com.apptmyz.fpcontrolpanel.data.UserDataLogin;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponseCPLogin;



@RestController
@RequestMapping(value="/api")

//public class AuthenticateCPUser {
//	
//	@Autowired
//	private CommonTasks commonTasks;
//	
//	@Autowired
//	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
//	
//	@Autowired
//	private FpCpUserRepository fpUserRepository; 
//	
//	@Autowired
//	private JwtUtil jwtUtil;
//	
//	@Autowired
//	private FpCpBlockedLoginRepository fpCpBlockedLoginRepository;
//	
//	@PostMapping(path ="/login")
//	public ResponseEntity<GeneralResponse> getBalance(HttpServletRequest request, HttpServletResponse response, @RequestBody UserDataLogin userData){
//		ResponseEntity<GeneralResponse> generalResponse = null;
//		response.setHeader( "Cache-Control", "no-store" );
//	    response.setHeader( "Pragma", "no-cache" );
//	    response.setDateHeader( "Expires", 0 );
//	    System.out.println("Entered Control Panel"); 
//		try {
//				if (commonTasks.check(userData.getUser_name(), userData.getPassword())) {
////					FpCpUser user = fpUserRepository.findByUserNameAndPasswordAndActiveFlag(userData.getUser_name(), userData.getPassword(), 1);
//					FpCpUser user = fpUserRepository.findByUserNameAndPasswordAndActiveFlag(userData.getUser_name(), userData.getPassword(), 1);
//
//					if (user != null) {
//						HttpSession httpSessionTemp = request.getSession();
//		    		    Map<String,Object> values = getSessionData(httpSessionTemp); //This line is psydo code
//		    		    //Use getValueNames() and a loop with getValue(String name);
//		
//		    		    // Kill the current session
//		    		    httpSessionTemp.invalidate();
//		
//		    		    httpSessionTemp = request.getSession(true);
//		    		    putSessionValues(httpSessionTemp, values); //This line is pseudo code
//		    			httpSessionTemp.setAttribute("UserTypeRole", user.getUserRole());
//						HttpSession session = httpSessionTemp;
//						session.setAttribute("UserName",user.getUserName());
//						session.setAttribute("isLogin", true);
//						
//						AuthenticateUserResponse authenticateUserResponse = new AuthenticateUserResponse();
//						authenticateUserResponse.setId(user.getId());
//						authenticateUserResponse.setUserName(user.getUserName());
//						authenticateUserResponse.setPassword(user.getPassword());
//						authenticateUserResponse.setActiveFlag(user.getActiveFlag());
//						authenticateUserResponse.setUserRole(user.getUserRole());
//						authenticateUserResponse.setCreatedTimestamp(user.getCreatedTimestamp());
//						authenticateUserResponse.setUpdatedTimestamp(user.getUpdatedTimestamp());
//						authenticateUserResponse.setContactNo(user.getContactNo());
//						authenticateUserResponse.setEmailId(user.getEmailId());
//						
//						
//						
//						//authenticateUserResponse.setFpUserPermissions(user.getListOfFpCpUserPermissions());
//						System.out.println("size :"+user.getListOfFpCpUserPermissions().size());
//						List<UserPermissionsModel> permissionsList = new ArrayList<UserPermissionsModel>();
//						
////						Map<String, Map<String, List<SidenavModel>>> sidenavMain = new HashMap<String, Map<String, List<SidenavModel>>>();
////						List<SidenavModel> sidenavMain = new ArrayList<SidenavModel>();
//						
//						 Map<String, List<SidenavModel>> sidenavMain = new LinkedHashMap<String, List<SidenavModel>>();
//							List<SidenavModel> sidenav = new ArrayList<SidenavModel>();
//
//						 SidenavModel sideDash = new SidenavModel();
//							
//							sideDash.setId(1);
//							sideDash.setName("Dashboard");
//							sideDash.setUrl("/dashboard");
//							sideDash.setShow(true);
//							sideDash.setClickArrowM(false);
//							
//							sidenav.add(sideDash);
//								
//							sidenavMain.put("DASHBOARD", sidenav);
//							
//							
//						UserPermissionsModel obj =null;
//						SidenavModel testmodel = null;
//						if(user.getListOfFpCpUserPermissions() !=  null) {
//							for (FpCpUserPermissions data  : user.getListOfFpCpUserPermissions()) {
//								obj = new UserPermissionsModel();
//								testmodel = new SidenavModel();
////								obj.setFeatureGrpId(data.getFpCpFeatureGroup());
//								if(data.getActiveFlag() == 1) {
////									obj.setFeatureGrpId(data);
//									obj.setPermCreate(data.getPermCreate());
//									obj.setPermRead(data.getPermRead());
//									obj.setPermUpdate(data.getPermUpdate());
//									obj.setPermDelete(data.getPermDelete());
//									obj.setPermApprove(data.getPermApprove());
//									
//									
//									
//									FpCpFeatureGroup obj1 = new FpCpFeatureGroup();
//									obj1 = data.getFpCpFeatureGroup();
//									System.out.println(obj1.getFpCpFeatureGroupCode());
//									
////									sidenav
//									
//									obj.setFeatureGrpCode(obj1.getFpCpFeatureGroupCode());
////									sidenavMain.put(dynamicSidenav(obj));
////									sidenavMain.add(obj1.getFpCpFeatureGroupCode(),dynamicSidenav(obj,sidenavMain));
//
//									sidenavMain.putAll(dynamicSidenav(obj,sidenavMain));
//									
//
//
//								}
//								obj.setSidenav(sidenavMain.values());	
////								sort
//
//								permissionsList.add(obj);
//							}
//							authenticateUserResponse.setFpUserPermissions(permissionsList);
//
//							FpCpAuditLogs auditLogs = null;
//							auditLogs = new FpCpAuditLogs();
//							
//							String ip = request.getRemoteAddr();
//							if (ip.equalsIgnoreCase("0:0:0:0:0:0:0:1"))
//							{
//								InetAddress inetAddress=null;
//								String ipAddress=null;
//								try {
//									inetAddress = InetAddress.getLocalHost();
//									ipAddress = inetAddress.getHostAddress();
//								} catch (UnknownHostException e) {
//									e.printStackTrace();
//									ipAddress=null;
//								}
//								ip = ipAddress;
//							}
//							
////							AUDIT LOGS
//
//							auditLogs.setFeatureGrpId("LOGIN");
//							auditLogs.setUserName(authenticateUserResponse.getUserName());
////							0-login,1-read,2-update,3-approval,4-rejection
//							auditLogs.setOperation(0);
//
//							auditLogs.setAuditTimestamp(new Date());
//							auditLogs.setIpAddress(ip);
//							System.out.print(auditLogs.getUserName());
//							fpCpAuditLogsRepository.save(auditLogs);
//
//							
//						}
//						
//						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESSFUL, authenticateUserResponse), HttpStatus.OK);
//						String token = jwtUtil.createJWTToken(new Gson().toJson(authenticateUserResponse), 180);
//					    response.setHeader("token", token);
//					}
//					else {
//						String ip = request.getRemoteAddr();
//						if (ip.equalsIgnoreCase("0:0:0:0:0:0:0:1"))
//						{
//							InetAddress inetAddress=null;
//							String ipAddress=null;
//							try {
//								inetAddress = InetAddress.getLocalHost();
//								ipAddress = inetAddress.getHostAddress();
//							} catch (UnknownHostException e) {
//								e.printStackTrace();
//								ipAddress=null;
//							}
//							ip = ipAddress;
//						}
//						
//						FpCpBlockedLogin fpBlocked= new FpCpBlockedLogin();
//						fpBlocked.setIpAddress(ip);
//						fpBlocked.setUserName(userData.getUser_name());
//						fpBlocked.setTimestamp(new Date());
//						FpCpUser userInDB = fpUserRepository.findByUserName(userData.getUser_name());
//						if(userInDB != null) {
//							fpBlocked.setUserExists(1);
//						}
//						else {
//							fpBlocked.setUserExists(0);
//						}
//						fpCpBlockedLoginRepository.save(fpBlocked);
//
//
//						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERROR_WEB_AUTHENTICATION,null), HttpStatus.UNAUTHORIZED);
//					}
//			}
//						
//		} catch (Exception e) {
//			e.printStackTrace();
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.INTERNAL_SERVER_ERROR);
//		} 
//		return generalResponse;
//	}
//	
//	private Map<String, Object> getSessionData(HttpSession session) {
//   	    Map<String,Object> map = new HashMap<String, Object>();
//	   	Enumeration<String> it = session.getAttributeNames(); 
//	   	while (it.hasMoreElements()) { 
//	   	    String name = it.nextElement(); 
//	   	    String value = session.getAttribute(name).toString(); 
//	   	    map.put(name, value);
//	   	}
//	   	return map;
//	}
//	
//	private void putSessionValues(HttpSession newSession, Map<String, Object> values) {
//    	for(Map.Entry<String, Object> entry : values.entrySet()){
//    		newSession.putValue(entry.getKey(), entry.getValue());
//    	}
//	}
//	
////	private Collection<List<SidenavModel>> dynamicSidenav(UserPermissionsModel obj, Map<String, List<SidenavModel>> sidenavMap) {
//		
//	private Map<String, List<SidenavModel>> dynamicSidenav(UserPermissionsModel obj, Map<String, List<SidenavModel>> sidenavMap) {
//
//		List<SidenavModel> sidenav = new ArrayList<SidenavModel>();
//
////		Map<String, List<SidenavModel>> sidenavMap = new HashMap<>(); 
//		
////		SidenavModel sideDash = new SidenavModel();
////		
////		sideDash.setId(1);
////		sideDash.setName("Dashboard");
////		sideDash.setUrl("/dashboard");
////		sideDash.setShow(true);
////		sideDash.setClickArrowM(false);
////		
////		sidenav.add(sideDash);
////		
////		if(!sidenavMap.containsKey("DASHBOARD")) {
////			
////			sidenavMap.put("DASHBOARD", sidenav);
////		}
//		
//		System.out.println("obj f in sidenav"+obj.getFeatureGrpCode());
//		
//		
//
//		if(obj.getFeatureGrpCode().equals("BANK")) {
//			ArrayList<SidenavModel> sidenavBankDrop = new ArrayList<SidenavModel>();
//			List<SidenavModel> sidenav1 = new ArrayList<SidenavModel>();
//			
//			SidenavModel sideBank = new SidenavModel();
//			SidenavModel sideBankSub = new SidenavModel();
//			SidenavModel sideBankSub1 = new SidenavModel();
//		
//			sideBank.setName("Bank Details");
//			sideBank.setShow(true);
//			sideBank.setClickArrowM(false);
//			
//			sideBankSub.setName("View/Edit Details");
//			sideBankSub.setUrl("/bankDet");
//			sideBankSub.setShow(true);
//			
//			sideBankSub1.setName("Approve Details");
//			sideBankSub1.setUrl("/bankDetAppr");
//			sideBankSub1.setShow(true);
//			
//			sidenavBankDrop.add(sideBankSub);
//			
//			if(obj.getPermApprove() == 1) {
//				sidenavBankDrop.add(sideBankSub1);
//			}
//	
//			sideBank.setDropDownMenu(sidenavBankDrop);
//			
//			
//			sidenav1.add(sideBank);    
////			sidenavMap.clear();
//			sidenavMap.put("BANK", sidenav1);
//
//		}
//		if(obj.getPermApprove() == 1) {
//			ArrayList<SidenavModel> sidenavLogsDrop = new ArrayList<SidenavModel>();
//			List<SidenavModel> sidenav2 = new ArrayList<SidenavModel>();
//
//			SidenavModel sideLogs = new SidenavModel();
//			SidenavModel sideLogsSub = new SidenavModel();
//			SidenavModel sideLogsSub1 = new SidenavModel();
//		
//			sideLogs.setName("Logs");
//			sideLogs.setShow(true);
//			sideLogs.setClickArrowM(false);
//			
//			sideLogsSub.setName("Audit Logs");
//			sideLogsSub.setUrl("/auditLogs");
//			sideLogsSub.setShow(true);
//			
//			sideLogsSub1.setName("Blocked Login");
//			sideLogsSub1.setUrl("/blockedLogin");
//			sideLogsSub1.setShow(true);
//			
//			sidenavLogsDrop.add(sideLogsSub);
//			sidenavLogsDrop.add(sideLogsSub1);
//	
//			sideLogs.setDropDownMenu(sidenavLogsDrop);
//			
//			
//			sidenav2.add(sideLogs);
//			if(!sidenavMap.containsKey("LOGS")) {
//				sidenavMap.put("LOGS", sidenav2);
//			}
//		}
//
//
//		if(obj.getFeatureGrpCode().equals("SETTLEMENT")) {
//			System.out.println("In settle");
//			ArrayList<SidenavModel> sidenavSettlDrop = new ArrayList<SidenavModel>();
//			List<SidenavModel> sidenav3 = new ArrayList<SidenavModel>();
//
//			SidenavModel sideSettl = new SidenavModel();
//			SidenavModel sideSettlSub = new SidenavModel();
//			SidenavModel sideSettlSub1 = new SidenavModel();
//		
//			sideSettl.setName("Settlement Details");
//			sideSettl.setShow(true);
//			sideSettl.setClickArrowM(false);
//			
//			sideSettlSub.setName("View/Edit Details");
//			sideSettlSub.setUrl("/settlTable");
//			sideSettlSub.setShow(true);
//			
//			sideSettlSub1.setName("Approve Details");
//			sideSettlSub1.setUrl("/settlAppTable");
//			sideSettlSub1.setShow(true);
//			
//			sidenavSettlDrop.add(sideSettlSub);
//			
//			if(obj.getPermApprove() == 1) {
//				sidenavSettlDrop.add(sideSettlSub1);
//			}
//	
//			sideSettl.setDropDownMenu(sidenavSettlDrop);
//			
//			
//			sidenav3.add(sideSettl);
//			sidenavMap.put("SETTLEMENT", sidenav3);
//			
//		}
//		
//		if(obj.getFeatureGrpCode().equals("ONBOARDING")) {
//				SidenavModel sideOnboarding = new SidenavModel();
//				List<SidenavModel> sidenav4 = new ArrayList<SidenavModel>();
//
//				sideOnboarding.setName("Onboarding Mgmt");
//				sideOnboarding.setUrl("/onboarding-mgmt");
//				sideOnboarding.setShow(true);
//				sideOnboarding.setClickArrowM(false);
//				
//				
//				sidenav4.add(sideOnboarding);
////				sidenavMap.put("ONBOARDING", sidenav4);
//				
//				if(obj.getPermUpdate() == 1) {
//
//				ArrayList<SidenavModel> sidenavBulkDrop = new ArrayList<SidenavModel>();
//				
//				SidenavModel sideBulkUpload = new SidenavModel();
//				SidenavModel sideBulkSub = new SidenavModel();
//				SidenavModel sideBulkSub1 = new SidenavModel();
//				SidenavModel sideBulkSub2 = new SidenavModel();
//				SidenavModel sideBulkSub3 = new SidenavModel();
//				SidenavModel sideBulkSub4 = new SidenavModel();
//				SidenavModel sideBulkSub5 = new SidenavModel();
//				SidenavModel sideBulkSub6 = new SidenavModel();
//				SidenavModel sideBulkSub7 = new SidenavModel();
//				SidenavModel sideBulkSub8 = new SidenavModel();
//				SidenavModel sideBulkSub9 = new SidenavModel();
//	
//					
//				sideBulkUpload.setName("Bulk Upload");
//				sideBulkUpload.setShow(true);
//				sideBulkUpload.setClickArrowM(false);
//				
//				sideBulkSub.setName("Merchants");
//				sideBulkSub.setUrl("/merch-onboarding");
//				sideBulkSub.setShow(true);
//				
//				sideBulkSub1.setName("Kotak Merchants");
//				sideBulkSub1.setUrl("/Kotmerch-onboarding");
//				sideBulkSub1.setShow(true);
//				
//				sideBulkSub2.setName("Branches");
//				sideBulkSub2.setUrl("/branch-upload");
//				sideBulkSub2.setShow(true);
//				
//				sideBulkSub3.setName("Recycle Terminals");
//				sideBulkSub3.setUrl("/terminal-upload");
//				sideBulkSub3.setShow(true);
//				
//				sideBulkSub4.setName("M-ATM Terminals");
//				sideBulkSub4.setUrl("/matm-terminal");
//				sideBulkSub4.setShow(true);
//				
//				sideBulkSub5.setName("Svatantra");
//				sideBulkSub5.setUrl("/svatantra-upload");
//				sideBulkSub5.setShow(true);
//				
//				sideBulkSub6.setName("Bank Details");
//				sideBulkSub6.setUrl("/bankDet-upload");
//				sideBulkSub6.setShow(true);
//				
//				sideBulkSub7.setName("Corporate Users");
//				sideBulkSub7.setUrl("/corUser-upload");
//				sideBulkSub7.setShow(true);
//				
//				sideBulkSub8.setName("Kotak Report");
//				sideBulkSub8.setUrl("/kotak-report");
//				sideBulkSub8.setShow(true);
//				
//				sideBulkSub9.setName("Enable Services");
//				sideBulkSub9.setUrl("/enable-services");
//				sideBulkSub9.setShow(true);
//				
//				sidenavBulkDrop.add(sideBulkSub);
//				sidenavBulkDrop.add(sideBulkSub1);
//				sidenavBulkDrop.add(sideBulkSub2);
//				sidenavBulkDrop.add(sideBulkSub3);
//				sidenavBulkDrop.add(sideBulkSub4);
//				sidenavBulkDrop.add(sideBulkSub5);
//				sidenavBulkDrop.add(sideBulkSub6);
//				sidenavBulkDrop.add(sideBulkSub7);
//				sidenavBulkDrop.add(sideBulkSub8);
//				sidenavBulkDrop.add(sideBulkSub9);
//	
//				sideBulkUpload.setDropDownMenu(sidenavBulkDrop);
//				
//				
//				sidenav4.add(sideBulkUpload);
//
//			}
//				sidenavMap.put("ONBOARDING", sidenav4);
//
//
//		}
//
////		System.out.println(sidenav.toString());
////		return sidenavMap.values();
//		return sidenavMap;
//
//		
//
//
////		List<String> a = new ArrayList<String>();
////		a.add("Dashboard");
////		if(obj.getFeatureGrpCode().equals("BANK")) {
////			a.add("Bank Details");
////		}
////		if(obj.getPermApprove() == 1) {
////			a.add("Bank Details Approval");
////		}
////		
////		return a;
////		
//		
//// new
//		   
//
//	}
//
//	
//}

public class AuthenticateCPUser {
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private FpCpUserRepository fpUserRepository; 
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FpCpBlockedLoginRepository fpCpBlockedLoginRepository;
	
	@PostMapping(path ="/login")
	public ResponseEntity<GeneralResponseCPLogin> postLogin(HttpServletRequest request, HttpServletResponse response, @RequestBody UserDataLogin userData){
		ResponseEntity<GeneralResponseCPLogin> generalResponse = null;
		response.setHeader( "Cache-Control", "no-store" );
	    response.setHeader( "Pragma", "no-cache" );
	    response.setDateHeader( "Expires", 0 );
	    System.out.println("Entered Control Panel"); 
		try {
				if (commonTasks.check(userData.getUser_name(), userData.getPassword())) {
//					FpCpUser user = fpUserRepository.findByUserNameAndPasswordAndActiveFlag(userData.getUser_name(), userData.getPassword(), 1);
					FpCpUser user = fpUserRepository.findByUserNameAndPasswordAndActiveFlag(userData.getUser_name(), userData.getPassword(), 1);

					if (user != null) {
						HttpSession httpSessionTemp = request.getSession();
		    		    Map<String,Object> values = getSessionData(httpSessionTemp); //This line is psydo code
		    		    //Use getValueNames() and a loop with getValue(String name);
		
		    		    // Kill the current session
		    		    httpSessionTemp.invalidate();
		
		    		    httpSessionTemp = request.getSession(true);
		    		    putSessionValues(httpSessionTemp, values); //This line is pseudo code
		    			httpSessionTemp.setAttribute("UserTypeRole", user.getUserRole());
						HttpSession session = httpSessionTemp;
						session.setAttribute("UserName",user.getUserName());
						session.setAttribute("isLogin", true);
						
						AuthenticateUserResponse authenticateUserResponse = new AuthenticateUserResponse();
						authenticateUserResponse.setId(user.getId());
						authenticateUserResponse.setUserName(user.getUserName());
						authenticateUserResponse.setPassword(user.getPassword());
						authenticateUserResponse.setActiveFlag(user.getActiveFlag());
						authenticateUserResponse.setUserRole(user.getUserRole());
						authenticateUserResponse.setCreatedTimestamp(user.getCreatedTimestamp());
						authenticateUserResponse.setUpdatedTimestamp(user.getUpdatedTimestamp());
						authenticateUserResponse.setContactNo(user.getContactNo());
						authenticateUserResponse.setEmailId(user.getEmailId());
						authenticateUserResponse.setTxnPin(user.getTransactionPin());
						authenticateUserResponse.setUserTeam(user.getUserTeam());
						
						
						//authenticateUserResponse.setFpUserPermissions(user.getListOfFpCpUserPermissions());
						System.out.println("size :"+user.getListOfFpCpUserPermissions().size());
						List<UserPermissionsModel> permissionsList = new ArrayList<UserPermissionsModel>();
						
//						Map<String, Map<String, List<SidenavModel>>> sidenavMain = new HashMap<String, Map<String, List<SidenavModel>>>();
//						List<SidenavModel> sidenavMain = new ArrayList<SidenavModel>();
						
						 Map<String, List<SidenavModel>> sidenavMain = new LinkedHashMap<String, List<SidenavModel>>();
							List<SidenavModel> sidenav = new ArrayList<SidenavModel>();

						 SidenavModel sideDash = new SidenavModel();
							
							sideDash.setId(1);
							sideDash.setName("Dashboard");
							sideDash.setUrl("/dashboard");
							sideDash.setIcon("fa fa-home");
							sideDash.setShow(true);
							sideDash.setClickArrowM(false);
							
							sidenav.add(sideDash);
								
							sidenavMain.put("DASHBOARD", sidenav);
							
							if(user.getUserRole().equals("admin")) {
								ArrayList<SidenavModel> sidenavLogsDrop = new ArrayList<SidenavModel>();
								List<SidenavModel> sidenav2 = new ArrayList<SidenavModel>();

								SidenavModel sideLogs = new SidenavModel();
								SidenavModel sideLogsSub = new SidenavModel();
								SidenavModel sideLogsSub1 = new SidenavModel();
								SidenavModel sideLogsSub2 = new SidenavModel();

								sideLogs.setName("Logs");
								sideLogs.setShow(true);
								sideLogs.setClickArrowM(false);
								sideLogs.setIcon("fa fa-street-view");
								
								sideLogsSub.setName("Audit Logs");
								sideLogsSub.setUrl("/auditLogs");
								sideLogsSub.setShow(true);
								
								sideLogsSub1.setName("Blocked Login");
								sideLogsSub1.setUrl("/blockedLogin");
								sideLogsSub1.setShow(true);
								
//								sideLogsSub2.setName("Enable Services");
//								sideLogsSub2.setUrl("/enable-services");
//								sideLogsSub2.setShow(true);
								
								sidenavLogsDrop.add(sideLogsSub);
								sidenavLogsDrop.add(sideLogsSub1);
//								sidenavLogsDrop.add(sideLogsSub2);

						
								sideLogs.setDropDownMenu(sidenavLogsDrop);
								
								
								sidenav2.add(sideLogs);
								sidenavMain.put("LOGS", sidenav2);
								
							}
							
							
						UserPermissionsModel obj =null;
						SidenavModel testmodel = null;
						if(user.getListOfFpCpUserPermissions() !=  null) {
							for (FpCpUserPermissions data  : user.getListOfFpCpUserPermissions()) {
								obj = new UserPermissionsModel();
								testmodel = new SidenavModel();
								if(data.getActiveFlag() == 1) {
									obj.setPermCreate(data.getPermCreate());
									obj.setPermRead(data.getPermRead());
									obj.setPermUpdate(data.getPermUpdate());
									obj.setPermDelete(data.getPermDelete());
									obj.setPermApprove(data.getPermApprove());
									obj.setFeatureGrpCode(data.getFeatureGrpCode());
									obj.setFeatureCode(data.getFeatureCode());
									obj.setActiveFlag(data.getActiveFlag());

									sidenavMain.putAll(dynamicSidenav(obj,sidenavMain,user.getUserRole()));
									permissionsList.add(obj);

								}
							}
							authenticateUserResponse.setFpUserPermissions(permissionsList);

							FpCpAuditLogs auditLogs = null;
							auditLogs = new FpCpAuditLogs();
							
							String ip = commonTasks.getIpAddress(request);
							
//							AUDIT LOGS

							auditLogs.setFeatureGrpId("LOGIN");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(0);

							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							System.out.print(auditLogs.getUserName());
							fpCpAuditLogsRepository.save(auditLogs);

							
						}
						
						generalResponse = new ResponseEntity<GeneralResponseCPLogin>(new GeneralResponseCPLogin(Constants.TRUE,Constants.SUCCESSFUL, authenticateUserResponse, sidenavMain.values()), HttpStatus.OK);
						String token = jwtUtil.createJWTToken(new Gson().toJson(authenticateUserResponse), 180);
					    response.setHeader("token", token);
					}
					else {
						String ip = commonTasks.getIpAddress(request);
						
						FpCpBlockedLogin fpBlocked= new FpCpBlockedLogin();
						fpBlocked.setIpAddress(ip);
						fpBlocked.setUserName(userData.getUser_name());
						fpBlocked.setTimestamp(new Date());
						FpCpUser userInDB = fpUserRepository.findByUserName(userData.getUser_name());
						if(userInDB != null) {
							fpBlocked.setUserExists(1);
						}
						else {
							fpBlocked.setUserExists(0);
						}
						fpCpBlockedLoginRepository.save(fpBlocked);


						generalResponse = new ResponseEntity<GeneralResponseCPLogin>(new GeneralResponseCPLogin(Constants.FALSE,Constants.ERROR_WEB_AUTHENTICATION,null,null), HttpStatus.UNAUTHORIZED);
					}
			}
						
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponseCPLogin>(new GeneralResponseCPLogin(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null,null), HttpStatus.INTERNAL_SERVER_ERROR);
		} 
		return generalResponse;
	}
	
	private Map<String, Object> getSessionData(HttpSession session) {
   	    Map<String,Object> map = new HashMap<String, Object>();
	   	Enumeration<String> it = session.getAttributeNames(); 
	   	while (it.hasMoreElements()) { 
	   	    String name = it.nextElement(); 
	   	    String value = session.getAttribute(name).toString(); 
	   	    map.put(name, value);
	   	}
	   	return map;
	}
	
	private void putSessionValues(HttpSession newSession, Map<String, Object> values) {
    	for(Map.Entry<String, Object> entry : values.entrySet()){
    		newSession.putValue(entry.getKey(), entry.getValue());
    	}
	}
	
//	private Collection<List<SidenavModel>> dynamicSidenav(UserPermissionsModel obj, Map<String, List<SidenavModel>> sidenavMap) {
		
	private Map<String, List<SidenavModel>> dynamicSidenav(UserPermissionsModel obj, Map<String, List<SidenavModel>> sidenavMap, String userRole) {

		List<SidenavModel> sidenav = new ArrayList<SidenavModel>();
		System.out.println("obj f in sidenav"+obj.getFeatureGrpCode());
		
		

		if(obj.getFeatureCode().equals("BANK_MC") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavBankDrop = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav1 = new ArrayList<SidenavModel>();
			
			SidenavModel sideBank = new SidenavModel();
			SidenavModel sideBankSub = new SidenavModel();
			SidenavModel sideBankSub1 = new SidenavModel();
		
			sideBank.setName("Bank Details");
			sideBank.setShow(true);
			sideBank.setClickArrowM(false);
			sideBank.setIcon("fa fa-university");
			
			sideBankSub.setName("View/Edit Details");
			sideBankSub.setUrl("/bankDet");
			sideBankSub.setShow(true);
			
			sideBankSub1.setName("Approve Details");
			sideBankSub1.setUrl("/bankDetAppr");
			sideBankSub1.setShow(true);
			
			sidenavBankDrop.add(sideBankSub);
			
			if(obj.getPermApprove() == 1) {
				sidenavBankDrop.add(sideBankSub1);
			}
	
			sideBank.setDropDownMenu(sidenavBankDrop);
			
			
			sidenav1.add(sideBank);    
//			sidenavMap.clear();
			sidenavMap.put("BANK_MC", sidenav1);

		}

		if(obj.getFeatureCode().equals("SETTLEMENT_MC") && obj.getActiveFlag() == 1) {
			System.out.println("In settle");
			ArrayList<SidenavModel> sidenavSettlDrop = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav3 = new ArrayList<SidenavModel>();

			SidenavModel sideSettl = new SidenavModel();
			SidenavModel sideSettlSub = new SidenavModel();
			SidenavModel sideSettlSub1 = new SidenavModel();
		
			sideSettl.setName("Settlement Details");
			sideSettl.setShow(true);
			sideSettl.setClickArrowM(false);
			sideSettl.setIcon("fa fa-balance-scale");
			
			sideSettlSub.setName("View/Edit Details");
			sideSettlSub.setUrl("/settlTable");
			sideSettlSub.setShow(true);
			
			sideSettlSub1.setName("Approve Details");
			sideSettlSub1.setUrl("/settlAppTable");
			sideSettlSub1.setShow(true);
			
			if(obj.getPermRead() == 1 || obj.getPermUpdate() == 1 ) {
				sidenavSettlDrop.add(sideSettlSub);
			}
			if(obj.getPermApprove() == 1) {
				sidenavSettlDrop.add(sideSettlSub1);
			}
			
	
			sideSettl.setDropDownMenu(sidenavSettlDrop);
			
			
			sidenav3.add(sideSettl);
			sidenavMap.put("SETTLEMENT_MC", sidenav3);
			
		}
		
		if(obj.getFeatureCode().equals("ONBOARDING_CRU") && obj.getActiveFlag() == 1) {
				SidenavModel sideOnboarding = new SidenavModel();
				List<SidenavModel> sidenav4 = new ArrayList<SidenavModel>();

				if(obj.getPermDelete() == 1){
				sideOnboarding.setName("Onboarding Mgmt");
				sideOnboarding.setUrl("/onboarding-mgmt");
				sideOnboarding.setShow(true);
				sideOnboarding.setClickArrowM(false);
				sideOnboarding.setIcon("fa fa-users");
				
				sidenav4.add(sideOnboarding);
//				sidenavMap.put("ONBOARDING", sidenav4);
				}
				if(obj.getPermUpdate() == 1) {

				ArrayList<SidenavModel> sidenavBulkDrop = new ArrayList<SidenavModel>();
				
				SidenavModel sideBulkUpload = new SidenavModel();
				SidenavModel sideBulkSub = new SidenavModel();
				SidenavModel sideBulkSub1 = new SidenavModel();
				SidenavModel sideBulkSub2 = new SidenavModel();
				SidenavModel sideBulkSub3 = new SidenavModel();
				SidenavModel sideBulkSub4 = new SidenavModel();
				SidenavModel sideBulkSub5 = new SidenavModel();
				SidenavModel sideBulkSub6 = new SidenavModel();
				SidenavModel sideBulkSub7 = new SidenavModel();
				SidenavModel sideBulkSub8 = new SidenavModel();
				SidenavModel sideBulkSub9 = new SidenavModel();
				SidenavModel sideBulkSub10 = new SidenavModel();
				SidenavModel sideBulkSub11 = new SidenavModel();

					
				sideBulkUpload.setName("Bulk Upload");
				sideBulkUpload.setShow(true);
				sideBulkUpload.setClickArrowM(false);
				sideBulkUpload.setIcon("fa fa-upload");
				
				sideBulkSub.setName("Merchants");
				sideBulkSub.setUrl("/merch-onboarding");
				sideBulkSub.setShow(true);
				
				sideBulkSub1.setName("Kotak Merchants");
				sideBulkSub1.setUrl("/Kotmerch-onboarding");
				sideBulkSub1.setShow(true);
				
				sideBulkSub2.setName("Branches");
				sideBulkSub2.setUrl("/branch-upload");
				sideBulkSub2.setShow(true);
				
				sideBulkSub3.setName("Recycle Terminals");
				sideBulkSub3.setUrl("/terminal-upload");
				sideBulkSub3.setShow(true);
				
				sideBulkSub4.setName("M-ATM Terminals");
				sideBulkSub4.setUrl("/matm-terminal");
				sideBulkSub4.setShow(true);
				
				sideBulkSub11.setName("M-ATM Agg. and Mpos Mapping");
				sideBulkSub11.setUrl("/matm-aggMpos");
				sideBulkSub11.setShow(true);
				
				sideBulkSub5.setName("Svatantra");
				sideBulkSub5.setUrl("/svatantra-upload");
				sideBulkSub5.setShow(true);
				
				sideBulkSub6.setName("Corporate Merchants");
				sideBulkSub6.setUrl("/corMerch-upload");
				sideBulkSub6.setShow(true);
				
				sideBulkSub7.setName("Corporate Users");
				sideBulkSub7.setUrl("/corUser-upload");
				sideBulkSub7.setShow(true);
				
				sideBulkSub8.setName("Corporate Branch Upload");
				sideBulkSub8.setUrl("/corUser-branch-upload");
				sideBulkSub8.setShow(true);
				
				sideBulkSub9.setName("Default Enable Ekyc Merchants");
				sideBulkSub9.setUrl("/enable-ekyc-merchants");
				sideBulkSub9.setShow(true);
				
				sidenavBulkDrop.add(sideBulkSub);
				sidenavBulkDrop.add(sideBulkSub1);
				sidenavBulkDrop.add(sideBulkSub2);
				sidenavBulkDrop.add(sideBulkSub3);
				sidenavBulkDrop.add(sideBulkSub4);
				sidenavBulkDrop.add(sideBulkSub11);

				sidenavBulkDrop.add(sideBulkSub5);
				sidenavBulkDrop.add(sideBulkSub6);
				sidenavBulkDrop.add(sideBulkSub7);
				sidenavBulkDrop.add(sideBulkSub8);
				sidenavBulkDrop.add(sideBulkSub9);
//				sidenavBulkDrop.add(sideBulkSub10);

				sideBulkUpload.setDropDownMenu(sidenavBulkDrop);
				
				
				sidenav4.add(sideBulkUpload);

			}
				sidenavMap.put("ONBOARDING_CRU", sidenav4);


		}
		if(obj.getFeatureCode().equals("ONBOARDING_CRU_SW") && obj.getActiveFlag() == 1) {
			SidenavModel sideOnboarding = new SidenavModel();
			List<SidenavModel> sidenav14 = new ArrayList<SidenavModel>();

			sideOnboarding.setName("Onboarding Mgmt-Bank switch");
			sideOnboarding.setUrl("/onboarding-sw-mgmt");
			sideOnboarding.setShow(true);
			sideOnboarding.setClickArrowM(false);
			sideOnboarding.setIcon("fa fa-users");
			
			sidenav14.add(sideOnboarding);
			
			sidenavMap.put("ONBOARDING_CRU_SW", sidenav14);

		}
		if(obj.getFeatureCode().equals("COMMISSION_RU")) {
			System.out.println("In commission");

			ArrayList<SidenavModel> sidenavCommDropCW = new ArrayList<SidenavModel>();
			ArrayList<SidenavModel> sidenavCommDropMS = new ArrayList<SidenavModel>();

			ArrayList<SidenavModel> sidenavCommSubMenuBankCW = new ArrayList<SidenavModel>();
			ArrayList<SidenavModel> sidenavCommSubMenuBankMS = new ArrayList<SidenavModel>();

			List<SidenavModel> sidenav5 = new ArrayList<SidenavModel>();
			
			SidenavModel sideCommCW = new SidenavModel();
			SidenavModel sideCommMS = new SidenavModel();
		
			sideCommCW.setName("CashWithdrawal Commission");
			sideCommCW.setShow(true);
			sideCommCW.setClickArrowM(false);
			sideCommCW.setIcon("fa fa-inr");
			
			sideCommMS.setName("MiniStatement Commission");
			sideCommCW.setClickArrowM(false);
			sideCommMS.setShow(true);
			sideCommMS.setIcon("fa fa-inr");
			
			SidenavModel sideCommCWDrop = new SidenavModel();
			SidenavModel sideCommCWDrop1 = new SidenavModel();
			SidenavModel sideCommCWDrop2 = new SidenavModel();
			SidenavModel sideCommCWDrop3 = new SidenavModel();
			SidenavModel sideCommCWDrop4 = new SidenavModel();


			sideCommCWDrop.setName("Commission Master");
			sideCommCWDrop.setUrl("/cw-comMaster");
			sideCommCWDrop.setShow(true);
			
			sideCommCWDrop1.setName("Agg. Report Summary");
			sideCommCWDrop1.setUrl("/cw-aggSumm");
			sideCommCWDrop1.setShow(true);
			
			sideCommCWDrop2.setName("Agg. Report by Date");
			sideCommCWDrop2.setUrl("/cw-aggSummDate");
			sideCommCWDrop2.setShow(true);
			
			sideCommCWDrop3.setName("Commission Txn. Report");
			sideCommCWDrop3.setUrl("/cw-commTxn");
			sideCommCWDrop3.setShow(true);
			
			sideCommCWDrop4.setName("Bank Commission");
			sideCommCWDrop4.setShow(true);
			sideCommCWDrop4.setClickArrow(false);
			
			SidenavModel sideCommCWSub = new SidenavModel();
			SidenavModel sideCommCWSub1 = new SidenavModel();
			SidenavModel sideCommCWSub2 = new SidenavModel();
			SidenavModel sideCommCWSub3 = new SidenavModel();
			SidenavModel sideCommCWSub4 = new SidenavModel();

			sideCommCWSub.setName("Report Summary");
			sideCommCWSub.setUrl("/cw-bc-bankSumm");
			sideCommCWSub.setShow(true);
			
			sideCommCWSub1.setName("Report by Date");
			sideCommCWSub1.setUrl("/cw-bc-bankDate");
			sideCommCWSub1.setShow(true);
			
			sideCommCWSub2.setName("Agg. Report Summary");
			sideCommCWSub2.setUrl("/cw-bc-aggSumm");
			sideCommCWSub2.setShow(true);
			
			sideCommCWSub3.setName("Agg. Report by Date");
			sideCommCWSub3.setUrl("/cw-bc-aggDate");
			sideCommCWSub3.setShow(true);
			
			sideCommCWSub4.setName("Bank Commission Report by Date");
			sideCommCWSub4.setUrl("/cw-bc-date");
			sideCommCWSub4.setShow(true);
			
			sidenavCommSubMenuBankCW.add(sideCommCWSub);
			sidenavCommSubMenuBankCW.add(sideCommCWSub1);
			sidenavCommSubMenuBankCW.add(sideCommCWSub2);
			sidenavCommSubMenuBankCW.add(sideCommCWSub3);
			sidenavCommSubMenuBankCW.add(sideCommCWSub4);
			sideCommCWDrop4.setSubMenu(sidenavCommSubMenuBankCW);
			
			sidenavCommDropCW.add(sideCommCWDrop);
			sidenavCommDropCW.add(sideCommCWDrop1);
			sidenavCommDropCW.add(sideCommCWDrop2);
			sidenavCommDropCW.add(sideCommCWDrop3);
			sidenavCommDropCW.add(sideCommCWDrop4);
			sideCommCW.setDropDownMenu(sidenavCommDropCW);
//			MSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSsss
			
			SidenavModel sideCommMSDrop = new SidenavModel();
			SidenavModel sideCommMSDrop1 = new SidenavModel();
			SidenavModel sideCommMSDrop2 = new SidenavModel();
			SidenavModel sideCommMSDrop3 = new SidenavModel();

			sideCommMSDrop.setName("Commission Master");
			sideCommMSDrop.setUrl("/ms-comMaster");
			sideCommMSDrop.setShow(true);
			
			sideCommMSDrop1.setName("Agg. Report Summary");
			sideCommMSDrop1.setUrl("/ms-aggSumm");
			sideCommMSDrop1.setShow(true);
			
			sideCommMSDrop2.setName("Agg. Report by Date");
			sideCommMSDrop2.setUrl("/ms-aggSummDate");
			sideCommMSDrop2.setShow(true);
			
			sideCommMSDrop3.setName("Bank Commission");
			sideCommMSDrop3.setShow(true);
			sideCommMSDrop3.setClickArrow(false);
			
			SidenavModel sideCommMSSub = new SidenavModel();
			SidenavModel sideCommMSSub1 = new SidenavModel();
			SidenavModel sideCommMSSub2 = new SidenavModel();
			SidenavModel sideCommMSSub3 = new SidenavModel();

			sideCommMSSub.setName("Report Summary");
			sideCommMSSub.setUrl("/ms-bc-bankSumm");
			sideCommMSSub.setShow(true);
			
			sideCommMSSub1.setName("Report by Date");
			sideCommMSSub1.setUrl("/ms-bc-bankDate");
			sideCommMSSub1.setShow(true);
			
			sideCommMSSub2.setName("Agg. Report Summary");
			sideCommMSSub2.setUrl("/ms-bc-aggSumm");
			sideCommMSSub2.setShow(true);
			
			sideCommMSSub3.setName("Agg. Report by Date");
			sideCommMSSub3.setUrl("/ms-bc-aggDate");
			sideCommMSSub3.setShow(true);
			
			
			sidenavCommSubMenuBankMS.add(sideCommMSSub);
			sidenavCommSubMenuBankMS.add(sideCommMSSub1);
			sidenavCommSubMenuBankMS.add(sideCommMSSub2);
			sidenavCommSubMenuBankMS.add(sideCommMSSub3);
			sideCommMSDrop3.setSubMenu(sidenavCommSubMenuBankMS);
			
			sidenavCommDropMS.add(sideCommMSDrop);
			sidenavCommDropMS.add(sideCommMSDrop1);
			sidenavCommDropMS.add(sideCommMSDrop2);
			sidenavCommDropMS.add(sideCommMSDrop3);
			sideCommMS.setDropDownMenu(sidenavCommDropMS);

			
			sidenav5.add(sideCommCW);  
			sidenav5.add(sideCommMS);    

//			sidenavMap.clear();
			sidenavMap.put("COMMISSION_RU", sidenav5);

		}
		
		if(obj.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA") && obj.getActiveFlag() == 1) {
			System.out.println("In settl adjust");
			ArrayList<SidenavModel> sidenavSAJDrop = new ArrayList<SidenavModel>();
			ArrayList<SidenavModel> sidenavSAJDrop1 = new ArrayList<SidenavModel>();

			List<SidenavModel> sidenav6 = new ArrayList<SidenavModel>();

			SidenavModel sideSAJ = new SidenavModel();
			SidenavModel sideSettlSAJsub = new SidenavModel();
			SidenavModel sideSettlSAJsub1 = new SidenavModel();
		
			sideSAJ.setName("Settl. Adj Request");
			sideSAJ.setShow(true);
			sideSAJ.setClickArrowM(false);
			sideSAJ.setIcon("fa fa-tasks");
			
			sideSettlSAJsub.setName("Create Request");
			sideSettlSAJsub.setUrl("/create-req");
			sideSettlSAJsub.setShow(true);
			
			
			sidenavSAJDrop.add(sideSettlSAJsub);			
			sideSAJ.setDropDownMenu(sidenavSAJDrop);
			
			SidenavModel sideSAJHis = new SidenavModel();
			SidenavModel sideSettlSAJHisSub = new SidenavModel();
			SidenavModel sideSettlSAJHisSub1 = new SidenavModel();
			SidenavModel sideSettlSAJHisSub2 = new SidenavModel();
			SidenavModel sideSettlSAJHisSub3 = new SidenavModel();

			sideSAJHis.setName("Settl. Adj Reports");
			sideSAJHis.setShow(true);
			sideSAJHis.setClickArrowM(false);
			sideSAJHis.setIcon("fa fa-file-text");
			
			sideSettlSAJHisSub.setName("Validator Requests History");
			sideSettlSAJHisSub.setUrl("/val-hisReport");
			sideSettlSAJHisSub.setShow(true);
			
			sideSettlSAJHisSub1.setName("Approved Requests History");
			sideSettlSAJHisSub1.setUrl("/app-hisReport");
			sideSettlSAJHisSub1.setShow(true);
			
			sideSettlSAJHisSub2.setName("Hold Amount Report");
			sideSettlSAJHisSub2.setUrl("/hold-report");
			sideSettlSAJHisSub2.setShow(true);
			
			sideSettlSAJHisSub3.setName("One of History Settl. Report");
			sideSettlSAJHisSub3.setUrl("/oneOf-history");
			sideSettlSAJHisSub3.setShow(true);
			
			sidenavSAJDrop1.add(sideSettlSAJHisSub);
			sidenavSAJDrop1.add(sideSettlSAJHisSub1);
			sidenavSAJDrop1.add(sideSettlSAJHisSub2);
			sidenavSAJDrop1.add(sideSettlSAJHisSub3);

			if(obj.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")&&obj.getPermRead() == 1) {
				sideSAJHis.setDropDownMenu(sidenavSAJDrop1);
			}
			
			SidenavModel sideSAJApprove = new SidenavModel();
			sideSAJApprove.setName("Approve Settl. Adjust Requests");
			sideSAJApprove.setUrl("/to-appSettlAdj");
			sideSAJApprove.setShow(true);
			sideSAJApprove.setClickArrow(false);
			sideSAJApprove.setIcon("fa fa-check");
			
			if(obj.getPermCreate() == 1) {
				sidenav6.add(sideSAJ);

			}
			sidenav6.add(sideSAJHis);
			if(obj.getPermApprove() == 1) {
				sidenav6.add(sideSAJApprove);
			}

			sidenavMap.put("SETTL_ADJUSTMENT_CRA", sidenav6);
			
		}
		
		if(obj.getFeatureCode().equals("UPI_REFUND_RU")) {
			System.out.println("In upi refund");
			List<SidenavModel> sidenav7 = new ArrayList<SidenavModel>();

			SidenavModel sideUPI = new SidenavModel();
		
			sideUPI.setName("UPI Refund");
			sideUPI.setShow(true);
			sideUPI.setClickArrowM(false);
			sideUPI.setUrl("/upi-refund");
			sideUPI.setIcon("fa fa-inr");
			
			sidenav7.add(sideUPI);
						
			sidenavMap.put("UPI_REFUND_RU", sidenav7);
			
		}		
		if(obj.getFeatureCode().equals("UPI_REFUND_RU")) {
			System.out.println("In upi refund");
			List<SidenavModel> sidenav7 = new ArrayList<SidenavModel>();

			SidenavModel sideUPI = new SidenavModel();
		
			sideUPI.setName("UPI Refund");
			sideUPI.setShow(true);
			sideUPI.setClickArrowM(false);
			sideUPI.setUrl("/upi-refund");
			sideUPI.setIcon("fa fa-inr");
			
			sidenav7.add(sideUPI);
						
			sidenavMap.put("UPI_REFUND_RU", sidenav7);
			
		}

		
		if(obj.getFeatureCode().equals("NOCA_BALANCE_FETCH")) {
			System.out.println("In noca");
			List<SidenavModel> sidenav8 = new ArrayList<SidenavModel>();

			SidenavModel sideNoka = new SidenavModel();
		
			sideNoka.setName("Noca Balance Fetch");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/noka-bal");
			sideNoka.setIcon("fa fa-inr");
			
			sidenav8.add(sideNoka);
			
			sidenavMap.put("NOCA_BALANCE_FETCH", sidenav8);
			
		}
		if(obj.getFeatureCode().equals("T_PLUS_ONE_SETTL") && obj.getActiveFlag() == 1) {
			System.out.println("In tplusone settl");
			ArrayList<SidenavModel> sidenavSTDrop = new ArrayList<SidenavModel>();
			
			List<SidenavModel> sidenav9 = new ArrayList<SidenavModel>();

			SidenavModel sideST = new SidenavModel();
			SidenavModel sideSettlSTsub = new SidenavModel();
			SidenavModel sideSettlSTsub1 = new SidenavModel();
			SidenavModel sideSettlSTsub2 = new SidenavModel();

			sideST.setName("T+1 Settlements");
			sideST.setShow(true);
			sideST.setClickArrowM(false);
			sideST.setIcon("fa fa-exchange");
			
			sideSettlSTsub.setName("Merchant Records");
			sideSettlSTsub.setUrl("/tplusone-merch");
			sideSettlSTsub.setShow(true);
			
			sideSettlSTsub1.setName("Super Merchant Records");
			sideSettlSTsub1.setUrl("/tplusone-Supermerch");
			sideSettlSTsub1.setShow(true);
			
			sideSettlSTsub2.setName("Parent Records");
			sideSettlSTsub2.setUrl("/tplusone-parent");
			sideSettlSTsub2.setShow(true);
			
			
			sidenavSTDrop.add(sideSettlSTsub);
			sidenavSTDrop.add(sideSettlSTsub1);			
			sidenavSTDrop.add(sideSettlSTsub2);			

			sideST.setDropDownMenu(sidenavSTDrop);
						
			sidenav9.add(sideST);

			sidenavMap.put("T_PLUS_ONE_SETTL", sidenav9);
			
		}

		if(obj.getFeatureCode().equals("ONE_OF_SETTL") && obj.getActiveFlag() == 1) {
			System.out.println("In one of settl");
			ArrayList<SidenavModel> sidenavSTDrop = new ArrayList<SidenavModel>();
			
			List<SidenavModel> sidenav10 = new ArrayList<SidenavModel>();

			SidenavModel sideST = new SidenavModel();
			SidenavModel sideSettlSTsub = new SidenavModel();
			SidenavModel sideSettlSTsub1 = new SidenavModel();
			SidenavModel sideSettlSTsub2 = new SidenavModel();

			sideST.setName("Create One of Request");
			sideST.setShow(true);
			sideST.setClickArrowM(false);
			sideST.setIcon("fa fa-tasks");
			
			sideSettlSTsub.setName("Merchant");
			sideSettlSTsub.setUrl("/createSettl-merch");
			sideSettlSTsub.setShow(true);
			
			sideSettlSTsub1.setName("Super Merchant");
			sideSettlSTsub1.setUrl("/createSettl-Supermerch");
			sideSettlSTsub1.setShow(true);
			
			sideSettlSTsub2.setName("Parent");
			sideSettlSTsub2.setUrl("/createSettl-parent");
			sideSettlSTsub2.setShow(true);
			
			
			sidenavSTDrop.add(sideSettlSTsub);
			sidenavSTDrop.add(sideSettlSTsub1);			
			sidenavSTDrop.add(sideSettlSTsub2);			

			sideST.setDropDownMenu(sidenavSTDrop);
						
			sidenav10.add(sideST);
			
			SidenavModel sideOneRep = new SidenavModel();
			SidenavModel sideSettlOneRepSub = new SidenavModel();
			ArrayList<SidenavModel> sidenavOneRepDrop = new ArrayList<SidenavModel>();

			
			sideOneRep.setName("One Settlement Reports");
			sideOneRep.setShow(true);
			sideOneRep.setClickArrowM(false);
			sideOneRep.setIcon("fa fa-file-text");
			
			sideSettlOneRepSub.setName("One of History");
			sideSettlOneRepSub.setUrl("/uponeOf-history");
			sideSettlOneRepSub.setShow(true);
			
			sidenavOneRepDrop.add(sideSettlOneRepSub);
			
			sideOneRep.setDropDownMenu(sidenavOneRepDrop);
			
			sidenav10.add(sideOneRep);

			SidenavModel sideOSApprove = new SidenavModel();
			sideOSApprove.setName("Approve One of Requests");
			sideOSApprove.setUrl("/oneOfSettl-toApp");
			sideOSApprove.setShow(true);
			sideOSApprove.setClickArrow(false);
			sideOSApprove.setIcon("fa fa-check");
			
			if(obj.getPermApprove() == 1) {
				sidenav10.add(sideOSApprove);

			}
			

			sidenavMap.put("ONE_OF_SETTL", sidenav10);
			
		}
		
		if(obj.getFeatureCode().equals("WEEKEND_SETTL") && obj.getActiveFlag() == 1) {
			System.out.println("In weekend settl");
			ArrayList<SidenavModel> sidenavSTDrop = new ArrayList<SidenavModel>();
			
			List<SidenavModel> sidenav11 = new ArrayList<SidenavModel>();

			SidenavModel sideST = new SidenavModel();
			SidenavModel sideSettlSTsub = new SidenavModel();
			SidenavModel sideSettlSTsub1 = new SidenavModel();
			SidenavModel sideSettlSTsub2 = new SidenavModel();

			sideST.setName("Weekend Settlement");
			sideST.setShow(true);
			sideST.setClickArrowM(false);
			sideST.setIcon("fa fa-tasks");
			
			sideSettlSTsub.setName("Create Request");
			sideSettlSTsub.setUrl("/create-reqWk");
			sideSettlSTsub.setShow(true);
			
			sideSettlSTsub1.setName("Approve Requests");
			sideSettlSTsub1.setUrl("/wk-settl-toapp");
			sideSettlSTsub1.setShow(true);
			
			sideSettlSTsub2.setName("Report");
			sideSettlSTsub2.setUrl("/wk-settl-report");
			sideSettlSTsub2.setShow(true);
			
			
			if(obj.getPermCreate() == 1) {
				sidenavSTDrop.add(sideSettlSTsub);
			}
			if(obj.getPermApprove() == 1) {
				sidenavSTDrop.add(sideSettlSTsub1);
			}
			if(obj.getPermRead() == 1) {
				sidenavSTDrop.add(sideSettlSTsub2);
			}
			
			sideST.setDropDownMenu(sidenavSTDrop);			
			
			if(sideST != null)
			sidenav11.add(sideST);
			
			sidenavMap.put("WEEKEND_SETTL", sidenav11);

			
		}

		if(obj.getFeatureCode().equals("EKYC_REPORTS") && obj.getActiveFlag() == 1) {

				System.out.println("ekyc report");
				ArrayList<SidenavModel> sidenavSTDrop = new ArrayList<SidenavModel>();
	
				List<SidenavModel> sidenav12 = new ArrayList<SidenavModel>();
	
				SidenavModel sideST = new SidenavModel();
				SidenavModel sideSettlSTsub = new SidenavModel();
				SidenavModel sideSettlSTsub1 = new SidenavModel();
				SidenavModel sideSettlSTsub2 = new SidenavModel();
	
				sideST.setName("EKYC Reports");
				sideST.setShow(true);
				sideST.setClickArrowM(false);
				sideST.setIcon("fa fa-tasks");
	
				sideSettlSTsub.setName("Success Report");
				sideSettlSTsub.setUrl("/success-report/1");
				sideSettlSTsub.setShow(true);
	
				sideSettlSTsub1.setName("Approve Requests");
				sideSettlSTsub1.setUrl("/success-report/3");
				sideSettlSTsub1.setShow(true);
	
				sideSettlSTsub2.setName("Failure Report");
				sideSettlSTsub2.setUrl("/success-report/2");
				sideSettlSTsub2.setShow(true);
	
				if(obj.getPermRead() == 1) {
					sidenavSTDrop.add(sideSettlSTsub);
					sidenavSTDrop.add(sideSettlSTsub2);
				}
				if(obj.getPermApprove() == 1) {
					sidenavSTDrop.add(sideSettlSTsub1);
				}
				sideST.setDropDownMenu(sidenavSTDrop);
	
				if(sideST != null)
				sidenav12.add(sideST);
	
				sidenavMap.put("EKYC_REPORTS", sidenav12);
			}
		
		if(obj.getFeatureCode().equals("BANK_SW_MC") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavBankDrop = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav13 = new ArrayList<SidenavModel>();
			
			SidenavModel sideBank = new SidenavModel();
			SidenavModel sideBankSub = new SidenavModel();
			SidenavModel sideBankSub1 = new SidenavModel();
		
			sideBank.setName("Bank Switch Details");
			sideBank.setShow(true);
			sideBank.setClickArrowM(false);
			sideBank.setIcon("fa fa-university");
			
			sideBankSub.setName("View/Edit Details");
			sideBankSub.setUrl("/bankDetSW");
			sideBankSub.setShow(true);
			
			sideBankSub1.setName("Approve Details");
			sideBankSub1.setUrl("/bankDetSWAppr");
			sideBankSub1.setShow(true);
			
			sidenavBankDrop.add(sideBankSub);
			
			if(obj.getPermApprove() == 1) {
				sidenavBankDrop.add(sideBankSub1);
			}
	
			sideBank.setDropDownMenu(sidenavBankDrop);
			
			
			sidenav13.add(sideBank);    
//			sidenavMap.clear();
			sidenavMap.put("BANK_SW_MC", sidenav13);

		}

		
		
		if(obj.getFeatureCode().equals("EKYC_TERMINALS_UPLOAD") && obj.getActiveFlag() == 1) {

			System.out.println("ekyc Terminal upload ");
			
			SidenavModel sideNoka = new SidenavModel();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			sideNoka.setName("EKYC Terminals Upload");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/ekyc-terminal-upload");
			sideNoka.setIcon("fa fa-upload");
			sidenav15.add(sideNoka);
			sidenavMap.put("EKYC_TERMINALS_UPLOAD", sidenav15);
		}
		if(obj.getFeatureCode().equals("PERMISSIONS_REPORTS") && obj.getActiveFlag() == 1) {

			System.out.println("Control panel permission reports");
			
			SidenavModel sideNoka = new SidenavModel();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			sideNoka.setName("Control Panel Permissions");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/control-panel-permissions");
			sideNoka.setIcon("fa fa-lock");
			sidenav15.add(sideNoka);
			sidenavMap.put("PERMISSIONS_REPORTS", sidenav15);
		}
		if(obj.getFeatureCode().equals("BLOCK_FRAUD_MERCHANTS") && obj.getActiveFlag() == 1) {

			System.out.println("Block Fraud Merchants");
			
			SidenavModel sideNoka = new SidenavModel();
			List<SidenavModel> sidenav16 = new ArrayList<SidenavModel>();
			sideNoka.setName("Block Fraud Merchants");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/block-fraud-merchants");
			sideNoka.setIcon("fa fa-upload");
			sidenav16.add(sideNoka);
			sidenavMap.put("BLOCK_FRAUD_MERCHANTS", sidenav16);
		}
		
		if(obj.getFeatureCode().equals("COMPLAINT_SOLVE") && obj.getActiveFlag() == 1) {

			System.out.println("Complaint portal report");
			ArrayList<SidenavModel> sidenavSTDrop = new ArrayList<SidenavModel>();

			List<SidenavModel> sidenav12 = new ArrayList<SidenavModel>();

			SidenavModel sideST = new SidenavModel();
			SidenavModel sideSettlSTsub = new SidenavModel();
			SidenavModel sideSettlSTsub1 = new SidenavModel();
			SidenavModel sideSettlSTsub2 = new SidenavModel();
			SidenavModel sideSettlSTsub3 = new SidenavModel();

			sideST.setName("Complaint Management");
			sideST.setShow(true);
			sideST.setClickArrowM(false);
			sideST.setIcon("fa fa-ticket");

			//sideSettlSTsub.setName("To Assign Issues");
			sideSettlSTsub.setName("Open Issues/Complaints");
			sideSettlSTsub.setUrl("/to-assign-issues");
			sideSettlSTsub.setShow(true);
			
			//sideSettlSTsub.setName("To Assign Issues");
			sideSettlSTsub3.setName("Display Board");
			sideSettlSTsub3.setUrl("/issues-display-board");
			sideSettlSTsub3.setShow(true);
					

			//sideSettlSTsub1.setName("Assigned History & To Resolve");
			sideSettlSTsub1.setName("Pending Issues/Complaints");
			sideSettlSTsub1.setUrl("/assign-resolve");
			sideSettlSTsub1.setShow(true);

			sideSettlSTsub2.setName("Resolved issues");
			sideSettlSTsub2.setUrl("/resolve-issues");
			sideSettlSTsub2.setShow(true);

			sidenavSTDrop.add(sideSettlSTsub3);
			
			if(obj.getPermApprove() == 1) {
				sidenavSTDrop.add(sideSettlSTsub);
				
			}
			if(obj.getPermRead() == 1) {
				sidenavSTDrop.add(sideSettlSTsub1);
				sidenavSTDrop.add(sideSettlSTsub2);
			}
			sideST.setDropDownMenu(sidenavSTDrop);

			if(sideST != null)
			sidenav12.add(sideST);

			sidenavMap.put("COMPLAINT_SOLVE", sidenav12);
		}
	/*	if(obj.getFeatureCode().equals("CHAGEBACK_UPLOAD") && obj.getActiveFlag() == 1) {

			System.out.println("Chargeback upload ");
			
			SidenavModel sideNoka = new SidenavModel();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			sideNoka.setName("ChargeBack Files Upload");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/chargeback-file-upload");
			sideNoka.setIcon("fa fa-upload");
			sidenav15.add(sideNoka);
			sidenavMap.put("CHAGEBACK_UPLOAD", sidenav15);
		}*/
		
		if(obj.getFeatureCode().equals("CHAGEBACK_UPLOAD") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavChargeBack = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			
			SidenavModel sideCB = new SidenavModel();
			SidenavModel sideCBUpload = new SidenavModel();
			SidenavModel sideCBReports = new SidenavModel();
			SidenavModel sideCBUpload1 = new SidenavModel();
			SidenavModel sideToApprove = new SidenavModel();
			SidenavModel sideToCBold = new SidenavModel();
			SidenavModel sideToCBrrn = new SidenavModel();
			SidenavModel sideToFP999 = new SidenavModel();
		
			sideCB.setName("ChargeBacks");
			sideCB.setShow(true);
			sideCB.setClickArrowM(false);
			sideCB.setIcon("fa fa-money");
			
			sideCBUpload.setName("ChargeBack Files Upload");
			sideCBUpload.setUrl("/chargeback-file-upload");
			sideCBUpload.setIcon("fa fa-upload");
			sideCBUpload.setShow(true);
			
			sideCBUpload1.setName("Create Requests");
			sideCBUpload1.setUrl("/create-chargeback-request");
			sideCBUpload1.setShow(true);
			
			sideCBReports.setName("Reports");
			sideCBReports.setUrl("/chargeback-reports");
			sideCBReports.setIcon("fa fa-upload");
			sideCBReports.setShow(true);
			
			sideToApprove.setName("Open Dispute Requests");
			sideToApprove.setUrl("/chargeback-approve");
			sideToApprove.setIcon("fa fa-flask");
			sideToApprove.setShow(true);
			
			sideToCBold.setName("Old CB Files Upload");
			sideToCBold.setUrl("/old-chargeback-file-upload");
			sideToCBold.setIcon("fa fa-flask");
			sideToCBold.setShow(true);
			
			sideToCBrrn.setName("CB RRN Reports");
			sideToCBrrn.setUrl("/chargeback-rrn-reports");
			sideToCBrrn.setIcon("fa fa-flask");
			sideToCBrrn.setShow(true);
			
			sideToFP999.setName("CB FP999 Reports");
			sideToFP999.setUrl("/chargeback-fp999-reports");
			sideToFP999.setIcon("fa fa-flask");
			sideToFP999.setShow(true);
			
			
			
			sidenavChargeBack.add(sideCBUpload);
			sidenavChargeBack.add(sideCBUpload1);
			
			if(obj.getPermApprove() == 1) {
				sidenavChargeBack.add(sideToApprove);
			}
			sidenavChargeBack.add(sideCBReports);
			sidenavChargeBack.add(sideToCBold);
			if(obj.getPermApprove() == 1) {
				sidenavChargeBack.add(sideToCBrrn);
			}
			sidenavChargeBack.add(sideToFP999);
			
			sideCB.setDropDownMenu(sidenavChargeBack);
			sidenav15.add(sideCB);    

			sidenavMap.put("CHAGEBACK_UPLOAD", sidenav15);

		}

		if(obj.getFeatureCode().equals("ASSIGN_FEATURE_PERMISSION") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavAssfeature = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			
			SidenavModel sideaf = new SidenavModel();
			SidenavModel sideafpermission = new SidenavModel();
			SidenavModel sideafeditfeature = new SidenavModel();
		
			sideaf.setName("Assign Feature Permissions");
			sideaf.setShow(true);
			sideaf.setClickArrowM(false);
			sideaf.setIcon("fa fa-key");
			
			sideafpermission.setName("Assign Feature");
			sideafpermission.setUrl("/assign-feature-permission");
			sideafpermission.setIcon("fa fa-key");
			sideafpermission.setShow(true);
			
			sideafeditfeature.setName("Edit Feature");
			sideafeditfeature.setUrl("/edit-feature-permission");
			sideafeditfeature.setIcon("fa fa-key");
			sideafeditfeature.setShow(true);
		
			sidenavAssfeature.add(sideafpermission);
			
			
			if(obj.getPermApprove() == 1) {
				sidenavAssfeature.add(sideafeditfeature);
			}

			sideaf.setDropDownMenu(sidenavAssfeature);
			sidenav15.add(sideaf);    

			sidenavMap.put("ASSIGN_FEATURE_PERMISSION", sidenav15);

		}

		if(obj.getFeatureCode().equals("PROXY_REDIRECTIOIN") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavAssfeature = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			
			SidenavModel sideaf = new SidenavModel();
			SidenavModel sideafpermission = new SidenavModel();
			SidenavModel sideafeditfeature = new SidenavModel();
			SidenavModel sidproxyreport = new SidenavModel();
		
			sideaf.setName("Proxy Redirection");
			sideaf.setShow(true);
			sideaf.setClickArrowM(false);
			sideaf.setIcon("fa fa-wifi");
			
			sideafpermission.setName("Create Proxy");
			sideafpermission.setUrl("/create-proxy");
			sideafpermission.setIcon("fa fa-wifi");
			sideafpermission.setShow(true);
			
			sideafeditfeature.setName("Edit Proxy");
			sideafeditfeature.setUrl("/edit-proxy");
			sideafeditfeature.setIcon("fa fa-key");
			sideafeditfeature.setShow(true);
			
			sidproxyreport.setName("Proxy URLs");
			sidproxyreport.setUrl("/proxy-list");
			sidproxyreport.setIcon("fa fa-key");
			sidproxyreport.setShow(true);
		
			sidenavAssfeature.add(sideafpermission);
	
			if(obj.getPermApprove() == 1) {
				sidenavAssfeature.add(sideafeditfeature);
			}
			sidenavAssfeature.add(sidproxyreport);
			sideaf.setDropDownMenu(sidenavAssfeature);
			sidenav15.add(sideaf);    

			sidenavMap.put("PROXY_REDIRECTIOIN", sidenav15);

		}
		
		if(obj.getFeatureCode().equals("PAYTM_FUND_TRANSFER") && obj.getActiveFlag() == 1) {
			ArrayList<SidenavModel> sidenavAssfeature = new ArrayList<SidenavModel>();
			List<SidenavModel> sidenav15 = new ArrayList<SidenavModel>();
			
			SidenavModel sideaf = new SidenavModel();
			SidenavModel sideafpermission = new SidenavModel();
			SidenavModel sideafpermission1 = new SidenavModel();
			SidenavModel sideafundfeature = new SidenavModel();
	
			sideaf.setName("Fund Transfer");
			sideaf.setShow(true);
			sideaf.setClickArrowM(false);
			sideaf.setIcon("fa fa-money");
			
			sideafpermission.setName("Paytm Fund Transfer");
			sideafpermission.setUrl("/paytm-fund-transfer");
			sideafpermission.setIcon("fa fa-wifi");
			sideafpermission.setShow(true);
			
			sideafpermission1.setName("Kotak Fund Transfer");
			sideafpermission1.setUrl("/kotak-fund-transfer");
			sideafpermission1.setIcon("fa fa-wifi");
			sideafpermission1.setShow(true);
			
			sideafundfeature.setName("History");
			sideafundfeature.setUrl("/fund-transfer-history");
			sideafundfeature.setIcon("fa fa-key");
			sideafundfeature.setShow(true);
		
			sidenavAssfeature.add(sideafpermission);
			sidenavAssfeature.add(sideafpermission1);
			if(obj.getPermApprove() == 1) {
				sidenavAssfeature.add(sideafundfeature);
			}
			
			sideaf.setDropDownMenu(sidenavAssfeature);
			sidenav15.add(sideaf);    

			sidenavMap.put("PAYTM_FUND_TRANSFER", sidenav15);
		}

		if(obj.getFeatureCode().equals("DEMOGRAPHIC_DATA")) {
			System.out.println("In merchant demographic data");
			List<SidenavModel> sidenav16 = new ArrayList<SidenavModel>();

			SidenavModel sideNoka = new SidenavModel();
		
			sideNoka.setName("Merchant Demographic Data");
			sideNoka.setShow(true);
			sideNoka.setClickArrowM(false);
			sideNoka.setUrl("/merchant-demographic-data");
			sideNoka.setIcon("fa fa-bar-chart");
			
			sidenav16.add(sideNoka);
			
			sidenavMap.put("DEMOGRAPHIC_DATA", sidenav16);
			
		}
		
		if(obj.getFeatureCode().equals("RECONCILATION_DATA")) {
			System.out.println("In recnoncilation");

			ArrayList<SidenavModel> sidenavReconcilation = new ArrayList<SidenavModel>();

			ArrayList<SidenavModel> sidenavReconsileSubMenuThreeway = new ArrayList<SidenavModel>();
			
			ArrayList<SidenavModel> sidenavReconsileSubMenusettlement = new ArrayList<SidenavModel>();
			
			ArrayList<SidenavModel> sideNav5 = new ArrayList<SidenavModel>();
			
			SidenavModel sideThreeway = new SidenavModel();

			SidenavModel sideNavMain = new SidenavModel();

			
			SidenavModel sideNavsettlement = new SidenavModel();
			
			sideNavMain.setName("Reconcilation");
			sideNavMain.setShow(true);
			sideNavMain.setClickArrowM(false);
			sideNavMain.setIcon("fa fa-inr");
			
			sideThreeway.setName("Three Way Data");
			sideThreeway.setShow(true);
			sideThreeway.setClickArrowM(false);
			sideThreeway.setIcon("fa fa-inr");
			
			sideNavsettlement.setName("Settlement Data");
			sideNavsettlement.setShow(true);
			sideNavsettlement.setClickArrowM(false);
			sideNavsettlement.setIcon("fa fa-inr");
			
			
			SidenavModel sideThreewayDrop = new SidenavModel();
			SidenavModel sideThreewayDrop1 = new SidenavModel();
			SidenavModel sideThreewayDrop2 = new SidenavModel();
			
			SidenavModel sidesettlementDrop = new SidenavModel();
			SidenavModel sidesettlementDrop1 = new SidenavModel();
	

			sideThreewayDrop.setName("Anamoly Report");
			sideThreewayDrop.setUrl("/anamoly-report");
			sideThreewayDrop.setShow(true);
			
			sideThreewayDrop1.setName("Unreported Count");
			sideThreewayDrop1.setUrl("/unreported-report");
			sideThreewayDrop1.setShow(true);
			
			sideThreewayDrop2.setName("Three Way Upload");
			sideThreewayDrop2.setUrl("/threeway-upload");
			sideThreewayDrop2.setShow(true);
			
			
			sidesettlementDrop.setName("Instant Settlements");
			sidesettlementDrop.setUrl("/inst-report");
			sidesettlementDrop.setShow(true);
			
			sidesettlementDrop1.setName("T+1");
			sidesettlementDrop1.setUrl("/t1-report");
			sidesettlementDrop1.setShow(true);
			
			
						
			
			sidenavReconsileSubMenuThreeway.add(sideThreewayDrop);
			sidenavReconsileSubMenuThreeway.add(sideThreewayDrop1);
			sidenavReconsileSubMenuThreeway.add(sideThreewayDrop2);
			
			sidenavReconsileSubMenusettlement.add(sidesettlementDrop);
			sidenavReconsileSubMenusettlement.add(sidesettlementDrop1);
			
			sideThreeway.setSubMenu(sidenavReconsileSubMenuThreeway);
			sideNavsettlement.setSubMenu(sidenavReconsileSubMenusettlement);
			sidenavReconcilation.add(sideThreeway); 
			sidenavReconcilation.add(sideNavsettlement);
			
			sideNavMain.setDropDownMenu(sidenavReconcilation);
			   
			sideNav5.add(sideNavMain);
			
			sidenavMap.put("RECONCILATION_DATA", sideNav5);

		}
		
		return sidenavMap;

	}

	
}package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;


import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.jsonwebtoken.ExpiredJwtException;  
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBankDetailsTempRepository;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.data.BankBulkVerificationResponseDataModel;
import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;

@RestController
@RequestMapping(value="/api/bankDetails")
public class BankDetailsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	
//	@Autowired
//	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private FpCpBankDetailsTempRepository fpCpBankDetailsTempRepository;
	
	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;
	
	private static final Logger bankDetailsMClog = Logger.getLogger("BankDetailsMC");

	@GetMapping("agg/read/{coName}")
	public ResponseEntity<GeneralResponse> readBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		bankDetailsMClog.info("agg/read/ Reading parent bank details with name like "+coName);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC") || data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/read/ Permission validation true");

			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCaseOrAutomaticBankVerificationDetailsContainingIgnoreCaseOrAutomaticPanVerificationDetailsContainingIgnoreCaseOrParentMerchantNameContainingIgnoreCase(coName, coName, coName, coName);
				 System.out.println(coName);
				 
				 if(parentMerchantMasterList != null)
				 {
					 System.out.println("not equals null");
					System.out.println(parentMerchantMasterList.size());
					bankDetailsMClog.info("agg/read/ parentMerchantMasterList not null, size "+parentMerchantMasterList.size());

				 }
				 else {
						bankDetailsMClog.info("agg/read/ parentMerchantMasterList is null");

				 }
				//System.out.println(parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName));
				List<BankDetailsModel> bankDet=new ArrayList<BankDetailsModel>();

				 if(parentMerchantMasterList.size()>0)
				 {
					 BankDetailsModel tempTable = null;
						
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							
							tempTable= new BankDetailsModel();
							
							tempTable.setType(103);
//							name
							tempTable.setTypeName(parentRep.getCompanyLegalName());
							tempTable.setTypeId(parentRep.getId());
							tempTable.setBankAccNo(parentRep.getCompanyBankAccountNumber());
							tempTable.setBankAccName(parentRep.getBankAccountName());
							tempTable.setBankIFSC(parentRep.getCompanyIfscCode());
							tempTable.setAutoBankVerFlag(parentRep.getAutomaticBankVerification());
							tempTable.setAutoBankVerDetails(parentRep.getAutomaticBankVerificationDetails());
							
							if(parentRep.getCancelledChequeImages() != null) {
								tempTable.setCancelledChequeImg(commonTasks.getBase64(parentRep.getCancelledChequeImages()));
							}
							
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							bankDet.add(tempTable);
							
							
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("BANK_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(1);
							auditLogs.setViewData("parent bank details with co. legal name like "+coName);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
							
							
							
						}
						bankDetailsMClog.info("agg/read/ parentMerchantMasterList is sent in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDet), HttpStatus.OK);
					
				 }
				 else
				 {
						bankDetailsMClog.info("agg/read/ parentMerchantMasterList null is sent in response");

			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
					bankDetailsMClog.info("agg/read/ Exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("agg/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping("agg/getPreviousData/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> PreviousBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		int parentId = Integer.parseInt(coId);

		
			
			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameAndId(coName, parentId);
				 System.out.println(coName);
				 
				 if(parentMerchantMasterList != null)
				 {
					 System.out.println("not equals null");
					System.out.println(parentMerchantMasterList.size());
				 }
				//System.out.println(parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName));
				List<BankDetailsModel> bankDet=new ArrayList<BankDetailsModel>();

				 if(parentMerchantMasterList.size()>0)
				 {
					 BankDetailsModel tempTable = null;
						
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							
							tempTable= new BankDetailsModel();
							
							tempTable.setType(103);
//							name
							tempTable.setTypeName(parentRep.getCompanyLegalName());
							tempTable.setTypeId(parentRep.getId());
							tempTable.setBankAccNo(parentRep.getCompanyBankAccountNumber());
							tempTable.setBankAccName(parentRep.getBankAccountName());
							tempTable.setBankIFSC(parentRep.getCompanyIfscCode());
							tempTable.setAutoBankVerFlag(parentRep.getAutomaticBankVerification());
							tempTable.setAutoBankVerDetails(parentRep.getAutomaticBankVerificationDetails());
							
							if(parentRep.getCancelledChequeImages() != null) {
								tempTable.setCancelledChequeImg(commonTasks.getBase64(parentRep.getCancelledChequeImages()));
							}
							
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							bankDet.add(tempTable);
							
							
							
							
						}
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDet), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
						

	}

	
	@PostMapping("agg/update/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> updateBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		bankDetailsMClog.info("agg/update/ Updating parent bank details with request data: "+new Gson().toJson(bankDetDataModal));


		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			bankDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			bankDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
//			bankDetailsMClog.info("/bankDetails response sent to device : Security Session expired. Please login again to continue.");
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			bankDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			bankDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		
		System.out.println("permisson bank up"+permission);

		System.out.println("here in agg update");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		int parentId = Integer.parseInt(coId);


		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/update/ Permission validation true");

			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameAndId(coName, parentId);

				 if(parentMerchantMasterList.size()>0)
				 {
						bankDetailsMClog.info("agg/update/ parentMerchantMasterList not null of name and id:"+coName+" "+parentId);

					 System.out.println("Size not zero");
					 FpCpBankDetailsTemp tempTable = null;
						
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							
							
//							Inserting the entry into temp table if does'nt exist
//							name
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(parentId, 103);
							auditLogs.setOldData(new Gson().toJson(tempRecord));
//							bankDetailsMC.info("/bankDetails to update request data: " + gson.toJson(tempRecord));


							
							if(tempRecord == null) {
								bankDetailsMClog.info("agg/update/ tempTable record does not exist");

								 System.out.println("Record does not exist");

								tempTable= new FpCpBankDetailsTemp();

								tempTable.setType(103);
//								name
								tempTable.setTypeName(coName);
								tempTable.setTypeId(parentRep.getId());
								tempTable.setBankAccountNumber(parentRep.getCompanyBankAccountNumber());
								tempTable.setBankAccountName(parentRep.getBankAccountName());
								tempTable.setBankIfscCode(parentRep.getCompanyIfscCode());
								tempTable.setAutomaticBankVerification(parentRep.getAutomaticBankVerification());
								tempTable.setAutomaticBankVerificationDetails(parentRep.getAutomaticBankVerificationDetails());
								tempTable.setCancelledChequeImages(parentRep.getCancelledChequeImages());
								tempTable.setRequestedByUser(authenticateUserResponse.getUserName());
								tempTable.setRequestedByTimestamp(new Date());
								tempTable.setApprovalStatus(0);
								System.out.println(new Date());

								auditLogs.setOldData(new Gson().toJson(tempTable));

								System.out.println(authenticateUserResponse.getUserName());

								fpCpBankDetailsTempRepository.save(tempTable);
								
								tempRecord = tempTable;

							}
							bankDetailsMClog.info("agg/update/ tempTable record does exist");


							if(bankDetDataModal != null && tempRecord != null) {
								System.out.print(bankDetDataModal.getBankAccNo());
								
									if (commonTasks.check(bankDetDataModal.getBankAccName())) {
										tempRecord.setBankAccountName(bankDetDataModal.getBankAccName());
									}
									if (commonTasks.check(bankDetDataModal.getBankAccNo())) {
										tempRecord.setBankAccountNumber(bankDetDataModal.getBankAccNo());
									}
									if (commonTasks.check(bankDetDataModal.getBankIFSC())) {
										tempRecord.setBankIfscCode(bankDetDataModal.getBankIFSC());
									}
									if (bankDetDataModal.getAutoBankVerFlag() != null) {
										tempRecord.setAutomaticBankVerification(bankDetDataModal.getAutoBankVerFlag());
									}
									if (commonTasks.check(bankDetDataModal.getAutoBankVerDetails())) {
										tempRecord.setAutomaticBankVerificationDetails(bankDetDataModal.getAutoBankVerDetails());
									}
									
									if (commonTasks.check(bankDetDataModal.getCancelledChequeImg())) {
//										System.out.println("img 64"+bankDetDataModal.getCancelledChequeImg());
										tempRecord.setCancelledChequeImages(commonTasks.saveImg(bankDetDataModal.getCancelledChequeImg(),fileUtil.getProperty("cancelledChequeImgsPath")+dateAsString,request));
									}
									
									
									if (commonTasks.check(bankDetDataModal.getRequestedRemarks())) {
										tempRecord.setRequestedByRemarks(bankDetDataModal.getRequestedRemarks());
									}
									
										tempRecord.setRequestedByUser(authenticateUserResponse.getUserName());
										tempRecord.setRequestedByTimestamp(new Date());
										tempRecord.setApprovalStatus(0);
									fpCpBankDetailsTempRepository.save(tempRecord);
	

									
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(2);

									auditLogs.setNewData(new Gson().toJson(tempRecord));
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
					
										
							}
							
						}
						bankDetailsMClog.info("agg/update/ to update data saved in temp table successfully");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDetDataModal), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
					bankDetailsMClog.info("agg/update/ exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("agg/update/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	
	
	@GetMapping("agg/approveTable/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> approveBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		bankDetailsMClog.info("agg/approveTable/  to approve details for parent requested from "+fromDate+" to "+toDate);

		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		FpCpAuditLogs auditLogs = null;
//		int parentId = Integer.parseInt(id);
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {	
			bankDetailsMClog.info("agg/approveTable/  Permission validation true");

			try
			 {
				
				List<FpCpBankDetailsTemp> tempRecordZeroApproval = fpCpBankDetailsTempRepository.findByApprovalStatusAndTypeAndRequestedByTimestampBetween(0, 103,dateFormat.parse(fromDate),dateFormat.parse(toDate));
				  List<BankDetailsModel> bankDetAppr=new ArrayList<BankDetailsModel>();

				 if(tempRecordZeroApproval.size() > 0)
				 {
						bankDetailsMClog.info("agg/approveTable/  temp table record found");

					 BankDetailsModel approvalTable = null;
						
						for(FpCpBankDetailsTemp tempRecord: tempRecordZeroApproval) {	
												
							approvalTable= new BankDetailsModel();
								
							approvalTable.setType(tempRecord.getType());
							approvalTable.setTypeName(tempRecord.getTypeName());
							approvalTable.setTypeId(tempRecord.getTypeId());
							approvalTable.setBankAccNo(tempRecord.getBankAccountNumber());
							approvalTable.setBankAccName(tempRecord.getBankAccountName());
							approvalTable.setBankIFSC(tempRecord.getBankIfscCode());
							approvalTable.setAutoBankVerFlag(tempRecord.getAutomaticBankVerification());
							approvalTable.setAutoBankVerDetails(tempRecord.getAutomaticBankVerificationDetails());
							
//							System.out.println("app"+commonTasks.getBase64(tempRecord.getCancelledChequeImages()));
							
//							approvalTable.setCancelledChequeImg(commonTasks.getBase64(tempRecord.getCancelledChequeImages()));
							
							if(tempRecord.getCancelledChequeImages() != null) {
								approvalTable.setCancelledChequeImg(commonTasks.getBase64(tempRecord.getCancelledChequeImages()));
							}
							approvalTable.setRequestedUserName(tempRecord.getRequestedByUser());
							approvalTable.setRequestedUserTimestamp(tempRecord.getRequestedByTimestamp());
							approvalTable.setRequestedRemarks(tempRecord.getRequestedByRemarks());

							bankDetAppr.add(approvalTable);
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();
							
							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("BANK_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-read,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("to approve parent bank details from"+fromDate+"to"+toDate);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
	
			
						}
						bankDetailsMClog.info("agg/approveTable/  temp table records to be approved sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDetAppr), HttpStatus.OK);
					
					
				 }
				 else
				 {
						bankDetailsMClog.info("agg/approveTable/ no temp table records to be approved sent to device in response");

			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		
		else {
			bankDetailsMClog.info("agg/approveTable/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		
		

	}
	
	@PostMapping("agg/giveApproval")
	public ResponseEntity<GeneralResponse> updateApprovedBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		bankDetailsMClog.info("agg/giveApproval/ Approving parent bank details sent with request data: "+new Gson().toJson(bankDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/giveApproval/  Permission validation true");

			try
			 {


				 		if(bankDetDataModal != null) {
							System.out.println(bankDetDataModal.getBankAccName());

				 			
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(bankDetDataModal.getTypeId(), 103);
							List<ParentMerchantMaster> parentMerchantMasterList =  parentMerchantMasterRepository.findByCompanyLegalNameAndId(bankDetDataModal.getTypeName(), bankDetDataModal.getTypeId());
							System.out.println(bankDetDataModal.getTypeName());

// audit bug fix
							FpCpBankDetailsTemp tempRecordAudit = new FpCpBankDetailsTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(ParentMerchantMaster parentRep: parentMerchantMasterList) {

								 tempRecordAudit.setType(103);
								 tempRecordAudit.setTypeName(parentRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(parentRep.getId());
								 tempRecordAudit.setBankAccountNumber(parentRep.getCompanyBankAccountNumber());
								 tempRecordAudit.setBankAccountName(parentRep.getBankAccountName());
								 tempRecordAudit.setBankIfscCode(parentRep.getCompanyIfscCode());
								 tempRecordAudit.setAutomaticBankVerification(parentRep.getAutomaticBankVerification());
								 tempRecordAudit.setAutomaticBankVerificationDetails(parentRep.getAutomaticBankVerificationDetails());
								 tempRecordAudit.setCancelledChequeImages(parentRep.getCancelledChequeImages());
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(ParentMerchantMaster parentRecord: parentMerchantMasterList) {

									if (commonTasks.check(bankDetDataModal.getBankAccName())) {
										parentRecord.setBankAccountName(bankDetDataModal.getBankAccName());
									}
//									if (commonTasks.check(bankDetDataModal.getBankAccNo())) {
//										parentRecord.setCompanyBankAccountNumber(bankDetDataModal.getBankAccNo());
//									}
//									if (commonTasks.check(bankDetDataModal.getBankIFSC())) {
//										parentRecord.setCompanyIfscCode(bankDetDataModal.getBankIFSC());
//									}
//									if (bankDetDataModal.getAutoBankVerFlag() != null) {
//										parentRecord.setAutomaticBankVerification(bankDetDataModal.getAutoBankVerFlag());
//									}
//									if (commonTasks.check(bankDetDataModal.getAutoBankVerDetails())) {
//										parentRecord.setAutomaticBankVerificationDetails(bankDetDataModal.getAutoBankVerDetails());
//									}
									
									if (commonTasks.check(bankDetDataModal.getBankAccNo(),
											bankDetDataModal.getBankIFSC())) {
										parentRecord.setCompanyBankAccountNumber(bankDetDataModal.getBankAccNo());
										parentRecord.setCompanyIfscCode(bankDetDataModal.getBankIFSC());
										double amount = 1.0;
										try {
										   	 HttpClient httpClient = new DefaultHttpClient();
										   	String url=	"https://fpanalytics.tapits.in/fpaepsanalytics/api/analytics/validatingBankDetails/v2/"+bankDetDataModal.getBankAccNo()+"/"+bankDetDataModal.getBankIFSC()+"/"+bankDetDataModal.getBankAccName()+"/"+authenticateUserResponse.getUserName();

											 url = url.replace(" ", "%20");

											HttpPost httpPost = new HttpPost(url);

									   	   	 httpPost.setHeader("Content-type", "application/json");
									   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
									   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
									   	   	 httpPost.setHeader("token", token);


									   	   	 String dataSent="";
											 HttpEntity entity = new ByteArrayEntity(dataSent.getBytes("UTF-8"));
											 httpPost.setEntity(entity);
											 HttpResponse responseData = httpClient.execute(httpPost);

												bankDetailsMClog.info("agg/giveApproval/  IMPS verfication api hit");

											 int responseCode = responseData.getStatusLine().getStatusCode();
										     String data ="";
										     

											 System.out.println(responseCode);
											 System.out.println(responseData);
											 
												bankDetailsMClog.info("agg/giveApproval/  IMPS verfication response status and data: "+responseCode+" "+responseData);


											 String dataString = "";
											 
											 data = new BasicResponseHandler().handleResponse(responseData);
											 GeneralResponse impsData=gson.fromJson(data,GeneralResponse.class);
												  if(responseCode == 200)
												  {				 
//													  List<BankBulkVerificationResponseDataModel> bankOBJECT =null;
////													  BankBulkVerificationResponseDataModel bankOBJECT = null;
//													  bankOBJECT = (List<BankBulkVerificationResponseDataModel>) gson.fromJson(gson.toJson(dataObj.toString()), BankBulkVerificationResponseDataModel.class);
//													 // bankOBJECT = (List<BankBulkVerificationResponseDataModel>) dataObj;
//													  
													  	JSONParser jsonParser = new JSONParser();
														org.json.simple.JSONArray jsonArray =  (org.json.simple.JSONArray) jsonParser.parse(gson.toJson(impsData.getData()));

														JSONObject bankData=(JSONObject) jsonArray.get(0);
														BankBulkVerificationResponseDataModel	serverResponseDataModel= new Gson().fromJson(bankData.toString(), BankBulkVerificationResponseDataModel.class);
															
													  System.out.println(serverResponseDataModel.toString());
//													  smRecord.setAutomaticBankVerification(1);
//														smRecord.setAutomaticBankVerificationDetails(
//															((IMPSResponseModel) impsData.getData()).getBeneName());
//														smRecord.setRemarks(impsData.getMessage());

													  parentRecord.setAutomaticBankVerification(1);
													  parentRecord.setAutomaticBankVerificationDetails(serverResponseDataModel.getBeneName());
													  parentRecord.setRemarks(impsData.getMessage());
														bankDetailsMClog.info("agg/giveApproval/  IMPS verfication successfull");

														System.out.println("IMPS Msg succ");
														  System.out.println(impsData.getMessage());
												  }
												  else {
													  parentRecord.setAutomaticBankVerification(0);
													  parentRecord
															.setAutomaticBankVerificationDetails((impsData.getData()).toString());
													  parentRecord.setRemarks(impsData.getMessage());
													  
														bankDetailsMClog.info("agg/giveApproval/  IMPS verfication failed");

													  System.out.println("IMPS Msg fail");
													  System.out.println(impsData.getMessage());
												  }
											
											
										} catch (Exception e) {
											e.printStackTrace();
											
										}
									}
									if (commonTasks.check(bankDetDataModal.getCancelledChequeImg())) {
//										parentRecord.setCancelledChequeImages(bankDetDataModal.getCancelledChequeImg());
										parentRecord.setCancelledChequeImages(commonTasks.saveImg(bankDetDataModal.getCancelledChequeImg(),fileUtil.getProperty("cancelledChequeImgsPath")+dateAsString,request));

									}
									if (commonTasks.check(bankDetDataModal.getRequestedRemarks())) {
										parentRecord.setRemarks(bankDetDataModal.getRequestedRemarks());
									}
									if (commonTasks.check(bankDetDataModal.getRequestedUserName())) {
										parentRecord.setEditedByUsername(authenticateUserResponse.getUserName());
									}
									
									if (bankDetDataModal.getRequestedUserTimestamp() != null) {
										parentRecord.setEditedTimestamp(new Date());
									}	
									
									parentMerchantMasterRepository.save(parentRecord);
									tempRecord.setApprovalStatus(1);
									tempRecord.setApprovedRejectedByRemarks(bankDetDataModal.getRequestedRemarks());
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									fpCpBankDetailsTempRepository.save(tempRecord);									
																					
							}
//							AUDIT LOGS
								 
							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("BANK_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(3);
//							auditLogs.setOldData(new Gson().toJson(tempRecord));
							auditLogs.setNewData(new Gson().toJson(bankDetDataModal));
							auditLogs.setApprovedByUser(authenticateUserResponse.getUserName());
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

									
							bankDetailsMClog.info("agg/giveApproval/  Parent merchant master updated");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				bankDetailsMClog.info("agg/giveApproval/  exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		
		else {
			bankDetailsMClog.info("agg/giveApproval/  Permission validation false "+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	@PostMapping("agg/giveRejection")
	public ResponseEntity<GeneralResponse> rejectApprovedBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		bankDetailsMClog.info("agg/giveRejection/ Rejecting parent bank details sent with request data: "+new Gson().toJson(bankDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/giveRejection/  Permission validation true");

		
			try
			 {


				 		if(bankDetDataModal != null) {
							System.out.println(bankDetDataModal.getBankAccName());

				 			
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(bankDetDataModal.getTypeId(), 103);
							List<ParentMerchantMaster> parentMerchantMasterList =  parentMerchantMasterRepository.findByCompanyLegalNameAndId(bankDetDataModal.getTypeName(),bankDetDataModal.getTypeId());

							// audit bug fix
							FpCpBankDetailsTemp tempRecordAudit = new FpCpBankDetailsTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(ParentMerchantMaster parentRep: parentMerchantMasterList) {

								 tempRecordAudit.setType(103);
								 tempRecordAudit.setTypeName(parentRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(parentRep.getId());
								 tempRecordAudit.setBankAccountNumber(parentRep.getCompanyBankAccountNumber());
								 tempRecordAudit.setBankAccountName(parentRep.getBankAccountName());
								 tempRecordAudit.setBankIfscCode(parentRep.getCompanyIfscCode());
								 tempRecordAudit.setAutomaticBankVerification(parentRep.getAutomaticBankVerification());
								 tempRecordAudit.setAutomaticBankVerificationDetails(parentRep.getAutomaticBankVerificationDetails());
								 tempRecordAudit.setCancelledChequeImages(parentRep.getCancelledChequeImages());
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(ParentMerchantMaster parentRecord: parentMerchantMasterList) {


									
									tempRecord.setApprovalStatus(2);
									tempRecord.setApprovedRejectedByRemarks(bankDetDataModal.getRequestedRemarks());
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									fpCpBankDetailsTempRepository.save(tempRecord);
									

//									AUDIT LOGS
									auditLogs = new FpCpAuditLogs();

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(4);
//									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(bankDetDataModal));
									auditLogs.setRejectedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);

									
							}

							bankDetailsMClog.info("agg/giveRejection/  temp record status updated to rejected");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				bankDetailsMClog.info("agg/giveRejection/  exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		 	
		}

		else {
			bankDetailsMClog.info("agg/giveRejection/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);

		}
	}
//	apis for parent end here
	
	@GetMapping("sm/read/{coName}")
	public ResponseEntity<GeneralResponse> readBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		bankDetailsMClog.info("sm/read/ Reading super merchant bank details with name "+coName);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("sm/read/ Permission validation true");

			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCaseOrSuperMerchantNameContainingIgnoreCaseOrCompanyMarketingNameContainingIgnoreCaseOrBankAccountNameContainingIgnoreCase(coName, coName, coName, coName);
				  List<BankDetailsModel> bankDet=new ArrayList<BankDetailsModel>();

				 if(smMerchantMasterList.size()>0)
				 {
						bankDetailsMClog.info("sm/read/ smMerchantMasterList not null");

					 BankDetailsModel tempTable = null;
						
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							tempTable= new BankDetailsModel();
							
							tempTable.setType(102);
							tempTable.setTypeName(smRep.getCompanyLegalName());
							tempTable.setTypeId(smRep.getId());
							tempTable.setBankAccNo(smRep.getCompanyBankAccountNumber());
							tempTable.setBankAccName(smRep.getBankAccountName());
							tempTable.setBankIFSC(smRep.getCompanyIfscCode());
							tempTable.setAutoBankVerFlag(smRep.getAutomaticBankVerification());
							tempTable.setAutoBankVerDetails(smRep.getAutomaticBankVerificationDetails());
							
							if(smRep.getCancelledChequeImages() != null) {
								tempTable.setCancelledChequeImg(commonTasks.getBase64(smRep.getCancelledChequeImages()));
							}							
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							auditLogs = new FpCpAuditLogs();
							bankDet.add(tempTable);
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("BANK_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("super merchant bank details with co. legal name like "+coName);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
							
						}
						bankDetailsMClog.info("sm/read/ smMasterList sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDet), HttpStatus.OK);
					
				 }
				 else
				 {
						bankDetailsMClog.info("sm/read/ no data smMasterList sent to device in response");

			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					bankDetailsMClog.info("sm/read/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("sm/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}	


	}
	
	@GetMapping("sm/getPreviousData/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> readBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		int superMerId = Integer.parseInt(coId);

		
//		if(operation.equals("R")) {
			
			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameAndId(coName, superMerId);
				  List<BankDetailsModel> bankDet=new ArrayList<BankDetailsModel>();

				 if(smMerchantMasterList.size()>0)
				 {
					 BankDetailsModel tempTable = null;
						
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							tempTable= new BankDetailsModel();
							
							tempTable.setType(102);
							tempTable.setTypeName(smRep.getCompanyLegalName());
							tempTable.setTypeId(smRep.getId());
							tempTable.setBankAccNo(smRep.getCompanyBankAccountNumber());
							tempTable.setBankAccName(smRep.getBankAccountName());
							tempTable.setBankIFSC(smRep.getCompanyIfscCode());
							tempTable.setAutoBankVerFlag(smRep.getAutomaticBankVerification());
							tempTable.setAutoBankVerDetails(smRep.getAutomaticBankVerificationDetails());
							
							if(smRep.getCancelledChequeImages() != null) {
								tempTable.setCancelledChequeImg(commonTasks.getBase64(smRep.getCancelledChequeImages()));
							}							
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							auditLogs = new FpCpAuditLogs();
							bankDet.add(tempTable);
							
						}
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDet), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
				


	}
	

	
	@PostMapping("sm/update/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> updateBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		bankDetailsMClog.info("sm/update/ Updating super merchant bank details with request data "+new Gson().toJson(bankDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		System.out.println("here in corp update");

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		int superMerId = Integer.parseInt(coId);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
			
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("sm/update/ Permission validation true");

			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameAndId(coName, superMerId);

				 if(smMerchantMasterList.size()>0)
				 {
						bankDetailsMClog.info("sm/update/ smMerchantMasterList not null");

					 FpCpBankDetailsTemp tempTable = null;
						
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							
//							Inserting the entry into temp table if does'nt exist
							
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(superMerId, 102);
							if(tempRecord != null) {
								auditLogs.setOldData(new Gson().toJson(tempRecord));
							}

							if(tempRecord == null) {
								bankDetailsMClog.info("sm/update/ temp record does not exist");

								tempTable= new FpCpBankDetailsTemp();

								tempTable.setType(102);
								tempTable.setTypeName(coName);
								tempTable.setTypeId(smRep.getId());
								tempTable.setBankAccountNumber(smRep.getCompanyBankAccountNumber());
								tempTable.setBankAccountName(smRep.getBankAccountName());
								tempTable.setBankIfscCode(smRep.getCompanyIfscCode());
								tempTable.setAutomaticBankVerification(smRep.getAutomaticBankVerification());
								tempTable.setAutomaticBankVerificationDetails(smRep.getAutomaticBankVerificationDetails());
								tempTable.setCancelledChequeImages(smRep.getCancelledChequeImages());
								tempTable.setRequestedByUser(authenticateUserResponse.getUserName());
								tempTable.setRequestedByTimestamp(new Date());
								tempTable.setRequestedByTimestamp(new Date());
								tempTable.setApprovalStatus(0);
								System.out.println(new Date());
								
								auditLogs.setOldData(new Gson().toJson(tempTable));

								
	
								System.out.println(authenticateUserResponse.getUserName());
								auditLogs = new FpCpAuditLogs();
								fpCpBankDetailsTempRepository.save(tempTable);
								
								tempRecord = tempTable;
							}
							bankDetailsMClog.info("sm/update/ temp record does exist");

							if(bankDetDataModal != null && tempRecord != null) {
								System.out.print(bankDetDataModal.getBankAccNo());
								
									if (commonTasks.check(bankDetDataModal.getBankAccName())) {
										tempRecord.setBankAccountName(bankDetDataModal.getBankAccName());
									}
									if (commonTasks.check(bankDetDataModal.getBankAccNo())) {
										tempRecord.setBankAccountNumber(bankDetDataModal.getBankAccNo());
									}
									if (commonTasks.check(bankDetDataModal.getBankIFSC())) {
										tempRecord.setBankIfscCode(bankDetDataModal.getBankIFSC());
									}
									if (bankDetDataModal.getAutoBankVerFlag() != null) {
										tempRecord.setAutomaticBankVerification(bankDetDataModal.getAutoBankVerFlag());
									}
									if (commonTasks.check(bankDetDataModal.getAutoBankVerDetails())) {
										tempRecord.setAutomaticBankVerificationDetails(bankDetDataModal.getAutoBankVerDetails());
									}
									if (commonTasks.check(bankDetDataModal.getCancelledChequeImg())) {
										tempRecord.setCancelledChequeImages(commonTasks.saveImg(bankDetDataModal.getCancelledChequeImg(),fileUtil.getProperty("cancelledChequeImgsPath")+dateAsString,request));
									}
									if (commonTasks.check(bankDetDataModal.getRequestedRemarks())) {
										tempRecord.setRequestedByRemarks(bankDetDataModal.getRequestedRemarks());
									}
									
									
										tempRecord.setRequestedByUser(authenticateUserResponse.getUserName());
										tempRecord.setRequestedByTimestamp(new Date());
										tempRecord.setApprovalStatus(0);
										System.out.println(tempRecord.getApprovalStatus());
									fpCpBankDetailsTempRepository.save(tempRecord);
									
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(2);

									auditLogs.setNewData(new Gson().toJson(tempRecord));
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
	
										
							}
							
						}
						bankDetailsMClog.info("sm/update/ to update data saved in temp table successfully");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDetDataModal), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					bankDetailsMClog.info("sm/update/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		
		else {
			bankDetailsMClog.info("sm/update/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	

	
	@GetMapping("sm/approveTable/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> approveBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		bankDetailsMClog.info("sm/approveTable/  to approve details for super merchant requested from "+fromDate+" to "+toDate);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		FpCpAuditLogs auditLogs = null;
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("sm/approveTable/  Permission validation true");

			try
			 {
				
				List<FpCpBankDetailsTemp> tempRecordZeroApproval = fpCpBankDetailsTempRepository.findByApprovalStatusAndTypeAndRequestedByTimestampBetween(0, 102, dateFormat.parse(fromDate),dateFormat.parse(toDate));
				  List<BankDetailsModel> bankDetAppr=new ArrayList<BankDetailsModel>();

				 if(tempRecordZeroApproval.size() > 0)
				 {
						bankDetailsMClog.info("sm/approveTable/  temp table record found");

					 BankDetailsModel approvalTable = null;
						
						for(FpCpBankDetailsTemp tempRecord: tempRecordZeroApproval) {	
												
							approvalTable= new BankDetailsModel();
								
							approvalTable.setType(tempRecord.getType());
							approvalTable.setTypeName(tempRecord.getTypeName());
							approvalTable.setTypeId(tempRecord.getTypeId());
							approvalTable.setBankAccNo(tempRecord.getBankAccountNumber());
							approvalTable.setBankAccName(tempRecord.getBankAccountName());
							approvalTable.setBankIFSC(tempRecord.getBankIfscCode());
							approvalTable.setAutoBankVerFlag(tempRecord.getAutomaticBankVerification());
							approvalTable.setAutoBankVerDetails(tempRecord.getAutomaticBankVerificationDetails());
							if(tempRecord.getCancelledChequeImages() != null) {
								approvalTable.setCancelledChequeImg(commonTasks.getBase64(tempRecord.getCancelledChequeImages()));
							}
							approvalTable.setRequestedUserName(tempRecord.getRequestedByUser());
							approvalTable.setRequestedUserTimestamp(tempRecord.getRequestedByTimestamp());
							approvalTable.setRequestedRemarks(tempRecord.getRequestedByRemarks());

							bankDetAppr.add(approvalTable);
	
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("BANK_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("to approve super merchant details from"+fromDate+"to"+toDate);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
	
			
						}
						bankDetailsMClog.info("sm/approveTable/  temp table records to be approved sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, bankDetAppr), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					bankDetailsMClog.info("sm/approveTable/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		
		else {
			bankDetailsMClog.info("sm/approveTable/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}		
			
		

	}
	
	@PostMapping("sm/giveApproval")
	public ResponseEntity<GeneralResponse> updateApprovedBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		bankDetailsMClog.info("sm/giveApproval/ Approving super merchant bank details sent with request data: "+new Gson().toJson(bankDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("sm/giveApproval/ Permission validation true");

			try
			 {

				 		if(bankDetDataModal != null) {
							System.out.println(bankDetDataModal.getBankAccName());

				 			
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(bankDetDataModal.getTypeId(), 102);
							List<SuperMerchantMaster> smMerchantMasterList =  superMerchantMasterRepository.findByCompanyLegalNameAndId(bankDetDataModal.getTypeName(), bankDetDataModal.getTypeId());

							// audit bug fix
							FpCpBankDetailsTemp tempRecordAudit = new FpCpBankDetailsTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(SuperMerchantMaster smRep: smMerchantMasterList) {

								 tempRecordAudit.setType(102);
								 tempRecordAudit.setTypeName(smRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(smRep.getId());
								 tempRecordAudit.setBankAccountNumber(smRep.getCompanyBankAccountNumber());
								 tempRecordAudit.setBankAccountName(smRep.getBankAccountName());
								 tempRecordAudit.setBankIfscCode(smRep.getCompanyIfscCode());
								 tempRecordAudit.setAutomaticBankVerification(smRep.getAutomaticBankVerification());
								 tempRecordAudit.setAutomaticBankVerificationDetails(smRep.getAutomaticBankVerificationDetails());
								 tempRecordAudit.setCancelledChequeImages(smRep.getCancelledChequeImages());
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(SuperMerchantMaster smRecord: smMerchantMasterList) {

									if (commonTasks.check(bankDetDataModal.getBankAccName())) {
										smRecord.setBankAccountName(bankDetDataModal.getBankAccName());
									}
//									if (commonTasks.check(bankDetDataModal.getBankAccNo())) {
//										smRecord.setCompanyBankAccountNumber(bankDetDataModal.getBankAccNo());
//									}
//									if (commonTasks.check(bankDetDataModal.getBankIFSC())) {
//										smRecord.setCompanyIfscCode(bankDetDataModal.getBankIFSC());
//									}
//									if (bankDetDataModal.getAutoBankVerFlag() != null) {
//										smRecord.setAutomaticBankVerification(bankDetDataModal.getAutoBankVerFlag());
//									}
//									if (commonTasks.check(bankDetDataModal.getAutoBankVerDetails())) {
//										smRecord.setAutomaticBankVerificationDetails(bankDetDataModal.getAutoBankVerDetails());
//									}
									
									if (commonTasks.check(bankDetDataModal.getBankAccNo(),
											bankDetDataModal.getBankIFSC())) {
										smRecord.setCompanyBankAccountNumber(bankDetDataModal.getBankAccNo());
										smRecord.setCompanyIfscCode(bankDetDataModal.getBankIFSC());
										double amount = 1.0;
										try {
										   	 HttpClient httpClient = new DefaultHttpClient();

										   	String url=	"https://fpanalytics.tapits.in/fpaepsanalytics/api/analytics/validatingBankDetails/v2/"+bankDetDataModal.getBankAccNo()+"/"+bankDetDataModal.getBankIFSC()+"/"+bankDetDataModal.getBankAccName()+"/"+authenticateUserResponse.getUserName();

											 url = url.replace(" ", "%20");

											HttpPost httpPost = new HttpPost(url);

									   	   	 httpPost.setHeader("Content-type", "application/json");
									   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
									   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
									   	   	 httpPost.setHeader("token", token);


									   	   	 String dataSent="";
											 HttpEntity entity = new ByteArrayEntity(dataSent.getBytes("UTF-8"));
											 httpPost.setEntity(entity);
											 HttpResponse responseData = httpClient.execute(httpPost);

											 
											 int responseCode = responseData.getStatusLine().getStatusCode();
										     String data ="";
												bankDetailsMClog.info("sm/giveApproval/  IMPS verfication api hit");


											 System.out.println(responseCode);
											 System.out.println(responseData);
												bankDetailsMClog.info("sm/giveApproval/  IMPS verfication response status and data: "+responseCode+" "+responseData);


											 String dataString = "";
											 
											 data = new BasicResponseHandler().handleResponse(responseData);
											 GeneralResponse impsData=gson.fromJson(data,GeneralResponse.class);
												  if(responseCode == 200)
												  {				 
//													  List<BankBulkVerificationResponseDataModel> bankOBJECT =null;
////													  BankBulkVerificationResponseDataModel bankOBJECT = null;
//													  bankOBJECT = (List<BankBulkVerificationResponseDataModel>) gson.fromJson(gson.toJson(dataObj.toString()), BankBulkVerificationResponseDataModel.class);
//													 // bankOBJECT = (List<BankBulkVerificationResponseDataModel>) dataObj;
//													  
													  	JSONParser jsonParser = new JSONParser();
														org.json.simple.JSONArray jsonArray =  (org.json.simple.JSONArray) jsonParser.parse(gson.toJson(impsData.getData()));

														JSONObject bankData=(JSONObject) jsonArray.get(0);
														BankBulkVerificationResponseDataModel	serverResponseDataModel= new Gson().fromJson(bankData.toString(), BankBulkVerificationResponseDataModel.class);
															
													  System.out.println(serverResponseDataModel.toString());
//													  smRecord.setAutomaticBankVerification(1);
//														smRecord.setAutomaticBankVerificationDetails(
//															((IMPSResponseModel) impsData.getData()).getBeneName());
//														smRecord.setRemarks(impsData.getMessage());

													  smRecord.setAutomaticBankVerification(1);
														smRecord.setAutomaticBankVerificationDetails(serverResponseDataModel.getBeneName());
														smRecord.setRemarks(impsData.getMessage());
														bankDetailsMClog.info("sm/giveApproval/  IMPS verfication successfull");

														System.out.println("IMPS Msg succ");
														  System.out.println(impsData.getMessage());
												  }
												  else {
													  smRecord.setAutomaticBankVerification(0);
													  smRecord
															.setAutomaticBankVerificationDetails((impsData.getData()).toString());
													  smRecord.setRemarks(impsData.getMessage());
														bankDetailsMClog.info("sm/giveApproval/  IMPS verfication failed");

													  System.out.println("IMPS Msg fail");
													  System.out.println(impsData.getMessage());
												  }
											
											
										} catch (Exception e) {
											e.printStackTrace();
											
										}
									}

									if (commonTasks.check(bankDetDataModal.getCancelledChequeImg())) {
										smRecord.setCancelledChequeImages(commonTasks.saveImg(bankDetDataModal.getCancelledChequeImg(),fileUtil.getProperty("cancelledChequeImgsPath")+dateAsString,request));
									}
									if (commonTasks.check(bankDetDataModal.getRequestedRemarks())) {
										smRecord.setRemarks(bankDetDataModal.getRequestedRemarks());
									}
//									if (commonTasks.check(bankDetDataModal.getRequestedUserName())) {
//										smRecord.setEditedByUsername(authenticateUserResponse.getUserName());
//									}
									
									if (bankDetDataModal.getRequestedUserTimestamp() != null) {
										smRecord.setUpdatedTimestamp(new Date());
									}	
									
									superMerchantMasterRepository.save(smRecord);
									tempRecord.setApprovalStatus(1);
									tempRecord.setApprovedRejectedByRemarks(bankDetDataModal.getRequestedRemarks());
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									fpCpBankDetailsTempRepository.save(tempRecord);

//									AUDIT LOGS

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(3);
//									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(bankDetDataModal));
									auditLogs.setApprovedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);


									
							}
							bankDetailsMClog.info("agg/giveApproval/  Super merchant master updated");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
			 
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					bankDetailsMClog.info("sm/giveApproval/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		
		else {
			bankDetailsMClog.info("sm/giveApproval/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		 	
		

	}
	
	@PostMapping("sm/giveRejection")
	public ResponseEntity<GeneralResponse> rejectApprovedBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody BankDetailsModel bankDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		bankDetailsMClog.info("sm/giveRejection/ Rejecting super merchant bank details sent with request data: "+new Gson().toJson(bankDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			bankDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_MC")|| data.getFeatureCode().equals("BANK_SW_MC") ) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("sm/giveRejection/ Permission validation true");

			try
			 {


				 		if(bankDetDataModal != null) {
							System.out.println(bankDetDataModal.getBankAccName());

				 			
							FpCpBankDetailsTemp tempRecord = fpCpBankDetailsTempRepository.findByTypeIdAndType(bankDetDataModal.getTypeId(), 102);
							List<SuperMerchantMaster> smMerchantMasterList =  superMerchantMasterRepository.findByCompanyLegalNameAndId(bankDetDataModal.getTypeName(), bankDetDataModal.getTypeId());

							// audit bug fix
							FpCpBankDetailsTemp tempRecordAudit = new FpCpBankDetailsTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(SuperMerchantMaster smRep: smMerchantMasterList) {

								 tempRecordAudit.setType(102);
								 tempRecordAudit.setTypeName(smRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(smRep.getId());
								 tempRecordAudit.setBankAccountNumber(smRep.getCompanyBankAccountNumber());
								 tempRecordAudit.setBankAccountName(smRep.getBankAccountName());
								 tempRecordAudit.setBankIfscCode(smRep.getCompanyIfscCode());
								 tempRecordAudit.setAutomaticBankVerification(smRep.getAutomaticBankVerification());
								 tempRecordAudit.setAutomaticBankVerificationDetails(smRep.getAutomaticBankVerificationDetails());
								 tempRecordAudit.setCancelledChequeImages(smRep.getCancelledChequeImages());
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(SuperMerchantMaster smRecord: smMerchantMasterList) {


									
									tempRecord.setApprovalStatus(2);
									tempRecord.setApprovedRejectedByRemarks(bankDetDataModal.getRequestedRemarks());
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									fpCpBankDetailsTempRepository.save(tempRecord);
									
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(4);
									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(bankDetDataModal));
									auditLogs.setRejectedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);


									
							}
							bankDetailsMClog.info("sm/giveRejection/  temp record status updated to rejected");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					bankDetailsMClog.info("sm/giveRejection/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		
		
		else {
			bankDetailsMClog.info("sm/giveRejection/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping(path ="/noca/balanceInfo/{accNo}")
	public ResponseEntity<GeneralResponse> getCWCommMaster(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String accNo)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("NOCA")) {
				if(data.getFeatureCode().equals("NOCA_BALANCE_FETCH")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	// HttpGet httpGet = new HttpGet("http://10.0.0.187:8080/fpcibservice/api/cib/balancefetch/"+accNo);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpaepsservice/api/proxy/balancecheck/"+accNo);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse details=gson.fromJson(listData,GeneralResponse.class);
					 list = details.getData();
				  System.out.println("list bank"+list);

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("NOCA");
					auditLogs.setFeatureId("NOCA_BALANCE_FETCH");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Noca account balance info"+accNo);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import io.jsonwebtoken.ExpiredJwtException;  
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBankDetailsTempRepository;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.data.BankBulkVerificationResponseDataModel;
import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;

@RestController
@RequestMapping(value="/api/bankDetSwitch")
public class BankDetailsSwitchController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	
//	@Autowired
//	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private FpCpBankDetailsTempRepository fpCpBankDetailsTempRepository;
	
	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;
	
	private static final Logger bankDetailsMClog = Logger.getLogger("BankDetailsMC");

	@GetMapping("agg/sm/read/{masterType}/{id}")
	public ResponseEntity<GeneralResponse> readBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String masterType, @PathVariable Integer id)
			throws UnsupportedEncodingException, ParseException {
		
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/sm/read/ Permission validation true");

			try
			 {
				//System.out.println(parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName));

				 if(commonTasks.check(masterType) && id != null)
				 {
				   	 HttpClient httpClient = HttpClientBuilder.create().build();

					 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/getbank/details/"+masterType+"/"+id);
					 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/getbank/details/"+masterType+"/"+id);
					 httpGet.setHeader("Content-type", "application/json");
					 httpGet.setHeader("User-Agent", "Mozilla/5.0");
					 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					 httpGet.setHeader("token", token);

			   	
					 HttpResponse responseData = httpClient.execute(httpGet);
					 int responseCode = responseData.getStatusLine().getStatusCode();
				     String data ="";
				     

					 System.out.println(responseCode);
					 System.out.println(responseData);

					 Object dataObj = null;
					 String msg = "";
					 
					 if(responseCode == 200)
					  {
							 data = new BasicResponseHandler().handleResponse(responseData);
							 GeneralResponse bankDet=gson.fromJson(data,GeneralResponse.class);
							 
							 dataObj = bankDet.getData();
							 msg = bankDet.getMessage();
							 
							 if(bankDet.isStatus()) {
								 	
//									AUDIT LOGS
									auditLogs = new FpCpAuditLogs();

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_SW_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
									auditLogs.setOperation(1);
									auditLogs.setViewData("bank details of "+masterType+ " and id "+id);
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
									
									bankDetailsMClog.info("agg/sm/read/ data is sent in response");

									
									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											msg,dataObj), HttpStatus.OK);
							 }
						     
							 else
							 {
								 System.out.println(" respponse was 500");
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
			
							 }
							 
					  }
					 else {
						 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
									Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
					 }
					
				 }
				 else
				 {
					 bankDetailsMClog.info("agg/sm/read/ data null is sent in response");
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
					bankDetailsMClog.info("agg/sm/read/ Exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("agg/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	
	
	@PostMapping("agg/sm/update/{flag}")
	public ResponseEntity<GeneralResponse> updateBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody String bankDetDataModal,@PathVariable Integer flag)
			throws UnsupportedEncodingException, ParseException {
		
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		
		System.out.println("permisson bank up"+permission);

		System.out.println("here in agg update");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());


		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/update/ Permission validation true");

			try
			 {
				
			   	 HttpClient httpClient = HttpClientBuilder.create().build();
				
		   	   	 // HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/save/bankdetails/temp/"+flag);
		   	   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/save/bankdetails/temp/"+flag);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=bankDetDataModal;
				 
				 System.out.println("model "+bankDetDataModal);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
//					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
						 
					 
//					AUDIT LOGS

					auditLogs.setFeatureGrpId("BANK");
					auditLogs.setFeatureId("BANK_SW_MC");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setOldData(new Gson().toJson(bankDetDataModal));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,null), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
					bankDetailsMClog.info("agg/sm/update/ exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("agg/sm/update/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	
	@GetMapping("agg/sm/newRead/{masterType}/{id}")
	public ResponseEntity<GeneralResponse> previousReadBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String masterType, @PathVariable Integer id)
			throws UnsupportedEncodingException, ParseException {
		
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/sm/newRead/ Permission validation true");

			try
			 {
				//System.out.println(parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName));

				 if(commonTasks.check(masterType) && id != null)
				 {
				   	 HttpClient httpClient = HttpClientBuilder.create().build();

					 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/getbank/details/temp/"+masterType+"/"+id);
					 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/getbank/details/temp/"+masterType+"/"+id);
					 httpGet.setHeader("Content-type", "application/json");
					 httpGet.setHeader("User-Agent", "Mozilla/5.0");
					 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
					 httpGet.setHeader("token", token);

			   	
					 HttpResponse responseData = httpClient.execute(httpGet);
					 int responseCode = responseData.getStatusLine().getStatusCode();
				     String data ="";
				     

					 System.out.println(responseCode);
					 System.out.println(responseData);

					 Object dataObj = null;
					 String msg = "";
					 
					 if(responseCode == 200)
					  {
							 data = new BasicResponseHandler().handleResponse(responseData);
							 GeneralResponse bankDet=gson.fromJson(data,GeneralResponse.class);
							 
							 dataObj = bankDet.getData();
							 msg = bankDet.getMessage();
							 
							 if(bankDet.isStatus()) {
								 	
//									AUDIT LOGS
									auditLogs = new FpCpAuditLogs();

									auditLogs.setFeatureGrpId("BANK");
									auditLogs.setFeatureId("BANK_SW_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
									auditLogs.setOperation(1);
									auditLogs.setViewData("previous bank details of "+masterType+ " and id "+id);
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
									
									bankDetailsMClog.info("agg/sm/newRead/ data is sent in response");

									
									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											msg,dataObj), HttpStatus.OK);
							 }
						     
							 else
							 {
								 System.out.println("status was false");
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
			
							 }
							 
					  }
					 else {
						 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
									Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
					 }
					
				 }
				 else
				 {
					 bankDetailsMClog.info("agg/sm/newRead/ data null is sent in response");
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
					bankDetailsMClog.info("agg/sm/newRead/ Exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			bankDetailsMClog.info("agg/sm/newRead/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	
	
	@GetMapping("agg/sm/approveTable/{masterType}/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> approveBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String fromDate, @PathVariable String toDate, @PathVariable String masterType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		FpCpAuditLogs auditLogs = null;
//		int parentId = Integer.parseInt(id);
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {	
			bankDetailsMClog.info("agg/sm/approveTable/  Permission validation true");

			try
			 {

				
			   	 HttpClient httpClient = HttpClientBuilder.create().build();
				
//			   	 yet to receive
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/toapprove/details/"+masterType+"/"+fromDate+"/"+toDate);
		   	   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/toapprove/details/"+masterType+"/"+fromDate+"/"+toDate);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
		   	   	 

	
				 System.out.println("http get set");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 String msg = "";
				 if(responseCode == 200)
				  {
						 listData = new BasicResponseHandler().handleResponse(responseData);
						 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
						 
						 list = merchRec.getData();
						 msg = merchRec.getMessage();
						 
						 if(merchRec.isStatus()) {
							 	
			//					AUDIT LOGS
			
								auditLogs.setFeatureGrpId("BANK_SW_MC");
								auditLogs.setFeatureId("BANK");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
			//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(1);
								auditLogs.setViewData("To approve bank details fetched from "+fromDate+" to "+toDate);
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
								fpCpAuditLogsRepository.save(auditLogs);
								
								return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
										msg,list), HttpStatus.OK);
						 }
					     
						 else
						 {
							 System.out.println(" respponse was 500");
					    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
		
						 }
				 }
				 else {
					 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		
		else {
			bankDetailsMClog.info("agg/sm/approveTable/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		
	}
	
	@GetMapping("agg/sm/approveTable/{masterType}")
	public ResponseEntity<GeneralResponse> approveBankDetailsTop10(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String masterType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
//		int parentId = Integer.parseInt(id);
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {	
			bankDetailsMClog.info("agg/sm/approveTable/  Permission validation true");

			try
			 {

				
			   	 HttpClient httpClient = HttpClientBuilder.create().build();
				
//			   	 yet to receive
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/toapprove/details/"+masterType);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/toapprove/details/"+masterType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
		   	   	 
	
				 System.out.println("http get set");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 String msg = "";
				 if(responseCode == 200)
				  {
						 listData = new BasicResponseHandler().handleResponse(responseData);
						 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
						 
						 list = merchRec.getData();
						 msg = merchRec.getMessage();
						 
						 if(merchRec.isStatus()) {
							 	
			//					AUDIT LOGS
			
								auditLogs.setFeatureGrpId("BANK_SW_MC");
								auditLogs.setFeatureId("BANK");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
			//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(1);
								auditLogs.setViewData("To approve bank details fetched");
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
								fpCpAuditLogsRepository.save(auditLogs);
								
								return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
										msg,list), HttpStatus.OK);
						 }
					     
						 else
						 {
							 System.out.println(" respponse was 500");
					    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
		
						 }
				 }
				 else {
					 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		
		else {
			bankDetailsMClog.info("agg/sm/approveTable/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		
	}
	@GetMapping("agg/sm/giveApproval/{masterType}/{masterId}/{approvalFlag}")
	public ResponseEntity<GeneralResponse> updateApprovedBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String masterId, @PathVariable String approvalFlag, @PathVariable String masterType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("BANK")) {
				if(data.getFeatureCode().equals("BANK_SW_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			bankDetailsMClog.info("agg/sm/giveApproval/  Permission validation true");

			try
			 {

				
			   	 HttpClient httpClient = HttpClientBuilder.create().build();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/updatebank/details/"+masterType+"/"+masterId+"/"+approvalFlag);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/bank/v1/updatebank/details/"+masterType+"/"+masterId+"/"+approvalFlag);
		   	   	httpGet.setHeader("Content-type", "application/json");
		   	   	httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	  	httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   		httpGet.setHeader("token", token);

		   	   	 System.out.println("https://fpuat.tapits.in/fpsettlementservice/api/bank/v1/updatebank/details/"+masterType+"/"+masterId+"/"+approvalFlag);
				 
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
//					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
						 
					 
//					AUDIT LOGS

					auditLogs.setFeatureGrpId("BANK");
					auditLogs.setFeatureId("BANK_SW_MC");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					if(approvalFlag == "1")
						auditLogs.setOperation(3);
					else
						auditLogs.setOperation(4);
					auditLogs.setNewData(masterId);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					bankDetailsMClog.info("agg/sm/giveApproval/  Date sent");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,null), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 
			 }
			catch(Exception e)
			 {
				bankDetailsMClog.info("agg/sm/giveApproval/  exception in server");

				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		
		else {
			bankDetailsMClog.info("agg/sm/giveApproval/  Permission validation false "+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.BlockedMerchantData;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.repository.BlockedMerchantDataRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.BlockFraudMerchantModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api")
public class BlockFraudMerchantController {

	private static final Logger log = Logger.getLogger("BlockFraudMerchantController");

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private MerchantMasterRepository merchantMasterRepository;
	
	@Autowired
	private BlockedMerchantDataRepository blockedMerchantDataRepository;

	@PostMapping(path ="/block/fraudmerchants/data")
	public ResponseEntity<GeneralResponse> blockFraudMerchants( HttpServletRequest httprequest, HttpServletResponse httpresponse, @RequestHeader("token") String token, @RequestBody String exceldata)
	{
		log.info("********************assignTerminal START********************" );
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
		ResponseEntity<GeneralResponse> response = null;
		File filereader = null;
		XSSFWorkbook xlsReader = null;
		int count = 0;
		response = checkAuthentication(token);
		if(!response.getBody().isStatus())
			return response;

		AuthenticateUserResponse auth = ((AuthenticateUserResponse)response.getBody().getData());

		String ip = commonTasks.getIpAddress(httprequest);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = auth.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("BLOCK_MERCHANTS")) {
				if(dataPerm.getFeatureCode().equals("BLOCK_FRAUD_MERCHANTS")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}

		if(permission && auth.getActiveFlag() == 1) {

			try 
			{	

				BlockFraudMerchantModel modelM = new BlockFraudMerchantModel();
				try {
					System.out.println("model enetreed");
					Gson gson = new GsonBuilder().serializeNulls().create();
					modelM = gson.fromJson(exceldata, BlockFraudMerchantModel.class);
				} catch (Exception e) {
					e.printStackTrace();
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
							HttpStatus.BAD_REQUEST);
				}
				System.out.println("model=====" + modelM.getFile());

				String docName = toFileFromBase64(modelM.getFile(), "BlockFraudMerch_"+ auth.getUserName()+"_", "xlsx" );
				System.out.println(docName);
				String path = filesUtil.getProperty("fraudMerchantsUploadPath");

				filereader = new File(path + docName);
				xlsReader = new XSSFWorkbook(filereader); 
				for(int xls = 0; xls < xlsReader.getNumberOfSheets();xls++)
				{
					System.out.println("Sheet started reading:"+xls);				
					XSSFSheet sheet = xlsReader.getSheetAt(xls);
					Iterator<Row> itr = sheet.iterator();
					while(itr.hasNext())
					{
						Row row = itr.next();
						count=readXlsRecord(row,count);						
					}

					System.out.println("Count:"+ count);
				}

				auditLogs.setFeatureGrpId("BLOCK_MERCHANTS");
				auditLogs.setFeatureId("BLOCK_FRAUD_MERCHANTS");
				auditLogs.setUserName(auth.getUserName());
				//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				auditLogs.setOperation(2);
				auditLogs.setNewData("Fraud Merchants upload");
				//			auditLogs.setNewData(new Gson().toJson(merchantData));
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						"Block Merchants:"+ count, Constants.CORRECT_STATUS_CODE, null), HttpStatus.OK);
			}catch(Exception e){
				e.printStackTrace();
				log.info("eKyc Exception occured Update Terminal ID :"+e.getMessage());
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						e.getMessage(), Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
			}
			finally
			{
				try {
					if (xlsReader != null)
						xlsReader.close();
				}
				catch (IOException ex) {
					System.out.println("Exception occured at XSSFWorkbook Reader line");
					ex.printStackTrace();
				}
			}
		}else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	public int readXlsRecord(Row row,int count)
	{
		try{
			if(row != null)
			{
				if(row.getRowNum() == 0)
					System.out.println("Header:"+row);
				else
				{
					log.info("EXCEL ROW NO:"+(count+1)+"--ROW: "+row.getFirstCellNum());
					BlockedMerchantData data = new BlockedMerchantData();
					data.setMerchantLoginId(!isCellEmpty(row.getCell(2)) ? row.getCell(2).toString() : null);
					List<MerchantMaster> mList = merchantMasterRepository.findByActiveFlagAndMerchantLoginId(1,data.getMerchantLoginId());
					if(mList != null && !mList.isEmpty() && mList.size() > 0)
					{
						MerchantMaster merchantDetails = mList.get(0);
						data.setSuperMerchantId(merchantDetails.getSuperMerchantMaster().getId());
						data.setParentId(merchantDetails.getSuperMerchantMaster().getParentId());
						data.setPan(!isCellEmpty(row.getCell(4)) ? row.getCell(4).toString() : null);
						data.setBlockedTime(new Date());
						data.setLastUsedHash(merchantDetails.getLastUsedHash());
						data.setAadharNumber(!isCellEmpty(row.getCell(5)) ? row.getCell(5).toString() : null);
						data.setDeviceImeiNo(!isCellEmpty(row.getCell(7)) ? row.getCell(7).toString() : null);
						data.setBiometricDeviceSerialNumber(!isCellEmpty(row.getCell(8)) ? row.getCell(8).toString() : null);
						data.setMobileNumber(!isCellEmpty(row.getCell(9)) ?  Double.valueOf(row.getCell(9).toString()).longValue()+"" : null);
						data.setDrivingLicense(!isCellEmpty(row.getCell(10)) ? row.getCell(10).toString() : null);
						data.setVoterId(!isCellEmpty(row.getCell(11)) ? row.getCell(11).toString() : null);
						data.setBankAccountNumber(!isCellEmpty(row.getCell(12)) ? Double.valueOf(row.getCell(12).toString()).longValue()+"" : null);
						data.setBankIfscCode(!isCellEmpty(row.getCell(13)) ? row.getCell(13).toString() : null);
						data.setBlockedBy(!isCellEmpty(row.getCell(14)) ? row.getCell(14).toString() : null);
						
						data.setRemarks("Your not authorized");
						blockedMerchantDataRepository.save(data);
						count++;
					}else{
						System.out.println("Merchant List is mepty for IDL: "+ data.getMerchantLoginId());
						data.setPan(!isCellEmpty(row.getCell(4)) ? row.getCell(4).toString() : null);
						data.setAadharNumber(!isCellEmpty(row.getCell(5)) ? row.getCell(5).toString() : null);
						data.setLastUsedHash(!isCellEmpty(row.getCell(6)) ? row.getCell(6).toString() : null);
						data.setDeviceImeiNo(!isCellEmpty(row.getCell(7)) ? row.getCell(7).toString() : null);
						data.setBiometricDeviceSerialNumber(!isCellEmpty(row.getCell(8)) ? row.getCell(8).toString() : null);
						data.setMobileNumber(!isCellEmpty(row.getCell(9)) ? Double.valueOf(row.getCell(9).toString()).longValue()+"" : null);
						data.setDrivingLicense(!isCellEmpty(row.getCell(10)) ? row.getCell(10).toString() : null);
						data.setVoterId(!isCellEmpty(row.getCell(11)) ? row.getCell(11).toString() : null);
						data.setBankAccountNumber(!isCellEmpty(row.getCell(12)) ? Double.valueOf(row.getCell(12).toString()).longValue()+"" : null);
						data.setBankIfscCode(!isCellEmpty(row.getCell(13)) ? row.getCell(13).toString() : null);
						data.setBlockedBy(!isCellEmpty(row.getCell(14)) ? row.getCell(14).toString() : null);
						
						data.setBlockedTime(new Date());
						data.setRemarks("Your not authorized");
						blockedMerchantDataRepository.save(data);
					}
					
				}
			}
			else
			{
				System.out.println("Row is Empty");

			}
			return count;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			System.out.println("Error Occured in readRecord at ROW:"+ (!isCellEmpty(row.getCell(2)) ? row.getCell(2).toString() : null)+" -"+ e.getMessage());
		}
		return count;
	}

	public boolean isCellEmpty(Cell cell)
	{
		if(cell == null || cell.getCellType() == Cell.CELL_TYPE_BLANK)
		{
			return true;
		}
		else
			return false;
	}

	public String toFileFromBase64(String pic,String mName,String ext)
	{
		String extension = ext;
		String path = filesUtil.getProperty("fraudMerchantsUploadPath");
		System.out.println("NEW PATH: " + path);
		System.out.println(pic+"===pic");
		File fileImg = new File(path);
		fileImg.mkdirs();


		byte[] imgBytes = Base64.decodeBase64(pic);
		System.out.println("imgBytes==="+imgBytes);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension).trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Exception Occured: "+ e.getMessage());
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	
	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;


import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.math.BigInteger;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.xml.bind.DatatypeConverter;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.DateUtil;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.AadharPayBankDetailsMasterData;
import com.apptmyz.fpaepsdb.entity.BankDetailsMasterData;
import com.apptmyz.fpaepsdb.entity.BranchMaster;
import com.apptmyz.fpaepsdb.entity.BranchRoleMaster;
import com.apptmyz.fpaepsdb.entity.CommissionSlabs;
import com.apptmyz.fpaepsdb.entity.CorporateUser;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.MerchantSettlementChargesInfo;
import com.apptmyz.fpaepsdb.entity.MerchantSettlementSlabs;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.StateMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SvatantraAadharPayBankDetailsMasterData;
import com.apptmyz.fpaepsdb.entity.SvatantraAepsBankDetailsMasterData;
import com.apptmyz.fpaepsdb.repository.AadharPayBankDetailsMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.BankDetailsMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.BranchMasterRepository;
import com.apptmyz.fpaepsdb.repository.BranchRoleMasterRepository;
import com.apptmyz.fpaepsdb.repository.CommissionSlabsRepository;
import com.apptmyz.fpaepsdb.repository.CorporateUserRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.MerchantSettlementChargesInfoRepository;
import com.apptmyz.fpaepsdb.repository.MerchantSettlementSlabsRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SvatantraAadharPayBankDetailsMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.SvatantraAepsBankDetailsMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.TerminalMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.TerminalStateMapRepository;
import com.apptmyz.fpcontrolpanel.data.BranchMasterModel;
import com.apptmyz.fpcontrolpanel.data.CommSlabsModel;
import com.apptmyz.fpcontrolpanel.data.BulkFileFormatUploadModel;
import com.apptmyz.fpcontrolpanel.data.CorporateUserModelUploadDataModel;
import com.apptmyz.fpcontrolpanel.data.ExcelUpload;
import com.apptmyz.fpcontrolpanel.data.MerchantMasterModal;
import com.apptmyz.fpcontrolpanel.data.MerchantOnBoardingResponseModel;
import com.apptmyz.fpcontrolpanel.data.MerchantOnboardingExcel;
import com.apptmyz.fpcontrolpanel.data.MerchantSettlEnableLimits;
import com.apptmyz.fpcontrolpanel.data.SettlChargesModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.data.ValidateMandatoryFieldsResponseDataModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpProxyUrlRouteData;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.fingpay.fpekycdatadb.entity.EkycAuditInfoData;
import com.fingpay.fpekycdatadb.entity.EkycInfoData;
import com.fingpay.fpekycdatadb.repository.EkycInfoDataRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import me.xdrop.fuzzywuzzy.FuzzySearch;

@RestController
@RequestMapping(value = "/api/bulkUpload")
public class BulkUploadController {

	private static final Logger log = Logger.getLogger("BulkUploadController");
	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FilesUtil fileUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private StateMasterRepository stateMasterRepository;

	@Autowired
	private MerchantSettlementChargesInfoRepository merchantSettlementChargesInfoRepository;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private BankDetailsMasterDataRepository bankDetailsMasterDataRepository;

	@Autowired
	private CommissionSlabsRepository commissionSlabsRepository;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private TerminalStateMapRepository terminalMerchantMapRepository;

	@Autowired
	private TerminalMasterDataRepository terminalMasterDataRepository;

	@Autowired
	private MerchantMasterRepository merchantMasterRepository;

	@Autowired
	private BranchMasterRepository branchMasterRepository;

	@Autowired
	private MerchantSettlementSlabsRepository merchantSettlementSlabsRepository;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private CorporateUserRepository corporateUserRepository;

	@Autowired
	private BranchRoleMasterRepository branchRoleMasterRepository;

	@Autowired
	private SvatantraAepsBankDetailsMasterDataRepository svatantraAepsBankDetailsMasterDataRepository;

	@Autowired
	private SvatantraAadharPayBankDetailsMasterDataRepository svatantraAadharPayBankDetailsMasterDataRepository;

	@Autowired
	private AadharPayBankDetailsMasterDataRepository aadharPayBankDetailsMasterDataRepository;

	@Autowired
	private EkycInfoDataRepository ekycInfoDataRepository;
	
	@PostMapping("/merchantOnboarding/Excel")
	public ResponseEntity<GeneralResponse> merchantOnboarding(HttpServletRequest request,

			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			System.out.println("responseee====" + data);
			MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "merchantBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();

			List<StateMaster> states=(List<StateMaster>) stateMasterRepository.findAll();

			Map<String ,StateMaster> stateMap=new HashMap<String,StateMaster>();
			for(StateMaster s:states)
			{
				stateMap.put(s.getState(), s); 
			}
			ValidateMandatoryFieldsResponseDataModel validate=null;
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			Integer superMerchantId=Integer.parseInt(objDefaultFormat.formatCellValue(sheet.getRow(1).getCell(61),objFormulaEvaluator));
			SuperMerchantMaster superMerchant=superMerchantMasterRepository.findOne(superMerchantId);

			Map<String,MerchantMaster> marchantMap=new HashMap<String, MerchantMaster>();
			List<MerchantMaster> merchList=merchantMasterRepository.findBySuperMerchantMasterId(superMerchantId);
			for (MerchantMaster m : merchList) {
				marchantMap.put(m.getMerchantLoginId().toLowerCase(), m);
			}

			Row row;
			List<MerchantMasterModal> lists = new ArrayList<MerchantMasterModal>();

			List<MerchantMaster> merchantList=new ArrayList<MerchantMaster>();

			MerchantMaster merchantData=null;
			MerchantMasterModal model=null;
			try
			{
				for (int i = 1; i <= sheet.getLastRowNum(); i++) {
					row = sheet.getRow(i);
					System.out.println("sheet row"+sheet.getLastRowNum());

					System.out.println("login id="+objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
					System.out.println("aadhaarpay="+objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator));

					if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).compareTo("")!=0)
					{

						if(!marchantMap.containsKey(objDefaultFormat.formatCellValue(row.getCell(0)).trim().toLowerCase()))
						{
							model=new MerchantMasterModal();
							MerchantMaster merchantMaster = new MerchantMaster();
							merchantMaster.setSuperMerchantMaster(superMerchant); 
							System.out.println(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
							if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
							}
							else
							{
								model.setFlag(1);
								model.setRemarks("Invalid Merchant Login Id");
							}
							if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
							}
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Name");
								}
								else
								{
									model.setRemarks("Invalid Merchant Name");
								}
							}
							if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantLoginPin(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", "")));
								model.setMerchantLoginPin(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)));
							}
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Pin");
								}
								else
								{
									model.setRemarks("Invalid Merchant Pin");
								}
							}
							if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator));
							}
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Address");
								}
								else
								{
									model.setRemarks("Invalid Merchant Address");
								}
							}
							if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).compareTo("")!=0)
							{
								System.out.println(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator));
								merchantMaster.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator));
								System.out.println("saved phone num");
							}
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Phone Number");
								}
								else
								{
									model.setRemarks("Invalid Merchant Phone Number");
								}
							}

							if(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator)!=null&& objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator).compareTo("")!=0 )
							{
								merchantMaster.setMerchantPincode(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								//model.setSuperMerchantId(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator)));
								model.setMerchantPinCode(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator));
							} 
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Pin Code");
								}
								else
								{
									model.setRemarks("Invalid Merchant Pin Code");
								}
							}

							if(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantCityName(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantCityName(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));

							}
							if(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)!=null&& objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator).compareTo("")!=0 )
							{
								if(stateMap.containsKey(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)))
								{
									merchantMaster.setStateMaster(stateMap.get(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator).replaceAll("\\p{C}", "")));
								} 
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Merchant state");
									}
									else
									{
										model.setRemarks("Invalid Merchant state");
									}
								}
							}
							else
							{
								model.setFlag(1);
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant state");
								}
								else
								{
									model.setRemarks("Invalid Merchant state");
								}
							}

							if(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setUserPan(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setUserPan(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator));

								merchantMaster.setApprovedStatus(1);
								merchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
								merchantMaster.setCreatedIpAddress(ip);
								merchantMaster.setCreatedTimestamp(new Date());
								model.setApprovedStatus(1);
								merchantMaster.setTimestamp(new Date());
								model.setTimestamp(new Date());
								merchantMaster.setActiveFlag(1);
								model.setActiveFlag(1);
								model.setStatus("Merchant Successfully Created");

								//							AUDIT LOGS

								auditLogs.setFeatureGrpId("ONBOARDING");
								auditLogs.setFeatureId("ONBOARDING_CRU");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
								//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(5);
								auditLogs.setNewData("Merchants bulk upload");
								//							auditLogs.setNewData(new Gson().toJson(merchantMaster));
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
								fpCpAuditLogsRepository.save(auditLogs);
							}
							else
							{
								model.setFlag(1);
								model.setStatus("Merchant Creation Failed, Please Check Remarks");
								if(model.getRemarks()!=null)
								{
									model.setRemarks(model.getRemarks()+" ,Invalid Merchant Pan");
								}
								else
								{
									model.setRemarks("Invalid Merchant Pan");
								}
							}

							if(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setCompanyLegalName(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setCompanyLegalName(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setCompanyMarketingName(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setCompanyMarketingName(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setEmailId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setEmailId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator));
							}

							if(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setGstInNumber(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setGstInNumber(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator).compareTo("")!=0)
							{
								System.out.println("aadhaar pay enable="+objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator));
								merchantMaster.setAadharPayEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)));
								model.setAadharPayEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setUpiEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)));
								model.setUpiEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setUpiQrEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)));
								model.setUpiQrEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setCashWithdrawEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)));
								model.setCashWithdrawEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setFundTransferEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)));
								model.setFundTransferEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setCashDepositEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)));
								model.setCashDepositEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setBalanceEnquiryEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)));
								model.setBalanceEnquiryEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMinistatmentEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)));
								model.setMinistatmentEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)));
							}

							if(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setMerchantDistrictName(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator));
								model.setMerchantDistrictName(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator)); 
							}
							if(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantMaster.setRemarks(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator));
								model.setRemarks(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator)); 
							}
							System.out.println("********************");


							validate=new ValidateMandatoryFieldsResponseDataModel();
							validate=commonTasks.validateMandatoryFieldsForExcelMerchntOnboarding(model);
							System.out.println("result :"+validate.isValid() + " : "+validate.getMessage());
							if(validate.isValid() == true) {

								merchantList.add(merchantMaster);

								//merchantMasterRepository.save(merchantMaster);
							}else {
								model.setStatus("Failed To Create Merchant");
								System.out.println("else :"+validate.getMessage());
							}
							lists.add(model);
						}
						else
						{
							merchantData=marchantMap.get(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().toLowerCase());
							model=new MerchantMasterModal();

							//						auditLogs.setOldData(new Gson().toJson(merchantData));

							if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).compareTo("")!=0)
							{
								model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMerchantLoginPin(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
								model.setMerchantLoginPin(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).compareTo("")!=0)
							{
								System.out.println(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator));
								merchantData.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator));
								System.out.println("saved phone num");
							}
							if(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMerchantCityName(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantCityName(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));

							}
							if(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setCompanyLegalName(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setCompanyLegalName(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setCompanyMarketingName(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator));
								model.setCompanyMarketingName(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setEmailId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setEmailId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setUserPan(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setUserPan(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(36),objFormulaEvaluator));
							}

							if(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setGstInNumber(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setGstInNumber(objDefaultFormat.formatCellValue(row.getCell(33),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator).compareTo("")!=0)
							{
								System.out.println("aadhaar pay enable="+objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator));
								merchantData.setAadharPayEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)));
								model.setAadharPayEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(53),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setUpiEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)));
								model.setUpiEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(54),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setUpiQrEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)));
								model.setUpiQrEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(55),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setCashWithdrawEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)));
								model.setCashWithdrawEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(56),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setFundTransferEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)));
								model.setFundTransferEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(57),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setCashDepositEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)));
								model.setCashDepositEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(58),objFormulaEvaluator)));
							}

							if(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setBalanceEnquiryEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)));
								model.setBalanceEnquiryEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(59),objFormulaEvaluator)));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMinistatmentEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)));
								model.setMinistatmentEnable(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(60),objFormulaEvaluator)));
							} 
							merchantData.setSuperMerchantMaster(superMerchant);
							if(superMerchant.getParentId() != null)
								merchantData.setParentId(superMerchant.getParentId());
							/*if(objDefaultFormat.formatCellValue(row.getCell(61),objFormulaEvaluator)!=null&& objDefaultFormat.formatCellValue(row.getCell(61),objFormulaEvaluator).compareTo("")!=0 )
						{
							int superuserId=Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(61),objFormulaEvaluator));
							SuperMerchantMaster s=superMerchantMasterRepository.findOne(superuserId);
							merchantData.setSuperMerchantMaster(s);
						 	model.setSuperMerchantId(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(61),objFormulaEvaluator)));
						}*/
							if(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator)!=null&& objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator).compareTo("")!=0 )
							{
								merchantData.setMerchantPincode(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator));
								model.setSuperMerchantId(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator)));
								model.setMerchantPinCode(objDefaultFormat.formatCellValue(row.getCell(64),objFormulaEvaluator));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)!=null&& objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator).compareTo("")!=0 )
							{
								if(stateMap.containsKey(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)))
								{
									merchantData.setStateMaster(stateMap.get(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)));
								} 
							}

							if(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setMerchantDistrictName(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								model.setMerchantDistrictName(objDefaultFormat.formatCellValue(row.getCell(65),objFormulaEvaluator)); 
							}
							if(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator).compareTo("")!=0)
							{
								merchantData.setRemarks(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator));
								model.setRemarks(objDefaultFormat.formatCellValue(row.getCell(35),objFormulaEvaluator)); 
							}
							merchantData.setEditedByUsername(authenticateUserResponse.getUserName()); 
							merchantData.setEditedTimestamp(new Date());
							model.setActiveFlag(merchantData.getActiveFlag());
							//						merchantData.setMerchantFranchiseId("fingpay"+String.format("%08d", merchantData.getId()));
							validate=new ValidateMandatoryFieldsResponseDataModel();
							validate=commonTasks.validateMandatoryFieldsForExcelMerchntOnboarding(model);
							System.out.println("result :"+validate.isValid() + " : "+validate.getMessage());
							if(validate.isValid() == true) {

								merchantList.add(merchantData);

								//merchantMasterRepository.save(merchantData);

								model.setStatus("Merchant Details Updated Successfully");

								//							AUDIT LOGS

								auditLogs.setFeatureGrpId("ONBOARDING");
								auditLogs.setFeatureId("ONBOARDING_CRU");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
								//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(2);
								auditLogs.setNewData("Merchants bulk upload");
								//							auditLogs.setNewData(new Gson().toJson(merchantData));
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
								fpCpAuditLogsRepository.save(auditLogs);

							}else {
								model.setRemarks(validate.getMessage());
								model.setStatus("Faild To Update The Merchant");
							} 

							lists.add(model);
						}
					}

					if(merchantList!= null && merchantList.size()  == 100) {
						System.out.println("size :"+merchantList.size());

						merchantMasterRepository.save(merchantList);
						merchantList.clear();
					}  
				}
				if(merchantList!= null && merchantList.size() < 100) {
					System.out.println("size :"+merchantList.size());
					merchantMasterRepository.save(merchantList);
				}
				return new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.SUCCESSFUL, lists),HttpStatus.OK);
			}
			catch(Exception e)
			{
				e.printStackTrace();
				return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null),HttpStatus.OK); 

			}  

		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@PostMapping("/branch/Excel")
	public ResponseEntity<GeneralResponse> branchUpload( HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token
			,@RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "branchBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			Row row;
			List<BranchMasterModel> list = new ArrayList<>();
			BranchMasterModel branchMasterModel = null;
			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				System.out.println(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));

				try {
					//				model=new MerchantMasterModal();
					MerchantMaster merchantMaster = null;
					BranchMaster branch=null;
					//0 id,1 activeflag
					if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
						System.out.println("branch login id : "+objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator));
						branch=branchMasterRepository.findByBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim());
					}
					if(branch==null) {
						BranchMaster branchMaster=new BranchMaster();
						if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
							branchMaster.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null) {
							branchMaster.setBranchLoginPassword(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
							branchMaster.setBranchName(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						}
						//4,5,6,7,8,9,10 created ip,timestamp,username, edited ip,timestamp,username,remarks
						if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null) {
							branchMaster.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null) {
							branchMaster.setSubBranchName(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null) {
							branchMaster.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						}
						//14,15 timestamp,updated timestamp
						if(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator)!=null) {
							branchMaster.setBranchRoleMaster(branchRoleMasterRepository.findOne(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator))));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(17),objFormulaEvaluator)!=null) {
							branchMaster.setSuperMerchantMaster(superMerchantMasterRepository.findOne(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(17),objFormulaEvaluator))));
						}
						if(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator)!=null) {
							branchMaster.setParentMerchantMaster(parentMerchantMasterRepository.findOne(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator))));
						}	
						if(objDefaultFormat.formatCellValue(row.getCell(20),objFormulaEvaluator)!=null) {

							branchMaster.setEmailId(objDefaultFormat.formatCellValue(row.getCell(20),objFormulaEvaluator).replaceAll("\\p{C}", ""));;
						}
						branchMaster.setCreatedIpAddress(ip);
						branchMaster.setCreatedTimestamp(new Date());
						branchMaster.setCreatedUsername(authenticateUserResponse.getUserName());
						branchMaster.setActiveFlag(1);
						branchMaster.setRemarks("bulk upload");
						branchMasterRepository.save(branchMaster);

						//					AUDIT LOGS

						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(5);
						auditLogs.setNewData("Branch Bulk Upload");
						//					auditLogs.setNewData(new Gson().toJson(branchMaster));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);
						try {
							if(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator)!=null) {
								merchantMaster=merchantMasterRepository.findByMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
							}
							if(merchantMaster!=null) {
								merchantMaster.setBranchMaster(branchMaster);
								merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
								merchantMaster.setEditedIpAddress(ip);
								merchantMaster.setEditedTimestamp(new Date());
								merchantMasterRepository.save(merchantMaster);
							}
						}catch(Exception e) {
							try {
								merchantMaster=merchantMasterRepository.findByMerchantLoginIdAndActiveFlag(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""),1);
								if(merchantMaster!=null) {
									merchantMaster.setBranchMaster(branchMaster);
									merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
									merchantMaster.setEditedIpAddress(ip);
									merchantMaster.setEditedTimestamp(new Date());
									merchantMasterRepository.save(merchantMaster);
								}
							}catch(Exception s) {
								s.printStackTrace();
								if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginPassword(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchName(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								//4,5,6,7,8,9,10 created ip,timestamp,username, edited ip,timestamp,username,remarks
								if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchName(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								branchMasterModel.setRemarks("more than one merchant login id");
								branchMasterModel.setActiveFlag(0);
								list.add(branchMasterModel);
							}
						}
						System.out.println("succesfully created");
					}else {
						try {
							if(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator)!=null) {
								merchantMaster=merchantMasterRepository.findByMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
							}else {
								branchMasterModel = new BranchMasterModel();
								if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginPassword(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchName(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								//4,5,6,7,8,9,10 created ip,timestamp,username, edited ip,timestamp,username,remarks
								if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchName(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								branchMasterModel.setRemarks("branch login id already exists");
								branchMasterModel.setActiveFlag(0);
								list.add(branchMasterModel);
							}
							if(merchantMaster!=null) {
								merchantMaster.setBranchMaster(branch);
								merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
								merchantMaster.setEditedIpAddress(ip);
								merchantMaster.setEditedTimestamp(new Date());
								merchantMasterRepository.save(merchantMaster);

							}
						}catch(Exception e) {
							try {
								merchantMaster=merchantMasterRepository.findByMerchantLoginIdAndActiveFlag(objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator).trim(),1);
								if(merchantMaster!=null) {
									merchantMaster.setBranchMaster(branch);
									merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
									merchantMaster.setEditedIpAddress(ip);
									merchantMaster.setEditedTimestamp(new Date());
									merchantMasterRepository.save(merchantMaster);
								}
							}catch(Exception s) {
								s.printStackTrace();
								if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchLoginPassword(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
									branchMasterModel.setBranchName(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								//4,5,6,7,8,9,10 created ip,timestamp,username, edited ip,timestamp,username,remarks
								if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchName(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null) {
									branchMasterModel.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
								}
								branchMasterModel.setRemarks("more than one merchant login id");
								branchMasterModel.setActiveFlag(0);
								list.add(branchMasterModel);
							}
						}
					}
					System.out.println("********************");

				}catch(Exception e) {
					e.printStackTrace();
					branchMasterModel = new BranchMasterModel();
					if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
						branchMasterModel.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
					}
					if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null) {
						branchMasterModel.setBranchLoginPassword(commonTasks.md5(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)).replaceAll("\\p{C}", ""));
					}
					if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
						branchMasterModel.setBranchName(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}
					//4,5,6,7,8,9,10 created ip,timestamp,username, edited ip,timestamp,username,remarks
					if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null) {
						branchMasterModel.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}
					if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null) {
						branchMasterModel.setSubBranchName(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}
					if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null) {
						branchMasterModel.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}
					branchMasterModel.setRemarks("more than one branch login id");
					branchMasterModel.setActiveFlag(0);
					list.add(branchMasterModel);
				}
			}
			System.out.println(list.size()+"===list size");
			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, list),HttpStatus.OK);
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@PostMapping("/kotak/merchantOnboarding/Excel")
	public ResponseEntity<GeneralResponse> kotakMerchantOnboarding(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			System.out.println("responseee====" + data);
			MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "merchantBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			Row row;
			HashMap<String,StateMaster> stateMap=new HashMap<String,StateMaster>();
			Iterable<StateMaster> st=stateMasterRepository.findAll();
			for(StateMaster s:st)
			{
				stateMap.put(s.getState(), s);
			}
			List<MerchantMasterModal> lists = new ArrayList<MerchantMasterModal>();
			MerchantMasterModal model=null;
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).equals("") && !objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).equals("NULL"))
				{
					if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("") && !objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("NULL"))
						System.out.println("Row:"+i);
					List<MerchantMaster> merchantList=merchantMasterRepository.findByActiveFlagAndMerchantLoginId(1, objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).trim());
					if(merchantList.size()==1 || merchantList.size()==0 )
					{

						MerchantMaster merchantData=merchantMasterRepository.findByMerchantLoginIdAndActiveFlagAndSuperMerchantMasterId(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).trim(),1,Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)));
						if(merchantData!=null)
						{

							//					auditLogs.setOldData(new Gson().toJson(merchantData));

							if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null)
							{
								merchantData.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null)
							{
								merchantData.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator)!=null)
							{
								merchantData.setMerchantPincode(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)!=null)
							{
								if(stateMap.containsKey(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)))
								{
									merchantData.setStateMaster(stateMap.get(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)));
								}
							}
							if(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator)!=null)
							{
								merchantData.setUserPan(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator)!=null)
							{
								merchantData.setGstInNumber(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator)!=null)
							{
								merchantData.setEmailId(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null)
							{
								merchantData.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							merchantData.setEditedTimestamp(new Date());
							if(merchantData.getEditedByUsername()!=null)
							{
								merchantData.setEditedByUsername(merchantData.getEditedByUsername()+", "+authenticateUserResponse.getUserName());
							}
							else
							{
								merchantData.setEditedByUsername(authenticateUserResponse.getUserName());
							}
							//					merchantData.setMerchantFranchiseId("fingpay"+String.format("%08d", merchantData.getId()));
							merchantMasterRepository.save(merchantData);
							model=new MerchantMasterModal();
							model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator));
							model.setRemarks("updated");
							model.setStatus("Success");
							lists.add(model);

							//					AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(2);
							auditLogs.setNewData("Kotak Merchant Bulk Upload");
							//					auditLogs.setNewData(new Gson().toJson(merchantData));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
						}
						else
						{
							model=new MerchantMasterModal();
							model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).trim());
							model.setRemarks("No record Found");
							model.setStatus("Failed");
							lists.add(model);
						}
					}
					else
					{
						model=new MerchantMasterModal();
						model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).trim());
						model.setRemarks("More than one record");
						model.setStatus("Failed");
						lists.add(model);
						System.out.println("*****************************Merchant loginid:"+objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)+"   "+"merchant list size:"+merchantList.size()+"Row Number:"+i);
					}
				}
			}

			System.out.println(lists.size()+"===list size");
			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, lists),HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@PostMapping("/deleteTerminalsmap") 
	public ResponseEntity<GeneralResponse> deleteMerchantTerminalMap( HttpServletRequest request,HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String data){
		AuthenticateUserResponse authenticateUserResponse = null;
		Logger logger = Logger.getLogger("TerminalsRecycling");
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
		try {
			System.out.println("model enetreed");
			Gson gson = new GsonBuilder().serializeNulls().create();
			modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
		} catch (Exception e) {
			e.printStackTrace();
			logger.info(e);
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);


		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermDelete() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			try {
				String docName = commonTasks.toImgFromBase64(modelM.getFile(), "Terminals_recycle_" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
				System.out.println(docName);
				String path = fileUtil.getProperty("documentUploadPath");
				logger.info("path :"+path + docName);
				FileInputStream inputStream = new FileInputStream(new File(path + docName));

				XSSFWorkbook workbook=null;
				try {  
					workbook = new XSSFWorkbook(inputStream);
				} catch (IOException e) {
					e.printStackTrace();
				}

				XSSFSheet sheet = workbook.getSheetAt(0);
				Row row = null;
				for (int i = 1; i <= sheet.getLastRowNum(); i++) {
					row = sheet.getRow(i); 
					if(row.getCell(0) != null) {
						Cell c = row.getCell(0);
						String terminal = c.toString();
						System.out.println("terminal :"+terminal);
						logger.info("terminal :"+terminal);
						int tc = terminalMasterDataRepository.makeConsumedZero(terminal);
						if(tc > 0) { 
							System.out.println("updated to 0 ");
							logger.info("updated to 0 ");
							int count =  terminalMerchantMapRepository.deleteFromTerminalMap( terminal);

							//							AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(6);
							auditLogs.setNewData("Recycled terminals");
							//							auditLogs.setOldData(new Gson().toJson(terminal));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

							if(count > 0) {
								System.out.println("Deleted");
								logger.info("Deleted");
							} 
						}
					}  
				}
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED,  "Terminals has been recycled."),
						HttpStatus.OK);

			}catch (Exception e) {
				e.printStackTrace();
				logger.info(e);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,	Constants.ERRORS_EXCEPTION_IN_SERVER,  null),
						HttpStatus.OK);
			}
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	//	svatantra bulk upload
	@PostMapping("/svatantraMerchant/Excel")
	public ResponseEntity<GeneralResponse> merchantbranchUpload( HttpServletRequest request,HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token
			,@RequestBody String data) throws IOException{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "branchBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			BranchMaster branchMaster=null;
			MerchantMaster merchantMaster=null;
			List<MerchantOnBoardingResponseModel> responseModelList = new ArrayList<MerchantOnBoardingResponseModel>();
			MerchantOnBoardingResponseModel model=null;
			Row row;
			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				System.out.println(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
				model=new MerchantOnBoardingResponseModel();
				boolean status=true;
				try {
					if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator) == null || !objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().isEmpty()) {
						status=false;
						model.setRemarks("Branch login Id");
					}
					if(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator) == null || !objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).trim().isEmpty()) {
						status=false;
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+"Merchant login Id" : "Merchant login Id");
					}
					model.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
					model.setBranchLoginPassword(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					model.setBranchName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					model.setBranchAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					model.setBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					model.setEmailId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					model.setSuperMerchantId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator));
					if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator) != null && objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator) != null)
					{
						branchMaster = branchMasterRepository.findByBranchLoginIdIgnoreCase(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim());
						if(branchMaster==null) {
							branchMaster=new BranchMaster();
							if(model.getBranchLoginId()!=null) {
								branchMaster.setBranchLoginId(model.getBranchLoginId().replaceAll("\\p{C}", ""));

							}
							if(model.getBranchLoginPassword()!=null) {
								branchMaster.setBranchLoginPassword(commonTasks.md5(model.getBranchLoginPassword()).replaceAll("\\p{C}", ""));
							}
							if(model.getBranchName() != null) {
								branchMaster.setBranchName(model.getBranchName().replaceAll("\\p{C}", ""));
							}
							if(model.getBranchAddress()!=null) {
								branchMaster.setSubBranchAddress(model.getBranchAddress().replaceAll("\\p{C}", ""));
							}
							if(model.getBranchPhoneNumber() != null) {
								branchMaster.setSubBranchPhoneNumber(model.getBranchPhoneNumber().replaceAll("\\p{C}", ""));
							}
							if(model.getEmailId() != null) {
								branchMaster.setEmailId(model.getEmailId().replaceAll("\\p{C}", ""));
							}
							//						if(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator)!=null) {
							//							branchMaster.setGroupNumber(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator));
							//						}
							//						if(objDefaultFormat.formatCellValue(row.getCell(15),objFormulaEvaluator)!=null) {
							//							branchMaster.setLatitude(Double.parseDouble(objDefaultFormat.formatCellValue(row.getCell(15),objFormulaEvaluator)));
							//						}
							//						if(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator)!=null) {
							//							branchMaster.setLongitude(Double.parseDouble(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator)));
							//						}
							model.setSuperMerchantId(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator));
							if(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator)!=null) {
								branchMaster.setSuperMerchantMaster(superMerchantMasterRepository.findOne(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator))));
							}
							if(branchMaster.getSuperMerchantMaster()!=null){
								branchMaster.setParentMerchantMaster(parentMerchantMasterRepository.findOne(branchMaster.getSuperMerchantMaster().getParentId())== null? null:parentMerchantMasterRepository.findOne(branchMaster.getSuperMerchantMaster().getParentId()) );
							}
							branchMaster.setBranchRoleMaster(branchRoleMasterRepository.findOne(105));
							branchMaster.setCreatedIpAddress(ip);
							branchMaster.setCreatedTimestamp(new Date());
							branchMaster.setCreatedUsername(authenticateUserResponse.getUserName());
							branchMaster.setActiveFlag(1);
							branchMaster.setRemarks("created through excel");
							System.out.println("The branch is created by : "+ authenticateUserResponse.getUserName()+" and created on "+new Date()+" the branch data is : "+branchMaster);
							branchMasterRepository.save(branchMaster);

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(5);
							auditLogs.setNewData("Svatantra merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(branchMaster));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

						}else {

							//						auditLogs.setOldData(new Gson().toJson(branchMaster));

							if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null) {
								branchMaster.setSubBranchAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null) {
								branchMaster.setSubBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator)!=null) {
								branchMaster.setEmailId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
							}
							//						if(objDefaultFormat.formatCellValue(row.getCell(15),objFormulaEvaluator)!=null) {
							//							branchMaster.setLatitude(Double.parseDouble(objDefaultFormat.formatCellValue(row.getCell(15),objFormulaEvaluator)));
							//						}
							//						if(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator)!=null) {
							//							branchMaster.setLongitude(Double.parseDouble(objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator)));
							//						}
							branchMaster.setEditedIpAddress(ip);
							branchMaster.setEditedTimestamp(new Date());
							branchMaster.setEditedUsername(authenticateUserResponse.getUserName());
							//						branchMaster.setActiveFlag(1);
							branchMaster.setRemarks(" edited through excel");
							branchMasterRepository.save(branchMaster);

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(2);
							auditLogs.setNewData("Svatantra merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(branchMaster));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

						}
						model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
						model.setMerchantLoginPassword(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						model.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(9),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						model.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						model.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						model.setMerchantPan(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
						merchantMaster=merchantMasterRepository.findByMerchantLoginIdAndActiveFlagAndSuperMerchantMasterId(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator),1,branchMaster.getSuperMerchantMaster().getId());
						if(merchantMaster==null) {
							merchantMaster = new MerchantMaster();
							merchantMaster.setActivationTimestamp(new Date());
							merchantMaster.setActiveFlag(1);
							merchantMaster.setApprovedStatus(1);
							merchantMaster.setCashDepositEnable(0);
							merchantMaster.setCashWithdrawEnable(0);
							merchantMaster.setAadharPayEnable(1);
							merchantMaster.setBalanceEnquiryEnable(1);
							merchantMaster.setMinistatmentEnable(1);
							merchantMaster.setUpiQrEnable(0);
							merchantMaster.setUpiEnable(0);
							merchantMaster.setFundTransferEnable(0);
							merchantMaster.setDropCashEnable(1);
							merchantMaster.setDemandSheetEnable(0);
							merchantMaster.setCollectCashEnable(0);
							merchantMaster.setSelfSettlementFlag(0);
							if(model.getMerchantLoginId() != null) {
								merchantMaster.setMerchantLoginId(model.getMerchantLoginId().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantLoginPassword() != null) {
								merchantMaster.setMerchantLoginPin(commonTasks.md5(model.getMerchantLoginPassword()).replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantName() != null) {
								merchantMaster.setMerchantName(model.getMerchantName().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantAddress() != null) {
								merchantMaster.setMerchantAddress(model.getMerchantAddress().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantPhoneNumber() != null) {
								merchantMaster.setMerchantPhoneNumber(model.getMerchantPhoneNumber().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantPan() != null) {
								merchantMaster.setUserPan(model.getMerchantPan().replaceAll("\\p{C}", ""));
							}
							if(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator)!=null) {
								merchantMaster.setSuperMerchantMaster(superMerchantMasterRepository.findOne(Integer.parseInt(objDefaultFormat.formatCellValue(row.getCell(14),objFormulaEvaluator))));
							}
							ParentMerchantMaster parentMerchantMaster = null;
							if(merchantMaster.getSuperMerchantMaster().getParentId()!=null) {
								parentMerchantMaster = parentMerchantMasterRepository.findOne(merchantMaster.getSuperMerchantMaster().getParentId());
								merchantMaster.setParentId(parentMerchantMaster== null? 0:parentMerchantMaster.getId() );
							}
							merchantMaster.setServerTimesatmp(new Date());
							merchantMaster.setSubmitedTimestamp(new Date());
							merchantMaster.setTimestamp(new Date());
							merchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
							merchantMaster.setCreatedIpAddress(ip);
							merchantMaster.setBranchMaster(branchMasterRepository.findOne(branchMaster.getId()));
							merchantMaster.setCreatedTimestamp(new Date());
							merchantMaster.setRemarks("created through excel");
							merchantMasterRepository.save(merchantMaster);

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(5);
							auditLogs.setNewData("Svatantra merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(merchantMaster));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
						}else {

							//						auditLogs.setOldData(new Gson().toJson(merchantMaster));

							if(model.getMerchantLoginPassword() != null) {
								merchantMaster.setMerchantLoginPin(commonTasks.md5(model.getMerchantLoginPassword()).replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantName() != null) {
								merchantMaster.setMerchantName(model.getMerchantName().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantAddress() != null) {
								merchantMaster.setMerchantAddress(model.getMerchantAddress().replaceAll("\\p{C}", ""));
							}
							if(model.getMerchantPhoneNumber() != null) {
								merchantMaster.setMerchantPhoneNumber(model.getMerchantPhoneNumber().replaceAll("\\p{C}", ""));
							}
							merchantMaster.setRemarks(" edited and mapped through excel");
							merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
							merchantMaster.setEditedTimestamp(new Date());
							merchantMaster.setBranchMaster(branchMasterRepository.findOne(branchMaster.getId()));
							merchantMasterRepository.save(merchantMaster);

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(5);
							auditLogs.setNewData("Svatantra merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(merchantMaster));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

						}
						model.setRemarks(merchantMaster.getRemarks() +".success");
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+"Missing .Failed" : "Failed");
					}
					responseModelList.add(model);
				}catch(Exception e) {
					e.printStackTrace();
				}
				System.out.println("count : "+i);
			}
			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, responseModelList),HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	// corporate merchant upload
	@PostMapping("/corporateMerchants/Excel/")
	public ResponseEntity<GeneralResponse> merchantbranchUploadNew( HttpServletRequest request,HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String data) throws IOException{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
			String dateAsString = simpleDateFormat.format(new Date());

			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "branchBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));

			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);


			System.out.println("super merchant Id :"+objDefaultFormat.formatCellValue(sheet.getRow(1).getCell(14),objFormulaEvaluator));
			Integer superMerchantId=Integer.parseInt(objDefaultFormat.formatCellValue(sheet.getRow(1).getCell(14),objFormulaEvaluator));
			SuperMerchantMaster superMerchant=superMerchantMasterRepository.findOne(superMerchantId);

			//get merchant list and create map of it
			Map<String,MerchantMaster> marchantMap=new HashMap<String, MerchantMaster>();
			List<MerchantMaster> merchList=merchantMasterRepository.findBySuperMerchantMasterId(superMerchantId);
			for (MerchantMaster m : merchList) {
				if(m.getMerchantLoginId() != null) {
					marchantMap.put(m.getMerchantLoginId().toLowerCase(), m);
				}
			}
			//get branch list and create map of it
			Map<String,BranchMaster> branchMap=new HashMap<String, BranchMaster>();
			Iterable<BranchMaster> branchList=branchMasterRepository.findAll();
			for (BranchMaster b : branchList) {
				if(b.getBranchLoginId() != null) {
					branchMap.put(b.getBranchLoginId().toLowerCase(), b);
				}
			}			
			BranchRoleMaster branchrole=branchRoleMasterRepository.findOne(105);
			ParentMerchantMaster parentMerchantMaster = null;
			if(superMerchant.getParentId() != null) {
				parentMerchantMaster=parentMerchantMasterRepository.findOne(superMerchant.getParentId());
			}

			List<MerchantOnBoardingResponseModel> responseModelList = new ArrayList<MerchantOnBoardingResponseModel>();
			MerchantOnBoardingResponseModel model=null;
			Row row;
			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				model=new MerchantOnBoardingResponseModel();
				try {
					boolean branchStatus=true;
					boolean merchantStatus=true;
					model.setSuperMerchantId(Integer.toString(superMerchantId));
					if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator) == null || objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().isEmpty()){
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().isEmpty() ) {
						model.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
					}else{
						model.setBranchLoginId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).trim());
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch login Id" : "Mandatory fields branch login Id");
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).trim().isEmpty()) {
						model.setBranchLoginPassword(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch login password" : "Mandatory fields branch login password");
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).trim().isEmpty()) {
						model.setBranchName(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else{
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch name" : "Mandatory fields Branch name");
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).trim().isEmpty() ) {
						model.setBranchAddress(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch address" : "Mandatory fields Branch address");
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).trim().isEmpty()) {
						model.setBranchPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch phone number" : "Mandatory fields Branch phone number");
						branchStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator)!=null &&  !objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).trim().isEmpty()) {
						model.setEmailId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",branch emailId" : "Mandatory fields Branch emailId");
						branchStatus=false;
					}
					//end of branch validation

					//start merchant validation

					if(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).trim().isEmpty() ) {
						model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).trim());
					}else{
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat login Id" : "Mandatory fields merchnat login Id");
						model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(7),objFormulaEvaluator).trim().replaceAll("\\p{C}", ""));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantLoginPassword(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat login password" : "Mandatory fields merchnat login password");
						model.setMerchantLoginId(objDefaultFormat.formatCellValue(row.getCell(8),objFormulaEvaluator));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(9),objFormulaEvaluator)!=null &&  !objDefaultFormat.formatCellValue(row.getCell(9),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(9),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat name" : "Mandatory fields merchnat name");
						model.setMerchantName(objDefaultFormat.formatCellValue(row.getCell(9),objFormulaEvaluator));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat address" : "Mandatory fields merchnat address");
						model.setMerchantAddress(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(11),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat phone number" : "Mandatory fields merchnat phone number");
						model.setMerchantPhoneNumber(objDefaultFormat.formatCellValue(row.getCell(10),objFormulaEvaluator));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantPan(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat pan number" : "Mandatory fields merchnat pan number");
						model.setMerchantPan(objDefaultFormat.formatCellValue(row.getCell(12),objFormulaEvaluator));
						merchantStatus=false;
					}
					if(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator)!=null && !objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).trim().isEmpty()) {
						model.setMerchantAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator).replaceAll("\\p{C}", ""));
					}else {
						System.out.println("model.getRemarks() :"+model.getRemarks() );
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",merchnat aadhar number" : "Mandatory fields merchnat aadhar number");
						model.setMerchantAadhaarNumber(objDefaultFormat.formatCellValue(row.getCell(13),objFormulaEvaluator));
						merchantStatus=false;
					}
					String aadharPayEnable = objDefaultFormat.formatCellValue(row.getCell(15),objFormulaEvaluator);
					System.out.println("aadharPayEnable" +aadharPayEnable);
					if(aadharPayEnable !=null && !aadharPayEnable.trim().isEmpty()) {
						if(aadharPayEnable.equals("1") || aadharPayEnable.equals("0")) {
							System.out.println("if :"+aadharPayEnable);
							model.setAadharPayEnable(aadharPayEnable);
						}else {
							System.out.println("else :"+aadharPayEnable);
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",aadhar pay enbale(0/1)" : "Mandatory fields aadhar pay enbale(0/1)");
							model.setAadharPayEnable(aadharPayEnable);
							merchantStatus=false;
						}

					}else {
						System.out.println("ELSE"+aadharPayEnable);
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",aadhar pay enbale(0/1)" : "Mandatory fields aadhar pay enbale(0/1)");
						model.setAadharPayEnable(aadharPayEnable);
						merchantStatus=false;
					}

					String upiEnable = objDefaultFormat.formatCellValue(row.getCell(16),objFormulaEvaluator);
					if(upiEnable !=null && !upiEnable.trim().isEmpty()) {
						if(upiEnable.equals("1") || upiEnable.equals("0")) {
							model.setUpiEnable(upiEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",UPI enbale(0/1)" : "Mandatory fields UPI enbale(0/1)");
							model.setUpiEnable(upiEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",UPI enbale(0/1)" : "Mandatory fields UPI enbale(0/1)");
						model.setUpiEnable(upiEnable);
						merchantStatus=false;
					}
					String upiQrEnable = objDefaultFormat.formatCellValue(row.getCell(17),objFormulaEvaluator);
					if(upiQrEnable !=null && !upiQrEnable.trim().isEmpty()) {
						if(upiQrEnable.equals("1") || upiQrEnable.equals("0")) {
							model.setUpiQrEnable(upiQrEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",UPIQR enbale(0/1)" : "Mandatory fields UPIQR enbale(0/1)");
							model.setUpiQrEnable(upiQrEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",UPIQR enbale(0/1)" : "Mandatory fields UPIQR enbale(0/1)");
						model.setUpiQrEnable(upiQrEnable);
						merchantStatus=false;
					}

					String cwEnable = objDefaultFormat.formatCellValue(row.getCell(18),objFormulaEvaluator);
					if(cwEnable !=null && !cwEnable.trim().isEmpty()) {
						if(cwEnable.equals("1") || cwEnable.equals("0")) {
							model.setCashwithdrawalEnable(cwEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",CW enbale(0/1)" : "Mandatory fields CW enbale(0/1)");
							model.setCashwithdrawalEnable(cwEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",CW enbale(0/1)" : "Mandatory fields CW enbale(0/1)");
						model.setCashwithdrawalEnable(cwEnable);
						merchantStatus=false;
					}

					String cdEnable = objDefaultFormat.formatCellValue(row.getCell(19),objFormulaEvaluator);
					if(cdEnable !=null && !cdEnable.trim().isEmpty()) {
						if(cdEnable.equals("1") || cdEnable.equals("0")) {
							model.setCashdepositEnable(cdEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",CD enbale(0/1)" : "Mandatory fields CD enbale(0/1)");
							model.setCashdepositEnable(cdEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",CD enbale(0/1)" : "Mandatory fields CD enbale(0/1)");
						model.setCashdepositEnable(cdEnable);
						merchantStatus=false;
					}
					String fubdTransferEnable = objDefaultFormat.formatCellValue(row.getCell(20),objFormulaEvaluator);
					if(fubdTransferEnable !=null && !fubdTransferEnable.trim().isEmpty()) {
						if(fubdTransferEnable.equals("1") || fubdTransferEnable.equals("0")) {
							model.setFundTransferEnable(fubdTransferEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",fund transfer enbale(0/1)" : "Mandatory fields fund transfer enbale(0/1)");
							model.setFundTransferEnable(fubdTransferEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",fund transfer enbale(0/1)" : "Mandatory fields fund transfer enbale(0/1)");
						model.setFundTransferEnable(fubdTransferEnable);
						merchantStatus=false;
					}

					String biEnable = objDefaultFormat.formatCellValue(row.getCell(21),objFormulaEvaluator);
					if(biEnable !=null && !biEnable.trim().isEmpty()) {
						if(biEnable.equals("1") || biEnable.equals("0")) {
							model.setBalanceInquiryEnable(biEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",balance inquiry enbale(0/1)" : "Mandatory fields balance inquiry enbale(0/1)");
							model.setBalanceInquiryEnable(biEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",balance inquiry enbale(0/1)" : "Mandatory fields balance inquiry enbale(0/1)");
						model.setBalanceInquiryEnable(biEnable);
						merchantStatus=false;
					}

					String miEnable = objDefaultFormat.formatCellValue(row.getCell(22),objFormulaEvaluator);
					if(miEnable !=null && !miEnable.trim().isEmpty()) {
						if(miEnable.equals("1") || miEnable.equals("0")) {
							model.setMinistatementEnable(miEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",mini statement enbale(0/1)" : "Mandatory fields mini statement enbale(0/1)");
							model.setMinistatementEnable(miEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",mini statement enbale(0/1)" : "Mandatory fields mini statement enbale(0/1)");
						model.setMinistatementEnable(miEnable);
						merchantStatus=false;
					}

					String collectCashEnable = objDefaultFormat.formatCellValue(row.getCell(23),objFormulaEvaluator);
					if(collectCashEnable !=null && !collectCashEnable.trim().isEmpty()) {
						if(collectCashEnable.equals("1") || collectCashEnable.equals("0")) {
							model.setCollectCashEnable(collectCashEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",collect cash enbale(0/1)" : "Mandatory fields collect cash enbale(0/1)");
							model.setCollectCashEnable(collectCashEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",collect cash enbale(0/1)" : "Mandatory fields collect cash enbale(0/1)");
						model.setCollectCashEnable(collectCashEnable);
						merchantStatus=false;
					}

					String demandSheetEnable = objDefaultFormat.formatCellValue(row.getCell(24),objFormulaEvaluator);
					if(demandSheetEnable !=null && !demandSheetEnable.trim().isEmpty()) {
						if(demandSheetEnable.equals("1") || demandSheetEnable.equals("0")) {
							model.setDemandSheetEnable(demandSheetEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",demand sheet enbale(0/1)" : "Mandatory fields demand sheet enbale(0/1)");
							model.setDemandSheetEnable(demandSheetEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",demand sheet enbale(0/1)" : "Mandatory fields demand sheet enbale(0/1)");
						model.setDemandSheetEnable(demandSheetEnable);
						merchantStatus=false;
					}
					String dropCashEnable = objDefaultFormat.formatCellValue(row.getCell(25),objFormulaEvaluator);
					if(dropCashEnable !=null && !dropCashEnable.trim().isEmpty()) {
						if(dropCashEnable.equals("1") || dropCashEnable.equals("0")) {
							model.setDropCashEnable(dropCashEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",drop cash enbale(0/1)" : "Mandatory fields drop cash enbale(0/1)");
							model.setDropCashEnable(dropCashEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",drop cash enbale(0/1)" : "Mandatory fields drop cash enbale(0/1)");
						model.setDropCashEnable(dropCashEnable);
						merchantStatus=false;
					}

					String pgEnable = objDefaultFormat.formatCellValue(row.getCell(26),objFormulaEvaluator);
					if(pgEnable !=null && !pgEnable.trim().isEmpty()) {
						if(pgEnable.equals("1") || pgEnable.equals("0")) {
							model.setPgEnable(pgEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",pg enbale(0/1)" : "Mandatory fields pg enbale(0/1)");
							model.setPgEnable(pgEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",pg enbale(0/1)" : "Mandatory fields pg enbale(0/1)");
						model.setPgEnable(pgEnable);
						merchantStatus=false;
					}

					String mposEnable = objDefaultFormat.formatCellValue(row.getCell(27),objFormulaEvaluator);
					if(mposEnable !=null && !mposEnable.trim().isEmpty()) {
						if(mposEnable.equals("1") || mposEnable.equals("0")) {
							model.setMposEnable(mposEnable);
						}else {
							model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",mpos enbale(0/1)" : "Mandatory fields mpos enbale(0/1)");
							model.setMposEnable(mposEnable);
							merchantStatus=false;
						}

					}else {
						model.setRemarks(model.getRemarks() != null ? model.getRemarks()+",mpos enbale(0/1)" : "Mandatory fields mpos enbale(0/1)");
						model.setMposEnable(mposEnable);
						merchantStatus=false;
					}

					//end of merchant validation

					BranchMaster branch=null;
					if(branchStatus == true && merchantStatus == true) {
						if(branchMap.containsKey(model.getBranchLoginId().toLowerCase())){
							branch = branchMap.get(model.getBranchLoginId().toLowerCase());

							//						auditLogs.setOldData(new Gson().toJson(branch));

							branch.setBranchLoginPassword(commonTasks.md5(model.getBranchLoginPassword()));
							branch.setBranchName(model.getBranchName());
							branch.setSubBranchAddress(model.getBranchAddress());
							branch.setSubBranchPhoneNumber(model.getBranchPhoneNumber());
							branch.setEmailId(model.getEmailId());
							branch.setEditedIpAddress(ip);
							branch.setEditedTimestamp(new Date());
							branch.setEditedUsername(authenticateUserResponse.getUserName());
							//						branchMaster.setActiveFlag(1);
							branch.setRemarks(" edited through excel");
							branchMasterRepository.save(branch);
							model.setRemarks("Branch Updated.");

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(2);
							auditLogs.setNewData("Corporate merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(branch));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
						}else {
							branch=new BranchMaster();
							branch.setBranchLoginId(model.getBranchLoginId());
							branch.setBranchLoginPassword(commonTasks.md5(model.getBranchLoginPassword()));
							branch.setBranchName(model.getBranchName());
							branch.setSubBranchAddress(model.getBranchAddress());
							branch.setSubBranchPhoneNumber(model.getBranchPhoneNumber());
							branch.setEmailId(model.getEmailId());
							branch.setSuperMerchantMaster(superMerchant);
							branch.setParentMerchantMaster(parentMerchantMaster);
							branch.setBranchRoleMaster(branchrole);
							branch.setCreatedIpAddress(ip);
							branch.setCreatedTimestamp(new Date());
							branch.setCreatedUsername(authenticateUserResponse.getUserName());
							branch.setActiveFlag(1);
							branch.setRemarks("created through excel");
							System.out.println("The branch is created by : "+ authenticateUserResponse.getUserName()+" and created on "+new Date()+" the branch data is : "+branch);
							branchMasterRepository.save(branch);
							branchMap.put(branch.getBranchLoginId().toLowerCase(), branch);
							model.setRemarks("Branch created.");

							//							AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(5);
							auditLogs.setNewData("Corporate merchant bulk upload");
							//							auditLogs.setNewData(new Gson().toJson(branch));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
						}
						MerchantMaster merchant=null;
						if(marchantMap.containsKey(model.getMerchantLoginId().toLowerCase())) {
							merchant=marchantMap.get(model.getMerchantLoginId().toLowerCase());

							//						auditLogs.setOldData(new Gson().toJson(merchant));

							merchant.setMerchantLoginPin(commonTasks.md5(model.getMerchantLoginPassword()));
							merchant.setMerchantName(model.getMerchantName());
							merchant.setMerchantAddress(model.getMerchantAddress());
							merchant.setMerchantPhoneNumber(model.getMerchantPhoneNumber());
							merchant.setAadhaarNumber(model.getMerchantAadhaarNumber());
							merchant.setUserPan(model.getMerchantPan());
							merchant.setCashDepositEnable(Integer.parseInt(model.getCashdepositEnable()));
							merchant.setCashWithdrawEnable(Integer.parseInt(model.getCashwithdrawalEnable()));
							merchant.setAadharPayEnable(Integer.parseInt(model.getAadharPayEnable()));
							merchant.setBalanceEnquiryEnable(Integer.parseInt(model.getBalanceInquiryEnable()));
							merchant.setMinistatmentEnable(Integer.parseInt(model.getMinistatementEnable()));
							merchant.setUpiQrEnable(Integer.parseInt(model.getUpiQrEnable()));
							merchant.setUpiEnable(Integer.parseInt(model.getUpiEnable()));
							merchant.setFundTransferEnable(Integer.parseInt(model.getFundTransferEnable()));
							merchant.setDropCashEnable(Integer.parseInt(model.getDropCashEnable()));
							merchant.setDemandSheetEnable(Integer.parseInt(model.getDemandSheetEnable()));
							merchant.setCollectCashEnable(Integer.parseInt(model.getCollectCashEnable()));
							merchant.setPgEnable(Integer.parseInt(model.getPgEnable()));
							merchant.setRemarks(" edited and mapped through excel");
							merchant.setEditedByUsername(authenticateUserResponse.getUserName());
							merchant.setEditedTimestamp(new Date());
							merchant.setBranchMaster(branch);
							merchantMasterRepository.save(merchant);
							model.setStatus("success");
							model.setRemarks(model.getRemarks()+"Merchant updated. And branch,merchant mapped.");

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(2);
							auditLogs.setNewData("Corporate merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(merchant));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

						}else{
							merchant=new MerchantMaster();
							merchant.setMerchantLoginId(model.getMerchantLoginId());
							merchant.setMerchantLoginPin(commonTasks.md5(model.getMerchantLoginPassword()));
							merchant.setMerchantName(model.getMerchantName());
							merchant.setMerchantAddress(model.getMerchantAddress());
							merchant.setMerchantPhoneNumber(model.getMerchantPhoneNumber());
							merchant.setUserPan(model.getMerchantPan());
							merchant.setAadhaarNumber(model.getMerchantAadhaarNumber());
							merchant.setActivationTimestamp(new Date());
							merchant.setActiveFlag(1);
							merchant.setApprovedStatus(1);
							merchant.setCashDepositEnable(Integer.parseInt(model.getCashdepositEnable()));
							merchant.setCashWithdrawEnable(Integer.parseInt(model.getCashwithdrawalEnable()));
							merchant.setAadharPayEnable(Integer.parseInt(model.getAadharPayEnable()));
							merchant.setBalanceEnquiryEnable(Integer.parseInt(model.getBalanceInquiryEnable()));
							merchant.setMinistatmentEnable(Integer.parseInt(model.getMinistatementEnable()));
							merchant.setUpiQrEnable(Integer.parseInt(model.getUpiQrEnable()));
							merchant.setUpiEnable(Integer.parseInt(model.getUpiEnable()));
							merchant.setFundTransferEnable(Integer.parseInt(model.getFundTransferEnable()));
							merchant.setDropCashEnable(Integer.parseInt(model.getDropCashEnable()));
							merchant.setDemandSheetEnable(Integer.parseInt(model.getDemandSheetEnable()));
							merchant.setCollectCashEnable(Integer.parseInt(model.getCollectCashEnable()));
							merchant.setPgEnable(Integer.parseInt(model.getPgEnable()));
							merchant.setSelfSettlementFlag(0);
							merchant.setSuperMerchantMaster(superMerchant);
							merchant.setParentId(parentMerchantMaster== null? 0:parentMerchantMaster.getId() );
							merchant.setServerTimesatmp(new Date());
							merchant.setSubmitedTimestamp(new Date());
							merchant.setTimestamp(new Date());
							merchant.setCreatedByUsername(authenticateUserResponse.getUserName());
							merchant.setCreatedIpAddress(ip);
							merchant.setBranchMaster(branch);
							merchant.setCreatedTimestamp(new Date());
							merchant.setRemarks("created through excel");
							merchantMasterRepository.save(merchant);
							marchantMap.put(merchant.getMerchantLoginId().toLowerCase(), merchant);
							model.setRemarks(model.getRemarks()+"Merchant created. And branch,merchant mapped.");
							model.setStatus("success");

							//						AUDIT LOGS

							auditLogs.setFeatureGrpId("ONBOARDING");
							auditLogs.setFeatureId("ONBOARDING_CRU");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(5);
							auditLogs.setNewData("Corporate merchant bulk upload");
							//						auditLogs.setNewData(new Gson().toJson(merchant));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

						}
					}else {
						model.setRemarks(model.getRemarks()+" missing");
						model.setStatus("Failed");
					}
				}catch(Exception e) {
					e.printStackTrace();
				}
				System.out.println("count : "+i);
				responseModelList.add(model);
			}
			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESSFUL, responseModelList),HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	// matm terminal mapping
	//request to upload terminal data which bank shares from edit portsl
	@PostMapping("matm/uploadTerminalMapping")
	public ResponseEntity<GeneralResponse> uploadTerminalMapping(HttpServletRequest request,HttpServletResponse response, @RequestHeader("token") String token
			,@RequestBody String data)
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			try {
				Gson gson = new GsonBuilder().serializeNulls().create();
				System.out.println("in web");
				if(data != null && !data.equals("")){
					String responseData = commonTasks.postToFpcardGenData(data, fileUtil.getProperty("uploadTerminalMappingUrl"), token);
					//						String responseData = commonTasks.postToFpcardGenData(data, fileUtil.getProperty("documentUploadPath"), "");


					//						AUDIT LOGS

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("M-ATM terminal mapping upload");
					//						auditLogs.setNewData(new Gson().toJson(data));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					//						fpCpAuditLogsRepository.save(auditLogs);


					if(responseData != null && !responseData.equals("")) {
						GeneralResponse generalResponse  = gson.fromJson(responseData, GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(generalResponse, HttpStatus.OK);
					}else{
						System.out.println("no data from general app server");
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"no data from geneappdata  server", null), HttpStatus.OK);
					} 
				}else {
					System.out.println("in valid data");
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"Incomplete data sent", null), HttpStatus.OK);
				}
			}catch (Exception e) {
				e.printStackTrace();
				System.out.println("Exception in server");
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"Exception in server", null), HttpStatus.OK);
			}
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}


	}
	// matm agg mpos mapping
	@PostMapping("matm/uploadAggMposMapping")
	public ResponseEntity<GeneralResponse> uploadMatmAggpMposMapping(HttpServletRequest request,HttpServletResponse response, @RequestHeader("token") String token
			,@RequestBody String data) throws UnsupportedEncodingException, ParseException
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			try {
				System.out.println("in web");
				if(data != null && !data.equals("")){
					String responseData = commonTasks.postToFpcardGenData(data, fileUtil.getProperty("uploadMatmAggMposMapping"), token);
					//								String responseData = commonTasks.postToFpcardGenData(data, fileUtil.getProperty("documentUploadPath"), "");


					//								AUDIT LOGS

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//								0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("M-ATM aggregator and mpos mapping upload");
					//								auditLogs.setNewData(new Gson().toJson(data));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);


					if(responseData != null && !responseData.equals("")) {
						GeneralResponse generalResponse  = gson.fromJson(responseData, GeneralResponse.class);
						return new ResponseEntity<GeneralResponse>(generalResponse, HttpStatus.OK);
					}else{
						System.out.println("no data from general app server");
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"no data from geneappdata  server", null), HttpStatus.OK);
					} 
				}else {
					System.out.println("in valid data");
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"Incomplete data sent", null), HttpStatus.OK);
				}
			}catch (Exception e) {
				e.printStackTrace();
				System.out.println("Exception in server");
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"Exception in server", null), HttpStatus.OK);
			}
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}


	}
	//		 bank details upload aeps/CW
	@PostMapping("/bankDetails/CW/aeps/Upload/Excel")
	public ResponseEntity<GeneralResponse> bankApUpload( HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token
			,@RequestBody String data) throws IOException{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		ExcelUpload modelM = new ExcelUpload();
		try {
			System.out.println("model enetreed");
			Gson gson = new GsonBuilder().serializeNulls().create();
			modelM = gson.fromJson(data, ExcelUpload.class);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.BAD_REQUEST);
		}
		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "bankAepsBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);

			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			BankDetailsMasterData bankDetailsMasterData = null;
			SvatantraAepsBankDetailsMasterData svatantraAepsBankDetailsMasterData = null;
			Row row;

			Iterable<BankDetailsMasterData> bankList = bankDetailsMasterDataRepository.findAll();
			Map<String, BankDetailsMasterData> bankMap = new HashMap<String, BankDetailsMasterData>();
			for(BankDetailsMasterData b: bankList){
				bankMap.put(b.getIinNo().trim(),b);
			}
			Map<String, String> newBankMap = new HashMap<>();

			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				try {
					if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null  && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
						newBankMap.put(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).trim(), objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator));
					}
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			for(Map.Entry<String, BankDetailsMasterData> s : bankMap.entrySet()) {
				if(!newBankMap.containsKey(s.getKey())) {
					System.out.println(s.getKey());
					bankDetailsMasterData = bankDetailsMasterDataRepository.findByIinNo(s.getKey());

					//						auditLogs.setOldData(new Gson().toJson(bankDetailsMasterData));


					bankDetailsMasterData.setUpdatedTimestamp(new Date());
					bankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
					bankDetailsMasterData.setUpdatedIpAddress(ip);
					bankDetailsMasterData.setActiveFlag(0);
					bankDetailsMasterDataRepository.save(bankDetailsMasterData);

					svatantraAepsBankDetailsMasterData=svatantraAepsBankDetailsMasterDataRepository.findByIinNo(s.getKey());
					if(svatantraAepsBankDetailsMasterData!=null) {
						svatantraAepsBankDetailsMasterData.setUpdatedTimestamp(new Date());
						svatantraAepsBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						svatantraAepsBankDetailsMasterData.setUpdatedIpAddress(ip);
						svatantraAepsBankDetailsMasterData.setActiveFlag(0);
						svatantraAepsBankDetailsMasterDataRepository.save(svatantraAepsBankDetailsMasterData);
					}

					//						AUDIT LOGS

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("Bank Details CW(aeps) bulk upload");
					//						auditLogs.setNewData(new Gson().toJson(bankDetailsMasterData));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

				}
			}
			//				bankMap = new HashMap<String, BankDetailsMasterData>();
			//				List<BankDetailsMasterData> activeBankList = bankDetailsMasterDataRepository.findByActiveFlag(1);
			//				for(BankDetailsMasterData b : activeBankList) {
			//					bankMap.put(b.getIinNo().trim(),b);
			//				}
			for(Map.Entry<String, String> s:newBankMap.entrySet()) {
				if(bankMap.containsKey(s.getKey())) {
					if(!s.getValue().equals(bankMap.get(s.getKey()).getBankName())) {
						bankDetailsMasterData = bankDetailsMasterDataRepository.findByIinNo(s.getKey());

						//							auditLogs.setOldData(new Gson().toJson(bankDetailsMasterData));

						bankDetailsMasterData.setBankName(s.getValue());
						bankDetailsMasterData.setDetails(s.getValue());
						bankDetailsMasterData.setUpdatedTimestamp(new Date());
						bankDetailsMasterData.setUpdatedIpAddress(ip);
						bankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						bankDetailsMasterData.setActiveFlag(1);
						bankDetailsMasterDataRepository.save(bankDetailsMasterData);

						svatantraAepsBankDetailsMasterData = svatantraAepsBankDetailsMasterDataRepository.findByIinNo(s.getKey());
						//							System.out.println("Updated  : "+s.getKey());
						if(svatantraAepsBankDetailsMasterData!=null) {
							svatantraAepsBankDetailsMasterData.setBankName(s.getValue());
							svatantraAepsBankDetailsMasterData.setDetails(s.getValue());
							svatantraAepsBankDetailsMasterData.setUpdatedTimestamp(new Date());
							svatantraAepsBankDetailsMasterData.setUpdatedIpAddress(ip);
							svatantraAepsBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
							svatantraAepsBankDetailsMasterData.setActiveFlag(1);
							svatantraAepsBankDetailsMasterDataRepository.save(svatantraAepsBankDetailsMasterData);
						}

						//							AUDIT LOGS

						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData("Bank Details CW(aeps) bulk upload");
						//							auditLogs.setNewData(new Gson().toJson(bankDetailsMasterData));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);

					}else if(bankMap.get(s.getKey()).getActiveFlag() == 0) {
						bankDetailsMasterData = bankDetailsMasterDataRepository.findByIinNo(s.getKey());

						//							auditLogs.setOldData(new Gson().toJson(bankDetailsMasterData));


						bankDetailsMasterData.setBankName(s.getValue());
						bankDetailsMasterData.setDetails(s.getValue());
						bankDetailsMasterData.setUpdatedTimestamp(new Date());
						bankDetailsMasterData.setUpdatedIpAddress(ip);
						bankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						bankDetailsMasterData.setActiveFlag(1);
						bankDetailsMasterDataRepository.save(bankDetailsMasterData);

						svatantraAepsBankDetailsMasterData = svatantraAepsBankDetailsMasterDataRepository.findByIinNo(s.getKey());
						//							System.out.println("Updated  : "+s.getKey());
						if(svatantraAepsBankDetailsMasterData!=null) {
							svatantraAepsBankDetailsMasterData.setBankName(s.getValue());
							svatantraAepsBankDetailsMasterData.setDetails(s.getValue());
							svatantraAepsBankDetailsMasterData.setUpdatedTimestamp(new Date());
							svatantraAepsBankDetailsMasterData.setUpdatedIpAddress(ip);
							svatantraAepsBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
							svatantraAepsBankDetailsMasterData.setActiveFlag(1);
							svatantraAepsBankDetailsMasterDataRepository.save(svatantraAepsBankDetailsMasterData);
						}
						//							AUDIT LOGS

						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData("Bank Details CW(aeps) bulk upload");
						//							auditLogs.setNewData(new Gson().toJson(bankDetailsMasterData));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);

					}
				}else {
					//						System.out.println("Created  : "+s.getKey());
					bankDetailsMasterData = new BankDetailsMasterData();
					bankDetailsMasterData.setIinNo(s.getKey());
					bankDetailsMasterData.setBankName(s.getValue());
					bankDetailsMasterData.setDetails(s.getValue());
					bankDetailsMasterData.setTimestamp(new Date());
					bankDetailsMasterData.setActiveFlag(1);
					bankDetailsMasterData.setCreatedByUsername(authenticateUserResponse.getUserName());
					bankDetailsMasterData.setCreatedIpAddress(ip);
					bankDetailsMasterData.setOrderFlag(20);
					bankDetailsMasterDataRepository.save(bankDetailsMasterData);

					svatantraAepsBankDetailsMasterData = svatantraAepsBankDetailsMasterDataRepository.findByIinNo(s.getKey());
					if(svatantraAepsBankDetailsMasterData==null) {
						svatantraAepsBankDetailsMasterData = new SvatantraAepsBankDetailsMasterData();
						svatantraAepsBankDetailsMasterData.setIinNo(s.getKey());
						svatantraAepsBankDetailsMasterData.setBankName(s.getValue());
						svatantraAepsBankDetailsMasterData.setDetails(s.getValue());
						svatantraAepsBankDetailsMasterData.setTimestamp(new Date());
						svatantraAepsBankDetailsMasterData.setActiveFlag(1);
						svatantraAepsBankDetailsMasterData.setCreatedByUsername(authenticateUserResponse.getUserName());
						svatantraAepsBankDetailsMasterData.setCreatedIpAddress(ip);
						svatantraAepsBankDetailsMasterData.setOrderFlag(20);
						svatantraAepsBankDetailsMasterDataRepository.save(svatantraAepsBankDetailsMasterData);

					}
					//						AUDIT LOGS

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("Bank Details CW(aeps) bulk upload");
					//						auditLogs.setNewData(new Gson().toJson(bankDetailsMasterData));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

				}
			}

			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, null),HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	//		bank details AP upload
	@PostMapping("/bankDetails/aadhaarPay/Upload/Excel")
	public ResponseEntity<GeneralResponse> bankUpload( HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token
			,@RequestBody String data) throws IOException{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			ExcelUpload modelM = new ExcelUpload();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, ExcelUpload.class);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
			String dateAsString = simpleDateFormat.format(new Date());

			System.out.println("model=====" + modelM.getFile());
			String docName = commonTasks.toImgFromBase64(modelM.getFile(), "bankAPBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
			System.out.println(docName);
			String path = fileUtil.getProperty("documentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			AadharPayBankDetailsMasterData aadharPayBankDetailsMasterData = null;
			SvatantraAadharPayBankDetailsMasterData svatantraAadharPayBankDetailsMasterData = null;
			Row row;

			Iterable<AadharPayBankDetailsMasterData> bankList = aadharPayBankDetailsMasterDataRepository.findAll();

			Map<String, AadharPayBankDetailsMasterData> bankMap = new HashMap<String, AadharPayBankDetailsMasterData>();
			for(AadharPayBankDetailsMasterData b: bankList){
				bankMap.put(b.getIinNo().trim(),b);
			}
			Map<String, String> newBankMap = new HashMap<>();

			for (int i = 1; i <= sheet.getLastRowNum(); i++) {
				row = sheet.getRow(i);
				try {
					if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null  && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null) {
						newBankMap.put(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).trim(), objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator));
					}
				}catch(Exception e) {
					e.printStackTrace();
				}
			}
			// Inactivate the iins
			for(Map.Entry<String, AadharPayBankDetailsMasterData> s : bankMap.entrySet()) {
				if(!newBankMap.containsKey(s.getKey())) {
					//						System.out.println(s.getKey());
					aadharPayBankDetailsMasterData = aadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());

					//						auditLogs.setOldData(new Gson().toJson(aadharPayBankDetailsMasterData));

					aadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
					aadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
					aadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
					aadharPayBankDetailsMasterData.setActiveFlag(0);
					aadharPayBankDetailsMasterDataRepository.save(aadharPayBankDetailsMasterData);

					svatantraAadharPayBankDetailsMasterData=svatantraAadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());
					if(svatantraAadharPayBankDetailsMasterData!=null) {
						svatantraAadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
						svatantraAadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						svatantraAadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
						svatantraAadharPayBankDetailsMasterData.setActiveFlag(0);
						svatantraAadharPayBankDetailsMasterDataRepository.save(svatantraAadharPayBankDetailsMasterData);
					}

					//						AUDIT LOGS


					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("Bank Details AP bulk upload");
					//						auditLogs.setNewData(new Gson().toJson(aadharPayBankDetailsMasterData));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

				}
			}
			//				bankMap = new HashMap<String, AadharPayBankDetailsMasterData>();
			//				List<AadharPayBankDetailsMasterData> activeBankList = aadharPayBankDetailsMasterDataRepository.findByActiveFlag(1);
			//				for(AadharPayBankDetailsMasterData b : activeBankList) {
			//					bankMap.put(b.getIinNo().trim(),b);
			//				}
			for(Map.Entry<String, String> s:newBankMap.entrySet()) {
				if(bankMap.containsKey(s.getKey())) {
					//ckeck if bank name has changed
					System.out.println(bankMap.get(s.getKey()).getBankName()+" "+bankMap.get(s.getKey()).getActiveFlag());
					if(!s.getValue().equals(bankMap.get(s.getKey()).getBankName())) {
						aadharPayBankDetailsMasterData = aadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());

						//							auditLogs.setOldData(new Gson().toJson(aadharPayBankDetailsMasterData));

						aadharPayBankDetailsMasterData.setBankName(s.getValue());
						aadharPayBankDetailsMasterData.setDetails(s.getValue());
						aadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
						aadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						aadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
						aadharPayBankDetailsMasterData.setActiveFlag(1);
						aadharPayBankDetailsMasterDataRepository.save(aadharPayBankDetailsMasterData);

						svatantraAadharPayBankDetailsMasterData = svatantraAadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());
						//							System.out.println("Updated  : "+s.getKey());
						if(svatantraAadharPayBankDetailsMasterData!=null) {
							svatantraAadharPayBankDetailsMasterData.setBankName(s.getValue());
							svatantraAadharPayBankDetailsMasterData.setDetails(s.getValue());
							svatantraAadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
							svatantraAadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
							svatantraAadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
							svatantraAadharPayBankDetailsMasterData.setActiveFlag(1);
							svatantraAadharPayBankDetailsMasterDataRepository.save(svatantraAadharPayBankDetailsMasterData);
						}
						//							AUDIT LOGS


						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData("Bank Details AP bulk upload");
						//							auditLogs.setNewData(new Gson().toJson(aadharPayBankDetailsMasterData));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);

					}else if (bankMap.get(s.getKey()).getActiveFlag()==0){
						System.out.println("entered");
						aadharPayBankDetailsMasterData = aadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());

						//							auditLogs.setOldData(new Gson().toJson(aadharPayBankDetailsMasterData));

						aadharPayBankDetailsMasterData.setBankName(s.getValue());
						aadharPayBankDetailsMasterData.setDetails(s.getValue());
						aadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
						aadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
						aadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
						aadharPayBankDetailsMasterData.setActiveFlag(1);
						aadharPayBankDetailsMasterDataRepository.save(aadharPayBankDetailsMasterData);

						svatantraAadharPayBankDetailsMasterData = svatantraAadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());
						//							System.out.println("Updated  : "+s.getKey());
						if(svatantraAadharPayBankDetailsMasterData!=null) {
							svatantraAadharPayBankDetailsMasterData.setBankName(s.getValue());
							svatantraAadharPayBankDetailsMasterData.setDetails(s.getValue());
							svatantraAadharPayBankDetailsMasterData.setUpdatedTimestamp(new Date());
							svatantraAadharPayBankDetailsMasterData.setUpdatedByUsername(authenticateUserResponse.getUserName());
							svatantraAadharPayBankDetailsMasterData.setUpdatedIpAddress(ip);
							svatantraAadharPayBankDetailsMasterData.setActiveFlag(1);
							svatantraAadharPayBankDetailsMasterDataRepository.save(svatantraAadharPayBankDetailsMasterData);
						}

						//							AUDIT LOGS


						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData("Bank Details AP bulk upload");
						//							auditLogs.setNewData(new Gson().toJson(aadharPayBankDetailsMasterData));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);

					}
				}else {
					//						System.out.println("Created  : "+s.getKey());
					aadharPayBankDetailsMasterData = new AadharPayBankDetailsMasterData();
					aadharPayBankDetailsMasterData.setIinNo(s.getKey());
					aadharPayBankDetailsMasterData.setBankName(s.getValue());
					aadharPayBankDetailsMasterData.setDetails(s.getValue());
					aadharPayBankDetailsMasterData.setTimestamp(new Date());
					aadharPayBankDetailsMasterData.setActiveFlag(1);
					aadharPayBankDetailsMasterData.setCreatedByUsername(authenticateUserResponse.getUserName());
					aadharPayBankDetailsMasterData.setCreatedIpAddress(ip);
					aadharPayBankDetailsMasterData.setOrderFlag(20);
					aadharPayBankDetailsMasterDataRepository.save(aadharPayBankDetailsMasterData);

					svatantraAadharPayBankDetailsMasterData = svatantraAadharPayBankDetailsMasterDataRepository.findByIinNo(s.getKey());
					if(svatantraAadharPayBankDetailsMasterData==null) {
						svatantraAadharPayBankDetailsMasterData = new SvatantraAadharPayBankDetailsMasterData();
						svatantraAadharPayBankDetailsMasterData.setIinNo(s.getKey());
						svatantraAadharPayBankDetailsMasterData.setBankName(s.getValue());
						svatantraAadharPayBankDetailsMasterData.setDetails(s.getValue());
						svatantraAadharPayBankDetailsMasterData.setTimestamp(new Date());
						svatantraAadharPayBankDetailsMasterData.setActiveFlag(1);
						svatantraAadharPayBankDetailsMasterData.setCreatedIpAddress(ip);
						svatantraAadharPayBankDetailsMasterData.setCreatedByUsername(authenticateUserResponse.getUserName());
						svatantraAadharPayBankDetailsMasterData.setOrderFlag(20);
						svatantraAadharPayBankDetailsMasterDataRepository.save(svatantraAadharPayBankDetailsMasterData);
					}

					//						AUDIT LOGS


					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("Bank Details AP bulk upload");
					//						auditLogs.setNewData(new Gson().toJson(aadharPayBankDetailsMasterData));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

				}
			}

			return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, null),HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	//		corporate user upload
	@PostMapping("/bulk/corporateUser/excel/upload")
	public ResponseEntity<GeneralResponse> merchantbranchUploadCorUser(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String data) throws IOException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		AuthenticateUserResponse authenticateUserResponse = null;

		final Logger corporateExcelUploadLoger = Logger.getLogger("corporateExcelUploadLoger");
		try {
			System.out.println("entered");
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			CorporateUser corporateUser = null;
			List<CorporateUser> corporateUserList = new ArrayList<CorporateUser>();
			try {

				String pathTosaveExcelFile = fileUtil.getProperty("documentUploadPath");
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
				String excelPath = "D:\\corporateUserExcel.xlsx";

				/* saving excel file to location */
				corporateExcelUploadLoger.info("Getting Excel from base64 String");
				Gson g = new Gson();
				CorporateUserModelUploadDataModel p = g.fromJson(data, CorporateUserModelUploadDataModel.class);
				FileInputStream fileIs = null;
				try {
					Files.write(Paths.get(excelPath), DatatypeConverter.parseBase64Binary(p.getFile()));
					fileIs = new FileInputStream(new File(excelPath));
					corporateExcelUploadLoger.info("saved excel in location :" + excelPath);
				} catch (Exception e) {
					corporateExcelUploadLoger.error(e);
					e.printStackTrace();
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, "Excetion in saving excel", null), HttpStatus.OK);
				}

				XSSFWorkbook workbook = new XSSFWorkbook(fileIs);
				corporateExcelUploadLoger.info("excel saved");
				XSSFSheet worksheet = workbook.getSheetAt(0);
				Row row1 = worksheet.getRow(1);
				SuperMerchantMaster superMerchantMaster = null;
				String superMarchentId = "";

				/* getting super merchant details by super MarchentId Id */
				if (row1.getCell(0) != null) {
					corporateExcelUploadLoger.info("getting super Marchent Id");
					Cell s = row1.getCell(0);
					s.setCellType(Cell.CELL_TYPE_STRING);
					superMarchentId = s.toString();
					corporateExcelUploadLoger.info("getting super Marchent Id :" + superMarchentId);
					if (superMarchentId != null && !superMarchentId.equals("")) {
						superMerchantMaster = superMerchantMasterRepository.findOne(Integer.parseInt(superMarchentId));
					}
				}

				if (superMerchantMaster != null) {
					corporateExcelUploadLoger.info("super Marchant found .  Id:" + superMarchentId);

					/* iterating excel rows to get corporate details */
					int i = 1;
					while (i <= worksheet.getLastRowNum()) {
						XSSFRow row = worksheet.getRow(i++);

						String userLoginId = null;
						if (row.getCell(2) != null) {
							userLoginId = row.getCell(2).toString();

						}
						corporateUser = corporateUserRepository.findByUserIdAndSuperMerchantMasterId(userLoginId,
								superMerchantMaster.getId());

						if (corporateUser == null) {
							corporateExcelUploadLoger.info("====== New Corporate User ======");
							corporateExcelUploadLoger.info("Login Id :" + userLoginId);
							corporateUser = new CorporateUser();
							corporateUser.setRemarks("created through corporate user excel upload");
							corporateUser.setUserId(userLoginId);
						} else {
							corporateUser.setRemarks("edited through corporate user excel upload");
							corporateExcelUploadLoger.info("====== Old Corporate User ======");
							corporateExcelUploadLoger.info("Login Id :" + userLoginId);
						}

						// set super merchant to corporate user
						corporateUser.setSuperMerchantMaster(superMerchantMaster);

						BranchMaster bm = null;
						BranchMaster branchMaster = null;
						String branchLoginId = "";
						corporateExcelUploadLoger.info("getting branch master");
						if (row.getCell(1) != null) {
							branchLoginId = row.getCell(1).toString();
							if (branchLoginId != null && !branchLoginId.equals("")) {
								bm = branchMasterRepository.findByBranchLoginIdAndSuperMerchantMasterIdAndActiveFlag(branchLoginId,superMerchantMaster.getId(), 1);
							}
						}
						// check branch master if exist
						if (bm != null) {
							branchMaster = bm;
							corporateExcelUploadLoger.info("old branch master");
						} // if not create branch master
						else {
							branchMaster = new BranchMaster();
							branchMaster.setRemarks("created through corporate user excel upload");
							corporateExcelUploadLoger.info("new branch master");
							branchMaster.setBranchLoginId(branchLoginId);

							/* set branch password if its a new branch */

							if (row.getCell(22) != null) {
								Cell cell = row.getCell(22);
								cell.setCellType(Cell.CELL_TYPE_STRING);
								String branchPassword = cell.toString();
								if (branchPassword != null && !branchPassword.equals("")) {
									branchMaster.setBranchLoginPassword(commonTasks.md5(branchPassword));
								}
							}

							branchMaster.setCreatedIpAddress(ip);
							branchMaster.setCreatedTimestamp(new Date());
							branchMaster.setCreatedUsername(authenticateUserResponse.getUserName());// check
							branchMaster.setActiveFlag(1);
							// need to add super marchent id
							branchMaster.setSuperMerchantMaster(superMerchantMaster);
							branchMaster.setBranchRoleMaster(branchRoleMasterRepository.findOne(105));

							corporateExcelUploadLoger.info("getting parent parent master ");
							if (superMerchantMaster != null && superMerchantMaster.getParentId() != null) {

								branchMaster.setParentMerchantMaster(
										parentMerchantMasterRepository.findOne(superMerchantMaster.getParentId()));
							}
							// there is no branch Id in corporate user entity to set
							branchMaster = branchMasterRepository.save(branchMaster);



						}

						// set branch id to corporate user
						if (branchMaster != null) {
							corporateUser.setBranchCode(branchMaster.getId());
						}

						// chcek
						if (row.getCell(3) != null) {
							String userName = row.getCell(3).toString().replaceAll("\\p{C}", "");
							if (userName != null && !userName.equals("")) {
								corporateUser.setUserName(userName);
							}
						}

						if (row.getCell(4) != null) {
							Cell cell = row.getCell(4);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String userPassword = cell.toString().replaceAll("\\p{C}", "");
							if (userPassword != null && !userPassword.equals("")) {
								corporateUser.setUserPassword(commonTasks.md5(userPassword));
							}
						}

						if (row.getCell(5) != null) {
							String userAddress = row.getCell(5).toString().replaceAll("\\p{C}", "");
							if (userAddress != null && !userAddress.equals("")) {
								corporateUser.setUserAddress(userAddress);
							}
						}

						if (row.getCell(6) != null) {
							String userEmailId = row.getCell(6).toString().replaceAll("\\p{C}", "");
							if (userEmailId != null && !userEmailId.equals("")) {
								corporateUser.setEmailId(userEmailId);
							}
						}
						if (row.getCell(7) != null) {
							Cell userPhCell = row.getCell(7);
							userPhCell.setCellType(Cell.CELL_TYPE_STRING);
							String userMobileNo = userPhCell.toString().replaceAll("\\p{C}", "");
							if (userMobileNo != null && !userMobileNo.equals("")) {
								corporateUser.setMobileNo(userMobileNo);
							}
						}

						if (row.getCell(8) != null) {
							String userRegion = row.getCell(8).toString().replaceAll("\\p{C}", "");
							if (userRegion != null && !userRegion.equals("")) {
								corporateUser.setRegion(userRegion);
							}
						}

						if (row.getCell(9) != null) {
							String userZone = row.getCell(9).toString().replaceAll("\\p{C}", "");
							if (userZone != null && !userZone.equals("")) {
								corporateUser.setZone(userZone);
							}
						}
						if (row.getCell(10) != null) {
							String userType = row.getCell(10).toString().replaceAll("\\p{C}", "");
							if (userType != null && !userType.equals("")) {
								corporateUser.setUserType(userType);
							}
						}
						if (row.getCell(11) != null) {
							String userRemarks = row.getCell(11).toString().replaceAll("\\p{C}", "");
							if (userRemarks != null && !userRemarks.equals("")) {
								// corporateUser.setRemarks(userRemarks);
							}
						}

						if (row.getCell(12) != null) {
							Cell userAcNoCell = row.getCell(12);
							userAcNoCell.setCellType(Cell.CELL_TYPE_STRING);
							String userAccountNo = userAcNoCell.toString().replaceAll("\\p{C}", "");
							if (userAccountNo != null && !userAccountNo.equals("")) {
								corporateUser.setAccountNumber(userAccountNo);
							}
						}

						if (row.getCell(13) != null) {
							Cell userIfcCodeCell = row.getCell(13);
							userIfcCodeCell.setCellType(Cell.CELL_TYPE_STRING);
							String userAcIfcCode = userIfcCodeCell.toString().replaceAll("\\p{C}", "");
							if (userAcIfcCode != null && !userAcIfcCode.equals("")) {
								corporateUser.setIfscCode(userAcIfcCode);
							}
						}
						if (row.getCell(14) != null) {
							Cell userLoanDate = row.getCell(14);
							userLoanDate.setCellType(Cell.CELL_TYPE_STRING);
							String userLoanDateString = userLoanDate.toString().replaceAll("\\p{C}", "");
							if (userLoanDateString != null && !userLoanDateString.equals("")) {
								corporateUser.setLoanDate(userLoanDateString);
							}
						}

						if (row.getCell(15) != null) {
							Cell lm = row.getCell(15);
							lm.setCellType(Cell.CELL_TYPE_STRING);
							String loanAmount = lm.toString().replaceAll("\\p{C}", "");

							if (loanAmount != null && !loanAmount.equals("")) {
								corporateUser.setAmount(loanAmount);
							}
						}
						if (row.getCell(16) != null) {
							Cell cell = row.getCell(16);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String apEnable = cell.toString().replaceAll("\\p{C}", "");
							if (apEnable != null && !apEnable.equals("")) {

								if (this.isNumeric(apEnable)) {
									corporateUser.setApEnable(Integer.parseInt(apEnable));
								} else {
									corporateUser.setApEnable(0);
								}

							}
						}
						if (row.getCell(17) != null) {
							Cell cell = row.getCell(17);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String biEnable = cell.toString().replaceAll("\\p{C}", "");
							if (biEnable != null && !biEnable.equals("")) {
								if (this.isNumeric(biEnable)) {
									corporateUser.setBiEnable(Integer.parseInt(biEnable));
								} else {
									corporateUser.setBiEnable(0);
								}

							}
						}
						if (row.getCell(18) != null) {
							Cell cell = row.getCell(18);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String dropCashEnable = cell.toString().replaceAll("\\p{C}", "");
							if (dropCashEnable != null && !dropCashEnable.equals("")) {
								if (this.isNumeric(dropCashEnable)) {
									corporateUser.setDropCashEnable((Integer.parseInt(dropCashEnable)));
								} else {
									corporateUser.setDropCashEnable(0);
								}

							}
						}
						if (row.getCell(19) != null) {
							Cell cell = row.getCell(19);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String collectCashEnable = cell.toString().replaceAll("\\p{C}", "");
							if (collectCashEnable != null && !collectCashEnable.equals("")) {
								if (this.isNumeric(collectCashEnable)) {
									corporateUser.setCollectCashEnable((Integer.parseInt(collectCashEnable)));
								} else {
									corporateUser.setCollectCashEnable(0);
								}

							}
						}
						if (row.getCell(20) != null) {
							Cell cell = row.getCell(20);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String demandSheetEnable = cell.toString().replaceAll("\\p{C}", "");
							if (demandSheetEnable != null && !demandSheetEnable.equals("")) {
								if (this.isNumeric(demandSheetEnable)) {
									corporateUser.setDemandSheetEnable((Integer.parseInt(demandSheetEnable)));
								} else {
									corporateUser.setDemandSheetEnable(0);
								}

							}
						}
						if (row.getCell(21) != null) {
							Cell cell = row.getCell(21);
							cell.setCellType(Cell.CELL_TYPE_STRING);
							String settlementFlag = cell.toString().replaceAll("\\p{C}", "");
							if (settlementFlag != null && !settlementFlag.equals("")) {
								if (this.isNumeric(settlementFlag)) {
									corporateUser.setSettlementFlag((Integer.parseInt(settlementFlag)));
								} else {
									corporateUser.setSettlementFlag(0);
								}

							}
						}

						corporateUser.setCreatedTimestamp(new Date());
						corporateUser.setActiveFlag(1);
						corporateUserRepository.save(corporateUser);
						corporateUserList.add(corporateUser);
						corporateExcelUploadLoger.info("user saved & Id:" + corporateUser.getId());

						//							AUDIT LOGS

						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData("Corporate user bulk upload");
						//							auditLogs.setNewData(new Gson().toJson(corporateUser));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);
					}

				} else {
					corporateExcelUploadLoger.info("======super Merchant not found .Id:" + superMarchentId);
				}
			} catch (Exception e) {
				e.printStackTrace();
				corporateExcelUploadLoger.error(e);
			}
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, corporateUserList), HttpStatus.OK);
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	public static boolean isNumeric(String str) {
		try {
			Double.parseDouble(str);
			return true;
		} catch (NumberFormatException e) {
			return false;
		}
	}

	@PostMapping("/corporatebranch/Excel")
	public ResponseEntity<GeneralResponse> branchUploadAndUpdate( HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token
			,@RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataPerm  : permissionsList) {

			if(dataPerm.getFeatureGrpCode().equals("ONBOARDING")) {
				if(dataPerm.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(dataPerm.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
		try {
			System.out.println("model enetreed");
			Gson gson = new GsonBuilder().serializeNulls().create();
			modelM = gson.fromJson(data, MerchantOnboardingExcel.class);
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,	Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.BAD_REQUEST);
		}

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		System.out.println("model=====" + modelM.getFile());
		String docName = commonTasks.toImgFromBase64(modelM.getFile(), "corporatebranchBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
		System.out.println(docName);
		String path = fileUtil.getProperty("documentUploadPath");
		FileInputStream inputStream = new FileInputStream(new File(path + docName));
		XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
		XSSFSheet sheet = workbook.getSheetAt(0);
		DataFormatter objDefaultFormat = new DataFormatter();
		FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
		Row row;
		List<BranchMasterModel> list = new ArrayList<>();
		BranchMaster branchMaster=null;
		BranchMasterModel branchMasterModel = null;
		String superMarchentId=null;
		SuperMerchantMaster superMerchantMaster=null;
		Row row1 = sheet.getRow(1);
		if (row1.getCell(0) != null) {
			Cell s = row1.getCell(0);
			s.setCellType(Cell.CELL_TYPE_STRING);
			superMarchentId = s.toString();
			if (superMarchentId != null && !superMarchentId.equals("")) {
				superMerchantMaster = superMerchantMasterRepository.findOne(Integer.parseInt(superMarchentId));
			}
		}

		BranchRoleMaster branchRole=branchRoleMasterRepository.findOne(105);
		ParentMerchantMaster parenetMaster=parentMerchantMasterRepository.findOne(superMerchantMaster.getParentId());

		Map<String,BranchMaster> branchMap=new HashMap<String, BranchMaster>();
		Iterable<BranchMaster> branchList=branchMasterRepository.findBySuperMerchantMasterId(superMerchantMaster.getId());
		for (BranchMaster b : branchList) {
			if(b.getBranchLoginId() != null) {
				if(b.getBranchLoginId() != null) {
					branchMap.put(b.getBranchLoginId().toLowerCase(), b);
				}
			}
		}	
		try {for (int i = 1; i <= sheet.getLastRowNum(); i++)
		{
			row = sheet.getRow(i);
			branchMasterModel=new BranchMasterModel();
			String branchLoginId = "";
			if (getCellValueAccordingToCellType(row.getCell(1)) != null) 
			{
				branchLoginId = getCellValueAccordingToCellType(row.getCell(1));
			}
			branchMasterModel.setBranchLoginId(branchLoginId);
			if(!branchMap.containsKey(branchLoginId.toLowerCase()))
			{
				branchMaster=new BranchMaster();
				branchMaster.setBranchLoginId(branchLoginId);
				if(getCellValueAccordingToCellType(row.getCell(2)) != null)
				{ 

					branchMaster.setBranchLoginPassword(commonTasks.md5(getCellValueAccordingToCellType(row.getCell(2)))); 
				} 
				if(getCellValueAccordingToCellType(row.getCell(3)) != null)
				{ 

					branchMaster.setBranchName(getCellValueAccordingToCellType(row.getCell(3))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(4)) != null) 
				{ 

					branchMaster.setSubBranchAddress(getCellValueAccordingToCellType(row.getCell(4)));
				}

				if(getCellValueAccordingToCellType(row.getCell(5)) != null) 
				{ 

					branchMaster.setSubBranchPhoneNumber(getCellValueAccordingToCellType(row.getCell(5))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(6)) != null) 
				{ 

					branchMaster.setEmailId(getCellValueAccordingToCellType(row.getCell(6))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(7)) != null) 
				{ 

					branchMaster.setBranchCode(getCellValueAccordingToCellType(row.getCell(7))); 
				} //branch open date
				if(row.getCell(8) != null)
				{ 
					String branchOpenDate=row.getCell(8).toString();
					if(branchOpenDate != null && !branchOpenDate.equals(""))
					{
						branchMaster.setBranchCode(""); 
					}
				}

				if(getCellValueAccordingToCellType(row.getCell(9)) != null) 
				{ 

					branchMaster.setSubBranchName(getCellValueAccordingToCellType(row.getCell(9)));
				}
				if(getCellValueAccordingToCellType(row.getCell(10)) != null) 
				{ 

					branchMaster.setSubBranchPhoneNumber(getCellValueAccordingToCellType(row.getCell(10)));
				}

				if(getCellValueAccordingToCellType(row.getCell(11)) != null) 
				{ 

					branchMaster.setCluster(getCellValueAccordingToCellType(row.getCell(11)));
				}

				if(getCellValueAccordingToCellType(row.getCell(12)) != null)
				{

					branchMaster.setClusterCode(getCellValueAccordingToCellType(row.getCell(12)));
				}

				if(getCellValueAccordingToCellType(row.getCell(13)) != null)
				{ 

					branchMaster.setClusterEmailId(getCellValueAccordingToCellType(row.getCell(13))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(14)) != null)
				{

					branchMaster.setDivision(getCellValueAccordingToCellType(row.getCell(14)));
				}

				if(getCellValueAccordingToCellType(row.getCell(15)) != null) 
				{ 

					branchMaster.setDivisionCode(getCellValueAccordingToCellType(row.getCell(15))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(16)) != null)
				{ 

					branchMaster.setDivisionEmailId(getCellValueAccordingToCellType(row.getCell(16)));
				}

				if(getCellValueAccordingToCellType(row.getCell(17)) != null) 
				{ 

					branchMaster.setRegion(getCellValueAccordingToCellType(row.getCell(17)));
				}

				if(getCellValueAccordingToCellType(row.getCell(18)) != null) 
				{ 

					branchMaster.setRegionCode(getCellValueAccordingToCellType(row.getCell(18))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(19)) != null) 
				{  

					branchMaster.setRegionEmailId(getCellValueAccordingToCellType(row.getCell(19))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(20)) != null)
				{ 

					branchMaster.setState(getCellValueAccordingToCellType(row.getCell(20))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(21)) != null)
				{ 

					branchMaster.setStateCode(getCellValueAccordingToCellType(row.getCell(21))); 
				}
				if(getCellValueAccordingToCellType(row.getCell(22)) != null) 
				{ 

					branchMaster.setStateEmailId(getCellValueAccordingToCellType(row.getCell(22))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(23)) != null) 
				{ 

					branchMaster.setZone(getCellValueAccordingToCellType(row.getCell(23)));
				}

				if(getCellValueAccordingToCellType(row.getCell(24)) != null) 
				{ 

					branchMaster.setZoneCode(getCellValueAccordingToCellType(row.getCell(24))); 
				}
				if(getCellValueAccordingToCellType(row.getCell(25)) != null)
				{ 
					branchMaster.setZoneEmailId(getCellValueAccordingToCellType(row.getCell(25)));
				}
				branchMaster.setCreatedIpAddress(ip);
				branchMaster.setCreatedTimestamp(new Date());
				branchMaster.setCreatedUsername(authenticateUserResponse.getUserName());// check
				branchMaster.setActiveFlag(1);
				// need to add super marchent id
				branchMaster.setSuperMerchantMaster(superMerchantMaster);
				branchMaster.setBranchRoleMaster(branchRole);
				branchMaster.setParentMerchantMaster(parenetMaster);
				branchMaster.setRemarks("created through excel upload"); 
				// there is no branch Id in corporate user entity to set
				branchMaster = branchMasterRepository.save(branchMaster);
				branchMap.put(branchMaster.getBranchLoginId().toLowerCase(), branchMaster);
				branchMasterModel.setRemarks("created through excel upload");
				branchMasterModel.setActiveFlag(1);

			}
			else {
				branchMaster = branchMap.get(branchLoginId.toLowerCase());
				if(getCellValueAccordingToCellType(row.getCell(2)) != null)
				{ 

					branchMaster.setBranchLoginPassword(commonTasks.md5(getCellValueAccordingToCellType(row.getCell(2)))); 
				} 
				if(getCellValueAccordingToCellType(row.getCell(3)) != null)
				{ 

					branchMaster.setBranchName(getCellValueAccordingToCellType(row.getCell(3))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(4)) != null) 
				{ 

					branchMaster.setSubBranchAddress(getCellValueAccordingToCellType(row.getCell(4)));
				}

				if(getCellValueAccordingToCellType(row.getCell(5)) != null) 
				{ 

					branchMaster.setSubBranchPhoneNumber(getCellValueAccordingToCellType(row.getCell(5))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(6)) != null) 
				{ 

					branchMaster.setEmailId(getCellValueAccordingToCellType(row.getCell(6))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(7)) != null) 
				{ 

					branchMaster.setBranchCode(getCellValueAccordingToCellType(row.getCell(7))); 
				} //branch open date
				if(row.getCell(8) != null)
				{ 
					String branchOpenDate=row.getCell(8).toString();
					if(branchOpenDate != null && !branchOpenDate.equals(""))
					{
						branchMaster.setBranchCode(""); 
					}
				}

				if(getCellValueAccordingToCellType(row.getCell(9)) != null) 
				{ 

					branchMaster.setSubBranchName(getCellValueAccordingToCellType(row.getCell(9)));
				}
				if(getCellValueAccordingToCellType(row.getCell(10)) != null) 
				{ 

					branchMaster.setSubBranchPhoneNumber(getCellValueAccordingToCellType(row.getCell(10)));
				}

				if(getCellValueAccordingToCellType(row.getCell(11)) != null) 
				{ 

					branchMaster.setCluster(getCellValueAccordingToCellType(row.getCell(11)));
				}

				if(getCellValueAccordingToCellType(row.getCell(12)) != null)
				{

					branchMaster.setClusterCode(getCellValueAccordingToCellType(row.getCell(12)));
				}

				if(getCellValueAccordingToCellType(row.getCell(13)) != null)
				{ 

					branchMaster.setClusterEmailId(getCellValueAccordingToCellType(row.getCell(13))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(14)) != null)
				{

					branchMaster.setDivision(getCellValueAccordingToCellType(row.getCell(14)));
				}

				if(getCellValueAccordingToCellType(row.getCell(15)) != null) 
				{ 

					branchMaster.setDivisionCode(getCellValueAccordingToCellType(row.getCell(15))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(16)) != null)
				{ 

					branchMaster.setDivisionEmailId(getCellValueAccordingToCellType(row.getCell(16)));
				}

				if(getCellValueAccordingToCellType(row.getCell(17)) != null) 
				{ 

					branchMaster.setRegion(getCellValueAccordingToCellType(row.getCell(17)));
				}

				if(getCellValueAccordingToCellType(row.getCell(18)) != null) 
				{ 

					branchMaster.setRegionCode(getCellValueAccordingToCellType(row.getCell(18))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(19)) != null) 
				{  

					branchMaster.setRegionEmailId(getCellValueAccordingToCellType(row.getCell(19))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(20)) != null)
				{ 

					branchMaster.setState(getCellValueAccordingToCellType(row.getCell(20))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(21)) != null)
				{ 

					branchMaster.setStateCode(getCellValueAccordingToCellType(row.getCell(21))); 
				}
				if(getCellValueAccordingToCellType(row.getCell(22)) != null) 
				{ 

					branchMaster.setStateEmailId(getCellValueAccordingToCellType(row.getCell(22))); 
				}

				if(getCellValueAccordingToCellType(row.getCell(23)) != null) 
				{ 

					branchMaster.setZone(getCellValueAccordingToCellType(row.getCell(23)));
				}

				if(getCellValueAccordingToCellType(row.getCell(24)) != null) 
				{ 

					branchMaster.setZoneCode(getCellValueAccordingToCellType(row.getCell(24))); 
				}
				if(getCellValueAccordingToCellType(row.getCell(25)) != null)
				{ 
					branchMaster.setZoneEmailId(getCellValueAccordingToCellType(row.getCell(25)));
				}
				branchMaster.setCreatedIpAddress(ip);

				branchMaster.setCreatedUsername(authenticateUserResponse.getUserName());// check
				branchMaster.setActiveFlag(1);
				branchMaster.setUpdatedTimestamp(new Date());
				// need to add super marchent id
				/*
				 * branchMaster.setSuperMerchantMaster(superMerchantMaster);
				 * branchMaster.setBranchRoleMaster(branchRole);
				 * branchMaster.setParentMerchantMaster(parenetMaster);
				 */
				// there is no branch Id in corporate user entity to set
				branchMaster = branchMasterRepository.save(branchMaster);
				branchMaster.setRemarks("edited through excel upload");
				branchMasterModel.setActiveFlag(1);
				branchMasterModel.setRemarks("Updated successfully.");
			}
			list.add(branchMasterModel);
		}}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(	new GeneralResponse(Constants.FALSE, "Exception in server", null), HttpStatus.OK);
		}
		return new ResponseEntity<GeneralResponse>(	new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, list), HttpStatus.OK);
	}

	public String getCellValueAccordingToCellType(Cell cell) {
		String cellValue = "";
		String value = "";
		DataFormatter dataFormatter=new DataFormatter();
		if (cell != null) {
			switch (cell.getCellType()) {
			case Cell.CELL_TYPE_STRING:
				value = cell.getStringCellValue();
				break;
			case Cell.CELL_TYPE_NUMERIC:
				if (DateUtil.isCellDateFormatted(cell)) {
					SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
					value = dateFormat.format(cell.getDateCellValue());
					//					System.out.print(dateFormat.format(cell.getDateCellValue()) + "\t\t");
				} else {
					cell.setCellType(Cell.CELL_TYPE_STRING);
					value = cell.getStringCellValue();
					//value = String.valueOf(cell.getNumericCellValue());
					//					System.out.print(cell.getStringCellValue() + "\t\t");
				}
				// if (!HSSFDateUtil.isCellDateFormatted(cell)) {
				// cell.setCellType(Cell.CELL_TYPE_STRING);
				// value = cell.getStringCellValue();
				// } else {
				// value = null;
				// }
				break;
			case Cell.CELL_TYPE_BOOLEAN:
				value = String.valueOf(cell.getBooleanCellValue());
				break;
			case Cell.CELL_TYPE_BLANK:
				value = null;
				break;
			default:
				if (cell.getColumnIndex() == 1 && cell.getCellType() == 2)
					value = cell.toString();
				else
					value = null;
				break;
			}
		} else {
			value = null;
		}
		cellValue = value;

		return cellValue;
	}

	//EKYC default enable merchants
	@PostMapping("/enableekyc/merchantonboard/excel/{smid}")
	public ResponseEntity<GeneralResponse> merchantEnableEKYCOnboard(HttpServletRequest httpRequest,HttpServletResponse httpresponse, HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String requestbody, @PathVariable Integer smid)
	{
		ResponseEntity<GeneralResponse> response = null;
		log.info("createProxyRequest started");
		FpCpAuditLogs auditLogs = null;
		String proxyurl = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
			String dateAsString = simpleDateFormat.format(new Date());

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("ONBOARDING")) {
					if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
						if(data.getPermCreate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);

				System.out.println("Request:"+ (new Gson()).toJson(requestbody));

				MerchantOnboardingExcel modelM = new MerchantOnboardingExcel();
				try {
					System.out.println("model enetreed");
					Gson gson = new GsonBuilder().serializeNulls().create();
					modelM = gson.fromJson(requestbody, MerchantOnboardingExcel.class);
				} catch (Exception e) {
					e.printStackTrace();
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
							HttpStatus.BAD_REQUEST);
				}

				System.out.println("model=====" + modelM.getFile());
				String docName = commonTasks.toImgFromBase64(modelM.getFile(), "enableekyc-merchantBulk" + authenticateUserResponse.getUserName()+"_"+dateAsString, "xlsx");
				System.out.println(docName);
				String path = fileUtil.getProperty("documentUploadPath");
				FileInputStream inputStream = new FileInputStream(new File(path + docName));
				XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
				XSSFSheet sheet = workbook.getSheetAt(0);

				Row row;
				boolean errorOccured = false;
				String errorMessage = "Upload process was interrupted due to an error. Reason -";
				List<Integer> rowContainsInavlidPanNo = new ArrayList<Integer>();// Pan No.
				List<Integer> rowContainsInavlidAaNo = new ArrayList<Integer>();// aadhar No
				List<Integer> rowContainsInavlidMobileNo = new ArrayList<Integer>();// Mobile No.
				List<Integer> rowContainsInavlidMerchantLoginId = new ArrayList<Integer>();// Merchant Login Id
				List<Integer> rowContainsInavlidSMID = new ArrayList<Integer>();// SM Id
				
				List<Integer> rowContainsMIDexists = new ArrayList<Integer>();// Merchant Login Id Exists system EKYC INFO
				List<Integer> rowContainsPANLimtexceeds = new ArrayList<Integer>();// PAN Count exceeds limit system
				List<Integer> rowContainsMIDNotexceeds = new ArrayList<Integer>(); //Merchant Login Id Not Exists In Merchant master system
				List<Integer> rowContainsNamesMismatch = new ArrayList<Integer>(); //Merchant Login Id Not Exists In Merchant master system
				List<Integer> rowContainsSaveKycFailed = new ArrayList<Integer>(); //Merchant Login Id Not Exists In Merchant master system
				try
				{
					for (int i = 1; i <= sheet.getLastRowNum(); i++)
					{
						row = sheet.getRow(i);
						if (row != null)
						{
							if(getCellValueAccordingToCellType(row.getCell(0)) == null	|| getCellValueAccordingToCellType(row.getCell(0)).equals("") 
									|| getCellValueAccordingToCellType(row.getCell(0)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(0)).trim().length() != 10)
							{	

								errorOccured = true;
								rowContainsInavlidPanNo.add((i + 1));
							}

							if(getCellValueAccordingToCellType(row.getCell(2)) == null	|| getCellValueAccordingToCellType(row.getCell(2)).equals("") 
									|| getCellValueAccordingToCellType(row.getCell(2)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(2)).trim().length() != 4)
							{	

								errorOccured = true;
								rowContainsInavlidAaNo.add((i + 1));
							}

							if(getCellValueAccordingToCellType(row.getCell(4)) == null	|| getCellValueAccordingToCellType(row.getCell(4)).equals("") 
									|| getCellValueAccordingToCellType(row.getCell(4)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().length() != 10)
							{	

								errorOccured = true;
								rowContainsInavlidMobileNo.add((i + 1));
							}

							if(getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") 
									|| getCellValueAccordingToCellType(row.getCell(5)).trim().equals(""))
							{	

								errorOccured = true;
								rowContainsInavlidMerchantLoginId.add((i + 1));
							}

							if(getCellValueAccordingToCellType(row.getCell(6)) == null	|| getCellValueAccordingToCellType(row.getCell(6)).equals("") 
									|| getCellValueAccordingToCellType(row.getCell(6)).trim().equals(""))
							{	

								errorOccured = true;
								rowContainsInavlidSMID.add((i + 1));
							}
							else if(smid != Integer.parseInt(String.valueOf(row.getCell(6)).trim()))
							{
								errorOccured = true;
								rowContainsInavlidSMID.add((i + 1));
							}
						}
					}

					// column in any row.
					if (errorOccured == true)
					{
						if (rowContainsInavlidPanNo.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidPanNo)+ " doesn't contain valid value in 'PAN Number' column";
						}
						if (rowContainsInavlidAaNo.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidAaNo)+ " doesn't contain valid last 4 Aadhar Number value column";
						}
						if (rowContainsInavlidMobileNo.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidMobileNo)+ " doesn't contain valid Mobile Number value column";
						}
						if (rowContainsInavlidMerchantLoginId.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidMerchantLoginId)+ " doesn't contain valid MerchantLogin Id value column";
						}
						if (rowContainsInavlidSMID.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidSMID)+ " doesn't contain valid Super Merchant Id value column";
						}
						log.info(errorMessage);
						System.out.println(errorMessage);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								errorMessage, Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
					} 

					for (int i = 1; i <= sheet.getLastRowNum(); i++)
					{
						row = sheet.getRow(i);
						String panNo = String.valueOf(row.getCell(0)).trim();
						String panVerifiedName = String.valueOf(row.getCell(1)).trim();
						String last4aadhar = String.valueOf(row.getCell(2)).trim();
						String aadharVerifName = String.valueOf(row.getCell(3)).trim();
						String mobileNumber = String.valueOf(row.getCell(4)).trim();
						String merchantLoginId = String.valueOf(row.getCell(5)).trim();
						String smidS = String.valueOf(row.getCell(6)).trim();
						System.out.println("ROWS:"+i+":PAN NO->"+panNo+"::PAN NAME->"+panVerifiedName+"::last4Aadhar->"+last4aadhar+"::aadhaName->"
								+aadharVerifName+"mobileNumber->"+ mobileNumber+"::MerchantLoginId->"+merchantLoginId+"::SMID->"+smidS);
						
						List<MerchantMaster> masters = merchantMasterRepository.findByMerchantLoginIdAndSuperMerchantMasterId(merchantLoginId, smid);
						System.out.println("Masters List size:"+ masters.size());
						if(masters == null || masters.isEmpty() || (masters != null && masters.size() <= 0) )
						{
							errorOccured = true;
							rowContainsMIDNotexceeds.add((i + 1));
						} 
						else
						{
							MerchantMaster merchantMaster = null;
							if(masters.size() == 1)
								merchantMaster = masters.get(0);
							else
							{
								for(MerchantMaster mm : masters)
								{
									if(mm.getActiveFlag() != null && mm.getActiveFlag() == 1){
										merchantMaster = mm;
										break;
									}
								}
								if(merchantMaster == null){
									merchantMaster = masters.get(0);
								}
							}
							
							// Mismatch is rejecccted again update the data ?? need to add check ekyc flag not in 2 new process or existing 
							
							EkycInfoData ekycInfo = ekycInfoDataRepository.findByMerchantLoginIdAndSuperMerchantId(merchantLoginId, smid);
							
							if(ekycInfo != null)
							{
								errorOccured = true;
								rowContainsMIDexists.add((i + 1));
							}
							else
							{
								List<BigInteger> list = ekycInfoDataRepository.getCountOfLinkedPan(panNo);
								if(list != null && !list.isEmpty() && list.size() > 0)
								{
									System.out.println("Aadhar or PAN has already used more than 6 times::"+panNo);
									log.info("EKYC offline private INFO Aadhar or PAN has already used more than 6 times::"+panNo);
									
									errorOccured = true;
									rowContainsPANLimtexceeds.add((i + 1));
									continue;
								}
								else
								{
									List<EkycInfoData> enableKycdata = ekycInfoDataRepository.getEnableKycInfo(panNo,last4aadhar);
									
									if(enableKycdata != null && !enableKycdata.isEmpty() && enableKycdata.size() > 0)
									{
										EkycInfoData ekycexistsdata = enableKycdata.get(0);
										EkycInfoData ekycnewdata = createNewEkycInfo(ekycexistsdata,merchantMaster, 0, null);
										if(ekycnewdata != null)
										{
											int matchNamesPerc = enhanceMerchantPanAadharName(ekycnewdata.getMerchantName(), ekycnewdata.getPanVerifiedName(),ekycnewdata.getKycResName());
											if(matchNamesPerc < 70){
												ekycnewdata.setEkycStatusFlag(3);
												ekycnewdata.setResponseResCode("FP099");
												ekycnewdata.setResponseResMsg("Aadhar/Pan/Mid Mismatch");
												ekycInfoDataRepository.save(ekycnewdata);	
												
												errorOccured = true;
												rowContainsNamesMismatch.add((i + 1));
											}
											else
											{
												MerchantMaster mmold = merchantMasterRepository.findById(ekycexistsdata.getMerchantId());
												MerchantMaster mmnew = merchantMasterRepository.findById(ekycnewdata.getMerchantId());
												
												mmnew.setTerminalId(mmold.getTerminalId());
												mmnew.setEkycStatusFlag(mmold.getEkycStatusFlag());
												mmnew.setTerminalIdFlag(mmold.getTerminalIdFlag());
												mmnew.setMicroAtmEnable(mmold.getMicroAtmEnable());
												mmnew.setActiveFlag(mmold.getActiveFlag());
												mmnew.setLastUsedHash(mmold.getLastUsedHash());
												mmnew.setEkycAddressLine1(mmold.getEkycAddressLine1());
												mmnew.setEkycAddressLine2(mmold.getEkycAddressLine2());		
												mmnew.setEkycState(mmold.getEkycState());
												mmnew.setEkycCity(mmold.getEkycCity());
												mmnew.setKycType(mmold.getKycType());
												mmnew.setEditedTimestamp(new Date());
												mmnew.setSwitch1(3);
												merchantMasterRepository.save(mmnew);
											}
										}
										else
										{
											errorOccured = true;
											rowContainsSaveKycFailed.add((i + 1));
										}
									}
								}							
							}
						}							
					}
					// AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("File Name "+docName);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					if (errorOccured == true)
					{
						if (rowContainsMIDNotexceeds.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsMIDNotexceeds)+ " merchant doesn't Exists in our system";
						}
						if (rowContainsMIDexists.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsMIDexists)+ " merchant already exists in Ekyc";
						}
						if (rowContainsPANLimtexceeds.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsPANLimtexceeds)+ " Pan Limit exceeds";
						}
						if (rowContainsNamesMismatch.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsNamesMismatch)+ " Names mismatch. Check in Mislenious reports";
						}
						if (rowContainsSaveKycFailed.size() > 0) {
							errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsSaveKycFailed)+ " failed to save in system";
						}
						log.info(errorMessage);
						System.out.println(errorMessage);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								errorMessage, Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
					} 
				}
				catch(Exception e)
				{
					e.printStackTrace();
					return  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null),HttpStatus.OK); 

				}  

				log.info("createProxyRequest data is sent in response");
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						"count"+ sheet.getLastRowNum(), Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	private int enhanceMerchantPanAadharName(String name, String panName, String kycName)
	{
		try{
			if(name != null && name.length() > 0 && panName != null && kycName != null)
			{
				int npPerc = FuzzySearch.tokenSetPartialRatio(name, panName);
				int nkPerc = FuzzySearch.tokenSetPartialRatio(name, kycName);
				int pkperc = FuzzySearch.tokenSetPartialRatio(panName, kycName);
				System.out.println("PERCENTAGE Name:"+ npPerc +" :: PAN NAME:"+ nkPerc +" :: KYCNAME:"+ pkperc);
				if(npPerc > 70 && nkPerc > 70 && pkperc > 70)
					return pkperc;
				else
					return 0;
			}
			else if(panName != null && kycName != null){
				int pkperc = FuzzySearch.tokenSetPartialRatio(panName, kycName);
				if(pkperc > 70) 
					return pkperc;
				else
					return 0;
			}
			else{
				System.out.println("Name is Null NAME:"+ name +":: PAN NAME:"+ panName +" KYC NAME:"+kycName );
				return 0;
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return 0;
		}
	}
	
	private EkycInfoData createNewEkycInfo( EkycInfoData data, MerchantMaster mm, int createNewInfo , EkycInfoData appenddata)
	{
		EkycInfoData newdata = null;
		try{
			if(createNewInfo == 0)
				newdata = new EkycInfoData();
			else 
				newdata = appenddata;
			newdata.setFingpayTransactionId(data.getFingpayTransactionId()+"EE");
			newdata.setMerchantId(mm.getId());
			newdata.setMerchantLoginId(mm.getMerchantLoginId());
			newdata.setSuperMerchantId(mm.getSuperMerchantMaster().getId());
			newdata.setParentId(mm.getParentId());
			newdata.setDeviceImei(data.getDeviceImei());
			newdata.setLatitude(data.getLatitude());
			newdata.setLongitude(data.getLongitude());
			newdata.setAadharNumber(data.getAadharNumber());
			newdata.setIciciAadhaarReferenceId(data.getIciciAadhaarReferenceId());
			newdata.setReqId(data.getReqId());
			newdata.setRequestType(data.getRequestType());
			newdata.setRequestRemarks("ENABLE EKYC");
			newdata.setRequestTimestamp(new Date());
			newdata.setWebStatus(data.getWebStatus());
			newdata.setResponseRrn(data.getResponseRrn());
			newdata.setResponseRet(data.getResponseRet());
			newdata.setResponseResCode(data.getResponseResCode());
			newdata.setResponseResMsg(data.getResponseResMsg());
			newdata.setResponseReqId(data.getResponseReqId());
			newdata.setResponseResData(data.getResponseResData());
			newdata.setKycResRet(data.getKycResRet());
			newdata.setKycResCode(data.getKycResCode());
			newdata.setKycResErr(data.getKycResErr());
			newdata.setKycResTs(data.getKycResTs());
			newdata.setKycResTtl(data.getKycResTtl());
			newdata.setKycResActn(data.getKycResActn());
			newdata.setKycResUid(data.getKycResUid());
			newdata.setKycResUidTkn(data.getKycResUidTkn());
			newdata.setKycResName(data.getKycResName());
			newdata.setKycResDob(data.getKycResDob());
			newdata.setKycResGender(data.getKycResGender());
			newdata.setKycResPhone(data.getKycResPhone());
			newdata.setKycResEmail(data.getKycResEmail());
			newdata.setKycResCo(data.getKycResCo());
			newdata.setKycResStreet(data.getKycResStreet());
			newdata.setKycResHouse(data.getKycResHouse());
			newdata.setKycResLm(data.getKycResLm());
			newdata.setKycResLoc(data.getKycResLoc());
			newdata.setKycResVtc(data.getKycResVtc());
			newdata.setKycResSubdist(data.getKycResSubdist());
			newdata.setKycResDist(data.getKycResDist());
			newdata.setKycResState(data.getKycResState());
			newdata.setKycResPc(data.getKycResPc());
			newdata.setKycResPo(data.getKycResPo());
			newdata.setKycResPht(data.getKycResPht());
			newdata.setKycResPrn(data.getKycResPrn());
			newdata.setKycResRar(data.getKycResRar());
			newdata.setResponseRemarks(data.getResponseRemarks());
			newdata.setResponseTimestamp(data.getResponseTimestamp());
			newdata.setLastUsedHash(data.getLastUsedHash());
			newdata.setMobileNumber(data.getMobileNumber());
			newdata.setOtp(data.getOtp());
			newdata.setOtpVerifiedFlag(data.getOtpVerifiedFlag());
			newdata.setOtpVerifiedTime(data.getOtpVerifiedTime());
			newdata.setPanNumber(data.getPanNumber());
			newdata.setPanVerifiedName(data.getPanVerifiedName());
			newdata.setPanVerifiedFlag(data.getPanVerifiedFlag());
			newdata.setPanVerifiedTime(data.getPanVerifiedTime());
			newdata.setMatmSerialNumber(data.getMatmSerialNumber());
			newdata.setEkycStatusFlag(data.getEkycStatusFlag());
			newdata.setMerchantName(mm.getMerchantName());
			newdata.setTerminalId(data.getTerminalId());
			newdata.setFileName(data.getFileName());
			newdata.setFileGenratedTimestamp(data.getFileGenratedTimestamp());
			newdata.setFileFlag(data.getFileFlag());
			newdata.setApprovalFlag(data.getApprovalFlag());
			newdata.setApprovedUserName(data.getApprovedUserName());
			newdata.setApprovedTimestamp(data.getApprovedTimestamp());
			newdata.setPdfGenerateFlag(0);
			newdata.setEkycType(data.getEkycType());
			newdata.setOfflineEkycStatusFlag(data.getOfflineEkycStatusFlag());
			newdata.setOfflineEkycStatus(data.getOfflineEkycStatus());
			newdata.setBase64AadharId(data.getBase64AadharId());
			newdata.setBase64PanId(data.getBase64PanId());
			newdata.setBase64VoterId(data.getBase64VoterId());
			newdata.setBase64DrivingLicenceId(data.getBase64DrivingLicenceId());
			newdata.setServerName(data.getServerName());
			newdata.setOfflineEkycValidatedBy(data.getOfflineEkycValidatedBy());
			newdata.setOfflineEkycValidatedTimeStamp(data.getOfflineEkycValidatedTimeStamp());
			newdata.setOfflinePanName(data.getOfflinePanName());
			newdata.setOfflinePanNumber(data.getOfflinePanNumber());
			newdata.setOfflineAadharName(data.getOfflineAadharName());
			newdata.setOfflineLastUsedHash(data.getOfflineLastUsedHash());
			newdata = ekycInfoDataRepository.save(newdata);

		}catch(Exception e){
			System.out.println("Exeption OCCURED AT ENRICH THE DATA IN EKYC INFO ID:"+ data.getId());
			e.printStackTrace();

		}
		return newdata;
	}
	
	private String getCsvFromList(List<Integer> list) {
		String csv = "[";
		try {
			for (Integer integer : list) {
				csv = csv + integer + ", ";
			}
			csv = csv.substring(0, csv.length() - 2) + "]";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return csv;
	}
	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	
	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.codec.binary.Base64;
import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ChargebackModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;


@RestController
@RequestMapping(value = "/api/chargebackoperations")
public class ChargeBackController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	FilesUtil filesUtil;
	
	private static final Logger log = Logger.getLogger("ChargeBackController");
	
	@GetMapping("/ekys/status/{fromDate}/{toDate}/{statusType}")
	public ResponseEntity<GeneralResponse> uploadChargeBackdata( HttpServletRequest httprequest, HttpServletResponse httpresponse, @RequestHeader("token") String token, @RequestBody String exceldata)
	{

		log.info("********************uploadChargeBackdata START********************" );
		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
		ResponseEntity<GeneralResponse> response = null;
		File filereader = null;
		XSSFWorkbook xlsReader = null;
		int count = 0;
		
		try 
		{	
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse auth = ((AuthenticateUserResponse)response.getBody().getData());

			ChargebackModel modelM = new ChargebackModel();
			try {
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(exceldata, ChargebackModel.class);
			} catch (Exception e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			System.out.println("model=====" + modelM.getFile());
			String dateAsString = df.format(new Date());

			String docName = toFileFromBase64(modelM.getFile(), "EkycTerminalsAssign_"+ auth.getUserName()+"_", "xlsx" );
			System.out.println(docName);
			String path = filesUtil.getProperty("chargebackfilesUploadPath");

			filereader = new File(path + docName);
			xlsReader = new XSSFWorkbook(filereader); 
			for(int xls = 0; xls < xlsReader.getNumberOfSheets();xls++)
			{
				System.out.println("Sheet started reading:"+xls);				
				XSSFSheet sheet = xlsReader.getSheetAt(xls);
				
				boolean fileHeadersAreInValid = false;
	    		String headersMismatched="";
	    		
	    		Row headerRow = sheet.getRow(sheet.getFirstRowNum());
	    		int cellCount= headerRow.getLastCellNum();
	    		
	    		if(cellCount != 11){
	    			fileHeadersAreInValid = true;
	    		}else{
	    			validateHeaders(headerRow, fileHeadersAreInValid,headersMismatched);
	    		}
				
	    		if(fileHeadersAreInValid==true){
	    			if(headersMismatched.equals("")){
	    				System.out.println("File uploaded is not valid. Please follow the sample file");
	    				response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
	    						"File uploaded is not valid. Please follow the sample file(headers mismatch)", Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
	    			 }
	    			else{
	    				System.out.println("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+headersMismatched.replaceAll(", $", "")+" are mismatched");
	    				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+headersMismatched.replaceAll(", $", "")+" are mismatched");
	    				response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
	    						"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+headersMismatched.replaceAll(", $", "")+" are mismatched", Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
	    			}
	    			return response;
	    		}
	    		
	    		response = validateDetailedRecord(sheet);
				if(response != null)
					return response;
			}
		}catch(Exception e){
			e.printStackTrace();
			log.info("eKyc Exception occured Update Terminal ID :"+e.getMessage());
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					e.getMessage(), Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
		}
		finally
		{
			try {
				if (xlsReader != null)
					xlsReader.close();
			}
			catch (IOException ex) {
				System.out.println("Exception occured at XSSFWorkbook Reader line");
				ex.printStackTrace();
			}
		}
		return response;
	}
	
	private ResponseEntity<GeneralResponse> validateDetailedRecord(XSSFSheet sheet)
	{
		// Error Message
				String errorMessage = "Upload process was interrupted due to an error. Reason -";
				boolean errorOccured=false;
				
				List<Integer> rowContainsInavlidSNo = new ArrayList<Integer>();//S no
				List<Integer> rowContainsInavlidCBDate = new ArrayList<Integer>();// CB Dt.
				List<Integer> rowContainsInavlidCBType = new ArrayList<Integer>();//CB Type
				List<Integer> rowContainsInavlidBANK = new ArrayList<Integer>();//BANK
				List<Integer> rowContainsInavlidCardNo = new ArrayList<Integer>();//Card No
				List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();//Txn No.
				List<Integer> rowContainsInavlidAmt = new ArrayList<Integer>();//Amt.
				List<Integer> rowContainsInavlidTxnDt = new ArrayList<Integer>();//Txn Dt
				List<Integer> rowContainsInavlidTRNCode = new ArrayList<Integer>();//TRN Code
				List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();//TAT
				List<Integer> rowContainsInavlidBcTerminalID = new ArrayList<Integer>();//BC Terminal ID
				List<Integer> emptyRowNos = new ArrayList<Integer>(); // empty row nos
				
				ResponseEntity<GeneralResponse> response = null;
				
		try{
			
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				Row row = sheet.getRow(i);
				
				// check S no is valid
				if (getCellValueAccordingToCellType (row.getCell(0)) == null || getCellValueAccordingToCellType(row.getCell(0)).equals("") || getCellValueAccordingToCellType(row.getCell(0)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidSNo.add((i+1));
				}
				
				// check CB Dt. valid
				if (getCellValueAccordingToCellType (row.getCell(1)) == null || getCellValueAccordingToCellType(row.getCell(1)).equals("") || getCellValueAccordingToCellType(row.getCell(1)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidCBDate.add((i+1));
				}
				
				// check CB Type is valid
				if (getCellValueAccordingToCellType (row.getCell(2)) == null || getCellValueAccordingToCellType(row.getCell(2)).equals("") || getCellValueAccordingToCellType(row.getCell(2)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidCBType.add((i+1));
				}
				
				// check BANK is valid
				if (getCellValueAccordingToCellType (row.getCell(3)) == null || getCellValueAccordingToCellType(row.getCell(3)).equals("") || getCellValueAccordingToCellType(row.getCell(3)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidBANK.add((i+1));
				}
				
				// check Card No is valid
				if (getCellValueAccordingToCellType (row.getCell(4)) == null || getCellValueAccordingToCellType(row.getCell(4)).equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidCardNo.add((i+1));
				}
				
				// check Txn No. is valid
				if (getCellValueAccordingToCellType (row.getCell(5)) == null || getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidTxnNo.add((i+1));
				}
				
				// check Amt. is valid
				if (getCellValueAccordingToCellType (row.getCell(6)) == null || getCellValueAccordingToCellType(row.getCell(6)).equals("") || getCellValueAccordingToCellType(row.getCell(6)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidAmt.add((i+1));
				}
				
				// check Txn Dt is valid
				if (getCellValueAccordingToCellType (row.getCell(7)) == null || getCellValueAccordingToCellType(row.getCell(7)).equals("") || getCellValueAccordingToCellType(row.getCell(7)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidTxnDt.add((i+1));
				}
				
				// check TRN Code is valid
				if (getCellValueAccordingToCellType (row.getCell(8)) == null || getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidTRNCode.add((i+1));
				}
				
				// check TAT is valid
				/*if (getCellValueAccordingToCellType (row.getCell(9)) == null || getCellValueAccordingToCellType(row.getCell(9)).equals("") || getCellValueAccordingToCellType(row.getCell(9)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidTAT.add((i+1));
				}*/
				
				// check BC Terminal ID is valid
				if (getCellValueAccordingToCellType (row.getCell(10)) == null || getCellValueAccordingToCellType(row.getCell(10)).equals("") || getCellValueAccordingToCellType(row.getCell(10)).trim().equals("")) {
					errorOccured = true;
					rowContainsInavlidBcTerminalID.add((i+1));
				}
			}
			
			// Bounce an error if file contains invalid value in any column in any row.
			if( errorOccured == true){
				if(rowContainsInavlidSNo.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidSNo)+" doesn't contain valid value in 'S no' column";
				}
				if(rowContainsInavlidCBDate.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidCBDate)+" doesn't contain valid value in 'CB Dt.' column";
				}
				if(rowContainsInavlidCBType.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidCBType)+" doesn't contain valid value in 'CB Type' column";
				}
				if(rowContainsInavlidBANK.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidBANK)+" doesn't contain valid value in 'BANK' column";
				}
				if(rowContainsInavlidCardNo.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidCardNo)+" doesn't contain valid value in 'Card No' column";
				}
				if(rowContainsInavlidTxnNo.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidTxnNo)+" doesn't contain valid value in 'Txn No.' column";
				}
				if(rowContainsInavlidAmt.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidAmt)+" doesn't contain valid value in 'Amt.' column";
				}
				if(rowContainsInavlidTxnDt.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidTxnDt)+" doesn't contain valid value in 'Txn Dt' column";
				}
				if(rowContainsInavlidTRNCode.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidTRNCode)+" doesn't contain valid value in 'TRN Code' column";
				}
				if(rowContainsInavlidTAT.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidTAT)+" doesn't contain valid value in 'TAT' column";
				}
				if(rowContainsInavlidBcTerminalID.size()>0){
					errorMessage += "\n * Row(s) "+getCsvFromList(rowContainsInavlidBcTerminalID)+" doesn't contain valid value in 'BC Terminal ID' column";
				}
				log.info(errorMessage);
				response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						errorMessage, Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
			}
			
		}catch(Exception e){
			response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					"Exception occured", Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
		}
		
		return response;
	}
	
	public void validateHeaders(Row headerRow, boolean fileHeadersAreInValid, String headersMismatched)
	{
		// 1. S no 
		if (headerRow.getCell(0)== null || headerRow.getCell(0).getStringCellValue() == null || headerRow.getCell(0).getStringCellValue().equals("") 
				|| headerRow.getCell(0).getStringCellValue().trim().equals("") || !headerRow.getCell(0).getStringCellValue().trim().equals("S no")) {
			fileHeadersAreInValid=true;
			headersMismatched += "0, ";
		}
		// 2.  CB Dt. 
		if (headerRow.getCell(1)== null ||  headerRow.getCell(1).getStringCellValue() == null || headerRow.getCell(1).getStringCellValue().equals("") 
				|| headerRow.getCell(1).getStringCellValue().trim().equals("") || !headerRow.getCell(1).getStringCellValue().trim().equals("CB Dt.")) {
			fileHeadersAreInValid=true;
			headersMismatched += "1, ";
		}
		// 3. CB Type 
		if (headerRow.getCell(2)== null ||  headerRow.getCell(2).getStringCellValue() == null || headerRow.getCell(2).getStringCellValue().equals("") 
				|| headerRow.getCell(2).getStringCellValue().trim().equals("") || !headerRow.getCell(2).getStringCellValue().trim().equals("CB Type")) {
			fileHeadersAreInValid=true;
			headersMismatched += "2, ";
		}
		// 4. BANK 
		if (headerRow.getCell(3)== null ||  headerRow.getCell(3).getStringCellValue() == null || headerRow.getCell(3).getStringCellValue().equals("") 
				|| headerRow.getCell(3).getStringCellValue().trim().equals("") || !headerRow.getCell(3).getStringCellValue().trim().equals("BANK")) {
			fileHeadersAreInValid=true;
			headersMismatched += "3, ";
		}
		// 5. Card No 
		if (headerRow.getCell(4)== null ||  headerRow.getCell(4).getStringCellValue() == null || headerRow.getCell(4).getStringCellValue().equals("") 
				|| headerRow.getCell(4).getStringCellValue().trim().equals("") || !headerRow.getCell(4).getStringCellValue().trim().equals("Card No")) {
			fileHeadersAreInValid=true;
			headersMismatched += "4, ";
		}
		// 6. Txn No. 
		if (headerRow.getCell(5)== null ||  headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") 
				|| headerRow.getCell(5).getStringCellValue().trim().equals("") || !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) {
			fileHeadersAreInValid=true;
			headersMismatched += "5, ";
		}
		// 7. Amt.
		if (headerRow.getCell(6)== null ||  headerRow.getCell(6).getStringCellValue() == null || headerRow.getCell(6).getStringCellValue().equals("") 
				|| headerRow.getCell(6).getStringCellValue().trim().equals("") || !headerRow.getCell(6).getStringCellValue().trim().equals("Amt.")) {
			fileHeadersAreInValid=true;
			headersMismatched += "6, ";
		}
		// 8. Txn Dt
		if (headerRow.getCell(7)== null ||  headerRow.getCell(7).getStringCellValue() == null || headerRow.getCell(7).getStringCellValue().equals("") 
				|| headerRow.getCell(7).getStringCellValue().trim().equals("") || !headerRow.getCell(7).getStringCellValue().trim().equals("Txn Dt")) {
			fileHeadersAreInValid=true;
			headersMismatched += "7, ";
		}
		// 9. TRN Code
		if (headerRow.getCell(8)== null ||  headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") 
				|| headerRow.getCell(8).getStringCellValue().trim().equals("") || !headerRow.getCell(8).getStringCellValue().trim().equals("TRN Code")) {
			fileHeadersAreInValid=true;
			headersMismatched += "8, ";
		}
		// 10. TAT
		/*if (headerRow.getCell(9)== null ||  headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") 
				|| headerRow.getCell(9).getStringCellValue().trim().equals("") || !headerRow.getCell(9).getStringCellValue().trim().equals("TAT")) {
			fileHeadersAreInValid=true;
			headersMismatched += "9, ";
		}*/
		// 11. BC Terminal ID 
		if (headerRow.getCell(10)== null ||  headerRow.getCell(10).getStringCellValue() == null || headerRow.getCell(10).getStringCellValue().equals("") 
				|| headerRow.getCell(10).getStringCellValue().trim().equals("") || !headerRow.getCell(10).getStringCellValue().trim().equals("BC Terminal ID")) {
			fileHeadersAreInValid=true;
			headersMismatched += "10, ";
		}
	}
	public String getCellValueAccordingToCellType(Cell cell) {
		String cellValue = "";
		String value="";
		if (cell != null) {
				switch (cell.getCellType()) {
				case Cell.CELL_TYPE_STRING:
					value = cell.getStringCellValue();
					break;
				case Cell.CELL_TYPE_NUMERIC:
					if (!HSSFDateUtil.isCellDateFormatted(cell)) {
						cell.setCellType(Cell.CELL_TYPE_STRING);
						value = cell.getStringCellValue();
					} else {
						value = null;
					}
					break;
				case Cell.CELL_TYPE_BOOLEAN:
					value = String.valueOf(cell.getBooleanCellValue());
					break;
				case Cell.CELL_TYPE_BLANK:
					value = null;
					break;
				default:
					if(cell.getColumnIndex()==1 && cell.getCellType()== 2)
						value=cell.toString();
					else
						value = null;
					break;
			}
		} else {
			value = null;
		}
		cellValue = value;

		return cellValue;
	}
	private String getCsvFromList(List<Integer> list) {
		String csv = "[" ;
         try{
        	 for (Integer integer : list) {
        		 csv = csv+integer+", ";
			}
        	 csv = csv.substring(0, csv.length()-2) +"]";
         }
         catch(Exception e){
        	 e.printStackTrace();
         }
         return csv;
	}
	
	public String toFileFromBase64(String pic,String mName,String ext)
	{
		String extension = ext;
		String path = filesUtil.getProperty("chargebackfilesUploadPath");
		System.out.println("NEW PATH: " + path);
		System.out.println(pic+"===pic");
		File fileImg = new File(path);
		fileImg.mkdirs();


		byte[] imgBytes = Base64.decodeBase64(pic);
		System.out.println("imgBytes==="+imgBytes);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension).trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Exception Occured: "+ e.getMessage());
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}
	
	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		log.info("AUTHENTICATION");
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			System.out.println("AUTHENTICATION AHA");
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.catalina.startup.Catalina;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.AggregatorSuperMerchantUploadFile;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkDataModel;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkModel;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectDataModel;
import com.apptmyz.fpcontrolpanel.data.AuthenticateUserResponseAnalytics;
import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.ChargebackAggregatorDistributorRequestModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
//import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponseRRN;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.BaseService;
import com.apptmyz.fpcontrolpanel.services.ChargebackManagementCacheData;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpsettlementdb.entity.CBFraudManagementAudit;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.CbFraudManagementAuditRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;
import com.itextpdf.text.pdf.codec.Base64;

@RestController
@RequestMapping(value = "/api/chargeback/management")
public class ChargeBackManagementAggregatorSuperMerchantController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private ChargebackManagementCacheData chargebackManagementCacheData;

	@Autowired
	private CbFraudManagementAuditRepository cbFraudManagementAuditRepository;

	@Autowired
	private FilesUtil filesUtil;
	
	@Autowired
	private BaseService baseService;

	@PostMapping(path = "/aggregator/fetch/records")
	public ResponseEntity<GeneralResponse> fetchChargeBackAggregator(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String dataSent) throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start fetch charge back from - to----------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_fromtotime");
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("fetch records(parent merchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);
		//		FpCpAuditLogs fpCpAuditLogs = null;
		//		boolean permission = false;
		//		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//		for (UserPermissionsModel dataModel : permissionsList) {
		//
		//			if (dataModel.getFeatureGrpCode().equals("BANK")) {
		//				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//					if (dataModel.getPermRead() == 1) {
		//						permission = true;
		//						break;
		//					}
		//				}
		//			}
		//		}
		if (dataModel!=null && authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getAggregatorRadioButton() ==1 )
		{
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(dataModel.getFromtime());
			Date td = dateformat1.parse(dataModel.getTotime());

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findByParentIdAndUploadedTimestampBetween(dataModel.getParentId(),fromdate, todate);

			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					if(chargeBackManagement.getTransactionResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end fetch records from - to-----------" + gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path = "/supermerchant/fetch/records")
	public ResponseEntity<GeneralResponse> fetchChargeBackSupermerchant(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String dataSent) throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start fetch charge back from - to----------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_fromtotime");
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("fetch records(super merchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);
		//		FpCpAuditLogs fpCpAuditLogs = null;
		//		boolean permission = false;
		//		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//		for (UserPermissionsModel dataModel : permissionsList) {
		//
		//			if (dataModel.getFeatureGrpCode().equals("BANK")) {
		//				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//					if (dataModel.getPermRead() == 1) {
		//						permission = true;
		//						break;
		//					}
		//				}
		//			}
		//		}
		if (dataModel!=null && authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getAggregatorRadioButton() ==1 )
		{
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(dataModel.getFromtime());
			Date td = dateformat1.parse(dataModel.getTotime());

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findBySuperMerchantIdAndUploadedTimestampBetween(dataModel.getSuperMerchantId(),fromdate, todate);

			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					if(chargeBackManagement.getTransactionResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end fetch records from - to-----------" + gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path ="/aggregator/fetch/makerchecker")
	public ResponseEntity<GeneralResponse> aggreagatorfetchMakerChecker(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@RequestBody String dataSent, @RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException 
	{
		System.out.println("-----------start fetch maker checker from to ----------");
		ResponseEntity<GeneralResponse> generalResponse = null;

		Gson gson = new GsonBuilder().serializeNulls().create();
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchMakerCheker_fromtotime");
		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		System.out.println("fetch maker checker records(parent merchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		//	 	FpCpAuditLogs fpCpAuditLogs=null;
		//	 	 boolean permission = false;
		//			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//			for (UserPermissionsModel dataModel  : permissionsList) {
		//				
		//				if(dataModel.getFeatureGrpCode().equals("BANK")) {
		//					if(dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//						if(dataModel.getPermRead()==1) { 
		//							permission = true;
		//							break;
		//						}
		//					}
		//				}
		//			}
		if(dataModel!=null && authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getAggregatorRadioButton() == 1)
		{
			SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1=new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2=new SimpleDateFormat("yyyy-MM-dd");
			Date fd=dateformat1.parse(dataModel.getFromtime());
			Date td=dateformat1.parse(dataModel.getTotime());

			String fromDate=dateFormat2.format(fd)+" 00:00:00";
			String toDate=dateFormat2.format(td)+" 23:59:59";
			Date fromdate=dateformat.parse(fromDate);
			Date todate=dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByParentIdAndStatusFlagAndUploadedTimestampBetween(dataModel.getParentId(),Constants.Charge_Back_Files_Uploaded,fromdate,todate);

			if(chargeBack!=null)
			{
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					/* if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}*/

					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE,Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			//		AUDIT LOGS
			//		fpCpAuditLogs = new FpCpAuditLogs();
			//
			//	 	fpCpAuditLogs.setFeatureGrpId("BANK");
			//	 	fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//	 	fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			////			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//	 	fpCpAuditLogs.setOperation(1);
			//	 	fpCpAuditLogs.setViewData("user: "+authenticateUserResponse.getUserName()+" fetch maker cheker from-to");
			//	 	fpCpAuditLogs.setAuditTimestamp(new Date());
			//	 	fpCpAuditLogs.setIpAddress(ip);
			//	 	fpCpAuditLogsRepository.save(fpCpAuditLogs);
		}
		else 
		{
			logger.info("agg/read/ Permission validation false"+authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end fetch records from - to maker checker-----------"+gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path ="/supermerchant/fetch/makerchecker")
	public ResponseEntity<GeneralResponse> supermerchantfetchMakerChecker(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String dataSent)throws UnsupportedEncodingException, ParseException 
	{
		System.out.println("-----------start fetch maker checker from to ----------");
		ResponseEntity<GeneralResponse> generalResponse = null;

		Gson gson = new GsonBuilder().serializeNulls().create();
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchMakerCheker_fromtotime");
		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("fetch maker checker records(supermerchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		//	 	FpCpAuditLogs fpCpAuditLogs=null;
		//	 	 boolean permission = false;
		//			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//			for (UserPermissionsModel dataModel  : permissionsList) {
		//				
		//				if(dataModel.getFeatureGrpCode().equals("BANK")) {
		//					if(dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//						if(dataModel.getPermRead()==1) { 
		//							permission = true;
		//							break;
		//						}
		//					}
		//				}
		//			}
		if(dataModel!=null &&authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getDistributorRadioButton() == 1)
		{
			SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1=new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2=new SimpleDateFormat("yyyy-MM-dd");
			Date fd=dateformat1.parse(dataModel.getFromtime());
			Date td=dateformat1.parse(dataModel.getTotime());

			String fromDate=dateFormat2.format(fd)+" 00:00:00";
			String toDate=dateFormat2.format(td)+" 23:59:59";
			Date fromdate=dateformat.parse(fromDate);
			Date todate=dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findBySuperMerchantIdAndStatusFlagAndUploadedTimestampBetween(dataModel.getSuperMerchantId(),Constants.Charge_Back_Files_Uploaded,fromdate,todate);

			if(chargeBack!=null)
			{
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					/* if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}*/

					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE,Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			//		AUDIT LOGS
			//		fpCpAuditLogs = new FpCpAuditLogs();
			//
			//	 	fpCpAuditLogs.setFeatureGrpId("BANK");
			//	 	fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//	 	fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			////			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//	 	fpCpAuditLogs.setOperation(1);
			//	 	fpCpAuditLogs.setViewData("user: "+authenticateUserResponse.getUserName()+" fetch maker cheker from-to");
			//	 	fpCpAuditLogs.setAuditTimestamp(new Date());
			//	 	fpCpAuditLogs.setIpAddress(ip);
			//	 	fpCpAuditLogsRepository.save(fpCpAuditLogs);
		}
		else 
		{
			logger.info("agg/read/ Permission validation false"+authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end fetch records from - to maker checker-----------"+gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path = "aggregator/supermerchant/approvereject/makerchecker")
	public ResponseEntity<GeneralResponse> approveReject(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start approve/reject maker checker----------");
		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("approve or reject data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		FpCpAuditLogs fpCpAuditLogs = null;

		if ( authenticateUserResponse.getActiveFlag() == 1) {
			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null && dataModel != null && commonTasks.check(dataSent)) {
				ChargeBackManagement chargeBack = chargeBackManagementRepository.findOne(dataModel.getId());
				if (chargeBack != null) {
					if (dataModel.getFlag() == 1) {
						logger.info("updating the audit file for approval");
						commonTasks.updateAudit(chargeBack);

						chargeBack.setStatusFlag(Constants.Charge_Back_Approved);
						chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
						chargeBack.setUpdatedTimestamp(new Date());
						chargeBack.setAggregatorUpdatedTimestamp(new Date());
						if(dataModel.getCbRemarks() != null )
							chargeBack.setResponseRemarks(dataModel.getCbRemarks());
						else chargeBack.setResponseRemarks("Maker checker done");

						chargeBackManagementRepository.save(chargeBack);
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_APPROVED, 0, null),
								HttpStatus.OK);
					}
					else if (dataModel.getFlag() == 2)
					{
						logger.info("updating the audit file for rejected");
						commonTasks.updateAudit(chargeBack);
						chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
						chargeBack.setAggregatorUpdatedTimestamp(new Date());
						chargeBack.setStatusFlag(Constants.Charge_Back_Rejected);
						chargeBack.setUpdatedTimestamp(new Date());
						if(dataModel.getCbRemarks() != null )
							chargeBack.setResponseRemarks(dataModel.getCbRemarks());
						else chargeBack.setResponseRemarks("Maker checker done");
						chargeBackManagementRepository.save(chargeBack);
						
						boolean isWrongFormat=false;
						String wrongExtensionList="";
						
						if(chargeBack.getChargeBackType().equals(Constants.CB_RAISE) || chargeBack.getChargeBackType().equals(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS))
						{	
						if(dataModel.getUploadFiles()!=null)
						{
							String attachmentsList="";
							Integer countFile=0;
							for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
							{
								if(a.getFileName()!=null)
								{
									String extension=commonTasks.checkFileExtension(a.getFileName());
									if(extension!=null)
									{
										if(extension.equals("jpeg"))
										{
											String fileName=saveImage(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".jpeg");
											attachmentsList=attachmentsList + fileName + ",";

										}
										else if(extension.equals("pdf"))	
										{
											String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".pdf");
											attachmentsList=attachmentsList +fileName + ",";
										}
										else if(extension.equals("docx"))
										{
											String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".docx");
											attachmentsList=attachmentsList + fileName + ",";

										}
										else if(extension.equals("txt"))
										{
											String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".txt");
											attachmentsList=attachmentsList + fileName + ",";

										}
										else if(extension.equals("xlsx"))	
										{
											String fileName=savexlsx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".xlsx");
											attachmentsList=attachmentsList +fileName + ",";
										}
									}
									else
									{
										isWrongFormat=true;
										wrongExtensionList=wrongExtensionList + a.getFileName() + ",";
									}
								}
							}
							if(!attachmentsList.equals(""))
							{
								chargeBack.setCbFraudAttachmentsPath(attachmentsList.substring(0,attachmentsList.length()-1));
								chargeBackManagementRepository.save(chargeBack);
							}
							if(isWrongFormat)
							{
								chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorUpdatedTimestamp(new Date());
								chargeBack.setResponseRemarks("Upload Files Wrong Format");
								chargeBackManagementRepository.save(chargeBack);
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files in .jpg or.png or.pdf format : "
												+ wrongExtensionList.substring(0,wrongExtensionList.length()-1)),HttpStatus.OK);

							}
							else
							{
								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);

							}
						}
						else
						{
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);
						}
						}
						else if(dataModel.getUploadFiles() != null)
						{
							boolean mdeclarationFlag=false;
							boolean mpanFlag=false;
							boolean mkycFlag=false;
							String missingMandatoryFiles="";
							String mdeclarationAttachments="";
							String mpanAttachments="";
							String mkycAttachments="";
							String cdeclarationAttachments="";
							String mtxnlogAttachments="";
							String mregistercopyAttachments="";
							
							Integer countFile=0;
							for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
							{
								if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mdeclaration"))
								{
									mdeclarationFlag=true;
								}
								else if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mpan"))
								{
									mpanFlag=true;
								}
								else if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mkyc"))
								{
									mkycFlag=true;
								}
							}
							if(mdeclarationFlag && mpanFlag && mkycFlag)
							{
							for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
							{
								if(a.getFileName()!=null)
								{
									String extension=commonTasks.checkFileExtension(a.getFileName());
									if(extension!=null && a.getDocname().equals("mdeclaration"))
									{
										mdeclarationAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else if(extension!=null && a.getDocname().equals("mpan"))
									{
										mpanAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else if(extension!=null && a.getDocname().equals("mkyc"))
									{
										mkycAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else if(extension!=null && a.getDocname().equals("cdeclaration"))
									{
										cdeclarationAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else if(extension!=null && a.getDocname().equals("mtxnlog"))
									{
										mtxnlogAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else if(extension!=null && a.getDocname().equals("mregistercopy"))
									{
										mregistercopyAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
									}
									else
									{
										isWrongFormat=true;
										wrongExtensionList=wrongExtensionList + a.getFileName() + ",";
									}
								}
							}
						}
						else
						{
							if(!mdeclarationFlag)
								missingMandatoryFiles += "merchant declaration, ";
							else if(!mpanFlag)
								missingMandatoryFiles += "merchant pan, ";
							else if(!mkycFlag)
								missingMandatoryFiles += "merchant kyc, ";
							generalResponse = new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files : "
											+ missingMandatoryFiles.substring(0,missingMandatoryFiles.length()-2)),HttpStatus.OK);
							return generalResponse;
						}
							if(!mdeclarationAttachments.equals(""))
							{
								chargeBack.setMdeclarationAttachmentsPath(mdeclarationAttachments.substring(0,mdeclarationAttachments.length()-1));
							}
							if(!mpanAttachments.equals(""))
							{
								chargeBack.setMpanAttachmentsPath(mpanAttachments.substring(0,mpanAttachments.length()-1));
							}
							if(!mkycAttachments.equals(""))
							{
								chargeBack.setMkycAttachmentsPath(mkycAttachments.substring(0,mkycAttachments.length()-1));
							}
							if(!cdeclarationAttachments.equals(""))
							{
								chargeBack.setCdeclarationAttachmentsPath(cdeclarationAttachments.substring(0,cdeclarationAttachments.length()-1));
							}
							if(!mtxnlogAttachments.equals(""))
							{
								chargeBack.setMtxnlogAttachmentsPath(mtxnlogAttachments.substring(0,mtxnlogAttachments.length()-1));
							}
							if(!mregistercopyAttachments.equals(""))
							{
								chargeBack.setMregistercopyAttachmentsPath(mregistercopyAttachments.substring(0,mregistercopyAttachments.length()-1));
							}
								chargeBackManagementRepository.save(chargeBack);
							}
						
						else
						{
								chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorUpdatedTimestamp(new Date());
								chargeBack.setResponseRemarks("Upload Files not found");
								chargeBackManagementRepository.save(chargeBack);
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload the files"),
										HttpStatus.OK);
						}
							if(isWrongFormat)
							{
								chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
								chargeBack.setAggregatorUpdatedTimestamp(new Date());
								chargeBack.setResponseRemarks("Upload Files Wrong Format");
								chargeBackManagementRepository.save(chargeBack);
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files in .jpg or.png or.pdf format : "
												+ wrongExtensionList.substring(0,wrongExtensionList.length()-1)),HttpStatus.OK);

							}
							else
							{
								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);

							}
					
							
					}
						
				}		
					
				else {
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, "Record not found"),
							HttpStatus.OK);
				}
				} 
			else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INCOMPLETE_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, "Incorrect data"),
						HttpStatus.OK);
			}
			

		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end approve/reject maker cheker-----------" + gson.toJson(generalResponse));
		return generalResponse;
	}
	private String getFileName(String extension,String fName,String rrn,String base64data,Integer countFile,Logger logger)
	{
		String attachmentsList="";
		if(extension.equals("jpeg"))
		{
			String fileName=saveImage(fName,rrn,base64data,++countFile,logger,".jpeg");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("pdf"))	
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".pdf");
			attachmentsList=attachmentsList +fileName + ",";
		}
		else if(extension.equals("docx"))
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".docx");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("txt"))
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".txt");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("xlsx"))	
		{
			String fileName=savexlsx(fName,rrn,base64data,++countFile,logger,".xlsx");
			attachmentsList=attachmentsList +fileName + ",";
		}
		return attachmentsList;
	
	}
	@PostMapping(path = "aggregator/supermerchant/approvereject/bulk")
	public ResponseEntity<GeneralResponse> approveRejectBulk(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody List<ApproveRejectBulkDataModel> dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start approve/reject maker checker----------");
		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("approve or reject data from device : " + dataSent);

		logger.info("approve or reject data from device : " + dataSent);
//		ApproveRejectBulkModel dataModel = null;
		List<Integer> invalidChargebackType = new ArrayList<Integer>();
		List<Integer> validChargebackType = new ArrayList<Integer>();
		String errorMessage = null;
//		try {
//			dataModel = gson.fromJson(dataSent, ApproveRejectBulkModel.class);
//		} catch (Exception e) {
//			e.printStackTrace();
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
//					HttpStatus.OK);
//		}
		commonTasks.getIpAddress(request);
		
		if (authenticateUserResponse.getActiveFlag() == 1) {
			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null  && dataSent != null) 
			{
				for(ApproveRejectBulkDataModel approveRejectBulkDataModel : dataSent)
				{
					if(approveRejectBulkDataModel.getId()!=null && approveRejectBulkDataModel.getAction() != null )
					{
						if(approveRejectBulkDataModel.getAction().equals("approve"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
								}
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
						else if(approveRejectBulkDataModel.getAction().equals("reject"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
								}
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
					}
				}
				if(invalidChargebackType.size() > 0)
				{
					errorMessage = "Bulk upload process was interrupted due to an error. Reason - \n * Id's " + baseService.getCsvFromList(invalidChargebackType)+ 
							" chargeback type is neither Chargeback Raise nor Chargeback Raise - Pending for Settlement.";
					if(validChargebackType.size() > 0)
					{
						errorMessage += "Whereas, Bulk accept/reject successful for records "+baseService.getCsvFromList(validChargebackType);
					}
				}
				if(errorMessage != null)
				{
					logger.info("Detailed records are invalid : message:"+ errorMessage);
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,errorMessage ,Constants.INVALID_CHARGE_BACK_TYPE_UPLOADED, null),HttpStatus.OK);
				}
				
				else
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, "Bulk accept/reject successful", 0, null),HttpStatus.OK);
			}
		} 
		else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		logger.info("-----------end approve/reject maker cheker-----------" + gson.toJson(generalResponse));
		return generalResponse;
	}

	public  String saveImage(String fileName,String rrn,String encodedImage,Integer countFile, Logger logger, String extension)
	{
		new Date();
		String afileName=null;
		if(encodedImage != null){
			try {
				byte[] decodedString = Base64.decode(encodedImage);
				ByteArrayInputStream bis = new ByteArrayInputStream(decodedString);
				BufferedImage bImage2 = ImageIO.read(bis);

				int width = bImage2.getWidth();
				int height = bImage2.getHeight();
				BufferedImage output = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
				int px[] = new int[width * height];
				bImage2.getRGB(0, 0, width, height, px, 0, width);
				output.setRGB(0, 0, width, height, px, 0, width);

//				afileName =fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".jpeg";
				SimpleDateFormat sdf=new SimpleDateFormat("ssss");
				String seconds=sdf.format(new Date());
				afileName =rrn+"_"+seconds+countFile+extension;
				
				String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");
				File outputfile = new File(afilePath,afileName);
				ImageIO.write(output, "jpeg", outputfile);
				System.out.println("image saved");

			} catch (IOException e) {
				e.printStackTrace();

			}catch (Exception e) {
				e.printStackTrace();
			}
		}
		return afileName;
	}

	public  String savePdfDocx(String fileName,String rrn,String encodedImage,Integer countFile,Logger logger,String extension) 
	{

		//SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
		String afileName=null;
		String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");

		byte[] decodedString = Base64.decode(encodedImage);
		logger.info("********** pdf decoded *********");

//		afileName = fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".pdf";
		SimpleDateFormat sdf=new SimpleDateFormat("ssss");
		String seconds=sdf.format(new Date());
		afileName =rrn+"_"+seconds+countFile+extension;
		
		try {
			FileOutputStream out = new FileOutputStream(new File(afilePath,afileName));
			out.write(decodedString);
			out.close();
			logger.info("file saved");

		} catch (IOException e) {
			e.printStackTrace();
			logger.error("Exception Occured: "+ e.getMessage());
		}
		return afileName;

	}
	

	public  String savexlsx(String fileName,String rrn,String encodedImage,Integer countFile,Logger logger,String extension) 
	{

		//SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
		String afileName=null;
		String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");

		byte[] decodedString = org.apache.commons.codec.binary.Base64.decodeBase64(encodedImage);
		logger.info("********** pdf decoded *********");

//		afileName = fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".pdf";
		SimpleDateFormat sdf=new SimpleDateFormat("ssss");
		String seconds=sdf.format(new Date());
		afileName =rrn+"_"+seconds+countFile+extension;
		
		try {
			FileOutputStream out = new FileOutputStream(new File(afilePath,afileName));
			out.write(decodedString);
			out.close();
			logger.info("file saved");

		} catch (IOException e) {
			e.printStackTrace();
			logger.error("Exception Occured: "+ e.getMessage());
		}
		return afileName;
		
	}

	
	@PostMapping(path = "aggregator/supermerchant/chargeback/history")
	public ResponseEntity<GeneralResponse> getHistory(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start get chargeback history----------");
		Logger logger = Logger.getLogger("ApproveRejectMakerCheckerAggregator");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("approve or reject data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		FpCpAuditLogs fpCpAuditLogs = null;


		if ( authenticateUserResponse.getActiveFlag() == 1) 
		{

			//			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null && dataModel != null && commonTasks.check(dataSent)) {
				//				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findHistory(dataModel.getId());
				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findByPrimaryIdOrderByIdDesc(dataModel.getId());

				if (chargeBack != null) {

					List<ChargeBackManagementResponseModel> responseChargeBackDatas=new ArrayList<ChargeBackManagementResponseModel>();
					ChargeBackManagementResponseModel responseChargeBackData=null;
					for(CBFraudManagementAudit chargeBackManagement:chargeBack)
					{
						responseChargeBackData= commonTasks.getResponseModelAudit(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);}

					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,0,responseChargeBackDatas), HttpStatus.OK);


				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, "History not found"),
							HttpStatus.OK);
				}
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INCOMPLETE_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, "Incorrect data"),
						HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);

		} 

		else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end fetching history-----------" + gson.toJson(generalResponse));
		return generalResponse;
	}

	@PostMapping(path = "/aggregator/fetch/records/tat")
	public ResponseEntity<GeneralResponse> fetchChargeBackAggregatorTAT(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String dataSent) throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start fetch charge back TAT---------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_fromtotime");
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("fetch tat records(parent merchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);
		//		FpCpAuditLogs fpCpAuditLogs = null;
		//		boolean permission = false;
		//		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//		for (UserPermissionsModel dataModel : permissionsList) {
		//
		//			if (dataModel.getFeatureGrpCode().equals("BANK")) {
		//				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//					if (dataModel.getPermRead() == 1) {
		//						permission = true;
		//						break;
		//					}
		//				}
		//			}
		//		}
		SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy-MM-dd");

		if (dataModel!=null && authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getAggregatorRadioButton() ==1 )
		{
			Date curDate = dateFormatter.parse(dateFormatter.format(new Date()));
			System.out.println("Date : "+curDate);
			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByTatGreaterThanEqualAndParentIdAndStatusFlagOrderByTat(curDate,dataModel.getParentId(),Constants.Charge_Back_Files_Uploaded);

			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					/*if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}*/

					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end tat fetch records from - to-----------" + gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path = "/supermerchant/fetch/records/tat")
	public ResponseEntity<GeneralResponse> fetchChargeBackSupermerchantTAT(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token,@RequestBody String dataSent) throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start fetch charge back TAT---------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_fromtotime");
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponseAnalytics authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponseAnalytics.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		System.out.println("fetch tat records(parent merchant) data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);
		//		FpCpAuditLogs fpCpAuditLogs = null;
		//		boolean permission = false;
		//		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		//		for (UserPermissionsModel dataModel : permissionsList) {
		//
		//			if (dataModel.getFeatureGrpCode().equals("BANK")) {
		//				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
		//					if (dataModel.getPermRead() == 1) {
		//						permission = true;
		//						break;
		//					}
		//				}
		//			}
		//		}
		SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy-MM-dd");

		if (dataModel!=null && authenticateUserResponse.getActiveFlag() == 1)// && authenticateUserResponse.getAggregatorRadioButton() ==1 )
		{
			Date curDate = dateFormatter.parse(dateFormatter.format(new Date()));
			System.out.println("Date : "+curDate);
			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByTatGreaterThanEqualAndSuperMerchantIdAndStatusFlagOrderByTat(curDate,dataModel.getSuperMerchantId(),Constants.Charge_Back_Files_Uploaded);

			//				for (ChargeBackManagement chargeBackManagement : chargeBack) {
			//					if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
			//							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
			//					{
			//					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
			//					if(responseChargeBackData!=null)
			//						responseChargeBackDatas.add(responseChargeBackData);
			//					}
			//				}

			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;

				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					/* if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					} */

					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUsername());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		System.out.println("-----------end tat fetch records from - to-----------" + gson.toJson(generalResponse));
		return generalResponse;

	}

	@GetMapping(path = "/agg/{id}")
	public void findByTat(@PathVariable int id)
	{
		SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy-MM-dd");
		Gson gson=new GsonBuilder().serializeNulls().create();
		try {
			Date curDate = dateFormatter.parse(dateFormatter.format(new Date()));
			System.out.println("Date : "+curDate);
			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByTatGreaterThanEqualAndParentIdAndStatusFlagOrderByTat(curDate,id,0);
			if (chargeBack != null) {
				ChargeBackManagementResponseModel responseChargeBackData = null;
				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						System.out.println("List : "+gson.toJson(responseChargeBackData));

					}
				}
			} 
		}

		catch (Exception e) {
			e.printStackTrace();
		}
	}

	@GetMapping(path = "/sm/{id}")
	public void findByTatSM(@PathVariable int id)
	{
		SimpleDateFormat dateFormatter=new SimpleDateFormat("yyyy-MM-dd");
		Gson gson=new GsonBuilder().serializeNulls().create();
		try {
			Date curDate = dateFormatter.parse(dateFormatter.format(new Date()));
			System.out.println("Date : "+curDate);

			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByTatGreaterThanEqualAndSuperMerchantIdAndStatusFlagOrderByTat(curDate,id,0);
			if (chargeBack != null) {
				ChargeBackManagementResponseModel responseChargeBackData = null;
				for (ChargeBackManagement chargeBackManagement : chargeBack) {
					if(chargeBackManagement.getChargeBackType() != null && (chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE) 
							||chargeBackManagement.getChargeBackType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					{
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						System.out.println("List : "+gson.toJson(responseChargeBackData));

					}
				}
			} 
		}

		catch (Exception e) {
			e.printStackTrace();
		}
	}
	@SuppressWarnings("deprecation")


	public String toImgFromBase64(String pic, String mName, String ext) {

		String extension = ext;
		String path = filesUtil.getProperty("UploadfilePathCB_mngt");

		// path = new File(".").getCanonicalPath() +"/" + path;

		System.out.println("NEW PATH: " + path);
		System.out.println(pic + "===pic");
		File fileImg = new File(path);
		fileImg.mkdirs();
		//
		// pic = URLDecoder.decode(pic);

		byte[] imgBytes = org.apache.commons.codec.binary.Base64.decodeBase64(pic);
		System.out.println("imgBytes===" + imgBytes);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension)
				.trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

}package com.apptmyz.fpcontrolpanel.controller;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.ChargebackManagementCacheData;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;

@RestController
@RequestMapping(value = "/api/chargeback/management")
public class ChargebackManagementCacheController {

	 @Autowired
	 ChargebackManagementCacheData chargebackManagementCacheData;
	 
	 @Autowired
	 SuperMerchantMasterRepository superMerchantMasterRepository;
		
	 @Autowired
	 ParentMerchantMasterRepository parentMerchantMasterRepository;
	 
	 @Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;
	 
	 @Autowired
	 private EmailNotificationsController emailNotificationsController;
	 
//	 @GetMapping("/cache/merchant/{id}")
//	    public void findmerchantDetails(@PathVariable Integer id) 
//	    {
//		 Map<Integer,String> merchant=chargebackManagementCacheData.getMerchantDetails();
//		 String merchantName=null;
//		 merchantName=merchant.get(id);
//		 System.out.println("Merchant name : "+merchantName);
//	    }
	 
	 @GetMapping("/cache/supermerchant/{id}")
	    public void findsupermerchantDetails(@PathVariable Integer id) 
	    {
		 Map<Integer,String> supermerchant=chargebackManagementCacheData.getSuperMerchantDetails();
		 String supermerchantName=null;
		 supermerchantName=supermerchant.get(id);
		 System.out.println("super Merchant name : "+supermerchantName);
	    }
	 
	 @GetMapping("/cache/parentmerchant/{id}")
	    public void findparentmerchantDetails(@PathVariable Integer id) 
	    {
		 Map<Integer,String> parentmerchant=chargebackManagementCacheData.getParentMerchantDetails();
		 String parentmerchantName=null;
		 parentmerchantName=parentmerchant.get(id);
		 System.out.println("parent Merchant name : "+parentmerchantName);
	    }
	 
	 @GetMapping("/supermerchant/{id}")
	    public void findsupermerchantdetail(@PathVariable Integer id) 
	    {
		 SuperMerchantMaster m=superMerchantMasterRepository.findOne(id);
		 System.out.println("super Merchant name : "+m.getSuperMerchantName());
	    }
	 
	 @GetMapping("/parentmerchant/{id}")
	    public void findparentmerchantdetail(@PathVariable Integer id) 
	    {
		 ParentMerchantMaster m=parentMerchantMasterRepository.findOne(id);
		 System.out.println("parent Merchant name : "+m.getParentMerchantName());
	    }
	 
	 @GetMapping("/deemed/accepted")
	    public ResponseEntity<GeneralResponse> deemedAcceptedRange(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse) 
	    {
		 	System.out.println("Started Email Notifications:/api/chargeback/management/deemed/accepted"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
			ResponseEntity<GeneralResponse> response = null;
			SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
			String date=null;
			Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
			try
			{

				date = format.format(new Date());

				Date fromDate = new SimpleDateFormat("yyyyMMdd").parse(date);
			
				System.out.println("From Time:"+ fromDate);

				List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByStatusFlagAndTat(0, fromDate);

				if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
				{
					for(ChargeBackManagement cbd : cbData)
					{
						cbd.setStatusFlag(4);
						cbd.setResponseRemarks("DEEMED-ACCEPTED");
						cbd.setUpdatedBy("SYSTEM");
						cbd.setUpdatedTimestamp(new Date());
						chargeBackManagementRepository.save(cbd);
						if(!cbMap.containsKey(cbd.getSuperMerchantId())) {
							cbMap.put(cbd.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
						}
						cbMap.get(cbd.getSuperMerchantId()).add(cbd);
					}
					
					
					for(Map.Entry<Integer, List<ChargeBackManagement>> data : cbMap.entrySet())
					{
						int smid = data.getKey();
						List<ChargeBackManagement> cbList = data.getValue();						
						emailNotificationsController.sendDeemedAccptedEmailNotification(smid,cbList);		
					}
					//emailNotificationsController.sendDeemedAccptedEmailNotification(cbData);
					
					response = new ResponseEntity<GeneralResponse>(new GeneralResponse(true, "Deemed Accepted: count:"+ cbData.size(), 10000, null), HttpStatus.OK);
				}
				else
					response = new ResponseEntity<GeneralResponse>(new GeneralResponse(true, "No Records Found", 10000, null), HttpStatus.OK);
				return response;
			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
			}
		}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;

import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ErrorCodes;
import com.apptmyz.fpaepsdb.entity.KotakErrorCodes;
import com.apptmyz.fpaepsdb.entity.PaytmErrorCodes;
import com.apptmyz.fpsettlementdb.entity.ChargeBackTypeManagement;
import com.apptmyz.fpsettlementdb.entity.ChargebackHolidayList;
import com.apptmyz.fpcontrolpanel.data.AggregatorSuperMerchantUploadFile;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkDataModel;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectDataModel;
import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.ChargebackAggregatorDistributorRequestModel;
import com.apptmyz.fpcontrolpanel.data.ChargebackNotesDataModel;
import com.apptmyz.fpcontrolpanel.data.ChargebackRequestModel;
import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.RRNSearchRequestModel;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.ChargebackManagementCacheData;
import com.apptmyz.fpcontrolpanel.utils.CBHistoryResponseModel;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpsettlementdb.entity.AccountStatementDataV2;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayAnomalyCore;
import com.apptmyz.fpsettlementdb.entity.CBFraudManagementAudit;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.entity.ChargeBackNotesData;
import com.apptmyz.fpsettlementdb.repository.AccountStatementDataV2Repository;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.CbFraudManagementAuditRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackNotesDataRepository;
import com.apptmyz.fpsettlementdb.repository.ChargebackHolidayListRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.itextpdf.text.pdf.codec.Base64;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/chargeback/management")
public class ChargeBackManagementController {

	public static final Logger log = Logger.getLogger("ChargeBackManagementController");  
	
	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private CbFraudManagementAuditRepository cbFraudManagementAuditRepository;

	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@Autowired
	private AccountStatementDataV2Repository accountStatementDataV2Repository;

	@Autowired
	private ChargebackManagementCacheData chargebackManagementCacheData;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private ChargebackHolidayListRepository chargebackHolidayListRepository;

	@Autowired
	private ChargeBackNotesDataRepository  chargeBackNotesDataRepository;

	@Autowired
	private EmailNotificationsController emailService;

	Map<String, ErrorCodes> errorCodesMap = new HashMap<String, ErrorCodes>();// error code with msg

	Map<String, KotakErrorCodes> errorCodesKotakMap = new HashMap<String, KotakErrorCodes>();// error code with msg

	Map<String, PaytmErrorCodes> errorCodesPaytmMap = new HashMap<String, PaytmErrorCodes>();// error code with msg

	Map<Integer, String> superMerchantIdAndName = new HashMap<Integer, String>();// super merchant id with name

	@PostMapping("/addfile")
	public ResponseEntity<GeneralResponse> uploadFile(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token, @RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException,
					InvalidFormatException {

		System.out.println("in old add file");
		return null;
	
	}
//{
//		Logger logger = Logger.getLogger("UploadChargebackFileManagement");
//		logger.info("****************** START *********************");
//
//		ResponseEntity<GeneralResponse> generalResponse = null;
//		Gson gson = new GsonBuilder().serializeNulls().create();
//		AuthenticateUserResponse authenticateUserResponse = null;
//		try {
//			String jwtData = jwtUtil.parseJWT(token);
//			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
//		} catch (ExpiredJwtException e2) {
//			e2.printStackTrace();
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//		} catch (UnsupportedJwtException e2) {
//			e2.printStackTrace();
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//
//		} catch (MalformedJwtException e2) {
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//		} catch (SignatureException e2) {
//			e2.printStackTrace();
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//		} catch (IllegalArgumentException e2) {
//			e2.printStackTrace();
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//		} catch (UnsupportedEncodingException e) {
//			e.printStackTrace();
//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
//		}
//
//		boolean permission = false;
//		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
//		for (UserPermissionsModel dataModel : permissionsList) {
//
//			if (dataModel.getFeatureGrpCode().equals("BANK")) {
//				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
//					if (dataModel.getPermCreate() == 1) {
//						permission = true;
//						break;
//					}
//				}
//			}
//		}
//		commonTasks.getIpAddress(request);
//		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
//			logger.info("agg/read/ Permission validation true");
//
//			FileUploadModel dataModel = null;
//
//			try {
//				dataModel = gson.fromJson(data, FileUploadModel.class);
//			} catch (Exception e) {
//				e.printStackTrace();
//				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
//						HttpStatus.OK);
//			}
//
//			logger.info("-----------datamodel received:--------"+dataModel.getBankSwitch()+","+dataModel.getCbType()+","+dataModel.getProduct()+","+dataModel.getSrNo());
//			FileInputStream fis = null;
//			try {
//				logger.info("Data received : ");
//				logger.info("username = " + authenticateUserResponse.getUserName());
//				logger.info("data/base64 = " + data);
//
//				String docName = toImgFromBase64(dataModel.getFile(),
//						"chargeback_" + authenticateUserResponse.getUserName(), "xlsx",logger);
//				String path = filesUtil.getProperty("documentUploadPathCB_mngt");
//				logger.info("docName = " + docName);
//				logger.info("path = " + path);
//				logger.info("path+docName = " + path + docName);
//
//				try {
//					fis = new FileInputStream(new File(path + docName));
//					Workbook workbook = WorkbookFactory.create(fis);
//					logger.info("No of sheets in workbook = " + workbook.getNumberOfSheets());
//
//					// get the first sheet from work book.
//					Sheet sheet = workbook.getSheetAt(0);
//
//					// check if the file headers are valid or not
//					boolean fileHeadersAreInValid = false;
//					String headersMismatched = "";
//					Row headerRow = sheet.getRow(sheet.getFirstRowNum());
//					headerRow.getLastCellNum();
//					new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//
//
//					//					Txn No./RRN
//					if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//					{
//						if (headerRow.getCell(4) == null || headerRow.getCell(4).getStringCellValue() == null || headerRow.getCell(4).getStringCellValue().equals("") || headerRow.getCell(4).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "4, ";
//						}
//					}
//					else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
//					{
//						if (headerRow.getCell(8) == null || headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") || headerRow.getCell(8).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "8, ";
//						}
//					}
//					else
//					{
//						if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "5, ";
//						}
//					}
//					//					
//					//					TAT
//
//					if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//					{
//						if (headerRow.getCell(7) == null || headerRow.getCell(7).getStringCellValue() == null || headerRow.getCell(7).getStringCellValue().equals("") || headerRow.getCell(7).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "7, ";
//						}
//					}
//					else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
//					{
//						if (headerRow.getCell(12) == null || headerRow.getCell(12).getStringCellValue() == null || headerRow.getCell(12).getStringCellValue().equals("") || headerRow.getCell(12).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "12, ";
//						}
//					}
//					else
//					{
//						if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
//						{
//							fileHeadersAreInValid = true;
//							headersMismatched += "9, ";
//						}
//					}
//
//					if (fileHeadersAreInValid == true) {
//						if (headersMismatched.equals("")) {
//							logger.info("File uploaded is not valid. Please follow the sample file");
//							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file(headers mismatch)",
//									Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
//						} else {
//							logger.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
//							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
//									Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
//						}
//					} else {
//
//						// total no of rows
//						logger.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
//						// Error Message
//						String errorMessage = "Upload process was interrupted due to an error. Reason -";
//						boolean fileContainsEmptyRows = false;
//						boolean fileContainsDuplicateCB = false;
//						List<Integer> duplicateCBRows = new ArrayList<Integer>();
//						boolean errorOccured = false;
//
//						List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
//						List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
//
//						List<Integer> emptyRowNos = new ArrayList<Integer>(); // empty row nos
//						Row row = null;
//						for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//							row = sheet.getRow(i);
//							if (row != null) {
//
//
//								// check Txn No. is valid
//								if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//								{
//									if (getCellValueAccordingToCellType(row.getCell(4)) == null	|| getCellValueAccordingToCellType(row.getCell(4)).equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(4)).trim().matches("\\d{12}"))
//									{
//										errorOccured = true;
//										rowContainsInavlidTxnNo.add((i + 1));
//									}
//								}
//								else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
//								{
//									if (getCellValueAccordingToCellType(row.getCell(8)) == null	|| getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(8)).trim().matches("\\d{12}"))
//									{
//										errorOccured = true;
//										rowContainsInavlidTxnNo.add((i + 1));
//									}
//								}
//								else
//								{
//									if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
//									{
//										errorOccured = true;
//										rowContainsInavlidTxnNo.add((i + 1));
//									}
//								}
//
//								if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//								{
//									if (String.valueOf(row.getCell(7)) == null	|| String.valueOf(row.getCell(7)).equals("") || String.valueOf(row.getCell(7)).trim().equals("")) 
//									{
//										errorOccured = true;
//										rowContainsInavlidTAT.add((i + 1));
//									}
//								}
//								else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
//								{
//									if (String.valueOf((row.getCell(12))) == null	|| String.valueOf(row.getCell(12)).equals("") || String.valueOf(row.getCell(12)).trim().equals("")) 
//									{
//										errorOccured = true;
//										rowContainsInavlidTAT.add((i + 1));
//									}
//								}
//								else
//								{
//									if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
//									{
//										errorOccured = true;
//										rowContainsInavlidTAT.add((i + 1));
//									}
//								}
//
//							}
//						}
//
//						// Bounce an error if file contains invalid value in any
//						// column in any row.
//						if (errorOccured == true) {
//							if (rowContainsInavlidTxnNo.size() > 0) {
//								errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ " doesn't contain valid value in 'Txn No./RRN' column";
//							}
//							if (rowContainsInavlidTAT.size() > 0) {
//								errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ " doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
//							}
//							logger.info(errorMessage);
//							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//									errorMessage, Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
//						} else {
//							logger.info("File contains valid data. so upload the file data to db");
//
//							// iterate through all rows and populate list of
//							// rrn/Txn No.
//							Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult=null;
//							List<String> rrns = new ArrayList<String>();
//							if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//							{
//								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//									row = sheet.getRow(i);
//									if (row != null) {
//										rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
//									}
//								}
//								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
//								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
//							}
//							else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
//							{
//								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//									row = sheet.getRow(i);
//									if (row != null) {
//										rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
//									}
//								}
//								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
//								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
//							}
//							else
//							{
//
//								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//									row = sheet.getRow(i);
//									if (row != null) {
//										rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
//									}
//								}
//								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
//								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
//							}
//							// Iterate through each row and check whether row
//							// and save it in database
//							ChargeBackManagement chargeBackManagement = null;
//							List<ChargeBackManagement> chargeBackDatas = new ArrayList<ChargeBackManagement>();
//							List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
//							SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
//
//							for (int i = 1; i <= sheet.getLastRowNum(); i++) {
//								row = sheet.getRow(i);
//								if (row != null) {
//									// create ChargeBackData object
//									if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//									{
//										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(4)),dataModel.getBankSwitch());
//									}
//									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
//									{
//										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(8)),dataModel.getBankSwitch());
//									}
//									else
//									{
//										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(5)),dataModel.getBankSwitch());
//									}
//									if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && (chargeBackManagement.getStatusFlag()==1))//  || chargeBackManagement.getStatusFlag()==4))
//									{
//										logger.info("txn with this rrn is accepted and not yet closed");
//										//										fileContainsDuplicateCB=true;
//										//										duplicateCBRows.add((i + 1));
//										commonTasks.updateAudit(chargeBackManagement);
//										chargeBackManagement.setLiveFlag(1);
//										chargeBackManagementRepository.save(chargeBackManagement);
//										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
//										responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										//										continue;
//										//										commonTasks.updateAudit(chargeBackManagement);
//									} 
//									else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && (chargeBackManagement.getStatusFlag()==4))
//									{
//										logger.info("cb is closed");
//										fileContainsDuplicateCB=true;
//										duplicateCBRows.add((i + 1));
//										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
//										responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										continue;
//										//										commonTasks.updateAudit(chargeBackManagement);
//									} 
//									else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==0) 
//									{
//										commonTasks.updateAudit(chargeBackManagement);
//										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
//										responseChargeBackDatas.add(chargeBackManagementResponseModel);
//									}
//									else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==2)
//									{
//										commonTasks.updateAudit(chargeBackManagement);
//										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
//										responseChargeBackDatas.add(chargeBackManagementResponseModel);
//
//										//										if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")) && getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Pre-Arbitration Raise"))
//										//										{
//										//											commonTasks.updateAudit(chargeBackManagement);
//										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
//										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										//										}
//										//										else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise") && getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Arbitration Raise"))
//										//										{
//										//											commonTasks.updateAudit(chargeBackManagement);
//										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
//										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										//										}
//										//										else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise") && (getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Arbitration Raise")))
//										//										{
//										//											fileContainsDuplicateCB=true;
//										//											duplicateCBRows.add((i + 1));
//										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
//										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										//											continue;
//										//										}
//										//										else if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback") || chargeBackManagement.getChargeBackType().equals("Goodfaith chargeback")))
//										//										{
//										//											logger.info("duplicate good faith chargeback found");
//										//											fileContainsDuplicateCB=true;
//										//											duplicateCBRows.add((i + 1));
//										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
//										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
//										//											continue;	
//										//										}
//									}
//									else if (chargeBackManagement==null)
//									{
//										chargeBackManagement = new ChargeBackManagement();
//									}
//									// CB Dt.
//									if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
//									{//cb date
//										try {
//											chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
//											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
//										} catch (ParseException e) {
//											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//											if(String.valueOf(row.getCell(1)).length()==9)
//											{
//
//												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//											if(String.valueOf(row.getCell(1)).length()==11)
//											{
//												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//										}
//										//cb type 
//										chargeBackManagement.setChargeBackType(dataModel.getCbType());
//										chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
//										//txn date
//										chargeBackManagement.setTxnDate(row.getCell(3) != null ? row.getCell(3).toString() : "");
//										//rrn
//										chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
//										// Amt.
//										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
//										//tat
//										try {
//											chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
//											chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(7))+" 00:00:00"));
//										} catch (ParseException e) {
//											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//											if(String.valueOf(row.getCell(7)).length()==9)
//											{ 
//												Date ex=dateFormat.parse(String.valueOf(row.getCell(7)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setTat(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//											if(String.valueOf(row.getCell(7)).length()==11)
//											{
//												Date ex=dateFormat1.parse(String.valueOf(row.getCell(7)));
//												String s1=dateFormatter.format(ex);
//
//												chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
//											}
//										}
//
//									}
//									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
//									{//cb date
//										try {
//
//											chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
//											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
//										} catch (ParseException e) {
//											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//											if(String.valueOf(row.getCell(1)).length()==9)
//											{
//
//												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//											if(String.valueOf(row.getCell(1)).length()==11)
//											{
//												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//										}
//										//cb type 
//										chargeBackManagement.setChargeBackType(dataModel.getCbType());
//										chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
//										//acquirer
//										chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
//										//bank
//										chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
//										//txn date
//										chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
//										//txn time
//										try
//										{
//											SimpleDateFormat formatTime = new SimpleDateFormat("HH:mm:ss");
//											if(row.getCell(7) != null && row.getCell(7).getDateCellValue()!=null){
//												String timeStamp =formatTime.format(row.getCell(7).getDateCellValue());
//												chargeBackManagement.setTxnTime(timeStamp);
//											}
//										}
//										catch (Exception e) {
//											chargeBackManagement.setTxnTime(row.getCell(7)!=null?row.getCell(7).toString():null);
//										}
//										//rrn
//										chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
//										//card no
//										chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
//										// Amt.
//										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));
//										//tat
//										try {
//
//
//											//tat dd-mmm-yy add
//											Date cbDate=chargeBackManagement.getChargeBackDate();
//
//											Calendar calendarFrom = Calendar.getInstance();
//											calendarFrom.setTime(cbDate);
//											calendarFrom.add(Calendar.DATE, +2);
//											SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
//											Date findHoliday=calendarFrom.getTime();
//											ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
//											if(chargebackHolidayList!=null)
//											{
//												Calendar calendarTat = Calendar.getInstance();
//												calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
//												calendarTat.add(Calendar.DATE, +1);
//												String tatDate=tatDateFormat.format(calendarTat.getTime());
//												chargeBackManagement.setTatDate(tatDate);
//												chargeBackManagement.setTat(calendarTat.getTime());
//											}
//											else
//											{
//
//												chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
//												chargeBackManagement.setTat(findHoliday);
//											}
//
//										}
//
//										catch (Exception e) {
//											e.printStackTrace();
//										}
//
//									}
//									else
//									{//cb date
//										try {
//
//											chargeBackManagement.setCbDate(row.getCell(1)!=null?row.getCell(1).toString():null);
//
//											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
//										} catch (ParseException e) {
//											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//											if(String.valueOf(row.getCell(1)).length()==9)
//											{
//												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//											if(String.valueOf(row.getCell(1)).length()==11)
//											{
//												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
//												String s=dateFormatter.format(ex);
//
//												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
//											}
//										}
//										// CB Type
//										chargeBackManagement.setChargeBackType(dataModel.getCbType());
//										chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
//										// BANK
//										chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
//										// Card No
//										String s=String.valueOf(row.getCell(4));
//										chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
//										// Txn No.
//										chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
//										// Amt.
//										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
//										// Txn Dt
//										chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
//
//										// TAT & TRN Code
//
//										if(dataModel!=null && dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
//										{
//											try {
//												chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
//												chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
//												chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));
//												chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
//												chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
//												chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
//												chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
//												chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
//												chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(12))+" 00:00:00"));
//											} catch (ParseException e) {
//												SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//												SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//												SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//												if(String.valueOf(row.getCell(12)).length()==9)
//												{
//													Date ex=dateFormat.parse(String.valueOf(row.getCell(12)));
//													String s1=dateFormatter.format(ex);
//
//													chargeBackManagement.setChargeBackDate(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
//												}
//												if(String.valueOf(row.getCell(12)).length()==11)
//												{
//													Date ex=dateFormat1.parse(String.valueOf(row.getCell(12)));
//													String s1=dateFormatter.format(ex);
//
//													chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
//												}
//											}
//										}
//										else
//										{
//											try {
//												chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
//												chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
//												chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
//												chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
//
//												chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
//												chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(9))+" 00:00:00"));
//											} catch (ParseException e) {
//												SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
//												SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
//												SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
//												if(String.valueOf(row.getCell(9)).length()==9)
//												{
//													chargeBackManagement.setTat(dateFormatter.parse(dateFormat.format(row.getCell(9))));
//												}
//												if(String.valueOf(row.getCell(9)).length()==11)
//												{
//													Date ex=dateFormat1.parse(String.valueOf(row.getCell(9)));
//													String s1=dateFormatter.format(ex);
//
//													chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
//												}
//											}
//										}
//									}
//
//									if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
//									{
//										chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
//										chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
//										//									chargeBackManagement.setBcResponse(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
//										//									chargeBackManagement.setResponseMessage(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getError());
//										chargeBackManagement.setUploadedBy(authenticateUserResponse.getUserName());
//										chargeBackManagement.setUploadedTimestamp(new Date());
//										chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
//										chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
//										chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
//										chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
//										chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
//										chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
//										chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
//										chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
//										chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
//										chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
//										chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
//										chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
//										chargeBackManagement.setCountPenaltyDays(0);
//										chargeBackManagement.setChargeBackFlag(0);
//										chargeBackManagement.setPenaltyFlag(0);
//										chargeBackManagement.setFraudFlag(0);
//										chargeBackManagement.setNocaSettlementFlag(0);
//										chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
//										chargeBackManagement.setUpdatedTimestamp(new Date());
//										chargeBackManagement.setResponseRemarks("uploaded CB details");
//
//										if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
//												!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
//										{
//											String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
//											chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
//											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
//											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
//										}
//										else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
//										{
//											chargeBackManagement.setResponseRemarks("Tat crossed, Accepted");
//											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
//										}
//										else	
//											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
//										chargeBackManagement.setCbOrFraud("Chargeback");
//										if(chargeBackManagement.getProductType()!=null && chargeBackManagement.getProductType().equals("MATMCW"))
//											chargeBackManagement.setBankSwitch("ICICI");
//										else
//											chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
//										chargeBackManagement.setSrNo(dataModel.getSrNo());
//
//										chargeBackDatas.add(chargeBackManagement);
//									}
//									else
//									{
//										ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
//										chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
//										chargeBackManagementResponseModel.setResponseMessage("No txn with this rrn found");
//										responseChargeBackDatas.add(chargeBackManagementResponseModel);
//									}
//								}else {
//									fileContainsEmptyRows = true;
//									emptyRowNos.add((i + 1));
//								}
//							}
//							logger.info("chargeBackDatas = " + chargeBackDatas);
//							logger.info("chargeBackDatas.size = " + chargeBackDatas.size());
//							chargeBackManagementRepository.save(chargeBackDatas);
//							logger.info("data saved in charge_back_data table");
//
//							List<AggregatorThreewayAnomalyCore> threeWayAnomalies = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);
//							if (threeWayAnomalies != null) {
//								for (AggregatorThreewayAnomalyCore a : threeWayAnomalies) {
//									ChargeBackManagement chargeBack = chargeBackManagementRepository.findByTxnNoAndBankSwitch(a.getRrn(), dataModel.getBankSwitch());
//									chargeBack.setThreeWayAnomalyFlag(1);
//									//chargeBack.setStatusFlag(3);
//									chargeBack.setThreeWayFingpayTxnId(a.getFingpayTransactionId());
//									chargeBack.setResponseRemarks("Found in 3-way Anomaly");
//									chargeBackManagementRepository.save(chargeBack);
//									for (ChargeBackManagementResponseModel responseModel : responseChargeBackDatas) {
//										if ((responseModel.getTxnNo()).equals(a.getRrn())) {
//											responseModel.setThreeWayAnomalyFlag(1);
//											//											responseModel.setStatusFlag(3);
//											responseModel.setThreeWayFingpayTxnId(a.getFingpayTransactionId());
//											responseModel.setResponseRemarks("Found in 3-way Anomaly");
//										}
//									}
//								}
//							}
//							if(fileContainsEmptyRows == true && fileContainsDuplicateCB == true)
//							{
//								logger.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));
//								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
//										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) ,	responseChargeBackDatas), HttpStatus.OK);
//							}
//							else if(fileContainsEmptyRows == true) {
//								logger.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));
//								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
//										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos),	responseChargeBackDatas), HttpStatus.OK);
//							}
//							else if(fileContainsDuplicateCB == true)
//							{
//								logger.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));
//								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
//										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+ " number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),	responseChargeBackDatas), HttpStatus.OK);
//							}
//							else {
//								logger.info("Request completed");
//								generalResponse = new ResponseEntity<GeneralResponse>(
//										new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,responseChargeBackDatas),HttpStatus.OK);
//							}
//						}
//					}
//				} catch (Exception e) {
//					e.printStackTrace();
//					logger.error("Exception in reading the file :(", e);
//					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							"Exception in reading the file" + ", " + e.getMessage(), null), HttpStatus.OK);
//				}
//			} catch (Exception e) {
//				e.printStackTrace();
//				logger.error(Constants.ERRORS_EXCEPTION_IN_SERVER + " :", e);
//				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//						Constants.ERRORS_EXCEPTION_IN_SERVER + ", " + e.getMessage(),Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null), HttpStatus.OK);
//			} finally {
//				if (fis != null) {
//					fis.close();
//				}
//			}
//
//			// AUDIT LOGS
//			//			fpCpAuditLogs = new FpCpAuditLogs();
//			//
//			//			fpCpAuditLogs.setFeatureGrpId("BANK");
//			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
//			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
//			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
//			//			fpCpAuditLogs.setOperation(5);
//			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " uploading chargeback file");
//			//			fpCpAuditLogs.setAuditTimestamp(new Date());
//			//			fpCpAuditLogs.setIpAddress(ip);
//			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
//		} else {
//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());
//
//			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
//		}
//		logger.info("****************** END *********************");
//		logger.info("--------generalResponse :----------- "+gson.toJson(generalResponse));
//		return generalResponse;
//
//					}

	@PostMapping("/addfile/existing")
	public ResponseEntity<GeneralResponse> uploadFileExisting(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token, @RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException,
					InvalidFormatException {

		Logger logger = Logger.getLogger("UploadChargebackFileManagement");
		logger.info("****************** START *********************");

		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel : permissionsList) {

			if (dataModel.getFeatureGrpCode().equals("BANK")) {
				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (dataModel.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		commonTasks.getIpAddress(request);
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			logger.info("agg/read/ Permission validation true");

			FileUploadModel dataModel = null;

			try {
				dataModel = gson.fromJson(data, FileUploadModel.class);
			} catch (Exception e) {
				e.printStackTrace();
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.OK);
			}

			logger.info("-----------datamodel received:--------"+dataModel.getBankSwitch()+","+dataModel.getCbType()+","+dataModel.getProduct());
			FileInputStream fis = null;
			try {
				logger.info("Data received : ");
				logger.info("username = " + authenticateUserResponse.getUserName());
				logger.info("data/base64 = " + data);

				String docName = toImgFromBase64(dataModel.getFile(),"chargeback_" + authenticateUserResponse.getUserName(), "xlsx",logger);
				String path = filesUtil.getProperty("documentUploadPathCB_mngt");
				logger.info("docName = " + docName);
				logger.info("path = " + path);
				logger.info("path+docName = " + path + docName);

				try {
					fis = new FileInputStream(new File(path + docName));
					Workbook workbook = WorkbookFactory.create(fis);
					logger.info("No of sheets in workbook = " + workbook.getNumberOfSheets());

					// get the first sheet from work book.
					Sheet sheet = workbook.getSheetAt(0);

					// check if the file headers are valid or not
					boolean fileHeadersAreInValid = false;
					String headersMismatched = "";
					Row headerRow = sheet.getRow(sheet.getFirstRowNum());
					headerRow.getLastCellNum();
					new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					//					Txn No./RRN
					if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
					{
						if (headerRow.getCell(4) == null || headerRow.getCell(4).getStringCellValue() == null || headerRow.getCell(4).getStringCellValue().equals("") || headerRow.getCell(4).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "4, ";
						}
					}
					else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
					{
						if (headerRow.getCell(8) == null || headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") || headerRow.getCell(8).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "8, ";
						}
					}
					else
					{
						if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "5, ";
						}
					}


					if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
					{
						if (headerRow.getCell(7) == null || headerRow.getCell(7).getStringCellValue() == null || headerRow.getCell(7).getStringCellValue().equals("") || headerRow.getCell(7).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "7, ";
						}
					}
					else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
					{
						if (headerRow.getCell(12) == null || headerRow.getCell(12).getStringCellValue() == null || headerRow.getCell(12).getStringCellValue().equals("") || headerRow.getCell(12).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "12, ";
						}
					}
					else
					{
						if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
						{
							fileHeadersAreInValid = true;
							headersMismatched += "9, ";
						}
					}

					if (fileHeadersAreInValid == true) {
						if (headersMismatched.equals("")) {
							logger.info("File uploaded is not valid. Please follow the sample file");
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file(headers mismatch)",
									Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
						} else {
							logger.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
									Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
						}
					} else {

						// total no of rows
						logger.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
						// Error Message
						String errorMessage = "Upload process was interrupted due to an error. Reason -";
						boolean fileContainsEmptyRows = false;
						boolean fileContainsDuplicateCB = false;
						List<Integer> duplicateCBRows = new ArrayList<Integer>();
						boolean errorOccured = false;

						List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
						List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
						List<Integer> emptyRowNos = new ArrayList<Integer>(); // empty row nos
						Row row = null;
						for (int i = 1; i <= sheet.getLastRowNum(); i++) {
							row = sheet.getRow(i);
							if (row != null) {


								if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
								{
									if (getCellValueAccordingToCellType(row.getCell(4)) == null	|| getCellValueAccordingToCellType(row.getCell(4)).equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(4)).trim().matches("\\d{12}"))
									{
										errorOccured = true;
										rowContainsInavlidTxnNo.add((i + 1));
									}
								}
								else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
								{
									if (getCellValueAccordingToCellType(row.getCell(8)) == null	|| getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(8)).trim().matches("\\d{12}"))
									{
										errorOccured = true;
										rowContainsInavlidTxnNo.add((i + 1));
									}
								}
								else
								{
									if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
									{
										errorOccured = true;
										rowContainsInavlidTxnNo.add((i + 1));
									}
								}
								if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
								{
									if (getCellValueAccordingToCellType(row.getCell(7)) == null	|| getCellValueAccordingToCellType(row.getCell(7)).equals("") || getCellValueAccordingToCellType(row.getCell(7)).trim().equals("")) 
									{
										errorOccured = true;
										rowContainsInavlidTAT.add((i + 1));
									}
								}
								else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
								{
									if (String.valueOf((row.getCell(12))) == null	|| String.valueOf(row.getCell(12)).equals("") || String.valueOf(row.getCell(12)).trim().equals("")) 
									{
										errorOccured = true;
										rowContainsInavlidTAT.add((i + 1));
									}
								}
								else
								{
									if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
									{
										errorOccured = true;
										rowContainsInavlidTAT.add((i + 1));
									}
								}

							}
						}

						// Bounce an error if file contains invalid value in any
						// column in any row.
						if (errorOccured == true) {
							if (rowContainsInavlidTxnNo.size() > 0) {
								errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ " doesn't contain valid value in 'Txn No./RRN' column";
							}
							if (rowContainsInavlidTAT.size() > 0) {
								errorMessage += "\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ " doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
							}

							logger.info(errorMessage);
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
									errorMessage, Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null), HttpStatus.OK);
						} else {
							logger.info("File contains valid data. so upload the file data to db");

							Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult=null;
							List<String> rrns = new ArrayList<String>();
							if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
							{
								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
									row = sheet.getRow(i);
									if (row != null) {
										rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
									}
								}
								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
							}
							else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
							{

								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
									row = sheet.getRow(i);
									if (row != null) {
										rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
									}
								}
								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
							}
							else
							{

								for (int i = 1; i <= sheet.getLastRowNum(); i++) {
									row = sheet.getRow(i);
									if (row != null) {
										rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
									}
								}
								logger.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
								transactionSearchByRRNResult = getRRNSearchDetails(rrns, dataModel.getBankSwitch(),logger);
							}
							// Iterate through each row and check whether row
							// and save it in database
							ChargeBackManagement chargeBackManagement = null;
							//							ChargeBackManagementResponseModel responseChargeBackData = null;
							List<ChargeBackManagement> chargeBackDatas = new ArrayList<ChargeBackManagement>();
							List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
							SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");

							for (int i = 1; i <= sheet.getLastRowNum(); i++) {
								row = sheet.getRow(i);
								if (row != null) {
									// create ChargeBackData object
									//										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(5)),dataModel.getBankSwitch());
									if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
									{
										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(4)),dataModel.getBankSwitch());
									}
									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
									{
										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(8)),dataModel.getBankSwitch());
									}
									else
									{
										chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(getCellValueAccordingToCellType(row.getCell(5)),dataModel.getBankSwitch());
									}
									if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && (chargeBackManagement.getStatusFlag()==1))//  || chargeBackManagement.getStatusFlag()==4))
									{
										logger.info("txn with this rrn is accepted and not yet closed");
										//										fileContainsDuplicateCB=true;
										//										duplicateCBRows.add((i + 1));
										commonTasks.updateAudit(chargeBackManagement);
										chargeBackManagement.setLiveFlag(1);
										chargeBackManagementRepository.save(chargeBackManagement);
										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
										responseChargeBackDatas.add(chargeBackManagementResponseModel);
										//										continue;
										//										commonTasks.updateAudit(chargeBackManagement);
									} 
									else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && (chargeBackManagement.getStatusFlag()==4))
									{
										logger.info("cb is closed");
										fileContainsDuplicateCB=true;
										duplicateCBRows.add((i + 1));
										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
										responseChargeBackDatas.add(chargeBackManagementResponseModel);
										continue;
										//										commonTasks.updateAudit(chargeBackManagement);
									} 
									else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==0) 
									{
										commonTasks.updateAudit(chargeBackManagement);
										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
										responseChargeBackDatas.add(chargeBackManagementResponseModel);
									}
									else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==2)
									{
										commonTasks.updateAudit(chargeBackManagement);
										ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
										responseChargeBackDatas.add(chargeBackManagementResponseModel);

										//										if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")) && getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Pre-Arbitration Raise"))
										//										{
										//											commonTasks.updateAudit(chargeBackManagement);
										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
										//										}
										//										else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise") && getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Arbitration Raise"))
										//										{
										//											commonTasks.updateAudit(chargeBackManagement);
										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
										//										}
										//										else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise") && (getCellValueAccordingToCellType(row.getCell(2)).trim().equals("Arbitration Raise")))
										//										{
										//											fileContainsDuplicateCB=true;
										//											duplicateCBRows.add((i + 1));
										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
										//											continue;
										//										}
										//										else if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback") || chargeBackManagement.getChargeBackType().equals("Goodfaith chargeback")))
										//										{
										//											logger.info("duplicate good faith chargeback found");
										//											fileContainsDuplicateCB=true;
										//											duplicateCBRows.add((i + 1));
										//											ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getChargebackManagementModel(chargeBackManagement);
										//											responseChargeBackDatas.add(chargeBackManagementResponseModel);
										//											continue;	
										//										}
									}
									else if (chargeBackManagement==null)
									{
										chargeBackManagement = new ChargeBackManagement();
									}
									if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
									{//cb date
										try {

											chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
										} catch (ParseException e) {
											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
											if(String.valueOf(row.getCell(1)).length()==9)
											{
												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
											if(String.valueOf(row.getCell(1)).length()==11)
											{
												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
										}
										//cb type 
										chargeBackManagement.setChargeBackType(dataModel.getCbType());
										chargeBackManagement.setUploadedChargebackType(getCellValueAccordingToCellType(row.getCell(2)));
										//txn date
										chargeBackManagement.setTxnDate(String.valueOf(row.getCell(3)));
										//rrn
										chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
										// Amt.
										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
										//tat
										try {
											chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
											chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(7))+" 00:00:00"));
										} catch (ParseException e) {
											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
											if(String.valueOf(row.getCell(7)).length()==9)
											{  
												Date ex=dateFormat.parse(String.valueOf(row.getCell(7)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setTat(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
											if(String.valueOf(row.getCell(7)).length()==11)
											{
												Date ex=dateFormat1.parse(String.valueOf(row.getCell(7)));
												String s1=dateFormatter.format(ex);

												chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
											}
										}

									}
									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
									{//cb date
										try {

											chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
										} catch (ParseException e) {
											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
											if(String.valueOf(row.getCell(1)).length()==9)
											{
												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
											if(String.valueOf(row.getCell(1)).length()==11)
											{
												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
										}
										//cb type 
										chargeBackManagement.setChargeBackType(dataModel.getCbType());
										chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
										//acquirer
										chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
										//bank
										chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
										//txn date
										chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
										//txn time
										try
										{
											SimpleDateFormat formatTime = new SimpleDateFormat("HH:mm:ss");
											if(row.getCell(7) != null && row.getCell(7).getDateCellValue()!=null){
												String timeStamp =formatTime.format(row.getCell(7).getDateCellValue());
												chargeBackManagement.setTxnTime(timeStamp);
											}
										}
										catch (Exception e) {
											chargeBackManagement.setTxnTime(row.getCell(7)!=null?row.getCell(7).toString():null);
										}
										//rrn
										chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
										//card no
										chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
										// Amt.
										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));
										//tat
										try {
											//tat dd-mmm-yy add
											Date cbDate=chargeBackManagement.getChargeBackDate();

											Calendar calendarFrom = Calendar.getInstance();
											calendarFrom.setTime(cbDate);
											calendarFrom.add(Calendar.DATE, +2);
											SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
											Date findHoliday=calendarFrom.getTime();
											ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
											if(chargebackHolidayList!=null)
											{
												Calendar calendarTat = Calendar.getInstance();
												calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
												calendarTat.add(Calendar.DATE, +1);
												String tatDate=tatDateFormat.format(calendarTat.getTime());
												chargeBackManagement.setTatDate(tatDate);
												chargeBackManagement.setTat(calendarTat.getTime());
											}
											else
											{

												chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
												chargeBackManagement.setTat(findHoliday);
											}

										}
										catch (Exception e) {
											e.printStackTrace();
										}

									}
									else
									{//cb date
										try {
											chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
											chargeBackManagement.setChargeBackDate(sdf.parse(getCellValueAccordingToCellType(row.getCell(1))+" 00:00:00"));
										} catch (ParseException e) {
											SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
											SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
											SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
											if(String.valueOf(row.getCell(1)).length()==9)
											{
												Date ex=dateFormat.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
											if(String.valueOf(row.getCell(1)).length()==11)
											{
												Date ex=dateFormat1.parse(String.valueOf(row.getCell(1)));
												String s=dateFormatter.format(ex);

												chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
											}
										}
										// CB Type
										chargeBackManagement.setChargeBackType(dataModel.getCbType());
										chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
										// BANK
										chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
										// Card No
										String s=getCellValueAccordingToCellType(row.getCell(4));
										chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
										// Txn No.
										chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
										// Amt.
										chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
										// Txn Dt
										chargeBackManagement.setTxnDate(String.valueOf(row.getCell(7)));

										// TAT & TRN Code

										if(dataModel!=null && dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
										{
											try {
												chargeBackManagement.setTrnCode(row.getCell(9) != null ? row.getCell(9).toString() : "");
												chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
												chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));
												chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
												chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
												//											chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
												chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
												chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
												chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(12))+" 00:00:00"));
											} catch (ParseException e) {
												SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
												SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
												SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
												if(String.valueOf(row.getCell(12)).length()==9)
												{
													Date ex=dateFormat.parse(String.valueOf(row.getCell(12)));
													String s1=dateFormatter.format(ex);

													chargeBackManagement.setChargeBackDate(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
												}
												if(String.valueOf(row.getCell(12)).length()==11)
												{
													Date ex=dateFormat1.parse(String.valueOf(row.getCell(12)));
													String s1=dateFormatter.format(ex);

													chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
												}
											}
										}
										else
										{
											try {
												chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
												chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
												chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
												chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));

												chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
												chargeBackManagement.setTat(sdf.parse(getCellValueAccordingToCellType(row.getCell(9))+" 00:00:00"));
											} catch (ParseException e) {
												SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
												SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
												SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
												if(String.valueOf(row.getCell(9)).length()==9)
												{
													chargeBackManagement.setTat(dateFormatter.parse(dateFormat.format(row.getCell(9))));
												}
												if(String.valueOf(row.getCell(9)).length()==11)
												{
													Date ex=dateFormat1.parse(String.valueOf(row.getCell(9)));
													String s1=dateFormatter.format(ex);

													chargeBackManagement.setTat(dateFormatter.parse(s1));//dateFormat1.format(row.getCell(1))));
												}
											}
										}
									}
									//									ap cw matm status of chargeback
									if(dataModel.getProduct()!=null && dataModel.getProduct().equals("AP"))
									{
										if(row.getCell(12)!=null && String.valueOf(row.getCell(12))!="" &&  String.valueOf(row.getCell(12)).equals("Accept"))
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Completed);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
										}
										else if(row.getCell(12)!=null && String.valueOf(row.getCell(12))!="" &&  String.valueOf(row.getCell(12)).equals("Reject"))
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
										}
										else
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
										}
									}
									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("CW"))
									{
										if(dataModel.getBankSwitch()!=null && dataModel.getBankSwitch().equals("PAYTM"))
										{
											if(row.getCell(8)!=null && String.valueOf(row.getCell(8))!="" &&  String.valueOf(row.getCell(8)).equals("Accept"))
											{
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Completed);
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
											}
											else if(row.getCell(8)!=null && String.valueOf(row.getCell(8))!="" &&  String.valueOf(row.getCell(8)).equals("Reject"))
											{	
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
											}
											else
											{	
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
											}
										}
										else
										{
											if(row.getCell(11)!=null && String.valueOf(row.getCell(11))!="" &&  String.valueOf(row.getCell(11)).equals("Accept"))
											{
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Completed);
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
											}
											else if(row.getCell(11)!=null && String.valueOf(row.getCell(11))!="" &&  String.valueOf(row.getCell(11)).equals("Reject"))
											{	
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);	
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
											}
											else
											{
												chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
												chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
											}
										}
									}
									else if(dataModel.getProduct()!=null && dataModel.getProduct().equals("MATMCW"))
									{
										if(row.getCell(10)!=null && String.valueOf(row.getCell(10))!="" &&  String.valueOf(row.getCell(10)).equals("Accept"))
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Completed);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
										}
										else if(row.getCell(10)!=null && String.valueOf(row.getCell(10))!="" &&  String.valueOf(row.getCell(10)).equals("Reject"))
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
										}
										else
										{
											chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
											chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
										}
									}

									if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
									{
										chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
										chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
										//									chargeBackManagement.setBcResponse(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
										//									chargeBackManagement.setResponseMessage(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getError());
										chargeBackManagement.setUploadedBy(authenticateUserResponse.getUserName());
										//									chargeBackManagement.setUploadedTimestamp(new Date());
										chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
										chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
										chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
										chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
										chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
										chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
										chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
										chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
										chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
										chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
										chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
										chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
										chargeBackManagement.setCountPenaltyDays(0);
										chargeBackManagement.setChargeBackFlag(0);
										chargeBackManagement.setPenaltyFlag(0);
										chargeBackManagement.setFraudFlag(0);
										chargeBackManagement.setNocaSettlementFlag(0);
										chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
										chargeBackManagement.setUpdatedTimestamp(new Date());
										chargeBackManagement.setResponseRemarks("uploaded CB details");
										chargeBackManagement.setCbOrFraud("Chargeback");
										if(chargeBackManagement.getProductType()!=null && chargeBackManagement.getProductType().equals("MATMCW"))
											chargeBackManagement.setBankSwitch("ICICI");
										else
											chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
										chargeBackManagement.setSrNo(dataModel.getSrNo());

										chargeBackDatas.add(chargeBackManagement);

									}
									else
									{
										ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
										chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
										chargeBackManagementResponseModel.setResponseMessage("No txn with this rrn found");
										responseChargeBackDatas.add(chargeBackManagementResponseModel);
									}
								}else {
									fileContainsEmptyRows = true;
									emptyRowNos.add((i + 1));
								}
							}
							logger.info("chargeBackDatas = " + chargeBackDatas);
							logger.info("chargeBackDatas.size = " + chargeBackDatas.size());
							chargeBackManagementRepository.save(chargeBackDatas);
							logger.info("data saved in charge_back_data table");

							List<AggregatorThreewayAnomalyCore> threeWayAnomalies = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);
							if (threeWayAnomalies != null) {
								for (AggregatorThreewayAnomalyCore a : threeWayAnomalies) {
									ChargeBackManagement chargeBack = chargeBackManagementRepository.findByTxnNoAndBankSwitch(a.getRrn(), dataModel.getBankSwitch());
									chargeBack.setThreeWayAnomalyFlag(1);
									//chargeBack.setStatusFlag(3);
									chargeBack.setThreeWayFingpayTxnId(a.getFingpayTransactionId());
									chargeBack.setResponseRemarks("Found in 3-way Anomaly");
									chargeBackManagementRepository.save(chargeBack);
									for (ChargeBackManagementResponseModel responseModel : responseChargeBackDatas) {
										if ((responseModel.getTxnNo()).equals(a.getRrn())) {
											responseModel.setThreeWayAnomalyFlag(1);
											//											responseModel.setStatusFlag(3);
											responseModel.setThreeWayFingpayTxnId(a.getFingpayTransactionId());
											responseModel.setResponseRemarks("Found in 3-way Anomaly");
										}
									}
								}
							}
							if(fileContainsEmptyRows == true && fileContainsDuplicateCB == true)
							{
								logger.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));
								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) ,	responseChargeBackDatas), HttpStatus.OK);
							}
							else if(fileContainsEmptyRows == true) {
								logger.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));
								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos),	responseChargeBackDatas), HttpStatus.OK);
							}
							else if(fileContainsDuplicateCB == true)
							{
								logger.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));
								generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(
										Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+ " number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),	responseChargeBackDatas), HttpStatus.OK);
							}
							else {
								logger.info("Request completed");
								generalResponse = new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,responseChargeBackDatas),HttpStatus.OK);
							}
						}
					}
				} catch (Exception e) {
					e.printStackTrace();
					logger.error("Exception in reading the file :(", e);
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Exception in reading the file" + ", " + e.getMessage(), null), HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
				logger.error(Constants.ERRORS_EXCEPTION_IN_SERVER + " :", e);
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER + ", " + e.getMessage(),Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null), HttpStatus.OK);
			} finally {
				if (fis != null) {
					fis.close();
				}

			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(5);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " uploading chargeback file");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		logger.info("****************** END *********************");
		logger.info("--------generalResponse :----------- "+gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping("/upload/chargebackform")
	public ResponseEntity<GeneralResponse> uploadChargebackForm(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestHeader("token") String token, @RequestBody String data)
					throws NoSuchAlgorithmException, NoSuchProviderException, InvalidCipherTextException, IOException,
					InvalidFormatException {

		Logger logger = Logger.getLogger("UploadChargebackFileManagement");
		logger.info("****************** START *********************");

		ResponseEntity<GeneralResponse> generalResponse = null;

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		try
		{
			boolean permission = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel dataModel : permissionsList) {

				if (dataModel.getFeatureGrpCode().equals("BANK")) {
					if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
						if (dataModel.getPermCreate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			commonTasks.getIpAddress(request);
			if (permission && authenticateUserResponse.getActiveFlag() == 1) {
				logger.info("agg/read/ Permission validation true");

				Gson gson = new GsonBuilder().serializeNulls().create();
				ChargebackRequestModel dataModel=null;
				try {
					dataModel = gson.fromJson(data, ChargebackRequestModel.class);
				} catch (Exception e) {
					e.printStackTrace();
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
							HttpStatus.OK);
				}
				ChargeBackManagement chargeBackManagement = null;
				new ArrayList<ChargeBackManagement>();
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				new ArrayList<Integer>();
				if(generalResponse==null && dataModel!=null )
				{
					if(dataModel.getTxnRrn()!=null && dataModel.getTxnRrn()!="")
					{
						Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = getRRNSearchData(dataModel.getTxnRrn(),dataModel.getBankSwitch(), logger);

						SimpleDateFormat sdf = new SimpleDateFormat("ddMMyyyy");
						chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(dataModel.getTxnRrn(),dataModel.getBankSwitch());
						if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && (chargeBackManagement.getStatusFlag()==1  || chargeBackManagement.getStatusFlag()==4))
						{
							logger.info("duplicate rrn present for chargeback");
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
							//					commonTasks.updateAudit(chargeBackManagement);
						} 
						else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==0) 
						{
							commonTasks.updateAudit(chargeBackManagement);
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
						else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==2)
						{
							if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")) && dataModel.getChargeBackType()!=null && dataModel.getChargeBackType().equals("Pre-Arbitration Raise"))
							{
								commonTasks.updateAudit(chargeBackManagement);
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}
							else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise") && dataModel.getChargeBackType()!=null && dataModel.getChargeBackType().equals("Arbitration Raise"))
							{
								commonTasks.updateAudit(chargeBackManagement);
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}
							else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise") && dataModel.getChargeBackType()!=null && dataModel.getChargeBackType().equals("Arbitration Raise"))
							{
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}
							else if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback") || chargeBackManagement.getChargeBackType().equals("Goodfaith chargeback")))
							{
								logger.info("duplicate good faith chargeback found");
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}
						}
						else if (chargeBackManagement==null)
						{
							chargeBackManagement = new ChargeBackManagement();
						}
						// CB Dt.
						try {
							chargeBackManagement.setCbDate(dataModel.getChargeBackDate());

							chargeBackManagement.setChargeBackDate(sdf.parse(dataModel.getChargeBackDate()));
						} catch (ParseException e) {
							SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
							SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
							SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
							if(dataModel.getChargeBackDate().length()==9)
							{
								chargeBackManagement.setChargeBackDate(dateFormatter.parse(dateFormat.format(dataModel.getChargeBackDate())));
							}
							if(dataModel.getChargeBackDate().length()==11)
							{
								Date ex=dateFormat1.parse(dataModel.getChargeBackDate());
								String s=dateFormatter.format(ex);

								chargeBackManagement.setChargeBackDate(dateFormatter.parse(s));//dateFormat1.format(row.getCell(1))));
							}
						}
						// CB Type
						chargeBackManagement.setChargeBackType(dataModel.getChargeBackType());
						chargeBackManagement.setUploadedChargebackType(dataModel.getChargeBackType());
						// BANK
						chargeBackManagement.setBank(dataModel.getBank());
						// Card No
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(dataModel.getCardNo()));
						// Txn No.
						chargeBackManagement.setTxnNo(dataModel.getTxnRrn());
						// Amt.
						chargeBackManagement.setAmount(Double.parseDouble(dataModel.getAmount()));
						// Txn Dt
						chargeBackManagement.setTxnDate(dataModel.getTxnDate());
						// TRN Code
						chargeBackManagement.setTrnCode(dataModel.getTrnCode());

						chargeBackManagement.setTatDate(dataModel.getTat());

						// BC Terminal ID
						chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
						chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
						//				chargeBackManagement.setBcResponse(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
						//				chargeBackManagement.setResponseMessage(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getError());
						chargeBackManagement.setUploadedBy(authenticateUserResponse.getUserName());
						chargeBackManagement.setUploadedTimestamp(new Date());
						chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
						chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
						chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
						chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
						chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
						chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
						chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
						chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
						chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
						chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
						chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
						chargeBackManagement.setCountPenaltyDays(0);
						chargeBackManagement.setChargeBackFlag(0);
						chargeBackManagement.setPenaltyFlag(0);
						chargeBackManagement.setFraudFlag(0);
						chargeBackManagement.setNocaSettlementFlag(0);
						chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
						chargeBackManagement.setUpdatedTimestamp(new Date());
						chargeBackManagement.setResponseRemarks("uploaded CB details");
						chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
						chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
						chargeBackManagement.setCbOrFraud("Chargeback");
						if(chargeBackManagement.getProductType()!=null && chargeBackManagement.getProductType().equals("MATMCW"))
							chargeBackManagement.setBankSwitch("ICICI");
						else
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
						chargeBackManagementRepository.save(chargeBackManagement);
						logger.info("data saved in charge_back_data table");

					} 
					else {
						return  new ResponseEntity<GeneralResponse>(new GeneralResponse(
								Constants.FALSE,Constants.REQUEST_INCOMPLETE +"Enter correct RRN ",	null), HttpStatus.OK);
					}
				}
				else
				{
					return generalResponse;
				}

				AggregatorThreewayAnomalyCore threeWayAnomalies = aggregatorThreewayAnomalyCoreRepository.findByRrn(dataModel.getTxnRrn());
				if (threeWayAnomalies != null) {
					ChargeBackManagement chargeBack = chargeBackManagementRepository.findByTxnNoAndBankSwitch(dataModel.getTxnRrn(), dataModel.getBankSwitch());
					chargeBack.setThreeWayAnomalyFlag(1);
					//chargeBack.setStatusFlag(3);
					chargeBack.setThreeWayFingpayTxnId(threeWayAnomalies.getFingpayTransactionId());
					chargeBack.setResponseRemarks("Found in 3-way Anomaly");
					chargeBackManagementRepository.save(chargeBack);
					for (ChargeBackManagementResponseModel responseModel : responseChargeBackDatas) {
						if ((responseModel.getTxnNo()).equals(threeWayAnomalies.getRrn())) {
							responseModel.setThreeWayAnomalyFlag(1);
							//							responseModel.setStatusFlag(3);
							responseModel.setThreeWayFingpayTxnId(threeWayAnomalies.getFingpayTransactionId());
							responseModel.setResponseRemarks("Found in 3-way Anomaly");
						}
					}

				}

				logger.info("Request completed");
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,responseChargeBackDatas),HttpStatus.OK);

				// AUDIT LOGS
				//				fpCpAuditLogs = new FpCpAuditLogs();
				//
				//				fpCpAuditLogs.setFeatureGrpId("BANK");
				//				fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
				//				fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
				//				// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				//				fpCpAuditLogs.setOperation(5);
				//				fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " uploading chargeback file");
				//				fpCpAuditLogs.setAuditTimestamp(new Date());
				//				fpCpAuditLogs.setIpAddress(ip);
				//				fpCpAuditLogsRepository.save(fpCpAuditLogs);

			}
			else {
				logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

				return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		logger.info("****************** END *********************");
		return generalResponse;
	}

	@GetMapping(path = "/fetch/records")
	public ResponseEntity<GeneralResponse> fetchChargeBackRecords(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		ResponseEntity<GeneralResponse> generalResponse = null;

		new GsonBuilder().serializeNulls().create();
		log.info("-------------start fetch records-----------");
		System.out.println("-------------start fetch records----------- 12 march");
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel : permissionsList) {

			if (dataModel.getFeatureGrpCode().equals("BANK")) {
				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (dataModel.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			log.info("agg/read/ Permission validation true");

			//			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findTop10();
			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findTop10ByOrderByIdDesc();

			try {
				if (chargeBack != null) {
					List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
					ChargeBackManagementResponseModel responseChargeBackData = null;

					for (ChargeBackManagement chargeBackManagement : chargeBack) {
						responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);
					}

					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas), HttpStatus.OK);
					System.out.println("-------------fetched records----------- 12 march  "+	new GsonBuilder().serializeNulls().create().toJson(responseChargeBackDatas));
					
				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching default records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			log.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records-----------");// + gson.toJson(generalResponse));
		System.out.println("-------------end fetch records-----------12 march  --");
		return generalResponse;

	}

	@GetMapping(path = "/fetch/records/{fromtime}/{totime}")
	public ResponseEntity<GeneralResponse> fetchChargeBackFromTo(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @PathVariable String fromtime, @PathVariable String totime,
			@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		log.info("-----------start fetch charge back from - to----------");
		
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel : permissionsList) {

			if (dataModel.getFeatureGrpCode().equals("BANK")) {
				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (dataModel.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(fromtime);
			Date td = dateformat1.parse(totime);

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findByUploadedTimestampBetween(fromdate, todate);
			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;
				for (ChargeBackManagement chargeBackManagement : chargeBack)
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);	
				}

				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas),
						HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);

		} else {
			log.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records from - to-----------");// + gson.toJson(generalResponse));
		return generalResponse;

	}

	@GetMapping(path = "/fetch/records/{fromtime}/{totime}/{fetchby}")
	public ResponseEntity<GeneralResponse> fetchChargeBack(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @PathVariable String fromtime, @PathVariable String totime, @PathVariable String fetchby,
			@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		ResponseEntity<GeneralResponse> generalResponse = null;
		log.info("-----------start fetch charge back from - to----------");
		
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel : permissionsList) {

			if (dataModel.getFeatureGrpCode().equals("BANK")) {
				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (dataModel.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(fromtime);
			Date td = dateformat1.parse(totime);

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);

			//			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findByUploadedTimestampBetween(fromdate, todate);
			List<ChargeBackManagement> chargeBack=null;
			if(fetchby!=null && fetchby.equals("chargebackdate"))
			{
				chargeBack = chargeBackManagementRepository.findByChargeBackDateBetween(fd, td);
			}
			else if(fetchby!=null && fetchby.equals("tat"))
			{
				chargeBack = chargeBackManagementRepository.findByTatBetween(fd, td);
			}
			else if(fetchby!=null && fetchby.equals("pending"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(0,fromdate, todate);
			}
			else if(fetchby!=null && fetchby.equals("approved"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(1,fromdate, todate);
			}
			else if(fetchby!=null && fetchby.equals("rejected"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(2,fromdate, todate);
			}
			else if(fetchby!=null && fetchby.equals("deemedAccepted"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(4,fromdate, todate);
			}
			//			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findByUploadedTimestampBetween(fromdate, todate,fe);
			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;
				for (ChargeBackManagement chargeBackManagement : chargeBack)
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);	
				}

				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas),
						HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetching from-to records");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);

		} else {
			log.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records from - to-----------");// + gson.toJson(generalResponse));
		return generalResponse;

	}

	@GetMapping(path = "/fetch/allmakerchecker")
	public ResponseEntity<GeneralResponse> fetchAllMakerChecker(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		ResponseEntity<GeneralResponse> generalResponse = null;

		new GsonBuilder().serializeNulls().create();
		log.info("-----------start fetch all maker cheker----------");
		
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel : permissionsList) {

			if (dataModel.getFeatureGrpCode().equals("BANK")) {
				if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (dataModel.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findtop10MakerChecker(Constants.Charge_Back_Files_Uploaded);
			List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findTop10ByStatusFlagOrderByIdDesc(Constants.Charge_Back_Files_Uploaded);

			if (chargeBack != null) {
				List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData = null;
				for (ChargeBackManagement chargeBackManagement : chargeBack) 
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, 0, responseChargeBackDatas),
						HttpStatus.OK);
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(1);
			//			fpCpAuditLogs.setViewData("user: " + authenticateUserResponse.getUserName() + " fetch default maker cheker");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			log.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records default maker checker-----------");// + gson.toJson(generalResponse));
		return generalResponse;

	}

	@GetMapping(path ="/fetch/makerchecker/{fromtime}/{totime}")
	public ResponseEntity<GeneralResponse> fetchMakerCheckerFromTo(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@PathVariable String fromtime,@PathVariable String totime, @RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException 
	{
		ResponseEntity<GeneralResponse> generalResponse = null;

		new GsonBuilder().serializeNulls().create();
		log.info("-----------start fetch maker checker from to ----------");
		
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel  : permissionsList) {

			if(dataModel.getFeatureGrpCode().equals("BANK")) {
				if(dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if(dataModel.getPermRead()==1) { 
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1)
		{
			SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1=new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2=new SimpleDateFormat("yyyy-MM-dd");
			Date fd=dateformat1.parse(fromtime);
			Date td=dateformat1.parse(totime);

			String fromDate=dateFormat2.format(fd)+" 00:00:00";
			String toDate=dateFormat2.format(td)+" 23:59:59";
			Date fromdate=dateformat.parse(fromDate);
			Date todate=dateformat.parse(toDate);

			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(Constants.Charge_Back_Files_Uploaded,fromdate,todate);
			if(chargeBack!=null)
			{
				List<ChargeBackManagementResponseModel> responseChargeBackDatas=new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData=null;
				for(ChargeBackManagement chargeBackManagement:chargeBack)
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,responseChargeBackDatas), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE,Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			//		AUDIT LOGS
			//		fpCpAuditLogs = new FpCpAuditLogs();
			//
			//	 	fpCpAuditLogs.setFeatureGrpId("BANK");
			//	 	fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//	 	fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			////			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//	 	fpCpAuditLogs.setOperation(1);
			//	 	fpCpAuditLogs.setViewData("user: "+authenticateUserResponse.getUserName()+" fetch maker cheker from-to");
			//	 	fpCpAuditLogs.setAuditTimestamp(new Date());
			//	 	fpCpAuditLogs.setIpAddress(ip);
			//	 	fpCpAuditLogsRepository.save(fpCpAuditLogs);
		}
		else 
		{
			log.info("agg/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records from - to maker checker-----------");//+gson.toJson(generalResponse));
		return generalResponse;

	}

	@GetMapping(path ="/fetch/makerchecker/{fromtime}/{totime}/{fetchby}")
	public ResponseEntity<GeneralResponse> fetchMakerChecker(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@PathVariable String fromtime,@PathVariable String totime,@PathVariable String fetchby, @RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException 
	{
		ResponseEntity<GeneralResponse> generalResponse = null;

		new GsonBuilder().serializeNulls().create();
		log.info("-----------start fetch maker checker from to ----------");

		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel dataModel  : permissionsList) {

			if(dataModel.getFeatureGrpCode().equals("BANK")) {
				if(dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if(dataModel.getPermRead()==1) { 
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1)
		{
			SimpleDateFormat dateformat=new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1=new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2=new SimpleDateFormat("yyyy-MM-dd");
			Date fd=dateformat1.parse(fromtime);
			Date td=dateformat1.parse(totime);

			String fromDate=dateFormat2.format(fd)+" 00:00:00";
			String toDate=dateFormat2.format(td)+" 23:59:59";
			Date fromdate=dateformat.parse(fromDate);
			Date todate=dateformat.parse(toDate);

			//		List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(Constants.Charge_Back_Files_Uploaded,fromdate,todate);
			List<ChargeBackManagement> chargeBack=null;

			if(fetchby!=null && fetchby.equals("chargebackdate"))
			{
				chargeBack = chargeBackManagementRepository.findByChargeBackDateBetween(fd, td);
			}
			else if(fetchby!=null && fetchby.equals("tat"))
			{
				chargeBack = chargeBackManagementRepository.findByTatBetween(fd, td);
			}
			else if(fetchby!=null && fetchby.equals("pending"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(0,fromdate, todate);
			}
			else if(fetchby!=null && fetchby.equals("approved"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(1,fromdate, todate);
			}
			else if(fetchby!=null && fetchby.equals("rejected"))
			{
				chargeBack = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(2,fromdate, todate);
			}
			if(chargeBack!=null)
			{
				List<ChargeBackManagementResponseModel> responseChargeBackDatas=new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData=null;
				for(ChargeBackManagement chargeBackManagement:chargeBack)
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,responseChargeBackDatas), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE,Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			//		AUDIT LOGS
			//		fpCpAuditLogs = new FpCpAuditLogs();
			//
			//	 	fpCpAuditLogs.setFeatureGrpId("BANK");
			//	 	fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//	 	fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			////			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//	 	fpCpAuditLogs.setOperation(1);
			//	 	fpCpAuditLogs.setViewData("user: "+authenticateUserResponse.getUserName()+" fetch maker cheker from-to");
			//	 	fpCpAuditLogs.setAuditTimestamp(new Date());
			//	 	fpCpAuditLogs.setIpAddress(ip);
			//	 	fpCpAuditLogsRepository.save(fpCpAuditLogs);
		}
		else 
		{
			log.info("agg/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch records from - to maker checker-----------");//+gson.toJson(generalResponse));
		return generalResponse;

	}

	@PostMapping(path = "/chargeback/history")
	public ResponseEntity<GeneralResponse> getHistory(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start get chargeback history----------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		log.info("chargeback history data model : " + dataSent);
		ApproveRejectDataModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ApproveRejectDataModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission=false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermRead() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null && dataModel != null && commonTasks.check(dataSent)) {
				//				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findHistory(dataModel.getId());
				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findByPrimaryIdOrderByIdDesc(dataModel.getId());

				if (chargeBack != null) {

					List<ChargeBackManagementResponseModel> responseChargeBackDatas=new ArrayList<ChargeBackManagementResponseModel>();
					ChargeBackManagementResponseModel responseChargeBackData=null;
					for(CBFraudManagementAudit chargeBackManagement:chargeBack)
					{
						responseChargeBackData= commonTasks.getResponseModelAudit(chargeBackManagement);
						if(responseChargeBackData!=null)
							responseChargeBackDatas.add(responseChargeBackData);}

					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,0,responseChargeBackDatas), HttpStatus.OK);


				} else {
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, "History not found"),
							HttpStatus.OK);
				}
			} else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INCOMPLETE_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, "Incorrect data"),
						HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetching history-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/chargeback/complete/history/{fromtime}/{totime}")
	public ResponseEntity<GeneralResponse> getCompleteHistoryFromTo(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession,@PathVariable String fromtime, @PathVariable String totime, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start get chargeback history----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		commonTasks.getIpAddress(request);
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		boolean permission=false;

		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermRead() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if ( permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			logger.info("agg/read/ Permission validation true");

			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(fromtime);
			Date td = dateformat1.parse(totime);

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);

			List<ChargeBackManagement> cbMngtList = chargeBackManagementRepository.findByUploadedTimestampBetween(fromdate, todate);

			if(cbMngtList!=null)
			{
				List<CBHistoryResponseModel> historyResponse=new ArrayList<CBHistoryResponseModel>();
				for(ChargeBackManagement chargeBackManagement:cbMngtList)
				{
					CBHistoryResponseModel cBHistoryResponseModel=new CBHistoryResponseModel();
					cBHistoryResponseModel.setProductType(chargeBackManagement.getProductType());
					cBHistoryResponseModel.setBankSwitch(chargeBackManagement.getBankSwitch());
					cBHistoryResponseModel.setId(chargeBackManagement.getId());
					cBHistoryResponseModel.setRrn(chargeBackManagement.getTxnNo());
					cBHistoryResponseModel.setParentName(chargeBackManagement.getParentName());
					cBHistoryResponseModel.setTxnDate(chargeBackManagement.getTxnDate());
					cBHistoryResponseModel.setTxnAmount(String.valueOf(chargeBackManagement.getAmount()));
					cBHistoryResponseModel.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
					cBHistoryResponseModel.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
					cBHistoryResponseModel.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
					cBHistoryResponseModel.setMerchantName(chargeBackManagement.getMerchantName());

					if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
					{
						cBHistoryResponseModel.setChargebackDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setChargebackStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setChargebackTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise"))
					{
						cBHistoryResponseModel.setPreArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setPreArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setPreArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise"))
					{
						cBHistoryResponseModel.setArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback"))
					{
						cBHistoryResponseModel.setGoodFaithDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setGoodFaithStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setGoodFaithTat(chargeBackManagement.getTatDate());
					}

					//				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findHistory(chargeBackManagement.getId());
					List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findByPrimaryIdOrderByIdDesc(chargeBackManagement.getId());
					if (chargeBack != null) {

						for(CBFraudManagementAudit chargebackAudit:chargeBack)
						{
							if(chargebackAudit.getChargeBackType()!=null && (chargebackAudit.getChargeBackType().equals("Chargeback Raise") || chargebackAudit.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								if(cBHistoryResponseModel.getChargebackDate() == null && cBHistoryResponseModel.getChargebackStatus() == null && cBHistoryResponseModel.getChargebackTat() == null)
								{
									cBHistoryResponseModel.setChargebackDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setChargebackStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setChargebackTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Pre-Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getPreArbitrationDate() == null && cBHistoryResponseModel.getPreArbitrationStatus() == null && cBHistoryResponseModel.getPreArbitrationTat() == null)
								{
									cBHistoryResponseModel.setPreArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setPreArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setPreArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getArbitrationDate() == null && cBHistoryResponseModel.getArbitrationStatus() == null && cBHistoryResponseModel.getArbitrationTat() == null)
								{
									cBHistoryResponseModel.setArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Good Faith Chargeback"))
							{
								if(cBHistoryResponseModel.getGoodFaithDate() == null && cBHistoryResponseModel.getGoodFaithStatus() == null && cBHistoryResponseModel.getGoodFaithTat() == null)
								{
									cBHistoryResponseModel.setGoodFaithDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setGoodFaithStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setGoodFaithTat(chargebackAudit.getTatDate());
								}
							}
						}

					}
					historyResponse.add(cBHistoryResponseModel);
				}
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,historyResponse), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);

			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetching history-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/chargeback/complete/history/{fromtime}/{totime}/{filtertype}")
	public ResponseEntity<GeneralResponse> getCompleteHistoryFilter(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession,@PathVariable String fromtime, @PathVariable String totime, @PathVariable String filtertype, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start get chargeback history----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		commonTasks.getIpAddress(request);
		boolean permission=false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermRead() == 1) {
						permission=true;
						break;
					}
				}
			}
		}//permission
		if ( permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			logger.info("agg/read/ Permission validation true");
			//	List<ChargeBackManagement> cbMngtList=chargeBackManagementRepository.findByTxnNo(rrn);
			SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			SimpleDateFormat dateformat1 = new SimpleDateFormat("ddMMyyyy");
			SimpleDateFormat dateFormat2 = new SimpleDateFormat("yyyy-MM-dd");
			Date fd = dateformat1.parse(fromtime);
			Date td = dateformat1.parse(totime);

			String fromDate = dateFormat2.format(fd) + " 00:00:00";
			String toDate = dateFormat2.format(td) + " 23:59:59";
			Date fromdate = dateformat.parse(fromDate);
			Date todate = dateformat.parse(toDate);
			List<ChargeBackManagement> cbMngtList=null;
			if(filtertype!=null && filtertype.equals("chargebackdate"))
			{
				cbMngtList = chargeBackManagementRepository.findByChargeBackDateBetween(fd, td);
			}
			else if(filtertype!=null && filtertype.equals("tat"))
			{
				cbMngtList = chargeBackManagementRepository.findByTatBetween(fd, td);
			}
			else if(filtertype!=null && filtertype.equals("pending"))
			{
				cbMngtList = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(0,fromdate, todate);
			}
			else if(filtertype!=null && filtertype.equals("approved"))
			{
				cbMngtList = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(1,fromdate, todate);
			}
			else if(filtertype!=null && filtertype.equals("rejected"))
			{
				cbMngtList = chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(2,fromdate, todate);
			}
			List<CBHistoryResponseModel> historyResponse=new ArrayList<CBHistoryResponseModel>();
			if(cbMngtList!=null)
			{
				for(ChargeBackManagement chargeBackManagement:cbMngtList)
				{
					CBHistoryResponseModel cBHistoryResponseModel=new CBHistoryResponseModel();
					cBHistoryResponseModel.setProductType(chargeBackManagement.getProductType());
					cBHistoryResponseModel.setBankSwitch(chargeBackManagement.getBankSwitch());
					cBHistoryResponseModel.setId(chargeBackManagement.getId());
					cBHistoryResponseModel.setRrn(chargeBackManagement.getTxnNo());
					cBHistoryResponseModel.setParentName(chargeBackManagement.getParentName());
					cBHistoryResponseModel.setTxnDate(chargeBackManagement.getTxnDate());
					cBHistoryResponseModel.setTxnAmount(String.valueOf(chargeBackManagement.getAmount()));
					cBHistoryResponseModel.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
					cBHistoryResponseModel.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
					cBHistoryResponseModel.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
					cBHistoryResponseModel.setMerchantName(chargeBackManagement.getMerchantName());

					if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
					{
						cBHistoryResponseModel.setChargebackDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setChargebackStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setChargebackTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise"))
					{
						cBHistoryResponseModel.setPreArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setPreArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setPreArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise"))
					{
						cBHistoryResponseModel.setArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback"))
					{
						cBHistoryResponseModel.setGoodFaithDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setGoodFaithStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setGoodFaithTat(chargeBackManagement.getTatDate());
					}

					//				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findHistory(chargeBackManagement.getId());
					List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findByPrimaryIdOrderByIdDesc(chargeBackManagement.getId());
					if (chargeBack != null) {

						for(CBFraudManagementAudit chargebackAudit:chargeBack)
						{
							if(chargebackAudit.getChargeBackType()!=null && (chargebackAudit.getChargeBackType().equals("Chargeback Raise") || chargebackAudit.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								if(cBHistoryResponseModel.getChargebackDate() == null && cBHistoryResponseModel.getChargebackStatus() == null && cBHistoryResponseModel.getChargebackTat() == null)
								{
									cBHistoryResponseModel.setChargebackDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setChargebackStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setChargebackTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Pre-Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getPreArbitrationDate() == null && cBHistoryResponseModel.getPreArbitrationStatus() == null && cBHistoryResponseModel.getPreArbitrationTat() == null)
								{
									cBHistoryResponseModel.setPreArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setPreArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setPreArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getArbitrationDate() == null && cBHistoryResponseModel.getArbitrationStatus() == null && cBHistoryResponseModel.getArbitrationTat() == null)
								{
									cBHistoryResponseModel.setArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Good Faith Chargeback"))
							{
								if(cBHistoryResponseModel.getGoodFaithDate() == null && cBHistoryResponseModel.getGoodFaithStatus() == null && cBHistoryResponseModel.getGoodFaithTat() == null)
								{
									cBHistoryResponseModel.setGoodFaithDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setGoodFaithStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setGoodFaithTat(chargebackAudit.getTatDate());
								}
							}
						}

					}
					historyResponse.add(cBHistoryResponseModel);
				}
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,historyResponse), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);

			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetching history-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/chargeback/complete/history/{rrn}")
	public ResponseEntity<GeneralResponse> getCompleteHistory(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @PathVariable String rrn, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start get chargeback history----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		commonTasks.getIpAddress(request);
		boolean permission=false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermRead() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if ( permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			logger.info("agg/read/ Permission validation true");
			List<ChargeBackManagement> cbMngtList=chargeBackManagementRepository.findByTxnNo(rrn);
			List<CBHistoryResponseModel> historyResponse=new ArrayList<CBHistoryResponseModel>();
			if(cbMngtList!=null)
			{
				for(ChargeBackManagement chargeBackManagement:cbMngtList)
				{
					CBHistoryResponseModel cBHistoryResponseModel=new CBHistoryResponseModel();
					cBHistoryResponseModel.setProductType(chargeBackManagement.getProductType());
					cBHistoryResponseModel.setBankSwitch(chargeBackManagement.getBankSwitch());
					cBHistoryResponseModel.setId(chargeBackManagement.getId());
					cBHistoryResponseModel.setRrn(rrn);
					cBHistoryResponseModel.setParentName(chargeBackManagement.getParentName());
					cBHistoryResponseModel.setTxnDate(chargeBackManagement.getTxnDate());
					cBHistoryResponseModel.setTxnAmount(String.valueOf(chargeBackManagement.getAmount()));
					cBHistoryResponseModel.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
					cBHistoryResponseModel.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
					cBHistoryResponseModel.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
					cBHistoryResponseModel.setMerchantName(chargeBackManagement.getMerchantName());

					if(chargeBackManagement.getChargeBackType()!=null && (chargeBackManagement.getChargeBackType().equals("Chargeback Raise") || chargeBackManagement.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
					{
						cBHistoryResponseModel.setChargebackDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setChargebackStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setChargebackTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Pre-Arbitration Raise"))
					{
						cBHistoryResponseModel.setPreArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setPreArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setPreArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Arbitration Raise"))
					{
						cBHistoryResponseModel.setArbitrationDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setArbitrationStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setArbitrationTat(chargeBackManagement.getTatDate());
					}
					else if(chargeBackManagement.getChargeBackType()!=null && chargeBackManagement.getChargeBackType().equals("Good Faith Chargeback"))
					{
						cBHistoryResponseModel.setGoodFaithDate(chargeBackManagement.getCbDate());
						cBHistoryResponseModel.setGoodFaithStatus(chargeBackManagement.getStatusFlag());
						cBHistoryResponseModel.setGoodFaithTat(chargeBackManagement.getTatDate());
					}

					//				List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findHistory(chargeBackManagement.getId());
					List<CBFraudManagementAudit> chargeBack = cbFraudManagementAuditRepository.findByPrimaryIdOrderByIdDesc(chargeBackManagement.getId());
					if (chargeBack != null) {

						for(CBFraudManagementAudit chargebackAudit:chargeBack)
						{
							if(chargebackAudit.getChargeBackType()!=null && (chargebackAudit.getChargeBackType().equals("Chargeback Raise") || chargebackAudit.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								if(cBHistoryResponseModel.getChargebackDate() == null && cBHistoryResponseModel.getChargebackStatus() == null && cBHistoryResponseModel.getChargebackTat() == null)
								{
									cBHistoryResponseModel.setChargebackDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setChargebackStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setChargebackTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Pre-Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getPreArbitrationDate() == null && cBHistoryResponseModel.getPreArbitrationStatus() == null && cBHistoryResponseModel.getPreArbitrationTat() == null)
								{
									cBHistoryResponseModel.setPreArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setPreArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setPreArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Arbitration Raise"))
							{
								if(cBHistoryResponseModel.getArbitrationDate() == null && cBHistoryResponseModel.getArbitrationStatus() == null && cBHistoryResponseModel.getArbitrationTat() == null)
								{
									cBHistoryResponseModel.setArbitrationDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setArbitrationStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setArbitrationTat(chargebackAudit.getTatDate());
								}
							}
							else if(chargebackAudit.getChargeBackType()!=null && chargebackAudit.getChargeBackType().equals("Good Faith Chargeback"))
							{
								if(cBHistoryResponseModel.getGoodFaithDate() == null && cBHistoryResponseModel.getGoodFaithStatus() == null && cBHistoryResponseModel.getGoodFaithTat() == null)
								{
									cBHistoryResponseModel.setGoodFaithDate(chargebackAudit.getCbDate());
									cBHistoryResponseModel.setGoodFaithStatus(chargebackAudit.getStatusFlag());
									cBHistoryResponseModel.setGoodFaithTat(chargebackAudit.getTatDate());
								}
							}
						}
					}
					historyResponse.add(cBHistoryResponseModel);
				}
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,historyResponse), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);

			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetching history-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/fetchbysrno/{srno}")
	public ResponseEntity<GeneralResponse> fetchBySrNo(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @PathVariable String srno, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start fetch By Srno----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		commonTasks.getIpAddress(request);
		boolean permission=false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermRead() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if (permission && authenticateUserResponse.getActiveFlag() == 1) {
			//			logger.info("agg/read/ Permission validation true");
			List<ChargeBackManagement> chargeBack=chargeBackManagementRepository.findBySrNo(srno);
			if(chargeBack!=null)
			{
				List<ChargeBackManagementResponseModel> responseChargeBackDatas=new ArrayList<ChargeBackManagementResponseModel>();
				ChargeBackManagementResponseModel responseChargeBackData=null;
				for(ChargeBackManagement chargeBackManagement:chargeBack)
				{
					responseChargeBackData= commonTasks.getResponseModel(chargeBackManagement);
					if(responseChargeBackData!=null)
						responseChargeBackDatas.add(responseChargeBackData);
				}

				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,0,responseChargeBackDatas), HttpStatus.OK);
			}
			else
			{
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE,Constants.FAILED_STATUS_CODE, null), HttpStatus.OK);
			}

			// AUDIT LOGS
			//			fpCpAuditLogs = new FpCpAuditLogs();
			//
			//			fpCpAuditLogs.setFeatureGrpId("BANK");
			//			fpCpAuditLogs.setFeatureId("CHAGEBACK_UPLOAD");
			//			fpCpAuditLogs.setUserName(authenticateUserResponse.getUserName());
			//			// 0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			//			fpCpAuditLogs.setOperation(3);
			//			fpCpAuditLogs
			//					.setViewData("user: " + authenticateUserResponse.getUserName() + " approved/rejected CB or fraud");
			//			fpCpAuditLogs.setAuditTimestamp(new Date());
			//			fpCpAuditLogs.setIpAddress(ip);
			//			fpCpAuditLogsRepository.save(fpCpAuditLogs);
		} else {
			//			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		log.info("-----------end fetch by srno-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}

	@PostMapping(path = "/approvereject/makerchecker")
	public ResponseEntity<GeneralResponse> approveReject(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
		logger.info("-----------start approve/reject maker checker----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		logger.info("approve or reject data from device : " + dataSent);
		ApproveRejectDataModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ApproveRejectDataModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission=false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermApprove() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if ( permission && authenticateUserResponse.getActiveFlag() == 1) {
			ChargeBackManagement chargeBack = chargeBackManagementRepository.findOne(dataModel.getId());
			if (chargeBack != null) {
				if (dataModel.getFlag() == 1) {
					logger.info("updating the audit file for approval");
					commonTasks.updateAudit(chargeBack);

					chargeBack.setStatusFlag(Constants.Charge_Back_Approved);
					chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
					chargeBack.setUpdatedTimestamp(new Date());
					chargeBack.setAggregatorUpdatedTimestamp(new Date());
					if(dataModel.getCbRemarks() != null )
						chargeBack.setResponseRemarks(dataModel.getCbRemarks());
					else chargeBack.setResponseRemarks("Maker checker done");

					chargeBackManagementRepository.save(chargeBack);
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_APPROVED, 0, null),
							HttpStatus.OK);
				}
				else if (dataModel.getFlag() == 2)
				{
					logger.info("updating the audit file for rejected");
					commonTasks.updateAudit(chargeBack);
					chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
					chargeBack.setAggregatorUpdatedTimestamp(new Date());
					chargeBack.setStatusFlag(Constants.Charge_Back_Rejected);
					chargeBack.setUpdatedTimestamp(new Date());
					if(dataModel.getCbRemarks() != null )
						chargeBack.setResponseRemarks(dataModel.getCbRemarks());
					else chargeBack.setResponseRemarks("Maker checker done");
					chargeBackManagementRepository.save(chargeBack);
					
					boolean isWrongFormat=false;
					String wrongExtensionList="";
					
					if(chargeBack.getChargeBackType().equals(Constants.CB_RAISE) || chargeBack.getChargeBackType().equals(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS))
					{	
					if(dataModel.getUploadFiles()!=null)
					{
						String attachmentsList="";
						Integer countFile=0;
						for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
						{
							if(a.getFileName()!=null)
							{
								String extension=commonTasks.checkFileExtension(a.getFileName());
								if(extension!=null)
								{
									if(extension.equals("jpeg"))
									{
										String fileName=saveImage(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".jpeg");
										attachmentsList=attachmentsList + fileName + ",";

									}
									else if(extension.equals("pdf"))	
									{
										String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".pdf");
										attachmentsList=attachmentsList +fileName + ",";
									}
									else if(extension.equals("docx"))
									{
										String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".docx");
										attachmentsList=attachmentsList + fileName + ",";

									}
									else if(extension.equals("txt"))
									{
										String fileName=savePdfDocx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".txt");
										attachmentsList=attachmentsList + fileName + ",";

									}
									else if(extension.equals("xlsx"))	
									{
										String fileName=savexlsx(a.getFileName(),dataModel.getRrn(),a.getBase64data(),++countFile,logger,".xlsx");
										attachmentsList=attachmentsList +fileName + ",";
									}
								}
								else
								{
									isWrongFormat=true;
									wrongExtensionList=wrongExtensionList + a.getFileName() + ",";
								}
							}
						}
						if(!attachmentsList.equals(""))
						{
							chargeBack.setCbFraudAttachmentsPath(attachmentsList.substring(0,attachmentsList.length()-1));
							chargeBackManagementRepository.save(chargeBack);
						}
						if(isWrongFormat)
						{
							chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorUpdatedTimestamp(new Date());
							chargeBack.setResponseRemarks("Upload Files Wrong Format");
							chargeBackManagementRepository.save(chargeBack);
							generalResponse = new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files in .jpg or.png or.pdf format : "
											+ wrongExtensionList.substring(0,wrongExtensionList.length()-1)),HttpStatus.OK);

						}
						else
						{
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);

						}
					}
					else
					{
						generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);
					}
					}
					else if(dataModel.getUploadFiles() != null)
					{
						boolean mdeclarationFlag=false;
						boolean mpanFlag=false;
						boolean mkycFlag=false;
						String missingMandatoryFiles="";
						String mdeclarationAttachments="";
						String mpanAttachments="";
						String mkycAttachments="";
						String cdeclarationAttachments="";
						String mtxnlogAttachments="";
						String mregistercopyAttachments="";
						
						Integer countFile=0;
						for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
						{
							if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mdeclaration"))
							{
								mdeclarationFlag=true;
							}
							else if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mpan"))
							{
								mpanFlag=true;
							}
							else if(a.getFileName()!=null && a.getDocname()!=null && a.getDocname().equals("mkyc"))
							{
								mkycFlag=true;
							}
						}
						if(mdeclarationFlag && mpanFlag && mkycFlag)
						{
						for(AggregatorSuperMerchantUploadFile a:dataModel.getUploadFiles())
						{
							if(a.getFileName()!=null)
							{
								String extension=commonTasks.checkFileExtension(a.getFileName());
								if(extension!=null && a.getDocname().equals("mdeclaration"))
								{
									mdeclarationAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else if(extension!=null && a.getDocname().equals("mpan"))
								{
									mpanAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else if(extension!=null && a.getDocname().equals("mkyc"))
								{
									mkycAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else if(extension!=null && a.getDocname().equals("cdeclaration"))
								{
									cdeclarationAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else if(extension!=null && a.getDocname().equals("mtxnlog"))
								{
									mtxnlogAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else if(extension!=null && a.getDocname().equals("mregistercopy"))
								{
									mregistercopyAttachments+=getFileName(extension, a.getFileName(), dataModel.getRrn(), a.getBase64data(), ++countFile, logger);
								}
								else
								{
									isWrongFormat=true;
									wrongExtensionList=wrongExtensionList + a.getFileName() + ",";
								}
							}
						}
					}
					else
					{
						if(!mdeclarationFlag)
							missingMandatoryFiles += "merchant declaration, ";
						else if(!mpanFlag)
							missingMandatoryFiles += "merchant pan, ";
						else if(!mkycFlag)
							missingMandatoryFiles += "merchant kyc, ";
						generalResponse = new ResponseEntity<GeneralResponse>(
								new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files : "
										+ missingMandatoryFiles.substring(0,missingMandatoryFiles.length()-2)),HttpStatus.OK);
						return generalResponse;
					}
						if(!mdeclarationAttachments.equals(""))
						{
							chargeBack.setMdeclarationAttachmentsPath(mdeclarationAttachments.substring(0,mdeclarationAttachments.length()-1));
						}
						if(!mpanAttachments.equals(""))
						{
							chargeBack.setMpanAttachmentsPath(mpanAttachments.substring(0,mpanAttachments.length()-1));
						}
						if(!mkycAttachments.equals(""))
						{
							chargeBack.setMkycAttachmentsPath(mkycAttachments.substring(0,mkycAttachments.length()-1));
						}
						if(!cdeclarationAttachments.equals(""))
						{
							chargeBack.setCdeclarationAttachmentsPath(cdeclarationAttachments.substring(0,cdeclarationAttachments.length()-1));
						}
						if(!mtxnlogAttachments.equals(""))
						{
							chargeBack.setMtxnlogAttachmentsPath(mtxnlogAttachments.substring(0,mtxnlogAttachments.length()-1));
						}
						if(!mregistercopyAttachments.equals(""))
						{
							chargeBack.setMregistercopyAttachmentsPath(mregistercopyAttachments.substring(0,mregistercopyAttachments.length()-1));
						}
							chargeBackManagementRepository.save(chargeBack);
						}
					
					else
					{
							chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorUpdatedTimestamp(new Date());
							chargeBack.setResponseRemarks("Upload Files not found");
							chargeBackManagementRepository.save(chargeBack);
							generalResponse = new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload the files"),
									HttpStatus.OK);
					}
						if(isWrongFormat)
						{
							chargeBack.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBack.setAggregatorUpdatedTimestamp(new Date());
							chargeBack.setResponseRemarks("Upload Files Wrong Format");
							chargeBackManagementRepository.save(chargeBack);
							generalResponse = new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, Constants.CHARGEBACK_REJECTED_FAILED, 0, "Please upload these files in .jpg or.png or.pdf format : "
											+ wrongExtensionList.substring(0,wrongExtensionList.length()-1)),HttpStatus.OK);

						}
						else
						{
							generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.CHARGEBACK_REJECTED, 0, null),HttpStatus.OK);

						}
				
						
				}
					
			}		
				
			else {
				generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_NO_DATA_AVAILABLE, Constants.FAILED_STATUS_CODE, "Record not found"),
						HttpStatus.OK);
			}
			} else {
			logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
		}
		logger.info("-----------end approve/reject maker cheker-----------");// + gson.toJson(generalResponse));
		return generalResponse;
	}
	private String getFileName(String extension,String fName,String rrn,String base64data,Integer countFile,Logger logger)
	{
		String attachmentsList="";
		if(extension.equals("jpeg"))
		{
			String fileName=saveImage(fName,rrn,base64data,++countFile,logger,".jpeg");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("pdf"))	
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".pdf");
			attachmentsList=attachmentsList +fileName + ",";
		}
		else if(extension.equals("docx"))
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".docx");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("txt"))
		{
			String fileName=savePdfDocx(fName,rrn,base64data,++countFile,logger,".txt");
			attachmentsList=attachmentsList + fileName + ",";

		}
		else if(extension.equals("xlsx"))	
		{
			String fileName=savexlsx(fName,rrn,base64data,++countFile,logger,".xlsx");
			attachmentsList=attachmentsList +fileName + ",";
		}
		return attachmentsList;
	
	}
	
	@PostMapping(path = "/approvereject/bulk")
	public ResponseEntity<GeneralResponse> approveRejectBulk(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
		logger.info("-----------start approve/reject bulk----------");
		
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		logger.info("approve or reject data from device : " + dataSent);
		ApproveRejectBulkModel dataModel = null;
		try {
			dataModel = gson.fromJson(dataSent, ApproveRejectBulkModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		commonTasks.getIpAddress(request);
		boolean permission=false;
		List<Integer> invalidChargebackType = new ArrayList<Integer>();
		List<Integer> validChargebackType = new ArrayList<Integer>();
		String errorMessage = null;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data : permissionsList) {

			if (data.getFeatureGrpCode().equals("BANK")) {
				if (data.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
					if (data.getPermApprove() == 1) {
						permission=true;
						break;
					}
				}
			}
		}
		if ( permission && authenticateUserResponse.getActiveFlag() == 1) {
			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null  && commonTasks.check(dataSent) && dataModel != null && dataModel.getApproveRejectBulkDataModel() != null) 
			{
				for(ApproveRejectBulkDataModel approveRejectBulkDataModel : dataModel.getApproveRejectBulkDataModel())
				{
					if(approveRejectBulkDataModel.getId()!=null && approveRejectBulkDataModel.getAction() != null )
					{
						if(approveRejectBulkDataModel.getAction().equals("approve"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
								}
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
						else if(approveRejectBulkDataModel.getAction().equals("reject"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
								}
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
					}
				}
				if(invalidChargebackType.size() > 0)
				{
					errorMessage = "Bulk upload process was interrupted due to an error. Reason - \n * Id's " + getCsvFromList(invalidChargebackType)+ 
							" chargeback type is neither Chargeback Raise nor Chargeback Raise - Pending for Settlement.";
					if(validChargebackType.size() > 0)
					{
						errorMessage += "Whereas, Bulk accept/reject successful for records "+getCsvFromList(validChargebackType);
					}
				}
				if(errorMessage != null)
				{
					logger.info("Detailed records are invalid : message:"+ errorMessage);
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,errorMessage ,Constants.INVALID_CHARGE_BACK_TYPE_UPLOADED, null),HttpStatus.OK);
				}
				
				else
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, "Bulk accept/reject successful", 0, null),HttpStatus.OK);
			}
		}
		else {
				logger.info("agg/read/ Permission validation false" + authenticateUserResponse.getUserName());

				return new ResponseEntity<GeneralResponse>(HttpStatus.UNAUTHORIZED);
			}
			logger.info("-----------end approve/reject maker cheker-----------");// + gson.toJson(generalResponse));
			return generalResponse;
	}

	
	public  String saveImage(String fileName,String rrn,String encodedImage,Integer countFile,Logger logger,String extension)
	{
		new Date();
		String afileName=null;
		if(encodedImage != null){
			try {
				byte[] decodedString = Base64.decode(encodedImage);
				ByteArrayInputStream bis = new ByteArrayInputStream(decodedString);
				BufferedImage bImage2 = ImageIO.read(bis);

				int width = bImage2.getWidth();
				int height = bImage2.getHeight();
				BufferedImage output = new BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);
				int px[] = new int[width * height];
				bImage2.getRGB(0, 0, width, height, px, 0, width);
				output.setRGB(0, 0, width, height, px, 0, width);

//				afileName =fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".jpeg";
				SimpleDateFormat sdf=new SimpleDateFormat("ssss");
				String seconds=sdf.format(new Date());
				afileName =rrn+"_"+seconds+countFile+extension;
				
				String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");
				File outputfile = new File(afilePath,afileName);
				ImageIO.write(output, "jpeg", outputfile);
				logger.info("image saved");

			} catch (IOException e) {
				e.printStackTrace();

			}catch (Exception e) {
				e.printStackTrace();
			}
		}
		return afileName;
	}

	public  String savePdfDocx(String fileName,String rrn,String encodedImage,Integer countFile,Logger logger,String extension) 
	{

		//SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
		String afileName=null;
		String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");

		byte[] decodedString = Base64.decode(encodedImage);
		logger.info("********** pdf decoded *********");

//		afileName = fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".pdf";
		SimpleDateFormat sdf=new SimpleDateFormat("ssss");
		String seconds=sdf.format(new Date());
		afileName =rrn+"_"+seconds+countFile+extension;
		
		try {
			FileOutputStream out = new FileOutputStream(new File(afilePath,afileName));
			out.write(decodedString);
			out.close();
			logger.info("file saved");

		} catch (IOException e) {
			e.printStackTrace();
			logger.error("Exception Occured: "+ e.getMessage());
		}
		return afileName;

	}
	

	public  String savexlsx(String fileName,String rrn,String encodedImage,Integer countFile,Logger logger,String extension) 
	{

		//SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
		String afileName=null;
		String afilePath =filesUtil.getProperty("rejected_cb_attachments_path");

		byte[] decodedString = org.apache.commons.codec.binary.Base64.decodeBase64(encodedImage);
		logger.info("********** pdf decoded *********");

//		afileName = fileName.substring(0,fileName.lastIndexOf('.'))+"_"+rrn+"_"+".pdf";
		SimpleDateFormat sdf=new SimpleDateFormat("ssss");
		String seconds=sdf.format(new Date());
		afileName =rrn+"_"+seconds+countFile+extension;
		
		try {
			FileOutputStream out = new FileOutputStream(new File(afilePath,afileName));
			out.write(decodedString);
			out.close();
			logger.info("file saved");

		} catch (IOException e) {
			e.printStackTrace();
			logger.error("Exception Occured: "+ e.getMessage());
		}
		return afileName;
		
	}

	@GetMapping(path = "/fetch/account/statement")
	public ResponseEntity<GeneralResponse> fetchfromaccountStatement(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession)throws UnsupportedEncodingException, ParseException {
		// @RequestHeader("token") String token
		Logger logger=Logger.getLogger("FetchAccountStatement");
		logger.info("-----------start account statement----------");
		ResponseEntity<GeneralResponse> generalResponse = null;

		new GsonBuilder().serializeNulls().create();

		//		AuthenticateUserResponse authenticateUserResponse = null;
		//		try {
		//			String jwtData = jwtUtil.parseJWT(token);
		//			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		//		} catch (ExpiredJwtException e2) {
		//			e2.printStackTrace();
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//		} catch (UnsupportedJwtException e2) {
		//			e2.printStackTrace();
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//
		//		} catch (MalformedJwtException e2) {
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//		} catch (SignatureException e2) {
		//			e2.printStackTrace();
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//		} catch (IllegalArgumentException e2) {
		//			e2.printStackTrace();
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//		} catch (UnsupportedEncodingException e) {
		//			e.printStackTrace();
		//			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
		//					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		//		}
		ChargeBackManagement chargeback=null;
		try
		{
			List<ChargeBackManagement> list = chargeBackManagementRepository.findByStatusFlag(Constants.Charge_Back_Approved);
			new SimpleDateFormat("yyyy-MM-dd");
			DateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
			for (ChargeBackManagement model : list) {

				List<AccountStatementDataV2> accountStatement = accountStatementDataV2Repository.findByRrn(model.getTxnNo());
				logger.info("-----model.txnno:"+model.getTxnNo()+"   :  "+accountStatement);
				if (accountStatement != null) {
					chargeback = chargeBackManagementRepository.findByTxnNoAndBankSwitch(model.getTxnNo(),model.getBankSwitch());

					if(chargeback.getCbOrFraud()!=null && chargeback.getCbOrFraud().equals("Chargeback"))
					{	
						//Cash Withdrawal chargeback
						if(chargeback.getProductType()!=null && chargeback.getProductType().equals("CW"))//("Cash Withdrawal"))
						{
							for (AccountStatementDataV2 a : accountStatement) {
								if (chargeback.getCountPenaltyDays() < 7 ) {
									if (chargeback.getChargeBackFlag() != 1 && (a.getParticulars().startsWith("AEPS CB") || a.getParticulars().startsWith("AEPS_CB")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										//chargeback.setChargebackTimestamp(dateFormatter.format(a.getTranDate()));add
										chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setChargeBackFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS CB");
										chargeback.setCbType(Constants.cbtype_CB_Raise);
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getChargeBackFlag() != 1 && (a.getParticulars().startsWith("AEPS GB") || a.getParticulars().startsWith("AEPS_GB")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setChargeBackFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS GB");
										chargeback.setCbType(Constants.cbtype_Good_Faith);
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getChargeBackFlag() != 1 && (a.getParticulars().startsWith("AEPS PA") ||  a.getParticulars().startsWith("AEPS_PA")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setChargeBackFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS PA");
										chargeback.setCbType(Constants.cbtype_CB_Pre_Arbitration);
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getChargeBackFlag() != 1 && (a.getParticulars().startsWith("AEPS ARB") || a.getParticulars().startsWith("AEPS_ARB")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setChargeBackFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS ARB");
										chargeback.setCbType(Constants.cbtype_CB_Arbitration);
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getPenaltyFlag() != 1 && (a.getParticulars().startsWith("AEPS PN") ||  a.getParticulars().startsWith("AEPS_PN"))) 
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setPenaltyAmount(a.getTranAmount());
										chargeback.setPenaltyTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setPenaltyFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS PN");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									}
									if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() != 1) || (chargeback.getChargeBackFlag() != 1 && chargeback.getPenaltyFlag() == 1))
									{
										chargeback.setCountPenaltyDays(chargeback.getCountPenaltyDays() + 1);
										chargeBackManagementRepository.save(chargeback);
									}
									if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() == 1))
									{
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("Charge back completed");
										chargeback.setStatusFlag(Constants.Charge_Back_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
										chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);
										chargeBackManagementRepository.save(chargeback);
									}
								} else {
									commonTasks.updateAudit(chargeback);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("Charge back completed");
									chargeback.setStatusFlag(Constants.Charge_Back_Completed);
									chargeback.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
									chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								}
							}
						}
						//Aadhaar Pay chargeback
						else if(chargeback.getProductType()!=null && chargeback.getProductType().equals("AP"))
						{
							for (AccountStatementDataV2 a : accountStatement) {
								if (chargeback.getCountPenaltyDays() < 7) {
									if (chargeback.getChargeBackFlag() != 1 && (a.getParticulars().startsWith("Aadharpay/") || a.getParticulars().startsWith("AADHARPAY/")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setChargeBackFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("Aadharpay CB");
										chargeback.setCbType(Constants.cbtype_CB_Raise);
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getPenaltyFlag() != 1 && (a.getParticulars().startsWith("APAY PN") ||a.getParticulars().startsWith("Aadharpay PN") || a.getParticulars().startsWith("AADHARPAY PN") || a.getParticulars().startsWith("AADHARPAY PENALITY"))) 
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setPenaltyAmount(a.getTranAmount());
										chargeback.setPenaltyTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setPenaltyFlag(1);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("Aadharpay PN");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									}
									if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() != 1) || (chargeback.getChargeBackFlag() != 1 && chargeback.getPenaltyFlag() == 1))
									{
										chargeback.setCountPenaltyDays(chargeback.getCountPenaltyDays() + 1);
										chargeBackManagementRepository.save(chargeback);
									}
									if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() == 1))
									{
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("Charge back completed");
										chargeback.setStatusFlag(Constants.Charge_Back_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
										chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);
										chargeBackManagementRepository.save(chargeback);
									}
								} else {
									commonTasks.updateAudit(chargeback);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("Charge back completed");
									chargeback.setStatusFlag(Constants.Charge_Back_Completed);
									chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								}
							}
						}
						// MATM chargeback
						else  if(chargeback.getProductType()!=null && chargeback.getProductType().equals("MATMCW"))
						{
						 logger.info("========================in matm acc stmt===========");
						 for (AccountStatementDataV2 a : accountStatement) {
							logger.info("============a.getParticulars======"+a.getParticulars());
							if (chargeback.getCountPenaltyDays() < 7) {
								if (chargeback.getChargeBackFlag() != 1 && a.getParticulars().startsWith("MCB "))// && !a.getParticulars().endsWith("OTHERS"))
								{
									commonTasks.updateAudit(chargeback);
									chargeback.setChargeBackAmount(a.getTranAmount());
									chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
									chargeback.setChargeBackFlag(1);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("MATM CB");
									chargeback.setCbType(Constants.cbtype_CB_Raise);
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								} 
								else if (chargeback.getChargeBackFlag() != 1 && a.getParticulars().startsWith("MPA "))// && !a.getParticulars().endsWith("OTHERS"))
								{
									commonTasks.updateAudit(chargeback);
									chargeback.setChargeBackAmount(a.getTranAmount());
									chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
									chargeback.setChargeBackFlag(1);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("MATM PA");
									chargeback.setCbType(Constants.cbtype_CB_Pre_Arbitration);
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								} 
								else if (chargeback.getChargeBackFlag() != 1 && a.getParticulars().startsWith("MIC/"))// && a.getParticulars().endsWith("REV"))
								{
									commonTasks.updateAudit(chargeback);
									chargeback.setChargeBackAmount(a.getTranAmount());
									chargeback.setChargebackTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
									chargeback.setChargeBackFlag(1);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("MATM Anomaly");
									chargeback.setCbType(Constants.cbtype_MATM_Anolmaly);
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								} 
								else if (chargeback.getPenaltyFlag() != 1 && a.getParticulars().startsWith("MIC ATM PN"))//&& !a.getParticulars().endsWith("OTHERS"))
								{
									commonTasks.updateAudit(chargeback);
									chargeback.setPenaltyAmount(a.getTranAmount());
									chargeback.setPenaltyTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
									chargeback.setPenaltyFlag(1);
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("MIC ATM PN");
									chargeBackManagementRepository.save(chargeback);
									logger.info("found--------"+chargeback.getResponseRemarks());
								}
								if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() != 1) || (chargeback.getChargeBackFlag() != 1 && chargeback.getPenaltyFlag() == 1))
								{
									chargeback.setCountPenaltyDays(chargeback.getCountPenaltyDays() + 1);
									chargeBackManagementRepository.save(chargeback);
								}
								if((chargeback.getChargeBackFlag() == 1 && chargeback.getPenaltyFlag() == 1))
								{
									chargeback.setUpdatedTimestamp(new Date());
									chargeback.setResponseRemarks("Charge back completed");
									chargeback.setStatusFlag(Constants.Charge_Back_Completed);
									chargeback.setAggregatorStatusFlag(Constants.Charge_Back_Completed);
									chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);

									chargeBackManagementRepository.save(chargeback);
								}
							} else {
								commonTasks.updateAudit(chargeback);
								chargeback.setUpdatedTimestamp(new Date());
								chargeback.setResponseRemarks("Charge back completed");
								chargeback.setStatusFlag(Constants.Charge_Back_Completed);
								chargeback.setNocaSettlementFlag(Constants.Noca_Settlement_flag);
								chargeBackManagementRepository.save(chargeback);
								logger.info("found--------"+chargeback.getResponseRemarks());
							}
						}
						}
					} 
					if(chargeback.getCbOrFraud()!=null && chargeback.getCbOrFraud().equals("Fraud"))
					{
						//Cash Withdrawal fraud
						if(chargeback.getProductType()!=null && chargeback.getProductType().equals("CW"))
						{
							for (AccountStatementDataV2 a : accountStatement) {
								if (chargeback.getStatusFlag()!=Constants.Fraud_Completed ) {
									if (chargeback.getFraudFlag() != 1 && a.getParticulars().startsWith("SR") && a.getParticulars().endsWith("REV"))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setFraudTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setFraudFlag(1);
										chargeback.setStatusFlag(Constants.Fraud_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Fraud_Completed);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS Offus Fraud");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getFraudFlag() != 1 && (a.getParticulars().startsWith("RVSL/ AEP/CASH WDL") || a.getParticulars().startsWith("RVSL/ AEP/Cash Wdl")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setFraudTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setFraudFlag(1);
										chargeback.setStatusFlag(Constants.Fraud_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Fraud_Completed);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS Onus Fraud");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
								} 
							}
						}
						//Aadhaar Pay fraud
						if(chargeback.getProductType()!=null && chargeback.getProductType().equals("AP"))
						{
							for (AccountStatementDataV2 a : accountStatement) {
								if (chargeback.getStatusFlag()!=Constants.Fraud_Completed ) {
									if (chargeback.getFraudFlag() != 1 && a.getParticulars().startsWith("REV/ADF/") && !a.getParticulars().endsWith("OTHERS"))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setFraudTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setFraudFlag(1);
										chargeback.setStatusFlag(Constants.Fraud_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Fraud_Completed);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("Aadhaar Pay Fraud");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
								} 
							}
						}
						// MATM fraud
						if(chargeback.getProductType()!=null && chargeback.getProductType().equals("MATMCW"))
						{
							for (AccountStatementDataV2 a : accountStatement) {
								if (chargeback.getStatusFlag()!=Constants.Fraud_Completed ) {
									if (chargeback.getFraudFlag() != 1 && a.getParticulars().startsWith("SR") && a.getParticulars().endsWith("REV"))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setFraudTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setFraudFlag(1);
										chargeback.setStatusFlag(Constants.Fraud_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Fraud_Completed);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS Offus Fraud");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
									else if (chargeback.getFraudFlag() != 1 && (a.getParticulars().contains("RVSL/ AEP/CASH WDL") || a.getParticulars().contains("RVSL/ AEP/Cash Wdl")))
									{
										commonTasks.updateAudit(chargeback);
										chargeback.setChargeBackAmount(a.getTranAmount());
										chargeback.setFraudTimestamp(dateFormatter.parse(dateFormatter.format(a.getTranDate())));
										chargeback.setFraudFlag(1);
										chargeback.setStatusFlag(Constants.Fraud_Completed);
										chargeback.setAggregatorStatusFlag(Constants.Fraud_Completed);
										chargeback.setUpdatedTimestamp(new Date());
										chargeback.setResponseRemarks("AEPS Onus Fraud");
										chargeBackManagementRepository.save(chargeback);
										logger.info("found--------"+chargeback.getResponseRemarks());
									} 
								} 
							}
						}
					}
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		finally
		{
			chargeBackManagementRepository.save(chargeback);
		}
		logger.info("-----------end fetch records account statement -----------");// + gson.toJson(generalResponse));
		return generalResponse;

	}
	// list to block merchants
	//	@GetMapping(path = "/block/merchants")
	//	public ResponseEntity<GeneralResponse> blockMerchants(HttpServletRequest request,HttpServletResponse response, HttpSession httpSession)	throws UnsupportedEncodingException, ParseException {
	//		new ArrayList<MerchantBlockModel>();
	//		
	//		chargeBackManagementRepository.findblockList();
	//				return null;
	//	}

	@SuppressWarnings("deprecation")
	public String toImgFromBase64(String pic, String mName, String ext,Logger logger) {

		String extension = ext;
		String path = filesUtil.getProperty("documentUploadPathCB_mngt");

		// path = new File(".").getCanonicalPath() +"/" + path;

		File fileImg = new File(path);
		fileImg.mkdirs();
		//
		// pic = URLDecoder.decode(pic);

		byte[] imgBytes = org.apache.commons.codec.binary.Base64.decodeBase64(pic);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension)
				.trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		logger.info("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

	// get the cell value according to the string type
	@SuppressWarnings("deprecation")
	public String getCellValueAccordingToCellType(Cell cell) {
		String cellValue = "";
		String value = "";
		if (cell != null) {
			switch (cell.getCellType()) {
			case Cell.CELL_TYPE_STRING:
				value = cell.getStringCellValue();
				break;
			case Cell.CELL_TYPE_NUMERIC:
				if (!HSSFDateUtil.isCellDateFormatted(cell)) {
					cell.setCellType(Cell.CELL_TYPE_STRING);
					value = cell.getStringCellValue();
				} else {
					value = null;
				}
				break;
			case Cell.CELL_TYPE_BOOLEAN:
				value = String.valueOf(cell.getBooleanCellValue());
				break;
			case Cell.CELL_TYPE_BLANK:
				value = null;
				break;
			default:
				if (cell.getColumnIndex() == 1 && cell.getCellType() == 2)
					value = cell.toString();
				else
					value = null;
				break;
			}
		} else {
			value = null;
		}
		cellValue = value;

		return cellValue;
	}

	private String getCsvFromList(List<Integer> list) {
		String csv = "[";
		try {
			for (Integer integer : list) {
				csv = csv + integer + ", ";
			}
			csv = csv.substring(0, csv.length() - 2) + "]";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return csv;
	}

	private Map<String, TransactionSearchByRRNResult> getRRNSearchDetails(List<String> rrns,String bankSwitch, Logger logger) {
		Map<String, TransactionSearchByRRNResult> map = new HashMap<String, TransactionSearchByRRNResult>();
		try {
			TransactionSearchByRRNResult responseModel =null;

			for (String rrn : rrns) {
				responseModel = commonTasks.getRRNTxn(rrn,bankSwitch);
				if (responseModel != null) {

					map.put(rrn, responseModel);
				}
			}
		}

		catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception in getResponseAndTerminalId()", e);
		}
		return map;

	}

	private Map<String, TransactionSearchByRRNResult> getRRNSearchData(String rrn, String bankSwitch,Logger logger) {
		Map<String, TransactionSearchByRRNResult> map = new HashMap<String, TransactionSearchByRRNResult>();
		try {
			TransactionSearchByRRNResult responseModel =null;

			responseModel = commonTasks.getRRNTxn(rrn,bankSwitch);
			if (responseModel != null) {

				map.put(rrn, responseModel);
			}

		}

		catch (Exception e) {
			e.printStackTrace();
			logger.error("Exception in getResponseAndTerminalId()", e);
		}
		return map;
	}

	@PostMapping(path = "/fetch/rrn")
	public ResponseEntity<GeneralResponse> fetchRrn(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@RequestBody String data)throws UnsupportedEncodingException, ParseException
	{
		TransactionSearchByRRNResult responseModel=null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		RRNSearchRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(data, RRNSearchRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}

		try
		{
			responseModel = commonTasks.getRRNTxn(dataModel.getRrn(),dataModel.getBankSwitch());
			log.info("response : "+gson.toJson(responseModel));
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		if (responseModel != null) {

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.REQUEST_COMPLETED,0,responseModel), HttpStatus.OK);
		}


		return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
				"Unable to fetch details",0,null), HttpStatus.OK);

	}

	@GetMapping(path = "/fetch/chargebacktype/list")
	public ResponseEntity<GeneralResponse> fetchchargebacktype(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@RequestHeader("token")  String token)throws UnsupportedEncodingException, ParseException {

		log.info("-----------start fetch chargeback type list----------");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try {
			String jwtData = jwtUtil.parseJWT(token);
			new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		Map<Integer, String> cbType= chargebackManagementCacheData.getCBtypeDetailsMap();
		log.info("cb types map in list: "+cbType.values());
		Collection<String> cbTypes= cbType.values();
		log.info("cb types map in list after: "+cbTypes);
		log.info("get class : "+cbTypes.getClass());
		generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
				Constants.REQUEST_COMPLETED,0,cbTypes), HttpStatus.OK);
		log.info("general response : "+gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/fetch/bankswitch/list")
	public ResponseEntity<GeneralResponse> fetchBankSwich(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@RequestHeader("token")  String token)throws UnsupportedEncodingException, ParseException {

		log.info("-----------start fetch bank switch list----------");
		ResponseEntity<GeneralResponse> generalResponse = null;

		try {
			String jwtData = jwtUtil.parseJWT(token);
			new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		Gson gson = new GsonBuilder().serializeNulls().create();
		Map<Integer, String> bankSwitches= chargebackManagementCacheData.getBankSwitchMap();
		log.info("bank switch in list: "+bankSwitches.values());
		Collection<String> bankSwitch= bankSwitches.values();
		log.info("bankSwitch map in list after: "+bankSwitch);
		log.info("get class : "+bankSwitch.getClass());
		generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
				Constants.REQUEST_COMPLETED,0,bankSwitch), HttpStatus.OK);
		log.info("general response : "+gson.toJson(generalResponse));
		return generalResponse;
	}

	@GetMapping(path = "/fetch/chargebacktype/map")
	public ResponseEntity<GeneralResponse> fetchchargebacktypemap(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@RequestHeader("token")  String token)throws UnsupportedEncodingException, ParseException {

		log.info("-----------start fetch chargeback type map----------");
		ResponseEntity<GeneralResponse> generalResponse = null;

		try {
			String jwtData = jwtUtil.parseJWT(token);
			new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		Map<Integer, String> cbTypes= chargebackManagementCacheData.getCBtypeDetailsMap();
		log.info("cb types map: "+cbTypes);
		generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
				Constants.REQUEST_COMPLETED,0,cbTypes), HttpStatus.OK);
		return generalResponse;
	}

	@GetMapping(path = "/fetch/chargebacktype/map/put/{cbtype}")
	public void putChargebacktypemap(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@PathVariable Integer cbtype)throws UnsupportedEncodingException, ParseException {
		// @RequestHeader("token") String token add parse token
		log.info("-----------start fetch chargeback type put ----------");
		ChargeBackTypeManagement c= chargebackManagementCacheData.putCBtype(cbtype,"test");
		log.info("--" +c);
	}

	@GetMapping(path = "/fetch/chargebacktype/map/evict/{cbtype}")
	public void evictChargebacktypemap(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession,@PathVariable Integer cbtype)throws UnsupportedEncodingException, ParseException {
		// @RequestHeader("token") String token add parse token
		log.info("-----------start fetch chargeback type evict list----------");

		log.info("intially : ");
		Map<Integer, String> cbTypes= chargebackManagementCacheData.getCBtypeDetailsMap();
		log.info("initial  cb types fetched : "+cbTypes);

		chargebackManagementCacheData.evictCBtype(cbtype);

		log.info("evicted cb type : "+cbtype);
		log.info("after eviction : ");
		Map<Integer, String> cbTypes1= chargebackManagementCacheData.getCBtypeDetailsMap();
		log.info("fetched cb types after eviction : "+cbTypes1);

		log.info("adding cbtype :");
		chargebackManagementCacheData.putCBtype(cbtype,"test");

		log.info("added cb types : "+cbtype);

		log.info("after being put : ");
		Map<Integer, String> cbTypes2= chargebackManagementCacheData.getCBtypeDetailsMap();
		log.info("fetched cb types after being put : "+cbTypes2);	
	}

	@GetMapping(path = "/cache/clear")
	public void clearcache(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession)throws UnsupportedEncodingException, ParseException {
		// @RequestHeader("token") String token add parse token
		log.info("-----------clearing cache ----------");

		chargebackManagementCacheData.evictCBtypecache();

	}

	@PostMapping(path = "/test/{id}")
	public void approveRejecttest(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody String dataSent,@PathVariable Integer id, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		log.info("-----------start approve/reject maker checker----------");
		Gson gson = new GsonBuilder().serializeNulls().create();

		log.info("approve or reject data from device : " + dataSent);
		ChargebackAggregatorDistributorRequestModel dataModel = null;
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		log.info("id : "+id);
		if(dataModel!=null)
		{
			log.info(";dataModel.getParentId(): "+dataModel.getParentId()); 
		}

	}

	@GetMapping("/download/{fileName:.+}")
	public ResponseEntity<?> downloadfileGet(@PathVariable String fileName)
	{
		ResponseEntity<InputStreamResource> inputStreamResourceRespponse = null;		

		try 
		{
			log.info("Input Request JfiLE: "+fileName);
			inputStreamResourceRespponse = getDownloadFile(fileName);

		}
		catch (Exception e) 
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.OK);
		}
		return inputStreamResourceRespponse;
	}

	@PostMapping("/download/file")
	public ResponseEntity<?> downloadfile(@RequestBody String dataSent)
	{
		ResponseEntity<InputStreamResource> inputStreamResourceRespponse = null;		
		ChargebackAggregatorDistributorRequestModel dataModel=null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try {

			dataModel = gson.fromJson(dataSent, ChargebackAggregatorDistributorRequestModel.class);
		} catch (Exception e) {
			e.printStackTrace();
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
					HttpStatus.OK);
		}
		try 
		{
			if(generalResponse==null && dataModel!=null && dataModel.getFileName()!=null)
			{
				log.info("Input Request JfiLE: "+dataModel.getFileName());
				inputStreamResourceRespponse = getDownloadFile(dataModel.getFileName());

			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.OK);
		}
		return inputStreamResourceRespponse;
	}

	public ResponseEntity<InputStreamResource> getDownloadFile(String fileName) throws Exception
	{
		try
		{
			String filePath = filesUtil.getProperty("rejected_cb_attachments_path") ;
			log.info("PATH:"+filePath+"TEFILE:"+fileName);

			File file = new File(filePath+""+fileName);
			InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
			if(fileName.endsWith("pdf"))
			{
				return ResponseEntity.ok()
						.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName)
						.contentType(MediaType.parseMediaType("application/pdf"))
						.contentLength(file.length())
						.body(resource);
			}
			else if(fileName.endsWith("xlsx"))
			{
				return ResponseEntity.ok()
						.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName)
						.contentType(MediaType.parseMediaType("application/xlsx"))
						.contentLength(file.length())
						.body(resource);
			}
			else if(fileName.endsWith("docx"))
			{
				return ResponseEntity.ok()
						.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName)
						.contentType(MediaType.parseMediaType("application/docx"))
						.contentLength(file.length())
						.body(resource);
			}
			else
			{
				return ResponseEntity.ok()
						.contentLength(file.length())
						.contentType(MediaType.APPLICATION_OCTET_STREAM)
						.body(resource);
			}


		}
		catch (Exception e) {

			e.printStackTrace();
			log.info("Error Occured getTotalSettlementsData.....");

			throw e;
		}		
	}

	@GetMapping(path = "/notes/data/{primarykeyid}")
	public ResponseEntity<GeneralResponse> getChargeBackNotesData(HttpServletRequest request, HttpServletResponse response, HttpSession httpSession, @PathVariable Integer primarykeyid, 
			@RequestHeader("token") String token)
	{
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_Default");

		generalResponse = checkAuthentication(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;

		logger.info("Primary Key Id:"+ primarykeyid);

		List<ChargeBackNotesData> list = chargeBackNotesDataRepository.findByPrimaryKeyId(primarykeyid);

		if(list != null && !list.isEmpty() && list.size() > 0)
		{
			generalResponse = successResponse(true, Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, list);
		}
		else
		{
			list = new ArrayList<>();
			ChargeBackManagement cb = chargeBackManagementRepository.findOne(primarykeyid);
			ChargeBackNotesData data = new ChargeBackNotesData();
			data.setPrimaryKeyId(primarykeyid);
			data.setNotes(Constants.INCIDENT_ASSIGNED);
			data.setRemarks("Assgined");
			data.setRequestedTimestamp(cb.getUploadedTimestamp());
			data.setAssignedBy("FINGPAY");
			chargeBackNotesDataRepository.save(data);
			list.add(data);

			generalResponse = successResponse(true, Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, list);

		}

		return generalResponse;
	}

	@PostMapping(path = "/notes/data")
	public ResponseEntity<GeneralResponse> getChargeBackNotesData(HttpServletRequest request, HttpServletResponse response, HttpSession httpSession, @RequestBody ChargebackNotesDataModel cbModel, 
			@RequestHeader("token") String token)
	{
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_Default");

		generalResponse = checkAuthentication(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;

		logger.info("cbModel:"+ cbModel.toString());

		if(!(cbModel != null && cbModel.getPrimaryKeyId() != null && cbModel.getTxnNo() != null && cbModel.getStatus() != null && cbModel.getNewStatus() != null))
			return	successResponse(false, Constants.ERROR_INCOMPLETE_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);

		ChargeBackManagement cb = chargeBackManagementRepository.findOne(cbModel.getPrimaryKeyId());

		if(cb != null)
		{
			ChargeBackNotesData data = new ChargeBackNotesData();
			data.setPrimaryKeyId(cb.getId());
			String oldstatus = cb.getStatusFlag() == 0 ? "Pending" : cb.getStatusFlag() == 1 ? "Accepted" : cb.getStatusFlag() == 2 ? "Rejected" : "";
			String newstatus = cbModel.getNewStatus() == 0 ? "Re-Assign" : cbModel.getNewStatus() == 1 ? "Accepted" : cbModel.getNewStatus() == 2 ? "Rejected" : "";
			data.setNotes("Status Change from "+ oldstatus + " to "+ newstatus);
			data.setRemarks(cbModel.getRemarks());
			data.setRequestedTimestamp(new Date());
			data.setAssignedBy(((AuthenticateUserResponse)generalResponse.getBody().getData()).getUserName());
			chargeBackNotesDataRepository.save(data);

			cb.setStatusFlag(cbModel.getNewStatus());
			cb.setUpdatedTimestamp(new Date());
			chargeBackManagementRepository.save(cb);

			emailService.sendCBNotesEmailNotification(oldstatus,newstatus,cbModel.getRemarks(), cb);

			generalResponse = successResponse(true, Constants.STATUS_CHANGED_SUCCESSFULLY, Constants.CORRECT_STATUS_CODE, null);
		}
		else
		{
			generalResponse = errorResponse(false, Constants.ERROR_NO_DATA_AVAILABLE, Constants.CORRECT_STATUS_CODE, null);
		}

		return generalResponse;
	}

	@GetMapping(path = "/fp999/data/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getFP999ChargeBackData(HttpServletRequest request, HttpServletResponse response, HttpSession httpSession,
			@PathVariable String fromdate, @PathVariable String todate, @RequestHeader("token") String token)
	{
		ResponseEntity<GeneralResponse> generalResponse = null;
		Logger logger = Logger.getLogger("ChargebackFraudManagementFetchRecords_Default");

		generalResponse = checkAuthentication(token);
		if(!generalResponse.getBody().isStatus())
			return generalResponse;

		logger.info("getFP999ChargeBackData Fromdate:"+ fromdate+" Todate:"+todate);

		try {
			Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
			Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");

			List<ChargeBackManagement> list = chargeBackManagementRepository.findByTransactionResponseCodeAndUploadedTimestampBetween(Constants.TXN_STATUS_FP999,formatdFromDate, formatdToDate);

			if(list != null && !list.isEmpty() && list.size() > 0)
			{
				generalResponse = successResponse(true, Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, list);
			}
			else
			{	
				generalResponse = successResponse(true, Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, list);
			}
		}
		catch(Exception e) {
			logger.error("Exception Occured:"+e.getMessage());
			generalResponse = errorResponse(false, Constants.ERRORS_EXCEPTION_IN_SERVER, Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return generalResponse;
	}

	public Date setformatDate(String format,String date) throws Exception
	{
		SimpleDateFormat dateFormat = null;

		Date fromatedDate = null;

		try {

			dateFormat = new SimpleDateFormat(format);

			fromatedDate = dateFormat.parse(date);

		}
		catch (Exception e) {
			errorResponse(false,"Error Occured checkDateIsNullorNot ",null);			
			throw e;
		}

		return fromatedDate;
	}

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}

	public ResponseEntity<GeneralResponse> successResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println(" Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		new GsonBuilder().serializeNulls().create();

		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}

package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.ICBService;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/chargeback/management/new")
public class ChargeBackManagementControllerNew {

	public static final Logger log = Logger.getLogger(ChargeBackManagementControllerNew.class);

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	@Qualifier("iciciService")
	private ICBService iciciService;

	@Autowired
	@Qualifier("kotakService")
	private ICBService kotakService;

	@Autowired
	@Qualifier("paytmService")
	private ICBService paytmService;
	
	@Autowired
	@Qualifier("nsdlservice")
	private ICBService nsdlService;

	@PostMapping("/addfile")
	public ResponseEntity<GeneralResponse> uploadFile(HttpServletRequest httprequest, HttpServletResponse httpresponse, @RequestHeader("token") String token, @RequestBody String data)
	{
		ResponseEntity<GeneralResponse> response = null;
		FileUploadModel filedataModel = null;
		FileInputStream fis = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse)response.getBody().getData();
			boolean permission = false;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel dataModel : permissionsList) {

				if (dataModel.getFeatureGrpCode().equals("BANK")) {
					if (dataModel.getFeatureCode().equals("CHAGEBACK_UPLOAD")) {
						if (dataModel.getPermCreate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			String ipAddress = commonTasks.getIpAddress(httprequest);
			log.info("/new/cbfile/uploadFile ipAddress : " + ipAddress);
			if(permission && authenticateUserResponse.getActiveFlag() == 1)
			{
				try
				{
					filedataModel = gson.fromJson(data, FileUploadModel.class);

					log.info("username = " + authenticateUserResponse.getUserName()+ "==data/base64 = " + data);

					filedataModel.setUserName(authenticateUserResponse.getUserName());
					
					String docName = toImgFromBase64(filedataModel.getFile(),"chargeback_" + authenticateUserResponse.getUserName(), "xlsx");
					String path = filesUtil.getProperty("documentUploadPathCB_mngt");
					log.info("docName = " + docName + "path = " + path + "path+docName = " + path + docName);

					fis = new FileInputStream(new File(path + docName));
					Workbook workbook = WorkbookFactory.create(fis);
					log.info("No of sheets in workbook = " + workbook.getNumberOfSheets());

					response = processCBFiles(filedataModel, workbook);

				} 
				catch (Exception e)
				{
					log.error("Exception parsing the file", e);
					response = errorResponse(Constants.FALSE,Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
				}
			}
			else
			{
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",Constants.EXCEPTION_IN_SERVER_STATUS_CODE ,null);
		}

		return response;
	}

	public ResponseEntity<GeneralResponse> processCBFiles(FileUploadModel filedataModel, Workbook workbook)
	{
		log.info("Entered into processCBFiles..start");
		ResponseEntity<GeneralResponse> response = null;
		try
		{
			if(filedataModel.getBankSwitch() != null && filedataModel.getBankSwitch().equals(Constants.ICICI))
			{
				if(filedataModel.getCbType() != null && (filedataModel.getCbType().equalsIgnoreCase(Constants.CB_RAISE) || filedataModel.getCbType().equalsIgnoreCase(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS)))
					response = iciciService.chargeBackRaiseProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_PRE_ARBITRATION_RAISE))
					response = iciciService.chargeBackPreArbitrationProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_ARBITRATION_RAISE))
					response = iciciService.chargeBackArbitrationProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_GOOD_FAITH))
					response = iciciService.chargeBackGoodFaithProcess(workbook,filedataModel);
				else response = errorResponse(Constants.FALSE,Constants.ERROR_IN_VALID_CB_TYPE, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
			}
			else if(filedataModel.getBankSwitch() != null && filedataModel.getBankSwitch().equals(Constants.PAYTM))
			{
				if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_RAISE))
					response = paytmService.chargeBackRaiseProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_PRE_ARBITRATION_RAISE))
					response = paytmService.chargeBackPreArbitrationProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_ARBITRATION_RAISE))
					response = paytmService.chargeBackArbitrationProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_GOOD_FAITH))
					response = paytmService.chargeBackGoodFaithProcess(workbook,filedataModel);
				else response = errorResponse(Constants.FALSE,Constants.ERROR_IN_VALID_CB_TYPE, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
			}
			else if(filedataModel.getBankSwitch() != null && filedataModel.getBankSwitch().equals(Constants.KOTAK))
			{
				if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_RAISE))
					response = kotakService.chargeBackRaiseProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_PRE_ARBITRATION_RAISE))
					response = kotakService.chargeBackPreArbitrationProcess(workbook, filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_ARBITRATION_RAISE))
					response = kotakService.chargeBackArbitrationProcess(workbook, filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_GOOD_FAITH))
					response = kotakService.chargeBackGoodFaithProcess(workbook, filedataModel);
				else response = errorResponse(Constants.FALSE,Constants.ERROR_IN_VALID_CB_TYPE, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
			}
			else if(filedataModel.getBankSwitch() != null && filedataModel.getBankSwitch().equals(Constants.NSDL))
			{
				if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_RAISE))
					response = nsdlService.chargeBackRaiseProcess(workbook,filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_PRE_ARBITRATION_RAISE))
					response = nsdlService.chargeBackPreArbitrationProcess(workbook, filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_ARBITRATION_RAISE))
					response = nsdlService.chargeBackArbitrationProcess(workbook, filedataModel);
				else if(filedataModel.getCbType() != null && filedataModel.getCbType().equalsIgnoreCase(Constants.CB_GOOD_FAITH))
					response = nsdlService.chargeBackGoodFaithProcess(workbook, filedataModel);
				else response = errorResponse(Constants.FALSE,Constants.ERROR_IN_VALID_CB_TYPE, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
			}
			else
			{
				response = errorResponse(Constants.FALSE,Constants.ERROR_IN_VALID_BANK_SWITCH, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null);
			}
			log.info("Entered into processCBFiles..end");
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",Constants.EXCEPTION_IN_SERVER_STATUS_CODE ,null);
		}

		return response;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		log.info("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode);		
		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);
		log.info("Erros hadled Successfully");
		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}

	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		log.info("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode);
		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);
		log.info(" Successfully");
		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}	

	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}

	public String toImgFromBase64(String pic, String mName, String ext) throws Exception {

		String fileName = null;
		FileOutputStream fOut = null;
		File fileImg = null;
		try
		{
			String extension = ext;
			String path = filesUtil.getProperty("documentUploadPathCB_mngt");
			byte[] imgBytes = org.apache.commons.codec.binary.Base64.decodeBase64(pic);
			fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension).trim();

			fileImg = new File(path + fileName);
			if (fileImg.exists())
			{
				fileImg = null;
				fileImg = new File(path + fileName);
			}
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();

			log.info("Output file saved: " + fileImg.getAbsolutePath());
		}
		catch (IOException e)
		{
			log.error("IO Exception ",e);
			throw e;
		}
		catch(Exception e)
		{
			log.error("Exception ",e);
			throw e;
		}
		return fileName;
	}

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
	}
}
	package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.stream.Stream;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.ParentMerchantCommConditionModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/commission")
public class CommissionDetailsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private CommonTasks commonTasks;

	@GetMapping(path ="/CW/commissionMaster/{value}")
	public ResponseEntity<GeneralResponse> getCWCommMaster(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String value)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		int id;
		if(!value.equals("0"))
			id = Integer.parseInt(value);
		else
			value = "dropdown";

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpGet httpGet = new HttpGet("http://10.0.25.132:8080/commissionProject/api/analytics/commissioncondiations/data/"+value);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
					 list = commissionMaster.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					if(value.equals("0"))
						auditLogs.setViewData("all CW Commission master details");
					else
						auditLogs.setViewData("CW Commission master details of id "+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PostMapping(path ="/CW/commissionMaster/update")
	public ResponseEntity<GeneralResponse> updateCWCommMaster(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody ParentMerchantCommConditionModel updateModel)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpPost httpPost = new HttpPost("http://10.0.25.132:8080/commissionProject/api/analytics/update/commissioncondiations/data");
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 String requestData=gson.toJson(updateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse commissionMaster=gson.fromJson(data,GeneralResponse.class);
					 dataObj = commissionMaster.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,dataObj), HttpStatus.OK);
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping("/CW/aggSummary/{fromDate}/{toDate}/{value}")
	public ResponseEntity<GeneralResponse> getCWAggSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		System.out.println("In agg summ");
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/commission/reportsummary/"+fromDate+"/"+toDate+"/"+value;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse aggSummary=gson.fromJson(listData,GeneralResponse.class);
					 list = aggSummary.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator CW commission summary from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	@GetMapping("/CW/aggbyDate/{fromDate}/{toDate}/{value}")
	public ResponseEntity<GeneralResponse> getCWAggbyDate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/commission/date/"+fromDate+"/"+toDate+"/"+value;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse aggReport=gson.fromJson(listData,GeneralResponse.class);
					 list = aggReport.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator CW commission date wise from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping("/CW/commTxnReport/{fromDate}/{toDate}/{value}")
	public ResponseEntity<GeneralResponse> getCommTxnReport(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/commission/report/"+fromDate+"/"+toDate+"/"+value;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("CW txn commission report from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/CWBank/commSummary/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getCWBankCommSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/cashwithdrawl/commission/reportsummary/"+fromDate+"/"+toDate+"/0/all";
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("CW bank commission summary from"+fromDate+"to"+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@GetMapping("/CWBank/commSummarybyDate/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getCWBankCommbyDateSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/cashwithdrawl/commission/reportbydate/"+fromDate+"/"+toDate+"/0/all";
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("CW bank commission date wise from"+fromDate+"to"+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@GetMapping("/CWBank/aggCommSummary/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getCWBankCommAggSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/cashwithdrawl/commission/reportsummary/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator CW bank commission summary from"+fromDate+"to"+toDate+"of"+value+"of type"+type);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@GetMapping("/CWBank/aggCommbyDate/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getCWBankCommAggbyDate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/cashwithdrawl/commission/reportbydate/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator CW bank commission date wise from"+fromDate+"to"+toDate+"of"+value+"of type"+type);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@GetMapping("/CWBank/byDate/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getCWBankbyDate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/cw/commission/reportsummary/"+fromDate+"/"+toDate+"/";
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("CW bank commission date wise from"+fromDate+"to"+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping(path ="/MS/commissionMaster/{value}/{type}")
	public ResponseEntity<GeneralResponse> getMSCommMaster(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {	
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
			   	String url = "";
			   	 if(value.equals("0"))
			   		 url = "http://10.0.25.132:8080/commissionProject/api/analytics/ministatementcommissionmasterdata";
			   	 else
			   		 url = "http://10.0.25.132:8080/commissionProject/api/analytics/ministatementcommissionmasterdata/"+value+"/"+type;

			   	 System.out.println(url);
			   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
					 list = commissionMaster.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					if(value.equals("0")) 
						auditLogs.setViewData("all MS commission master");
					else
						auditLogs.setViewData("MS commission master "+" of "+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
			
	}
	@GetMapping("/MS/aggSummary/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getMSAggSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		System.out.println("In agg summ");
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/ministatement/commission/reportsummary/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse aggSummary=gson.fromJson(listData,GeneralResponse.class);
					 list = aggSummary.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator MS commission summary from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/MS/aggbyDate/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getMSAggbyDate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/ministatement/commission/reportbydate/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse aggReport=gson.fromJson(listData,GeneralResponse.class);
					 list = aggReport.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator MS commission date wise from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/MSBank/commSummary/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getMSBankCommSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/ministatement/commission/reportsummary/"+fromDate+"/"+toDate+"/0/all";
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("MS bank commission summary from"+fromDate+"to"+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@GetMapping("/MSBank/commSummarybyDate/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getMSBankCommbyDateSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/ministatement/commission/reportbydate/"+fromDate+"/"+toDate+"/0/all";
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("MS bank commission date wise from"+fromDate+"to"+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/MSBank/aggCommSummary/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getMSBankCommAggSummary(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/ministatement/commission/reportsummary/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator MS bank commission summary from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/MSBank/aggCommbyDate/{fromDate}/{toDate}/{value}/{type}")
	public ResponseEntity<GeneralResponse> getMSBankCommAggbyDate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable String value,@PathVariable String type)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		
		String ip = commonTasks.getIpAddress(request);

		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("COMMISSION")) {
				if(data.getFeatureCode().equals("COMMISSION_RU")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
				 String url="http://10.0.25.132:8080/commissionProject/api/analytics/bank/ministatement/commission/reportbydate/"+fromDate+"/"+toDate+"/"+value+"/"+type;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse report=gson.fromJson(listData,GeneralResponse.class);
					 list = report.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMMISSION");
					auditLogs.setFeatureId("COMMISSON_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("aggregator MS commission date wise from"+fromDate+"to"+toDate+"of"+value);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}



}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.CommissionDetailsModel;
import com.apptmyz.fpcontrolpanel.data.CommissionDetailsModelObject;
import com.apptmyz.fpcontrolpanel.data.ToApproveCommissionDetailsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.CommissionService;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpsettlementdb.entity.CommissionBankSwitchesMasterData;
import com.apptmyz.fpsettlementdb.entity.CommissionDetailsData;
import com.apptmyz.fpsettlementdb.entity.CommissionDetailsTempData;
import com.apptmyz.fpsettlementdb.entity.CommissionServiceTypeMasterData;
import com.apptmyz.fpsettlementdb.repository.CommissionBankSwitchesMasterDataRepository;
import com.apptmyz.fpsettlementdb.repository.CommissionDetailsDataRepository;
import com.apptmyz.fpsettlementdb.repository.CommissionDetailsTempDataRepository;
import com.apptmyz.fpsettlementdb.repository.CommissionServiceTypeMasterDataRespository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/commission/v1")
public class CommissionDetailsControllerNew {

	private static final Logger log = Logger.getLogger("CommissionDetailsControllerNew");

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommissionService commissionService;
	
	@Autowired
	private CommissionServiceTypeMasterDataRespository commissionServiceTypeMasterDataRespository;

	@Autowired
	private CommissionBankSwitchesMasterDataRepository commissionBankSwitchesMasterDataRepository;

	@Autowired
	private  CommissionDetailsTempDataRepository commissionDetailsTempDataRepository;

	@Autowired
	private CommissionDetailsDataRepository commissionDetailsDataRepository;

	@Autowired
	private SuperMerchantMasterRepository  superMerchantMasterRepository;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@GetMapping("/master/servicetypes")
	public ResponseEntity<GeneralResponse> getComissionService( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		List<CommissionServiceTypeMasterData> commServData = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			commServData = commissionServiceTypeMasterDataRespository.findAll();

			response = successResponse(true, "Requested Completed", Constants.CORRECT_STATUS_CODE, commServData);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/master/bank/switches")
	public ResponseEntity<GeneralResponse> getComissionBankSwitches( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		List<CommissionBankSwitchesMasterData> commBankSwitchData = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			commBankSwitchData = commissionBankSwitchesMasterDataRepository.findAll();

			response = successResponse(true, "Requested Completed", Constants.CORRECT_STATUS_CODE, commBankSwitchData);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}


	@PostMapping("/save/commission/details/{addFlag}")
	public ResponseEntity<GeneralResponse> saveCommissionDetails(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody List<CommissionDetailsModel> commDetailsModel, @PathVariable Integer addFlag)
	{
		log.info("Create and Save bank acct details");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			if(commDetailsModel.size()>0)
			{
				response = saveCommissionDetails(commDetailsModel,(AuthenticateUserResponse)response.getBody().getData(), addFlag);
			}
			else
			{
				response = successResponse(false, "NO Data Availabel", 200, null);
			}
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("Create back acct details End");
		return response;
	}

	@PostMapping("/save/commission/details/temp/{addFlag}")
	public ResponseEntity<GeneralResponse> saveBankDetailsInTemp(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody List<CommissionDetailsModel> commissionDetailsModel, @PathVariable Integer addFlag)
	{
		log.info("Create bank acct details In Temp");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			if(commissionDetailsModel.size()>0)
			{
				response = saveCommissionDetailsInTemp(commissionDetailsModel,(AuthenticateUserResponse)response.getBody().getData(), addFlag);
			}
			else
			{
				response = successResponse(false, "NO Data Availabel", 200, null);
			}
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("Create back acct details End");
		return response;
	}

	@GetMapping("/temp/commission/details")
	public ResponseEntity<GeneralResponse> getTempComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		List<CommissionBankSwitchesMasterData> commBankSwitchData = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/temp/commission/details/aggr/{aggrid}")
	public ResponseEntity<GeneralResponse> getTempAggrComissionDetailsWithId( HttpServletRequest httpRequest,@RequestHeader("token") String token, @PathVariable Integer aggrid)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			log.info("Aggr Id:"+ aggrid);
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = getTempCommissiondetails(Constants.SETTLEMENT_TYPE_PARENT, aggrid);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@PostMapping("/temp/commission/details/aggr")
	public ResponseEntity<GeneralResponse> getAllTempAggrComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token, @RequestBody List<Integer> primaryKeyIds)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/temp/commission/details/dist/{distid}")
	public ResponseEntity<GeneralResponse> getTempDistComissionDetailsWithId( HttpServletRequest httpRequest,@RequestHeader("token") String token, @PathVariable Integer distid)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			log.info("Dist Id:"+ distid);
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = getTempCommissiondetails(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT, distid);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/temp/commission/details/dist")
	public ResponseEntity<GeneralResponse> getAllTempDistComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		List<CommissionBankSwitchesMasterData> commBankSwitchData = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			commBankSwitchData = commissionBankSwitchesMasterDataRepository.findAll();

			response = successResponse(true, "Requested Completed", Constants.CORRECT_STATUS_CODE, commBankSwitchData);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}


	@GetMapping("/commission/details")
	public ResponseEntity<GeneralResponse> getComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{

			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/commission/details/aggr/{aggrid}")
	public ResponseEntity<GeneralResponse> getAggrComissionDetailsWithId( HttpServletRequest httpRequest,@RequestHeader("token") String token, @PathVariable Integer aggrid)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			log.info("Aggr Id:"+ aggrid);
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = getCommissiondetails(Constants.SETTLEMENT_TYPE_PARENT, aggrid);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/commission/details/aggr")
	public ResponseEntity<GeneralResponse> getAllAggrComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/commission/details/dist/{distid}")
	public ResponseEntity<GeneralResponse> getDistComissionDetailsWithId( HttpServletRequest httpRequest,@RequestHeader("token") String token, @PathVariable Integer distid)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			log.info("Dist Id:"+ distid);
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = getCommissiondetails(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT, distid);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/commission/details/dist")
	public ResponseEntity<GeneralResponse> getAllDistComissionDetails( HttpServletRequest httpRequest,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/toapprove/details/aggr")
	public ResponseEntity<GeneralResponse> getToApproveAggrDetails(HttpServletRequest request,HttpSession httpSession, @RequestHeader("token") String token )
	{
		log.info("GetToApproveDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response= getToApprove(Constants.SETTLEMENT_TYPE_PARENT);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/toapprove/details/dist")
	public ResponseEntity<GeneralResponse> getToApproveDistDetails(HttpServletRequest request,HttpSession httpSession, @RequestHeader("token") String token )
	{
		log.info("GetToApproveDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response= getToApprove(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/toapprove/details/aggr/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getToApproveAggrDetails(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate ) {
		log.info("GetToApproveDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = dateValidation(fromDate);
			if(response != null)
				return response;

			response = dateValidation(toDate);
			if(response != null)
				return response;

			response = compareDates(fromDate, toDate);
			if(response != null)
				return response;

			response= getToApprove(Constants.SETTLEMENT_TYPE_PARENT,fromDate, toDate);
			
		}catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/toapprove/details/dist/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getToApproveDistDetails(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate ) {
		log.info("GetToApproveDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			response = dateValidation(fromDate);
			if(response != null)
				return response;

			response = dateValidation(toDate);
			if(response != null)
				return response;

			response = compareDates(fromDate, toDate);
			if(response != null)
				return response;

			response= getToApprove(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT,fromDate, toDate);
			
		}catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/updatecommission/details/aggr/{primaryKeyId}/{toapproveFlag}")
	public ResponseEntity<GeneralResponse> updateAggrCommissionDetails(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable Integer primaryKeyId, @PathVariable Integer toapproveFlag)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticationResponse = (AuthenticateUserResponse)response.getBody().getData();
			
			response= updatedCommissiondetails(Constants.SETTLEMENT_TYPE_PARENT,primaryKeyId, toapproveFlag, authenticationResponse);
			
		}catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/updatecommission/details/dist/{primaryKeyId}/{toapproveFlag}")
	public ResponseEntity<GeneralResponse> updateDistCommissionDetails(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable Integer primaryKeyId, @PathVariable Integer toapproveFlag)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticationResponse = (AuthenticateUserResponse)response.getBody().getData();
			
			response= updatedCommissiondetails(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT,primaryKeyId, toapproveFlag, authenticationResponse);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	
	
	
	
	
	
	
	
	

	
	
	// COMMISSION GENERATION   //
	
	
	//CW
	
	@GetMapping("/cw/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getCWdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		Date commissionDate = null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			commissionDate = calendar.getTime();
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = commissionService.processCWAggrDistCommission(formatdFromDate,formatdToDate, commissionDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	/*
	
	@GetMapping("/cw/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getCWdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....date"+ date);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		Date commissionDate = null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			commissionDate = 
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = commissionService.processCWAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cw/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getCWMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cw/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getCWMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processCWMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	
	
	
	
	//CD
	
	@GetMapping("/cd/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getCDdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processCDAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cd/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getCDdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processCDAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cd/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getCDMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cd/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getCDMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processCDMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	// MS
	
	@GetMapping("/ms/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getMSdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processMSAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ms/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getMSdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processMSAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ms/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getMSMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ms/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getMSMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processMSMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	//BI
	
	@GetMapping("/bi/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getBIdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processBIAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/bi/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getBIdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processBIAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/bi/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getBIMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			ss
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/bi/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getBIMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processBIMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	// MATMCW
	@GetMapping("/matmcw/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getMATMCWdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processMATMCWAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/matmcw/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getMATMCWdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processMATMCWAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/matmcw/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getMATMMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			ss
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/matmcw/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getMATMCWMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processMATMCWMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	//AP
	
	@GetMapping("/ap/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getAPdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processAPAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ap/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getAPdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processAPAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ap/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getAPMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/ap/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getAPMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processAPMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	//UP
	@GetMapping("/up/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getUPdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processUPAggrDistCommission(formatdFromDate, formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/up/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getUPdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processUPAggrDistCommission(formatdFromDate, formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/up/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getUPMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/up/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getUPMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processUPMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	//UQ
	
	@GetMapping("/uq/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getUQdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processUQAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/uq/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getUQdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processUQAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/uq/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getUQMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			ss
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/uq/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getUQMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processUQMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	//DQR
	
	@GetMapping("/dqr/getpartnersdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getDQRdailycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		String date=null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		try 
		{
			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());
			log.info("InstantSettlementAepsRange : yesterdaydate = " +date);
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processDQRAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/dqr/getpartnersdaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getDQRdailycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String date)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			
			response = processDQRAggrDistCommission(formatdFromDate,formatdToDate);
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/dqr/getpartnersmonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getDQRMonthlycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			ss
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/dqr/getpartnersmonthly/commission/generation/date/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getDQRMonthlycommissiongenerationSpecificdate(HttpServletRequest request,HttpSession httpSession, @PathVariable String fromdate, @PathVariable String todate)
	{
		log.info("updateBankDetails Started....from date:"+fromdate+"::To Date:"+ todate);
		ResponseEntity<GeneralResponse> response = null;
		Date formatdFromDate =null;
		Date formatdToDate =null;
		try 
		{
			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(fromdate + "00:00:00");
			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(todate + "23:59:59");
			log.info("InstantSettlementAepsRange : fromDate = " +formatdFromDate+ "toDate = " +formatdToDate);
			response = processDQRMonthlyAggrDistCommission(formatdFromDate,formatdToDate);
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	
	//FINGPAY COMMISSION
	
	
	@GetMapping("/cw/getfingpaysdaily/commission/generation")
	public ResponseEntity<GeneralResponse> getdailyFingpaycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cw/getfingpaydaily/commission/generation/date/{date}")
	public ResponseEntity<GeneralResponse> getdailyFingpaycommissiongenerationSpecificDate(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	@GetMapping("/cw/getfingpaymonthly/commission/generation")
	public ResponseEntity<GeneralResponse> getMonthlyFingpaycommissiongeneration(HttpServletRequest request,HttpSession httpSession)
	{
		log.info("updateBankDetails Started....");
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			
		}
		catch (Exception e) 
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("updateBankDetails End....");
		return response;
	}
	
	
	*/
	
	
	public ResponseEntity<GeneralResponse> getToApprove(String settleTo)
	{
		log.info("***************getToApprove .. ========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<CommissionDetailsTempData> list = null;
		try 
		{			
			log.info("GET bank details ");
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				list = commissionDetailsTempDataRepository.getTop10ByActiveFlagAndGroupByMerchantIdDesc(1);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				list= commissionDetailsTempDataRepository.getTop10ByActiveFlagAndGroupByDistIdDesc(1);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				list= commissionDetailsTempDataRepository.getTop10ByActiveFlagAndGroupByAggrIdDesc(1);

			response = getApproveBankDetails(settleTo, list);

		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}

	
	private ResponseEntity<GeneralResponse> dateValidation(String date)
	{
		ResponseEntity<GeneralResponse> resp = null;
		if(isEmpty(date))
		{
			return errorResponse(false, "CUSTOM DATE IS EMPTY", 8000, null);
		}
		try
		{
			Date formatDate = new SimpleDateFormat("ddMMyyyy").parse(date);
			log.info("CUSTOM DATE IS TRUE:"+ formatDate);
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			return errorResponse(false, "DATE FORMAT IS WRONG", 8001, null);
		}
		return resp;
	}

	private ResponseEntity<GeneralResponse> compareDates(String fdate, String todate)
	{
		ResponseEntity<GeneralResponse> resp = null;
		SimpleDateFormat sd = new SimpleDateFormat("ddMMyyyy"); 
		try
		{
			Date fromDate = sd.parse(fdate);
			Date toDate = sd.parse(todate);

			if (fromDate.compareTo(toDate) > 0)
			{
				return errorResponse(false, "From date is greated than todate", 200L, null);
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			return errorResponse(false, "DATE FORMAT IS WRONG", 8001, null);
		}
		return resp;
	}
	public ResponseEntity<GeneralResponse> getApproveBankDetails(String settleTo, List<CommissionDetailsTempData> list)
	{
		log.info("***************getTempBankdetails .. ========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<ToApproveCommissionDetailsModel> listOfData = new ArrayList<>();
		ToApproveCommissionDetailsModel model = null;
		try 
		{
			if(list != null && list.size() > 0)
			{
				for(CommissionDetailsTempData data : list)
				{
					model = new ToApproveCommissionDetailsModel();

					if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
					{

					}
					else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
					{
						log.info("SUPER MERCHANT ID: "+ data.getDistId());
						SuperMerchantMaster sm = superMerchantMasterRepository.findByIdAndActiveFlag(data.getDistId(), 1);
						if(sm != null)
							model.setName(sm.getSuperMerchantName());

					}
					else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
					{
						log.info("Parent ID: "+ data.getAggrId());
						ParentMerchantMaster pm =  parentMerchantMasterRepository.findByIdAndActiveFlag(data.getAggrId(), 1);
						if(pm != null)
							model.setName(pm.getParentMerchantName());

					}

					model.setCreatedBy(data.getCreatedBy());
					model.setCreatedTimeStamp(new SimpleDateFormat("dd-MM-yyyy HH:mm:ss").format(data.getCreatedTimestamp()));
					model.setUserType(settleTo);

					if(model.getPrimaryKeyId() > 0)
						listOfData.add(model);
				}
				response = successResponse(true, Constants.REQUEST_COMPLETED, 200, listOfData); 
			}
			else
			{
				response = errorResponse(false, "No Data Available ", 500, null);
			}
		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}
	public ResponseEntity<GeneralResponse> getCommissiondetails(String settleTo, int primaryKeytId)
	{
		log.info("***************getCommissiondetails .. Primary Key ID: "+ primaryKeytId +"========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<CommissionDetailsData> list = null;
		List<CommissionDetailsModel> listOfData = new ArrayList<>();
		CommissionDetailsModel model = null;
		try 
		{			
			log.info("GET getCommissiondetails details ");
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				list = commissionDetailsDataRepository.findByActiveFlagAndMerchantId(1, primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				list= commissionDetailsDataRepository.findByActiveFlagAndDistId(1,primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				list= commissionDetailsDataRepository.findByActiveFlagAndAggrId(1,primaryKeytId);

			if(list != null && list.size() > 0)
			{
				for(CommissionDetailsData data : list)
				{
					model = new CommissionDetailsModel();
					model.setPrimaryKey(primaryKeytId);
					model.setServiceType(data.getServiceType());
					model.setBankSwitch(data.getBankSwitch());
					model.setMixTxnAmt(data.getMinTxnAmt());
					model.setMaxTxnAmt(data.getMaxTxnAmt());
					model.setCommissionPercentage(data.getCommissionPercentage());
					model.setCommissionType(data.getCommissionType());
					model.setCommissionEffetiveDate(data.getCommissionEffectiveDate());
					model.setMaxCommAmtPerTxn(data.getMaxCommAmtPerTxn());
					model.setCommEligibiltyAmt(data.getComissionEligibilityAmt());
					model.setUserType(settleTo);
					listOfData.add(model);
				}
				response = successResponse(true, Constants.REQUEST_COMPLETED, 200, listOfData); 
			}
			else
			{
				response = errorResponse(false, "No Data Available ", 500, null);
			}
		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}

	public ResponseEntity<GeneralResponse> getTempCommissiondetails(String settleTo, int primaryKeytId)
	{
		log.info("***************getTempCommissiondetails .. Primary Key ID: "+ primaryKeytId +"========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<CommissionDetailsTempData> list = null;
		List<CommissionDetailsModel> listOfData = new ArrayList<>();
		CommissionDetailsModel model = null;
		try 
		{			
			log.info("GET getTempCommissiondetails details ");
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				list = commissionDetailsTempDataRepository.findByActiveFlagAndMerchantId(1, primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				list= commissionDetailsTempDataRepository.findByActiveFlagAndDistId(1,primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				list= commissionDetailsTempDataRepository.findByActiveFlagAndAggrId(1,primaryKeytId);

			if(list != null && list.size() > 0)
			{
				for(CommissionDetailsTempData data : list)
				{
					model = new CommissionDetailsModel();
					model.setPrimaryKey(primaryKeytId);
					model.setServiceType(data.getServiceType());
					model.setBankSwitch(data.getBankSwitch());
					model.setMixTxnAmt(data.getMinTxnAmt());
					model.setMaxTxnAmt(data.getMaxTxnAmt());
					model.setCommissionPercentage(data.getCommissionPercentage());
					model.setCommissionType(data.getCommissionType());
					model.setCommissionEffetiveDate(data.getCommissionEffectiveDate());
					model.setMaxCommAmtPerTxn(data.getMaxCommAmtPerTxn());
					model.setCommEligibiltyAmt(data.getComissionEligibilityAmt());
					model.setUserType(settleTo);
					listOfData.add(model);
				}
				response = successResponse(true, Constants.REQUEST_COMPLETED, 200, listOfData); 
			}
			else
			{
				response = errorResponse(false, "No Data Available ", 500, null);
			}
		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}


	private ResponseEntity<GeneralResponse> saveCommissionDetails( List<CommissionDetailsModel> commDetailsModel,AuthenticateUserResponse authenticateUserResponse, int addFlag) 
	{
		log.info("save bank details start: "+ commDetailsModel.size());
		ResponseEntity<GeneralResponse> response =null;
		CommissionDetailsData commdetails= null;
		try 
		{
			for(CommissionDetailsModel model : commDetailsModel)
			{
				try
				{
					log.info("Model"+ model.toString());
					if(!isEmpty(model.getUserType()) && !isEmpty(model.getPrimaryKey()+""))
					{
						if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
						{
							commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndMerchantId(1,model.getServiceType(), model.getBankSwitch(), model.getPrimaryKey());
						}
						else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
						{
							commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndDistId(1,model.getServiceType(),model.getBankSwitch(),model.getPrimaryKey());							
						}
						else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
						{
							commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndAggrId(1,model.getServiceType(), model.getBankSwitch(), model.getPrimaryKey());
						}
						if(commdetails == null) 
						{
							createCommissionDetailsInTempTbl(authenticateUserResponse.getUserName(), model);
						}
						else
						{
							response = successResponse(false, "Create Request is not possible: FOR THIS RECORD "+ model.getServiceType()+"::SETTLE TO:"+model.getUserType()+"::: ID:"+ model.getPrimaryKey() , 200, null);
						}
					}
					else
					{
						response = errorResponse(false, "Incompleate Data ", 200, null);
					}
				}
				catch(Exception e)
				{
					log.error("Exception OCCUREDL :"+model.toString() );
					log.error("Exception occured", e);
				}
			}
			response = successResponse(true, Constants.REQUEST_COMPLETED, 200, null);  
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable save data  ",500,null);
		}
		return  response;
	}

	private ResponseEntity<GeneralResponse> saveCommissionDetailsInTemp( List<CommissionDetailsModel> commDetailsModelList, AuthenticateUserResponse authenticateUserResponse, int addFlag) 
	{
		log.info("save commission details in Temp tbl start: "+ commDetailsModelList.size());
		ResponseEntity<GeneralResponse> response =null;
		CommissionDetailsTempData commTempdetails= null;
		try 
		{
			for(CommissionDetailsModel model : commDetailsModelList)
			{
				try
				{
					log.info("Model"+ model.toString());

					if(!isEmpty(model.getUserType()) && !isEmpty(model.getPrimaryKey()+""))
					{
						if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
						{
							commTempdetails = commissionDetailsTempDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndMerchantId(1,model.getServiceType(), model.getBankSwitch(), model.getPrimaryKey());
						}
						else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
						{
							commTempdetails = commissionDetailsTempDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndDistId(1,model.getServiceType(), model.getBankSwitch(), model.getPrimaryKey());							
						}
						else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
						{
							commTempdetails = commissionDetailsTempDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndAggrId(1,model.getServiceType(), model.getBankSwitch(), model.getPrimaryKey());
						}
						if(commTempdetails == null && addFlag == Constants.ADD_UPDATED_RECORDS) 
						{
							createCommissionDetailsInTempTbl(authenticateUserResponse.getUserName(), model);
							response = successResponse(true, "Created bank Details in temp "+ model.getServiceType()+" USER TYPE:"+model.getUserType()+"- ID:"+model.getPrimaryKey() , 200, null);
						}
						else if(commTempdetails != null)
						{
							commTempdetails.setActiveFlag(0);
							commTempdetails.setEndTimestamp(new Date());
							commissionDetailsTempDataRepository.save(commTempdetails);
							if(addFlag == Constants.ADD_UPDATED_RECORDS)
								createCommissionDetailsInTempTbl(authenticateUserResponse.getUserName(), model);
							response = successResponse(true, "Updated & Created bank Details in temp "+ model.getServiceType()+" USER TYPE:"+model.getUserType()+"- ID:"+model.getPrimaryKey() , 200, null);
						}
					}
					else
					{
						response = errorResponse(false, "Incompleate Data ", 200, null);
					}
				}
				catch(Exception e)
				{
					log.error("Exception OCCUREDL :"+model.toString() );
					log.error("Exception occured", e);
				}
			}
			response = successResponse(true, Constants.REQUEST_COMPLETED, 200, null);  
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable save data  ",500,null);
		}
		return  response;
	}


	private void createCommissionDetailsInTempTbl(String userName, CommissionDetailsModel model)
	{
		log.info("STATE TEMP:");
		try
		{
			CommissionDetailsTempData commdetails = new CommissionDetailsTempData();

			commdetails.setActiveFlag(1);
			commdetails.setCreatedBy(userName);
			commdetails.setCreatedTimestamp(new Date());

			commdetails.setRequestedTimestamp(new Date());
			commdetails.setServiceType(model.getServiceType());
			commdetails.setBankSwitch(model.getBankSwitch());
			commdetails.setMinTxnAmt(model.getMixTxnAmt());
			commdetails.setMaxTxnAmt(model.getMaxTxnAmt());
			commdetails.setCommissionPercentage(model.getCommissionPercentage());
			commdetails.setCommissionType(model.getCommissionType());
			commdetails.setCommissionEffectiveDate(model.getCommissionEffetiveDate());
			commdetails.setMaxCommAmtPerTxn(model.getMaxCommAmtPerTxn());
			commdetails.setComissionEligibilityAmt(model.getCommEligibiltyAmt());


			if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				commdetails.setMerchantId(model.getPrimaryKey());
			else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				commdetails.setDistId(model.getPrimaryKey());
			else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				commdetails.setAggrId(model.getPrimaryKey());

			commdetails = commissionDetailsTempDataRepository.save(commdetails);
			log.info("Saved:"+ commdetails.getId());
		}
		catch(Exception e)
		{
			log.error("Exception OCCURED AR ID:"+ model.getPrimaryKey());
			log.error("Exception occured", e);
		}
	}


	public ResponseEntity<GeneralResponse> getCommissiondetails(String settleTo, List<Integer> primaryKeytIdList)
	{
		log.info("***************getCommissiondetails .. Primary Key ID: "+ primaryKeytIdList +"========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<CommissionDetailsData> list = null;
		CommissionDetailsModel model = null;
		List<CommissionDetailsModelObject> listoFBankDetails = new ArrayList<>();
		CommissionDetailsModelObject object = null;
		try 
		{			
			log.info("GET getCommissiondetails details ");

			for(Integer primaryKeytId : primaryKeytIdList)
			{
				if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
					list = commissionDetailsDataRepository.findByActiveFlagAndMerchantId(1, primaryKeytId);
				else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
					list= commissionDetailsDataRepository.findByActiveFlagAndDistId(1,primaryKeytId);
				else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
					list= commissionDetailsDataRepository.findByActiveFlagAndAggrId(1,primaryKeytId);

				List<CommissionDetailsModel> listOfData = new ArrayList<>();

				if(list != null && list.size() > 0)
				{
					for(CommissionDetailsData data : list)
					{
						model = new CommissionDetailsModel();
						model.setPrimaryKey(primaryKeytId);
						model.setServiceType(data.getServiceType());
						model.setBankSwitch(data.getBankSwitch());
						model.setMixTxnAmt(data.getMinTxnAmt());
						model.setMaxTxnAmt(data.getMaxTxnAmt());
						model.setCommissionPercentage(data.getCommissionPercentage());
						model.setCommissionType(data.getCommissionType());
						model.setCommissionEffetiveDate(data.getCommissionEffectiveDate());
						model.setMaxCommAmtPerTxn(data.getMaxCommAmtPerTxn());
						model.setCommEligibiltyAmt(data.getComissionEligibilityAmt());
						model.setUserType(settleTo);
						listOfData.add(model);
					}
					object = new CommissionDetailsModelObject();
					object.setPrimaryKeyId(primaryKeytId);
					object.setCommissionDetailsList(listOfData);
					listoFBankDetails.add(object);
					response = successResponse(true, Constants.REQUEST_COMPLETED, 200, listOfData); 
				}
			}
			if(!listoFBankDetails.isEmpty() && listoFBankDetails.size() > 0)
			{
				response = successResponse(true, Constants.REQUEST_COMPLETED, 200, listoFBankDetails); 
			}
			else
			{
				response = errorResponse(false, "No Data Available ", 500, null);
			}
		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}

	public ResponseEntity<GeneralResponse> getToApprove(String settleTo, String fromDate, String toDate)
	{
		log.info("***************getTempBankdetails .. ========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		List<CommissionDetailsTempData> list = null;
		try 
		{			
			log.info("GET bank details From Date:"+ fromDate +" TO DATE:"+ fromDate);
			Date fromDateD = new SimpleDateFormat("ddMMyyyy").parse(fromDate);
			Date toDateD = new SimpleDateFormat("ddMMyyyy").parse(toDate);
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				list = commissionDetailsTempDataRepository.getByActiveFlagAndCreatedTimestampBetweenAndMerchantIdIsNotNull(1, fromDateD, toDateD);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				list= commissionDetailsTempDataRepository.getByActiveFlagAndCreatedTimestampBetweenAndDistIdIsNotNull(1, fromDateD, toDateD);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				list= commissionDetailsTempDataRepository.getByActiveFlagAndCreatedTimestampBetweenAndAggrIdIsNotNull(1, fromDateD, toDateD);

			response = getApproveBankDetails(settleTo, list);

		}
		catch (Exception e) {
			log.error("Exception occured", e);
			response = errorResponse(false, "exception in server", 500, null);
		}
		return response;
	}

	private ResponseEntity<GeneralResponse> updatedCommissiondetails(String settleTo, int primaryKeytId, int toApproveFlag,AuthenticateUserResponse authenticationResponse) 
	{
		log.info("***************updatedCommissiondetails .. Primary Key ID: "+ primaryKeytId +"========SETTLE TO :"+ settleTo);
		ResponseEntity<GeneralResponse> response =null;
		CommissionDetailsData commdetails= null;
		List<CommissionDetailsTempData> list = null;
		List<CommissionDetailsData> commlist = null;
		Map<String, CommissionDetailsData> commMap = new HashMap<>();
		CommissionDetailsModel model = null;
		try 
		{			
			log.info("GET Temp bank details ");
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				list = commissionDetailsTempDataRepository.findByActiveFlagAndMerchantId(1, primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				list= commissionDetailsTempDataRepository.findByActiveFlagAndDistId(1,primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				list= commissionDetailsTempDataRepository.findByActiveFlagAndAggrId(1,primaryKeytId);

			log.info("GET bank details ");
			if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				commlist = commissionDetailsDataRepository.findByActiveFlagAndMerchantId(1, primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				commlist = commissionDetailsDataRepository.findByActiveFlagAndDistId(1,primaryKeytId);
			else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				commlist = commissionDetailsDataRepository.findByActiveFlagAndAggrId(1,primaryKeytId);

			if(commlist != null && commlist.size() > 0)
			{
				for(CommissionDetailsData bnk : commlist)
				{
					if(!commMap.containsKey(bnk.getServiceType()+"-"+bnk.getBankSwitch()))
						commMap.put(bnk.getServiceType()+"-"+bnk.getBankSwitch(), bnk);
				}
				log.info("OLD Bank details Map Size: "+ commMap.size());
			}
			if(list != null && list.size() > 0)
			{
				for(CommissionDetailsTempData data : list)
				{
					log.info("Bank DETAILS OBJECT:"+ data.toString());
					if(toApproveFlag == Constants.REJECTED_FLAG)
					{
						data.setActiveFlag(Constants.REJECTED_FLAG);
						data.setModifiedBy(authenticationResponse.getUserName());
						data.setEndTimestamp(new Date());
						commissionDetailsTempDataRepository.save(data);
						response = successResponse(true, "This Record Is Rejected: SERVICE TYPE::"+ data.getServiceType()+"== ID:"+ data.getId()+"==Bankswitch"+ data.getBankSwitch(), 200, null);
					}
					else if(toApproveFlag == Constants.APPROVED_FLAG)
					{
						if(data.getServiceType() != null && !data.getServiceType().equalsIgnoreCase(Constants.DISABLE_ALL_SERVICES))
						{
							if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
								commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndMerchantId(1,data.getServiceType(),data.getBankSwitch(), primaryKeytId);
							else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
								commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndDistId(1,data.getServiceType(), data.getBankSwitch(),primaryKeytId);							
							else if(settleTo.equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
								commdetails = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndBankSwitchAndAggrId(1,data.getServiceType(), data.getBankSwitch(), primaryKeytId);

							model = new CommissionDetailsModel();
							
							model.setPrimaryKey(primaryKeytId);
							model.setServiceType(data.getServiceType());
							model.setBankSwitch(data.getBankSwitch());
							model.setMixTxnAmt(data.getMinTxnAmt());
							model.setMaxTxnAmt(data.getMaxTxnAmt());
							model.setCommissionPercentage(data.getCommissionPercentage());
							model.setCommissionType(data.getCommissionType());
							model.setCommissionEffetiveDate(data.getCommissionEffectiveDate());
							model.setMaxCommAmtPerTxn(data.getMaxCommAmtPerTxn());
							model.setCommEligibiltyAmt(data.getComissionEligibilityAmt());
							model.setUserType(settleTo);
							
							if(commdetails == null)
							{
								createCommissionDetails(data.getCreatedBy(), model);	
								data.setActiveFlag(0);
								data.setModifiedBy(authenticationResponse.getUserName());
								data.setEndTimestamp(new Date());
								commissionDetailsTempDataRepository.save(data);
							}
							else
							{
								boolean isChange = compareOldAndNewCommissionDetails(model, commdetails);
								if(isChange)
								{
									commdetails.setActiveFlag(0);
									commdetails.setEndTimestamp(new Date());
									commissionDetailsDataRepository.save(commdetails);						
									createCommissionDetails(data.getCreatedBy(), model);	
									data.setActiveFlag(0);
									data.setModifiedBy(authenticationResponse.getUserName());
									data.setEndTimestamp(new Date());
									commissionDetailsTempDataRepository.save(data);
								}
								else
								{
									data.setActiveFlag(0);
									data.setModifiedBy(authenticationResponse.getUserName());
									data.setEndTimestamp(new Date());
									commissionDetailsTempDataRepository.save(data);
									response = successResponse(true, "No Details Change for this Service: "+ model.getServiceType(), 200, null);
								}
								commMap.remove(data.getServiceType()+"-"+data.getBankSwitch());
							}
						}
						else if(data.getServiceType() != null && data.getServiceType().equalsIgnoreCase(Constants.DISABLE_ALL_SERVICES))
						{
							data.setActiveFlag(0);
							data.setModifiedBy(authenticationResponse.getUserName());
							data.setEndTimestamp(new Date());
							commissionDetailsTempDataRepository.save(data);
						}					
					}
					else
					{
						response = successResponse(false,"TO APPROVE FLAG IS NOT CORRECT::"+ toApproveFlag, 200, null); 
					}
				}
				log.info("After removing entries OLD Bank details Map Size: "+ commMap.size());
				if(toApproveFlag == Constants.APPROVED_FLAG)
				{
					if(commMap != null && !commMap.isEmpty() && commMap.size() > 0)
					{
						for(Map.Entry<String, CommissionDetailsData> mm : commMap.entrySet())
						{
							CommissionDetailsData data = mm.getValue();
							data.setActiveFlag(0);
							data.setEndTimestamp(new Date());
							commissionDetailsDataRepository.save(data);
						}
					}
				}
				response = successResponse(true, "Updated Details Successfully", 200, null); 
			}
			else
			{
				if(toApproveFlag == Constants.APPROVED_FLAG)
				{
					if(commMap != null && !commMap.isEmpty() && commMap.size() > 0)
					{
						for(Map.Entry<String, CommissionDetailsData> mm : commMap.entrySet())
						{
							CommissionDetailsData data = mm.getValue();
							data.setActiveFlag(0);
							data.setEndTimestamp(new Date());
							commissionDetailsDataRepository.save(data);
						}
					}
				}
				if(commMap.size() > 0)
					response = successResponse(true, "Old Commission Details All Disabled", 200, null);
				else
					response = errorResponse(false, "No Data Available ", 500, null);
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured", e);
			response = errorResponse(false,"Exception Occured.... Unable save data  ",500,null);
		}
		return  response;
	}

	private void createCommissionDetails(String userName, CommissionDetailsModel model)
	{
		log.info("STATET:");
		try
		{
			CommissionDetailsData commdetails = new CommissionDetailsData();

			commdetails.setActiveFlag(1);
			commdetails.setCreatedBy(userName);
			commdetails.setCreatedTimestamp(new Date());

			commdetails.setRequestedTimestamp(new Date());
			commdetails.setServiceType(model.getServiceType());
			commdetails.setBankSwitch(model.getBankSwitch());
			commdetails.setMinTxnAmt(model.getMixTxnAmt());
			commdetails.setMaxTxnAmt(model.getMaxTxnAmt());
			commdetails.setCommissionPercentage(model.getCommissionPercentage());
			commdetails.setCommissionType(model.getCommissionType());
			commdetails.setCommissionEffectiveDate(model.getCommissionEffetiveDate());
			commdetails.setMaxCommAmtPerTxn(model.getMaxCommAmtPerTxn());
			commdetails.setComissionEligibilityAmt(model.getCommEligibiltyAmt());


			if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_MERCHANT))
				commdetails.setMerchantId(model.getPrimaryKey());
			else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_SUPER_MERCHANT))
				commdetails.setDistId(model.getPrimaryKey());
			else if(model.getUserType().equalsIgnoreCase(Constants.SETTLEMENT_TYPE_PARENT))
				commdetails.setAggrId(model.getPrimaryKey());

			commdetails = commissionDetailsDataRepository.save(commdetails);

			log.info("Saved:"+ commdetails.getId());
		}
		catch(Exception e)
		{
			log.error("Exception OCCURED AR ID:"+ model.getPrimaryKey(), e);
			log.error("Exception occured", e);
		}
	}
	
	private boolean compareOldAndNewCommissionDetails(CommissionDetailsModel newDetails, CommissionDetailsData oldDetails) throws Exception
	{
		boolean flag = true;
		try
		{
			
			if(newDetails.getServiceType() != null && newDetails.getServiceType().equalsIgnoreCase(oldDetails.getServiceType()))
			{
				if(newDetails.getBankSwitch() != null && newDetails.getBankSwitch().equalsIgnoreCase(oldDetails.getBankSwitch()) )
				{
					if(newDetails.getMixTxnAmt() != null && newDetails.getMixTxnAmt() == oldDetails.getMinTxnAmt())
					{
						if(newDetails.getMaxTxnAmt() != null && newDetails.getMaxTxnAmt() == oldDetails.getMaxTxnAmt())
						{
							if(newDetails.getCommissionPercentage() != null && newDetails.getCommissionPercentage() == oldDetails.getCommissionPercentage())
							{
								if(newDetails.getCommissionType() != null && newDetails.getCommissionType() == oldDetails.getCommissionType() )
								{
									if(newDetails.getMaxCommAmtPerTxn() != null &&  newDetails.getMaxCommAmtPerTxn()  == oldDetails.getMaxCommAmtPerTxn() )
									{
										if(newDetails.getCommEligibiltyAmt() != null && newDetails.getCommEligibiltyAmt() == oldDetails.getComissionEligibilityAmt() )
										{
											flag = false;
										}
									}
								}
							}
						}
					}	
				}
			}
		}
		catch(Exception e)
		{
			log.error("Exception Occured ... NEW DETAILS: "+ newDetails.toString() +"--OLD DETAILS "+ oldDetails.toString(), e);
			e.printStackTrace();
			throw e;
		}
		return flag;
	}
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		log.error("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		log.info("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

		log.info(" Successfully");

		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}


	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = gson.fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			log.error("Exception occured", e);
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@RestController
@RequestMapping(value="/api/complaint")
public class ComplaintManagementController 
{
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FilesUtil filesUtil;

	@GetMapping(path = "/assigned/report/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse>  assignedReport(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@PathVariable String fromdate,@PathVariable String todate)throws UnsupportedEncodingException, ParseException
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				HttpGet httpGet = null;

				//		   	   	 HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests/"+fromDate+"/"+toDate);
				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/assigned/report/"+fromdate+"/"+todate);
				String path = filesUtil.getProperty("complaintManagementUAT");
				if(path.equals("1"))
					httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/assigned/report/"+fromdate+"/"+todate);
				else
					httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/assigned/report/"+fromdate+"/"+todate);

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Complaints to be assign are fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}


	}
	@PostMapping(path = "/set/approved/details")
	public ResponseEntity<GeneralResponse> setInDb(HttpServletRequest httprequest,HttpSession httpSession,
			HttpServletResponse httpresponse,@RequestHeader("token") String token, @RequestBody String cpModel)throws UnsupportedEncodingException, ParseException
	{

		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);


		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				HttpPost httpPost = null;
				String path = filesUtil.getProperty("complaintManagementUAT");

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/set/approved/details");
				if(path.equals("1"))
					httpPost = new HttpPost("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/set/approved/details");
				else
					httpPost = new HttpPost("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/set/approved/details");

				httpPost.setHeader("Content-type", "application/json");
				httpPost.setHeader("User-Agent", "Mozilla/5.0");
				httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpPost.setHeader("token", token);

				String requestData=cpModel;

				System.out.println("validate model "+cpModel);

				HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				httpPost.setEntity(entity);
				HttpResponse responseData = httpClient.execute(httpPost);


				int responseCode = responseData.getStatusLine().getStatusCode();
				String data ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object dataObj = null;
				if(responseCode == 200)
				{
					data = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					//					 dataObj = validatedRecord.getData();

					String msg = "";
					msg = validatedRecord.getMessage();


					if(validatedRecord.isStatus()) {


						//					AUDIT LOGS
						FpCpAuditLogs auditLogs = new FpCpAuditLogs();

						auditLogs.setFeatureGrpId("COMPLAINT");
						auditLogs.setFeatureId("COMPLAINT_SOLVE");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setOldData(new Gson().toJson(cpModel));
						auditLogs.setNewData(new Gson().toJson(dataObj));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						//					fpCpAuditLogsRepository.save(auditLogs);

						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								msg,null), HttpStatus.OK);
					}
					else {
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					}
				}    
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}



	}
	@GetMapping(path = "/get/assigned/history/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> assignedHistory(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@PathVariable String fromdate,@PathVariable String todate)throws UnsupportedEncodingException, ParseException
	{


		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;


				//		   	   	 HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests/"+fromDate+"/"+toDate);

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/assigned/history/"+fromdate+"/"+todate);
				if(path.equals("1"))
					httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/assigned/history/"+fromdate+"/"+todate);
				else
					httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/get/assigned/history/"+fromdate+"/"+todate);


				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Assigned issues are fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}


	}
	@GetMapping(path = "/get/names/issuesSolvedBy")
	public ResponseEntity<GeneralResponse> getAssignedTo( @RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException
	{

		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		//String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;

				//		   	   	 HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests/"+fromDate+"/"+toDate);
				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/names/issuesSolvedBy");
				if(path.equals("1"))
				 httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/names/issuesSolvedBy");
				else
				 httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/get/names/issuesSolvedBy");

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Names of issues solver are fetched");
					auditLogs.setAuditTimestamp(new Date());
					//	auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}




	}
	@PostMapping(path = "/resolve/issue")
	public ResponseEntity<GeneralResponse> resolve(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@RequestBody String rslv)throws UnsupportedEncodingException, ParseException
	{


		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);


		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpPost httpPost = null;
				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/resolve/issue");
				
				if(path.equals("1"))
				 httpPost = new HttpPost("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/resolve/issue");
				else
				 httpPost = new HttpPost("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/resolve/issue");

				httpPost.setHeader("Content-type", "application/json");
				httpPost.setHeader("User-Agent", "Mozilla/5.0");
				httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpPost.setHeader("token", token);

				String requestData=rslv;

				System.out.println("validate model "+rslv);

				HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				httpPost.setEntity(entity);
				HttpResponse responseData = httpClient.execute(httpPost);


				int responseCode = responseData.getStatusLine().getStatusCode();
				String data ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object dataObj = null;
				if(responseCode == 200)
				{
					data = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					//					 dataObj = validatedRecord.getData();

					String msg = "";
					msg = validatedRecord.getMessage();


					if(validatedRecord.isStatus()) {


						//					AUDIT LOGS
						FpCpAuditLogs auditLogs = new FpCpAuditLogs();

						auditLogs.setFeatureGrpId("COMPLAINT");
						auditLogs.setFeatureId("COMPLAINT_SOLVE");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setOldData(new Gson().toJson(rslv));
						auditLogs.setNewData(new Gson().toJson(dataObj));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						//					fpCpAuditLogsRepository.save(auditLogs);

						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								msg,null), HttpStatus.OK);
					}
					else {
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					}
				}    
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}




	}
	@GetMapping(path = "/resolve/history/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse>  resolveHistory(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token,@PathVariable String fromdate,@PathVariable String todate)throws UnsupportedEncodingException, ParseException
	{


		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/resolve/history/"+fromdate+"/"+todate);
				if(path.equals("1"))

				 httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/resolve/history/"+fromdate+"/"+todate);
				else
				 httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/resolve/history/"+fromdate+"/"+todate);

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Resolved issues are fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	@GetMapping(path = "/default/newComplaints/report/top10")
	public ResponseEntity<GeneralResponse>  defaultassignedReport(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException
	{


		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		//String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();

				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/default/newComplaints/report/top10");
				if(path.equals("1"))
				 httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/default/newComplaints/report/top10");
				else
				 httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/default/newComplaints/report/top10");

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("default top10 names of issues solver are fetched");
					auditLogs.setAuditTimestamp(new Date());
					//	auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	@GetMapping(path = "/defaultTop10/get/assigned/history")
	public ResponseEntity<GeneralResponse> defaultassignedHistory(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException
	{



		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		//String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;
				
				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/get/assigned/history");
				if(path.equals("1"))
				 httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/get/assigned/history");
				else
					
				 httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/get/assigned/history");

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("default top10 Names of issues solver are fetched");
					auditLogs.setAuditTimestamp(new Date());
					//	auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@GetMapping(path = "/defaultTop10/resolve/history")
	public ResponseEntity<GeneralResponse>  defaultresolveHistory(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestHeader("token") String token)throws UnsupportedEncodingException, ParseException
	{



		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				String path = filesUtil.getProperty("complaintManagementUAT");
				HttpGet httpGet = null;

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/resolve/history");
				if(path.equals("1"))
					
				 httpGet = new HttpGet("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/resolve/history");
				else
				 httpGet = new HttpGet("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/defaultTop10/resolve/history");

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					list = merchRec.getData();


					//					AUDIT LOGS
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("COMPLAINT");
					auditLogs.setFeatureId("COMPLAINT_SOLVE");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("default top10 Resolved issues are fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}

		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@PostMapping(path = "/get/reopened/ticket/info/{pathid}")
	public ResponseEntity<GeneralResponse> ReopenHistory(HttpServletRequest httprequest,HttpSession httpSession,
			HttpServletResponse httpresponse,@RequestHeader("token") String token, @RequestBody String reopenid,@PathVariable Integer pathid)throws UnsupportedEncodingException, ParseException
	{

		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);


		String ip = commonTasks.getIpAddress(httprequest);

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("COMPLAINT")) {
				if(data.getFeatureCode().equals("COMPLAINT_SOLVE")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			try
			{

				HttpClient httpClient = new DefaultHttpClient();
				HttpPost httpPost = null;

				String path = filesUtil.getProperty("complaintManagementUAT");

				System.out.println("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/reopened/ticket/info/"+pathid);
				if(path.equals("1"))
				 httpPost = new HttpPost("https://fpuat.tapits.in/fpcreatecomplaint/api/complaint/get/reopened/ticket/info/"+pathid);
				else
				 httpPost = new HttpPost("https://fpekyc.tapits.in/fpcreatecomplaint/api/complaint/get/reopened/ticket/info/"+pathid);

				httpPost.setHeader("Content-type", "application/json");
				httpPost.setHeader("User-Agent", "Mozilla/5.0");
				httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpPost.setHeader("token", token);

				String requestData=reopenid;

				System.out.println("validate model "+reopenid);

				HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				httpPost.setEntity(entity);
				HttpResponse responseData = httpClient.execute(httpPost);


				int responseCode = responseData.getStatusLine().getStatusCode();
				String data ="";

				//			     commonTasks.getFullResponse(responseData);

				System.out.println(responseCode);
				System.out.println(responseData);

				Object dataObj = null;
				if(responseCode == 200)
				{
					data = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					//					 dataObj = validatedRecord.getData();

					String msg = "";
					msg = validatedRecord.getMessage();



					if(validatedRecord.isStatus()) {


						//					AUDIT LOGS
						FpCpAuditLogs auditLogs = new FpCpAuditLogs();

						auditLogs.setFeatureGrpId("COMPLAINT");
						auditLogs.setFeatureId("COMPLAINT_SOLVE");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setOldData(new Gson().toJson(reopenid));
						auditLogs.setNewData(new Gson().toJson(dataObj));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						//					fpCpAuditLogsRepository.save(auditLogs);

						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								msg,validatedRecord.getData()), HttpStatus.OK);
					}
					else {
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					}
				}    
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}

			}
			catch(Exception e)
			{
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}



	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ControlPanelPermissionsModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserPermissionsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api")
public class ControlPanelAccessPermissionsController {

	private static final Logger controlpermissionslog = Logger.getLogger("ControlPanelAccessPermissions");
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private FpCpUserPermissionsRepository fpCpUserPermissionsRepository;
	
	@GetMapping("/controlpanel/permissions")
	public ResponseEntity<GeneralResponse> getControlPanelPermissions(@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		controlpermissionslog.info("/controlpermissionslog   getControlPanelPermissions");
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse)response.getBody().getData();
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("PERMISSIONS")) {
					if(data.getFeatureCode().equals("PERMISSIONS_REPORTS")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			List<FpCpUserPermissions> fpcppelist = null;
			Map<String,List<ControlPanelPermissionsModel>> map = new LinkedHashMap<>();
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
				String ip = commonTasks.getIpAddress(httpRequest);
				System.out.println("IP ADDRESS:"+ ip);
				if(authenticateUserResponse.getUserRole() != null){
					if(authenticateUserResponse.getUserRole().equalsIgnoreCase("admin")){
						fpcppelist = fpCpUserPermissionsRepository.findAll();
						for(FpCpUserPermissions fpcp: fpcppelist){
							ControlPanelPermissionsModel model = new ControlPanelPermissionsModel();
							model.setId(fpcp.getId());
							model.setUserName(fpcp.getFpCpUser().getUserName());
							model.setFeatureGrpCode(fpcp.getFeatureGrpCode());
							model.setFeatureCode(fpcp.getFeatureCode());
							model.setPermCreate(fpcp.getPermCreate() != null ? fpcp.getPermCreate()+"" : null);
							model.setPermRead(fpcp.getPermRead()!= null ? fpcp.getPermRead()+"" : null);
							model.setPermUpdate(fpcp.getPermUpdate()!= null? fpcp.getPermUpdate()+"" : null);
							model.setPermApprove(fpcp.getPermApprove() != null ? fpcp.getPermApprove()+"" : null);
							model.setPermDelete(fpcp.getPermDelete() != null ? fpcp.getPermDelete()+"" : null);
							model.setActiveFlag(fpcp.getActiveFlag() != null ? fpcp.getActiveFlag()+"" : null);
							model.setPermInfo(fpcp.getPermInfo() != null ? fpcp.getPermInfo()+"" : null);
							model.setCreatedTimestamp(fpcp.getCreatedTimestamp() != null ? new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(fpcp.getCreatedTimestamp()) : null);
							model.setUpdatedTimestamp(fpcp.getUpdatedTimestamp() != null ? new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(fpcp.getUpdatedTimestamp()) : null);
							
							if (!map.containsKey(fpcp.getFpCpUser().getUserName())) {
								map.put(model.getUserName(), new ArrayList<ControlPanelPermissionsModel>());
					        }
							System.out.println("USER NAME:"+fpcp.getFpCpUser().getUserName() +"FPCP:"+  fpcp.toString());
							map.get(model.getUserName()).add(model);
						}
					}else{
						fpcppelist = fpCpUserPermissionsRepository.findByFpCpUserUserName(authenticateUserResponse.getUserName());
						for(FpCpUserPermissions fpcp: fpcppelist){
							ControlPanelPermissionsModel model = new ControlPanelPermissionsModel();
							model.setId(fpcp.getId());
							model.setUserName(fpcp.getFpCpUser().getUserName());
							model.setFeatureGrpCode(fpcp.getFeatureGrpCode());
							model.setFeatureCode(fpcp.getFeatureCode());
							model.setPermCreate(fpcp.getPermCreate() != null ? fpcp.getPermCreate()+"" : null);
							model.setPermRead(fpcp.getPermRead()!= null ? fpcp.getPermRead()+"" : null);
							model.setPermUpdate(fpcp.getPermUpdate()!= null? fpcp.getPermUpdate()+"" : null);
							model.setPermApprove(fpcp.getPermApprove() != null ? fpcp.getPermApprove()+"" : null);
							model.setPermDelete(fpcp.getPermDelete() != null ? fpcp.getPermDelete()+"" : null);
							model.setActiveFlag(fpcp.getActiveFlag() != null ? fpcp.getActiveFlag()+"" : null);
							model.setPermInfo(fpcp.getPermInfo() != null ? fpcp.getPermInfo()+"" : null);
							model.setCreatedTimestamp(fpcp.getCreatedTimestamp() != null ? new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(fpcp.getCreatedTimestamp()) : null);
							model.setUpdatedTimestamp(fpcp.getUpdatedTimestamp() != null ? new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(fpcp.getUpdatedTimestamp()) : null);
					
							if (!map.containsKey(fpcp.getFpCpUser().getUserName())) {
								map.put(model.getUserName(), new ArrayList<ControlPanelPermissionsModel>());
					        }
							System.out.println("USER NAME:"+fpcp.getFpCpUser().getUserName() +"FPCP:"+  fpcp.toString());
							map.get(model.getUserName()).add(model);
						}
					}
					controlpermissionslog.info("/controlpermissionslog map size");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,map), HttpStatus.OK);
				}else{ 
					response = errorResponse(false,"User Role Not defined",500,null);
				}
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/controlpanel/permissions/{featureCode}")
	public ResponseEntity<GeneralResponse> getControlPanelCommissionPermissions(@RequestHeader("token") String token, @PathVariable String featureCode, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		controlpermissionslog.info("/controlpermissionslog   getControlPanelCommissionPermissions");
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			AuthenticateUserResponse authenticateUserResponse = (AuthenticateUserResponse)response.getBody().getData();
			
			boolean permission = false;
			UserPermissionsModel returnModel = null;
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
					if(data.getFeatureCode().equals(featureCode)) {
						if(data.getPermRead() == 1) {
							permission = true;
							returnModel = data;
							break;
						}
					}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						"Permissions", 200, returnModel), HttpStatus.OK);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);
		
		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);
		
		System.out.println("Erros hadled Successfully");
		
		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	
	
	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);
			
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.security.NoSuchAlgorithmException;
import java.security.NoSuchProviderException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.config.RequestConfig;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.bouncycastle.crypto.InvalidCipherTextException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.MerchantOnboardingExcel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api")

public class EkycReportsController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FilesUtil fileUtil;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private CommonTasks commonTasks;

	private static final Logger ekycreportslog = Logger.getLogger("Ekycreports");

	@GetMapping("/ekys/status/{fromDate}/{toDate}/{statusType}")
	public ResponseEntity<GeneralResponse> getekycreportdata(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable Integer statusType)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ekycreportslog.info("/ekycreportslog   from "+fromDate+" to "+toDate);
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			if(data.getFeatureGrpCode().equals("EKYC")) {
				if(data.getFeatureCode().equals("EKYC_REPORTS")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			ekycreportslog.info("/ekycReports Permission validation true");
			try
			{
				HttpClient httpClient = new DefaultHttpClient();
				String url="https://fpekyc.tapits.in/fpekyc/api/ekyc/reports/ekycsuccessandfailure/"+fromDate+"/"+toDate+"/"+statusType;
				url = url.replace(" ", "%20");

				HttpGet httpGet = new HttpGet(url);
				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);

				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";
				ekycreportslog.info("/ekycreportslog Refund request api hit "+responseCode);
				System.out.println(responseData);

				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
					list = commissionMaster.getData();
					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("EKYC");
					auditLogs.setFeatureId("EKYC_REPORTS");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Ekyc Report "+fromDate+" "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					ekycreportslog.info("/ekycreportslog List sent in response to device");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				ekycreportslog.info("/ekycreportslog exception in server");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}	
		}
		else {
			ekycreportslog.info("/ekycreportslog Permission validation false");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	//approval

	@GetMapping("/ekys/approval/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getekycapprovalreportdata(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ekycreportslog.info("/ekyc records from "+fromDate+" to "+toDate);
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("EKYC")) {
				if(data.getFeatureCode().equals("EKYC_REPORTS")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			ekycreportslog.info("/ekycReports Permission validation true");
			try
			{
				HttpClient httpClient = new DefaultHttpClient();

				String url="https://fpekyc.tapits.in/fpekyc/api/ekyc/reports/ekycapproval/"+fromDate+"/"+toDate;
				url = url.replace(" ", "%20");

				HttpGet httpGet = new HttpGet(url);
				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);

				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";
				ekycreportslog.info("/ekycreportslog Refund request api hit "+responseCode);

				System.out.println(responseCode);
				Object list = null;
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
					list = commissionMaster.getData();

					FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("EKYC");
					auditLogs.setFeatureId("EKYC_REPORTS");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Ekyc Report "+fromDate+" "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					ekycreportslog.info("/ekycreportslog List sent in response to device");
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				ekycreportslog.info("/ekycreportslog exception in server");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}	
		}
		else {
			ekycreportslog.info("/ekycreportslog Permission validation false");
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	//approval request 
	@GetMapping("/ekys/approval/request/{merchantId}/{terminalId}")
	public ResponseEntity<GeneralResponse> getekycapprovalrequest(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String merchantId, @PathVariable String terminalId)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		ekycreportslog.info("/ekyc records  "+merchantId+" terminal id "+terminalId);
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			ekycreportslog.info("/ekycreportslog response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("EKYC")) {
				if(data.getFeatureCode().equals("EKYC_REPORTS")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			ekycreportslog.info("/ekycReports Permission validation true");

			try
			{
				HttpClient httpClient = new DefaultHttpClient();

				String url="https://fpekyc.tapits.in/fpekyc/api/ekyc/reports/ekycapprovalrequest/"+merchantId+"/"+terminalId;
				url = url.replace(" ", "%20");
				HttpGet httpGet = new HttpGet(url);
				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);

				HttpResponse responseData = httpClient.execute(httpGet);
				int responseCode = responseData.getStatusLine().getStatusCode();
				String listData ="";

				ekycreportslog.info("/ekycreportslog Refund request api hit "+responseCode);
				System.out.println(responseCode);
				Object list = null;
				String msg = "";
				if(responseCode == 200)
				{
					listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse recordsRes=gson.fromJson(listData,GeneralResponse.class);
					list = recordsRes.getData();
					msg = recordsRes.getMessage();

					if(recordsRes.isStatus()) {
						//					AUDIT LOGS
						FpCpAuditLogs auditLogs = new FpCpAuditLogs();

						auditLogs.setFeatureGrpId("EKYC");
						auditLogs.setFeatureId("EKYC_REPORTS");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(1);
						auditLogs.setViewData("Ekyc Report "+merchantId+" "+terminalId);
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);
						ekycreportslog.info("/ekycreportslog List sent in response to device");
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
								msg,list), HttpStatus.OK);
					} else
					{
						System.out.println(" response was not 200");
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
					}
				}      
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				ekycreportslog.info("/ekycreportslog exception in server");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}	
		}
		else {
			ekycreportslog.info("/ekycreportslog Permission validation false");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@GetMapping("/analytics/ekys/status/{fromDate}/{toDate}/{statusType}")
	public ResponseEntity<GeneralResponse> getekycanalyticsreportdata(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate,@PathVariable Integer statusType)
					throws UnsupportedEncodingException, ParseException {
		Gson gson = new GsonBuilder().serializeNulls().create();

		try
		{
			HttpClient httpClient = new DefaultHttpClient();
			String url="https://fpekyc.tapits.in/fpekyc/api/ekyc/reports/analytics/ekycsuccessandfailure/"+fromDate+"/"+toDate+"/"+statusType;
			url = url.replace(" ", "%20");

			HttpGet httpGet = new HttpGet(url);
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);

			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";
			ekycreportslog.info("/ekycreportslog Refund request api hit "+responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
				list = commissionMaster.getData();

				ekycreportslog.info("/ekycreportslog List sent in response to device");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			ekycreportslog.info("/ekycreportslog exception in server");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}

	}

	@PostMapping("/ekyc/assigned/terminals/Excel")
	public ResponseEntity<GeneralResponse> assignedEKycTerminals(HttpServletRequest request,
			HttpServletResponse response, HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String exceldata)  {
		ResponseEntity<GeneralResponse> generalResponse = null;
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}

		String ip = commonTasks.getIpAddress(request);
		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();
		boolean permission = false;
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			if(data.getFeatureGrpCode().equals("EKYC")) {
				if(data.getFeatureCode().equals("EKYC_TERMINALS_UPLOAD")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			ekycreportslog.info("/ekycterminalAssigned  Permission validation true");
			try
			{
				int CONNECTION_TIMEOUT_MS = 360000; // Timeout in millis.
				RequestConfig requestConfig = RequestConfig.custom()
						.setConnectionRequestTimeout(CONNECTION_TIMEOUT_MS)
						.setConnectTimeout(CONNECTION_TIMEOUT_MS)
						.setSocketTimeout(CONNECTION_TIMEOUT_MS)
						.build();

				HttpClient httpClient = HttpClientBuilder.create().build();

				HttpPost httpPost = new HttpPost("https://fpekyc.tapits.in/fpekyc/api/tid/terminals/assigned/data");
				httpPost.setHeader("Content-type", "application/json");
				httpPost.setHeader("User-Agent", "Mozilla/5.0");
				httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpPost.setHeader("token", token);
				httpPost.setConfig(requestConfig);
				String requestData=exceldata;
				System.out.println("model "+exceldata);

				HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				httpPost.setEntity(entity);
				HttpResponse responseData = httpClient.execute(httpPost);

				int responseCode = responseData.getStatusLine().getStatusCode();
				String data ="";

				System.out.println(responseCode);
				System.out.println(responseData);

				if(responseCode == 200)
				{
					data = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse validatedRecord= gson.fromJson(data,GeneralResponse.class);
					
					String msg = "";
					msg = validatedRecord.getMessage();
					
					if(validatedRecord.isStatus()) {
						auditLogs.setFeatureGrpId("EKYC");
						auditLogs.setFeatureId("EKYC_TERMINALS_UPLOAD");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData(new Gson().toJson(data));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);

						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,msg,null), HttpStatus.OK);
					}
					else {
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
					}
				}      
				else {
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);
				}
			}
			catch(Exception e)
			{
				e.printStackTrace();
				ekycreportslog.error("/ekycreportslog exception in server");
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			}	
		}
		else {
			ekycreportslog.info("/ekycreportslog Permission validation false");
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import javax.activation.DataHandler;
import javax.activation.FileDataSource;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.AggrSmContactDetails;
import com.apptmyz.fpaepsdb.repository.AggrSmContactDetailsRepository;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;

@RestController
@RequestMapping(value="/api/email")	
public class EmailNotificationsController {

	private static final Logger log = LogManager.getLogger("EmailNotificationsController");

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private AggrSmContactDetailsRepository aggrSmContactDetailsRepository;

	@GetMapping(path ="/send/chargeback/notifications")
	public ResponseEntity<GeneralResponse> infoToMail(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse)
	{
		log.info("Started Email Notifications:/api/email/send/chargeback/notifications"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
		ResponseEntity<GeneralResponse> response = null;
		Calendar calendar = null;
		Date fromDate = null;
		Date toDate = null;
		Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
		try
		{
			calendar = Calendar.getInstance();
			calendar.setTime(new Date());
			toDate = calendar.getTime();
			calendar.add(Calendar.MINUTE, -5);
			calendar.set(Calendar.SECOND, 00);

			fromDate = calendar.getTime();

			log.info("From Time:"+ fromDate +" ToDate:"+ toDate);

			List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(Constants.Charge_Back_Files_Uploaded,fromDate, toDate);
			
		//	List<ChargeBackManagement> cbData = chargeBackManagementRepository.findByUploadedTimestampBetween(fromDate, toDate);

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(ChargeBackManagement data: cbData)
				{
					if(!cbMap.containsKey(data.getSuperMerchantId())) {
						cbMap.put(data.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
					}
					cbMap.get(data.getSuperMerchantId()).add(data);
				}
				response = sendChargeBackNotificationMails(cbMap, Constants.DAY_NOTIFICATION);
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);
			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}

	@GetMapping(path ="/send/day/chargeback/notifications/{fromtime}/{totime}")
	public ResponseEntity<GeneralResponse> dayCBinfoToMail(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,@PathVariable String fromtime,@PathVariable String totime)
	{
		log.info("Started Email Notifications:/send/day/chargeback/notifications"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
		ResponseEntity<GeneralResponse> response = null;
		Calendar calendar = null;
		String date = null;
		Date formatdFromDate = null;
		Date formatdToDate = null;
		SimpleDateFormat format=new SimpleDateFormat("ddMMyyyy");
		Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
		try
		{
			calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			date = format.format(calendar.getTime());

			formatdFromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + fromtime);
			date = format.format(new Date());

			formatdToDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date + totime);

			log.info("From Time:"+ formatdFromDate +" ToDate:"+ formatdToDate);

			List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByUploadedTimestampBetween(formatdFromDate, formatdFromDate);

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(ChargeBackManagement data: cbData)
				{
					if(!cbMap.containsKey(data.getSuperMerchantId())) {
						cbMap.put(data.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
					}
					cbMap.get(data.getSuperMerchantId()).add(data);
				}
				response = sendChargeBackNotificationMails(cbMap, Constants.DAY_NOTIFICATION);
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);
			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}


	@GetMapping(path ="/consolidated/chargeback/notifications")
	public ResponseEntity<GeneralResponse> consolidatedEmail(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse)
	{
		log.info("Started Email Notifications:/api/email/consolidated/chargeback/notifications"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
		ResponseEntity<GeneralResponse> response = null;
		Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
		SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
		String date=null;
		try
		{
			date = format.format(new Date());

			Date fromDate = new SimpleDateFormat("yyyyMM").parse(date+"000000");
			Date toDate = new SimpleDateFormat("yyyyMMdd").parse(date+"235959");

			log.info("From Time:"+ fromDate +" ToDate:"+ toDate);

			List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByStatusFlagAndTatGreaterThanEqual(Constants.Charge_Back_Files_Uploaded, new Date());

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(ChargeBackManagement data: cbData)
				{
					if(!cbMap.containsKey(data.getSuperMerchantId())) {
						cbMap.put(data.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
					}
					cbMap.get(data.getSuperMerchantId()).add(data);
				}
				response = sendConsolidatedChargeBackNotificationMails(cbMap);
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);
			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}

	@GetMapping(path ="/status/chargeback/notifications")
	public ResponseEntity<GeneralResponse> statusEmail(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse)
	{
		log.info("Started Email Notifications:/api/email/status/chargeback/notifications"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
		ResponseEntity<GeneralResponse> response = null;
		Map<Integer,Integer> cbMap = new LinkedHashMap<>();
		Map<Integer,Integer> acceptedMap = new LinkedHashMap<>();
		SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
		String date=null;
		String yesterdaydate=null;
		try
		{
			date = format.format(new Date());

			Calendar calendar = Calendar.getInstance();
			calendar.add(Calendar.DATE, -1);
			yesterdaydate = format.format(calendar.getTime());


			Date fromDate = new SimpleDateFormat("yyyyMMddHHmmss").parse(date+"000000");
			Date toDate = new SimpleDateFormat("yyyyMMddHHmmss").parse(date+"235959");

			Date yfromDate = new SimpleDateFormat("yyyyMMddHHmmss").parse(yesterdaydate+"000000");
			Date ytoDate = new SimpleDateFormat("yyyyMMddHHmmss").parse(yesterdaydate+"235959");


			log.info("From Time:"+ fromDate +" ToDate:"+ toDate);

			List<Object[]> cbData =  chargeBackManagementRepository.getCountOfPendingStatusBySMid(fromDate, toDate);

			List<Object[]> ycbData =  chargeBackManagementRepository.getCountOfYesterdayAcceptedStatusBySMid(yfromDate, ytoDate);

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(Object[] data: cbData)
				{
					if(!cbMap.containsKey(data[1])) {
						Integer count = ((BigInteger) data[0]).intValue();
						cbMap.put((Integer)data[1], count);
					}
				}

				for(Object[] data: ycbData)
				{
					if(!acceptedMap.containsKey(data[1])) {
						Integer count = ((BigInteger) data[0]).intValue();
						acceptedMap.put((Integer)data[1], count);
					}
				}

				response = sendStatusChargeBackNotificationMails(cbMap, acceptedMap);
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);
			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}

	@GetMapping(path ="/reminder/status/chargeback/notifications")
	public ResponseEntity<GeneralResponse> reminderNotificationEmail(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse)
	{
		log.info("Started Email Notifications:/api/email/reminder/status/chargeback/notifications ");
		ResponseEntity<GeneralResponse> response = null;
		Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
		SimpleDateFormat format=new SimpleDateFormat("yyyyMMdd");
		String date=null;
		try
		{
			log.info("Started Notifications Reminder");

			date = format.format(new Date());

			Date fromDate = new SimpleDateFormat("yyyyMMdd").parse(date);

			List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByStatusFlagAndTat(Constants.Charge_Back_Files_Uploaded,fromDate);

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(ChargeBackManagement data: cbData)
				{
					if(!cbMap.containsKey(data.getSuperMerchantId())) {
						cbMap.put(data.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
					}
					cbMap.get(data.getSuperMerchantId()).add(data);
				}
				response = sendChargeBackNotificationMails(cbMap, Constants.REMINDER_NOTIFICATION );
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);

			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}

	@GetMapping(path ="/send/chargeback/notifications/{date}/{fromtime}/{totime}")
	public ResponseEntity<GeneralResponse> infoToMailBasedOnDate(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse, @PathVariable String date,
			@PathVariable String fromtime,@PathVariable String totime)
	{
		log.info("Started Email Notifications:/api/email/send/chargeback/notifications"+new SimpleDateFormat("yyyy-MM-dd hh:mm:ss").format(new Date()));
		ResponseEntity<GeneralResponse> response = null;
		Date fromDate = null;
		Date toDate = null;
		Map<Integer,List<ChargeBackManagement>> cbMap = new LinkedHashMap<>();
		try
		{

			fromDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date+fromtime);
			toDate = new SimpleDateFormat("ddMMyyyyHH:mm:ss").parse(date+totime);

			log.info("From Time:"+ fromDate +" ToDate:"+ toDate);

			List<ChargeBackManagement> cbData =  chargeBackManagementRepository.findByStatusFlagAndUploadedTimestampBetween(Constants.Charge_Back_Files_Uploaded,fromDate, toDate);

			if(cbData != null && !cbData.isEmpty() && cbData.size() > 0)
			{
				for(ChargeBackManagement data: cbData)
				{
					if(!cbMap.containsKey(data.getSuperMerchantId())) {
						cbMap.put(data.getSuperMerchantId(), new ArrayList<ChargeBackManagement>());
					}
					cbMap.get(data.getSuperMerchantId()).add(data);
				}
				response = sendChargeBackNotificationMails(cbMap, Constants.DAY_NOTIFICATION);
			}
			else
				response = successResponse(true, "No Records Found", 10000, null);
			return response;
		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_PARSING_REQUEST_DATA, 0), HttpStatus.OK);
		}
	}

	private ResponseEntity<GeneralResponse> sendChargeBackNotificationMails(Map<Integer, List<ChargeBackManagement>> cbmap, String notificationType)
	{
		log.info("entered into sendChargeBackNotificationMails"+ cbmap.size());
		int count = 0;
		for(Map.Entry<Integer, List<ChargeBackManagement>> data : cbmap.entrySet())
		{
			int smid = data.getKey();
			List<ChargeBackManagement> cbList = data.getValue();
			log.info("KEY"+ smid+":: VALUE:"+ cbList.size());
			sendCBEmailNotification(smid,cbList, notificationType);
			count++;
		}

		return successResponse(true, "Sent EMail Notifications:"+count, 10000, null); 
	}

	private ResponseEntity<GeneralResponse> sendConsolidatedChargeBackNotificationMails(Map<Integer, List<ChargeBackManagement>> cbmap)
	{
		log.info("entered into sendChargeBackNotificationMails"+ cbmap.size());
		int count = 0;
		for(Map.Entry<Integer, List<ChargeBackManagement>> data : cbmap.entrySet())
		{
			int smid = data.getKey();
			List<ChargeBackManagement> cbList = data.getValue();
			log.info("KEY"+ smid+":: VALUE:"+ cbList.size());
			sendConsolidatedNotification(smid,cbList);
			count++;
		}

		return successResponse(true, "Sent EMail Notifications:"+count, 10000, null); 
	}

	private ResponseEntity<GeneralResponse> sendStatusChargeBackNotificationMails(Map<Integer,Integer> pendingMap, Map<Integer,Integer> acceptedMap)
	{
		log.info("entered into sendStatusChargeBackNotificationMails"+ pendingMap.size());
		int count = 0;
		for(Map.Entry<Integer, Integer> data : pendingMap.entrySet())
		{
			int smid = data.getKey();
			Integer pendingCount = data.getValue();
			Integer acceptedCount = 0;
			if(acceptedMap.containsKey(smid))
			{
				acceptedCount = acceptedMap.get(smid);
				acceptedMap.remove(smid);
			}
			sendStatusNotification(smid,pendingCount,acceptedCount,Constants.STATUS_NOTIFICATION);
			count++;
		}

		for(Map.Entry<Integer, Integer> data : acceptedMap.entrySet())
		{
			int smid = data.getKey();
			Integer acceptedCount = data.getValue();

			sendStatusNotification(smid,0,acceptedCount,Constants.STATUS_NOTIFICATION);
			count++;
		}

		return successResponse(true, "Sent EMail Notifications:"+count, 10000, null); 
	}

	private ResponseEntity<GeneralResponse> sendReminderChargeBackNotificationMails(Map<Integer,Integer> pendingMap)
	{
		log.info("entered into sendReminderChargeBackNotificationMails"+ pendingMap.size());
		int count = 0;
		for(Map.Entry<Integer, Integer> data : pendingMap.entrySet())
		{
			int smid = data.getKey();
			Integer pendingCount = data.getValue();
			sendStatusNotification(smid,pendingCount,0,Constants.REMINDER_NOTIFICATION);
			count++;
		}

		return successResponse(true, "Sent EMail Notifications:"+count, 10000, null); 
	}

	private void sendStatusNotification(int smId, Integer pendingCount, Integer acceptCount, String notificationType)
	{

		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		ArrayList<String> ccMailList = null;
		try
		{
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();

			AggrSmContactDetails sm = aggrSmContactDetailsRepository.findByDistIdAndContactType(smId, Constants.CONTACT_TYPE_CB);

			if(sm != null)
			{
				int gmailOrAWS = Integer.parseInt(filesUtil.getProperty("awsemailnotification"));
				System.out.println("awsemailnotification : " + filesUtil.getProperty("awsemailnotification") );
				System.out.println("gmailOrAWS : " + gmailOrAWS);
				if(gmailOrAWS == 1)
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
					props.put("mail.smtp.socketFactory.port", "587");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "587");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication()
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("awsemailusername"),filesUtil.getProperty("awsemailpassword"));
						}
					});
					System.out.println("AWS session : " + session);
				}
				else
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "smtp.gmail.com");
					props.put("mail.smtp.socketFactory.port", "465");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "465");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("emailAddressForNotification"), filesUtil.getProperty("pinForNotification"));
						}
					});
					System.out.println("GMAIL session : " + session);
				}

				if(sm.getEmailId()!=null)
				{
					String[] mailIds = sm.getEmailId().split(",");//"vyshnavi@tapits.in".split(",");  //
					for(String emailId:mailIds)
					{
						try {
							InternetAddress emailAddr = new InternetAddress(emailId);
							emailAddr.validate();
							mailList.add(emailId);
						} catch (AddressException ex) {
							ex.printStackTrace();
						}
					}
				}

			//	mailList.add("disputes@tapits.in");
				bccMailList.add("bhaskar@tapits.in");
				bccMailList.add("yshnavi@tapits.in");

				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");
				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				System.out.println("EMAILS DONE : " + session);


				Message message = new MimeMessage(session);
				message.setRecipients(Message.RecipientType.TO, address);
				message.setRecipients(Message.RecipientType.BCC, bccaddress);
				message.setRecipients(Message.RecipientType.CC, ccaddress);
				message.setFrom(new InternetAddress("disputes@tapits.in"));

				if(Constants.STATUS_NOTIFICATION.equalsIgnoreCase(notificationType))
				{
					message.setSubject("Status of Dispute Notification Fingpay/Tapits -"+new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
				}
				else if(Constants.REMINDER_NOTIFICATION.equalsIgnoreCase(notificationType))
				{
					message.setSubject("Reminder Dispute Notification Fingpay/Tapits -"+new SimpleDateFormat("yyyy-MM-dd").format(new Date()));
				}
				Multipart multipart = new MimeMultipart();

				MimeBodyPart messageBodyPart1 = new MimeBodyPart();

				if(Constants.STATUS_NOTIFICATION.equalsIgnoreCase(notificationType))
				{
					messageBodyPart1.setText("Dear Sir/Ma'am,"+
							"\r\n \r\n" + 
							"you have " +pendingCount +" pending disputes. Kindly check and confirm the status on priority within TAT or the case will be deemed accepted by the bank and"
							+ " you accepted "+ acceptCount + " disputes yesterday. \r\n\r\n In case of any issue,  please contact the disputes team at support@tapits.in." +
							"\r\n\r\n" + 
							"Thank you.\r\n Fingpay.");
				}
				else if(Constants.REMINDER_NOTIFICATION.equalsIgnoreCase(notificationType)){
					messageBodyPart1.setText("Dear Sir/Ma'am,"+
							"\r\n \r\n" + 
							"you have " +pendingCount +" pending disputes. Kindly check and confirm the status on priority within 5PM or the case will be deemed accepted by the bank and"
							+ " \r\n\r\n In case of any issue, please contact the disputes team at support@tapits.in." +
							"\r\n\r\n" + 
							"Thank you.\r\n Fingpay.");
				}
				multipart.addBodyPart(messageBodyPart1);

				message.setContent(multipart);

				javax.mail.Transport.send(message);

			}
			else
			{
				log.error("Super Merchant iD is inactive: SO we stopped sending CB Notifications");
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured sending email:"+smId);
		}
	}

	private void sendConsolidatedNotification(int smId, List<ChargeBackManagement> cbList)
	{

		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		ArrayList<String> ccMailList = null;
		File file = null;
		try
		{
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();

			AggrSmContactDetails sm = aggrSmContactDetailsRepository.findByDistIdAndContactType(smId, Constants.CONTACT_TYPE_CB);

			if(sm != null)
			{
				int gmailOrAWS = Integer.parseInt(filesUtil.getProperty("awsemailnotification"));
				System.out.println("awsemailnotification : " + filesUtil.getProperty("awsemailnotification") );
				System.out.println("gmailOrAWS : " + gmailOrAWS);
				if(gmailOrAWS == 1)
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
					props.put("mail.smtp.socketFactory.port", "587");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "587");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication()
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("awsemailusername"),filesUtil.getProperty("awsemailpassword"));
						}
					});
					System.out.println("AWS session : " + session);
				}
				else
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "smtp.gmail.com");
					props.put("mail.smtp.socketFactory.port", "465");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "465");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("emailAddressForNotification"), filesUtil.getProperty("pinForNotification"));
						}
					});
					System.out.println("GMAIL session : " + session);
				}

				if(sm.getEmailId()!=null)
				{
					String[] mailIds = sm.getEmailId().split(",");//"vyshnavi@tapits.in".split(",");  //
					for(String emailId:mailIds)
					{
						try {
							InternetAddress emailAddr = new InternetAddress(emailId);
							emailAddr.validate();
							mailList.add(emailId);
						} catch (AddressException ex) {
							ex.printStackTrace();
						}
					}
				} 
				//mailList.add("disputes@tapits.in");
				bccMailList.add("bhaskar@tapits.in");
				bccMailList.add("vyshnavi@tapits.in");
				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");

				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				System.out.println("EMAILS DONE : " + session);

				XSSFWorkbook workbook = new XSSFWorkbook();
				XSSFSheet cwsheet = workbook.createSheet("AEPSCWEStatement");
				XSSFSheet matmsheet = workbook.createSheet("MATMEStatement");
				XSSFSheet apsheet = workbook.createSheet("APEStatement");


				int cwcol=0;
				XSSFRow cwrow = cwsheet.createRow(0);
				String[] cwheaders = Constants.CW_EXCEL_ESTATEMENT_TEMPLATE_HEADERS.split(",");
				for(String header: cwheaders){

					XSSFCell cell = cwrow.createCell(cwcol);
					cell.setCellValue(header);
					cwsheet.autoSizeColumn(cwcol++);
				}

				int matmcwcol=0;
				XSSFRow matmcwrow = matmsheet.createRow(0);
				String[] matmcwheaders = Constants.MATMCW_EXCEL_ESTATEMENT_TEMPLATE_HEADERS.split(",");
				for(String header: matmcwheaders){

					XSSFCell cell = matmcwrow.createCell(matmcwcol);
					cell.setCellValue(header);
					matmsheet.autoSizeColumn(matmcwcol++);
				}

				int apcol=0;
				XSSFRow aprow = apsheet.createRow(0);
				String[] apheaders = Constants.AP_EXCEL_ESTATEMENT_TEMPLATE_HEADERS.split(",");
				for(String header: apheaders){

					XSSFCell cell = aprow.createCell(apcol);
					cell.setCellValue(header);
					apsheet.autoSizeColumn(apcol++);
				}

				int cwrownum = 1, matmcwrownum = 1, aprownum =1;
				for(ChargeBackManagement cb : cbList)
				{
					if(cb.getProductType().equalsIgnoreCase(Constants.CW))
					{
						XSSFRow rowedit = cwsheet.createRow(cwrownum++);
						rowedit.createCell(0).setCellValue((String)cb.getCbDate());
						rowedit.createCell(1).setCellValue((String)cb.getChargeBackType());
						rowedit.createCell(2).setCellValue((String)cb.getBank());
						rowedit.createCell(3).setCellValue((String)cb.getCardNo());
						rowedit.createCell(4).setCellValue((String)cb.getTxnNo());
						rowedit.createCell(5).setCellValue((Double)cb.getAmount());
						rowedit.createCell(6).setCellValue((String)cb.getTxnDate());
						rowedit.createCell(7).setCellValue((String)cb.getTrnCode());
						rowedit.createCell(8).setCellValue((String)cb.getTatDate());
						rowedit.createCell(9).setCellValue("FA");
						rowedit.createCell(10).setCellValue(cb.getStatusFlag() == 0 ? "PENDING" : cb.getStatusFlag() == 1 ? "ACCEPT" :  cb.getStatusFlag() == 2 ? "REJECT" : ""  );
						rowedit.createCell(11).setCellValue((String)cb.getMerchantTxnId());
						rowedit.createCell(12).setCellValue((String)cb.getMerchantName());
						rowedit.createCell(13).setCellValue((String)cb.getMerchantLoginId());
						rowedit.createCell(14).setCellValue((String)cb.getSuperMerchantName());
					}
					else if(cb.getProductType().equalsIgnoreCase(Constants.MATMCW))
					{
						XSSFRow rowedit = matmsheet.createRow(matmcwrownum++);
						rowedit.createCell(0).setCellValue((String)cb.getCbDate());
						rowedit.createCell(1).setCellValue((String)cb.getChargeBackType());
						rowedit.createCell(2).setCellValue((String)cb.getBank());
						rowedit.createCell(3).setCellValue((String)cb.getCardNo());
						rowedit.createCell(4).setCellValue((String)cb.getTxnNo());
						rowedit.createCell(5).setCellValue((Double)cb.getAmount());
						rowedit.createCell(6).setCellValue((String)cb.getTxnDate());
						rowedit.createCell(7).setCellValue((String)cb.getTxnTime());
						rowedit.createCell(8).setCellValue((String)cb.getTrnCode());
						rowedit.createCell(9).setCellValue(cb.getStatusFlag() == 0 ? "PENDING" : cb.getStatusFlag() == 1 ? "ACCEPT" :  cb.getStatusFlag() == 2 ? "REJECT" : ""  );
						rowedit.createCell(10).setCellValue((String)cb.getMerchantTxnId());
						rowedit.createCell(11).setCellValue((String)cb.getTatDate());
						rowedit.createCell(12).setCellValue((String)cb.getBcTerminalId());
						rowedit.createCell(13).setCellValue("FA");
						rowedit.createCell(14).setCellValue((String)cb.getMerchantName());
						rowedit.createCell(15).setCellValue((String)cb.getMerchantLoginId());
						rowedit.createCell(16).setCellValue((String)cb.getSuperMerchantName());
					}
					else if(cb.getProductType().equalsIgnoreCase(Constants.AP))
					{
						XSSFRow rowedit = apsheet.createRow(aprownum++);
						rowedit.createCell(0).setCellValue((String)cb.getCbDate());
						rowedit.createCell(1).setCellValue((String)cb.getCbDate());
						rowedit.createCell(2).setCellValue((String)cb.getChargeBackType());
						rowedit.createCell(3).setCellValue((String)cb.getAcquirerBank());
						rowedit.createCell(4).setCellValue((String)cb.getBank());
						rowedit.createCell(5).setCellValue((String)cb.getTxnDate());
						rowedit.createCell(6).setCellValue((String)cb.getTxnTime());
						rowedit.createCell(7).setCellValue((String)cb.getTxnNo());
						rowedit.createCell(8).setCellValue((String)cb.getCardNo());
						rowedit.createCell(9).setCellValue((Double)cb.getAmount());
						rowedit.createCell(10).setCellValue((String)cb.getSuperMerchantName());
						rowedit.createCell(11).setCellValue(cb.getStatusFlag() == 0 ? "PENDING" : cb.getStatusFlag() == 1 ? "ACCEPT" :  cb.getStatusFlag() == 2 ? "REJECT" : ""  );
						rowedit.createCell(12).setCellValue((String)cb.getTatDate());
						rowedit.createCell(13).setCellValue((String)cb.getMerchantTxnId());
						rowedit.createCell(14).setCellValue((String)cb.getMerchantName());
						rowedit.createCell(15).setCellValue((String)cb.getMerchantLoginId());

					}
				}

				String uploadDirectory =  "/usr/fingpay/mis/";

				SimpleDateFormat dformat = new SimpleDateFormat("dd-MM-yy_HHmmss");
				String filename=uploadDirectory +"DisputeEStatement_"+smId+"_"+dformat.format(new Date())+".xlsx";

				file = new File(filename);
				FileOutputStream outputStream=new FileOutputStream(filename);
				workbook.write(outputStream);
				outputStream.close();

				System.out.println("filename = "+ filename);

				Message message = new MimeMessage(session);
				message.setRecipients(Message.RecipientType.TO, address);
				message.setFrom(new InternetAddress("disputes@tapits.in"));
				message.setRecipients(Message.RecipientType.BCC, bccaddress);
				message.setRecipients(Message.RecipientType.CC, ccaddress);

				message.setSubject("Pending Chargebacks|"+ new SimpleDateFormat("yyyy-MM-dd").format(new Date())+"|"+ cbList.get(0).getSuperMerchantName()+"|Fingpay");

				Multipart multipart = new MimeMultipart();

				MimeBodyPart messageBodyPart = new MimeBodyPart();
				FileDataSource fds = new FileDataSource(filename);
				messageBodyPart.setDataHandler(new DataHandler(fds));
				messageBodyPart.setFileName(fds.getName());
				multipart.addBodyPart(messageBodyPart);

				MimeBodyPart messageBodyPart1 = new MimeBodyPart();
				messageBodyPart1.setText("Dear Sir/Ma'am,\r\n\r\n"
						+ "Attached is a consolidated excel sheet of all new and pending disputes assigned to you. It contains all "
						+ "Chargeback, Pre-arbitration and Arbitration disputes across Aeps, MATM and Aadhaar Pay product lines."
						+ " \r\n\r\n "
						+ "Please log into your portal to view and close the disputes <b>before 5 PM</b> on Deemed Accepted date, Cases processed after 5 PM will be automatically deemed accepted by the bank."
						+ "\r\n\r\n"
						+ "For all chargeback cases which are accepted, including Good Faith, Pre-arbitration and Arbitration, a penalty of Rs.100 per day from the date of Transaction is payable. The final decision lies with the NPCI for all cases."
						+ "\r\n\r\nIf this case is rejected by you now, and subsequently accepted for any future dispute ( Pre Arb, Arb, Fraud or BO), then a penalty may be imposed by the authorities. The penalty amount or any other amount charged, is at discretion of the regulator and will be passed on to you."
						+ "\r\n\r\nPlease implement the 3 way recon API to reduce chargebacks."
						+ "In case of any issue, please contact the disputes team at support@tapits.in." 
						+ " \r\n\r\n Thank you, \r\n Fingpay.");
				multipart.addBodyPart(messageBodyPart1);

				message.setContent(multipart);

				System.out.println("message : " + message.toString());

				javax.mail.Transport.send(message);

			}
			else
			{
				log.error("Super Merchant iD is inactive: SO we stopped sending CB Notifications");
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured sending email:"+smId);
		}
	}

	private void sendCBEmailNotification(int smId, List<ChargeBackManagement> cbList, String notificationType)
	{
		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		ArrayList<String> ccMailList = null;
		try
		{
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();

			AggrSmContactDetails sm = aggrSmContactDetailsRepository.findByDistIdAndContactType(smId, Constants.CONTACT_TYPE_CB);

			if(sm != null)
			{
				int gmailOrAWS = Integer.parseInt(filesUtil.getProperty("awsemailnotification"));
				System.out.println("awsemailnotification : " + filesUtil.getProperty("awsemailnotification") );
				System.out.println("gmailOrAWS : " + gmailOrAWS);
				if(gmailOrAWS == 1)
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
					props.put("mail.smtp.socketFactory.port", "587");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "587");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication()
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("awsemailusername"),filesUtil.getProperty("awsemailpassword"));
						}
					});
					System.out.println("AWS session : " + session);
				}
				else
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "smtp.gmail.com");
					props.put("mail.smtp.socketFactory.port", "465");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "465");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("emailAddressForNotification"), filesUtil.getProperty("pinForNotification"));
						}
					});
					System.out.println("GMAIL session : " + session);
				}

				if(sm.getEmailId()!=null)
				{
					String[] mailIds = sm.getEmailId().split(",");//"vyshnavi@tapits.in".split(",");  //
					for(String emailId:mailIds)
					{
						try {
							InternetAddress emailAddr = new InternetAddress(emailId);
							emailAddr.validate();
							mailList.add(emailId);
						} catch (AddressException ex) {
							ex.printStackTrace();
						}
					}
				}

//				mailList.add("disputes@tapits.in");
				bccMailList.add("bhaskar@tapits.in");
				bccMailList.add("vyshnavi@tapits.in");

				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");

				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				System.out.println("EMAILS DONE : " + session);
				String emailMessage = "";

				emailMessage += "<table style = 'border: 1px solid black;border-collapse: collapse; text-align : center;'>"
						+ "<thead style = 'border: 1px solid black;border-collapse: collapse; background-color :  #021755; font-family : Times New Roman;  font-size: 15px;color: white'	>"
						+ "<tr><th style = 'border: 1px solid black;'>CB Date</th>"
						+ " <th style = 'border: 1px solid black;'>CB Type</th> "
						+ "<th style = 'border: 1px solid black;'>RRN</th>"
						+ "<th style = 'border: 1px solid black;'>Card No.</th> "
						+ "<th style = 'border: 1px solid black;'>Amount</th> "
						+ "<th style = 'border: 1px solid black;'>Txn Date</th>"
						+ "<th style = 'border: 1px solid black;'>Product</th>"
						+ "<th style = 'border: 1px solid black;'>Bank</th>"
						+ " <th style = 'border: 1px solid black;'>Transaction Log ID</th>"
						+ " <th style = 'border: 1px solid black;'>Merchant Login ID</th>"
						+ "<th style = 'border: 1px solid black;'>Merchant Name</th>"
						+ "<th style = 'border: 1px solid black;'>Deemed Accepted Date</th>"
						+ " </tr>"
						+ "</thead>"
						+ "<tbody>";

				for(ChargeBackManagement cb : cbList)
				{


					emailMessage += "<tr><th style = 'border: 1px solid black;'>"+cb.getCbDate()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getChargeBackType()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnNo()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getCardNo()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getAmount()+" </th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnDate()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getProductType()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getBank()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantTxnId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantLoginId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantName()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getTatDate()+"</th>"
							+ " </tr>";


				}
				emailMessage += " </tbody> </table>";
				Message message = new MimeMessage(session);

				message.setRecipients(Message.RecipientType.TO, address);
				message.setFrom(new InternetAddress("disputes@tapits.in"));
				message.setRecipients(Message.RecipientType.BCC, bccaddress);
				message.setRecipients(Message.RecipientType.CC, ccaddress);

				String fullmessage = "";
				if(notificationType.equals(Constants.DAY_NOTIFICATION))
				{
					message.setSubject("New Chargebacks|"+ new SimpleDateFormat("yyyy-MM-dd").format(new Date())+"|"+ cbList.get(0).getSuperMerchantName()+" |Fingpay |");

					fullmessage = "Dear Sir/Ma'am," + 
							"<br><br>" + 
							"The enclosed new Chargeback Disputes has been assigned to your team. Please log into your portal to view and close the dispute.<br><br>" + 
							emailMessage +
							"<br><br>Kindly close this disputes <b>before 5 PM</b> on Deemed Accepted date, <b>else they will be automatically accepted by the bank.</b>"
							+ "<br><br>"
							+ "<p> For all chargeback cases which are accepted, including Good Faith, Pre-arbitration and Arbitration, a penalty of Rs.100 per day from the date of Transaction is payable. The final decision lies with the NPCI for all cases.</p>"
							+ "<br><b>If this case is rejected by you now, and subsequently accepted for any future dispute ( Pre Arb, Arb, Fraud or BO), then a penalty may be imposed by the authorities. The penalty amount or any other amount charged, is at discretion of the regulator and will be passed on to you.</b><br>"
							+ "<br>Please implement the 3 way recon API to reduce chargebacks."
							+ "In case of any issue, please contact the disputes team at support@tapits.in.<br>" + 
							"<br>" + 
							"Thank you, <br> Fingpay.";
					System.out.println("FULL message : "+ fullmessage);
				}
				else if(notificationType.equals(Constants.REMINDER_NOTIFICATION))
				{
					message.setSubject("Final Reminder Chargebacks|"+ new SimpleDateFormat("yyyy-MM-dd").format(new Date())+"|"+ cbList.get(0).getSuperMerchantName()+" |Fingpay |");
					fullmessage =  "Dear Sir/Ma'am," + 
							"<br><br> You have the following disputes pending for closure which need to be closed <b>before 5PM</b> today else they will be deemed accepted by the bank.<br><br>"
							+emailMessage 
							+ "<br><br>In case of any issue, please contact the disputes team at support@tapits.in.<br>" + 
							"<br>" + 
							"Thank you, <br> Fingpay.";
				}
				message.setContent(fullmessage, "text/html");

				System.out.println("message : " + message.toString());

				javax.mail.Transport.send(message);
			}
			else
			{
				log.error("Super Merchant iD is inactive: SO we stopped sending CB Notifications");
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured sending email:"+smId);
		}
	}

	public void sendDeemedAccptedEmailNotification(Integer smId, List<ChargeBackManagement> cbList)
	{
		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		ArrayList<String> ccMailList = null;
		SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
		try
		{
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();
			AggrSmContactDetails sm = aggrSmContactDetailsRepository.findByDistIdAndContactType(smId, Constants.CONTACT_TYPE_CB);

			if(sm != null)
			{
				int gmailOrAWS = Integer.parseInt(filesUtil.getProperty("awsemailnotification"));
				System.out.println("awsemailnotification : " + filesUtil.getProperty("awsemailnotification") );
				System.out.println("gmailOrAWS : " + gmailOrAWS);
				if(gmailOrAWS == 1)
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
					props.put("mail.smtp.socketFactory.port", "587");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "587");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication()
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("awsemailusername"),filesUtil.getProperty("awsemailpassword"));
						}
					});
					System.out.println("AWS session : " + session);
				}
				else
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "smtp.gmail.com");
					props.put("mail.smtp.socketFactory.port", "465");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "465");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("emailAddressForNotification"), filesUtil.getProperty("pinForNotification"));
						}
					});
					System.out.println("GMAIL session : " + session);
				}

				if(sm.getEmailId()!=null)
				{
					String[] mailIds = sm.getEmailId().split(",");//"vyshnavi@tapits.in".split(",");  //
					for(String emailId:mailIds)
					{
						try {
							InternetAddress emailAddr = new InternetAddress(emailId);
							emailAddr.validate();
							mailList.add(emailId);
						} catch (AddressException ex) {
							ex.printStackTrace();
						}
					}
				}
				mailList.add("disputes@tapits.in");
				bccMailList.add("bhaskar@tapits.in");
				bccMailList.add("vyshnavi@tapits.in");

				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");

				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				System.out.println("EMAILS DONE : " + session);
				String emailMessage = "";

				emailMessage += "<table style = 'border: 1px solid black;border-collapse: collapse; text-align : center;'>"
						+ "<thead style = 'border: 1px solid black;border-collapse: collapse; background-color :  #c80707; font-family : Times New Roman;  font-size: 15px;color: white'	>"
						+ "<tr><th style = 'border: 1px solid black;'>CB Date</th>"
						+ " <th style = 'border: 1px solid black;'>CB Type</th> "
						+ "<th style = 'border: 1px solid black;'>RRN</th>"
						+ "<th style = 'border: 1px solid black;'>Card No.</th> "
						+ "<th style = 'border: 1px solid black;'>Amount</th> "
						+ "<th style = 'border: 1px solid black;'>Txn Date</th>"
						+ "<th style = 'border: 1px solid black;'>Product</th>"
						+ "<th style = 'border: 1px solid black;'>Bank</th>"
						+ " <th style = 'border: 1px solid black;'>Transaction Log ID</th>"
						+ " <th style = 'border: 1px solid black;'>Merchant Login ID</th>"
						+ "<th style = 'border: 1px solid black;'>Merchant Name</th>"
						+ "<th style = 'border: 1px solid black;'>Deemed Accepted Date</th>"
						+ " </tr>"
						+ "</thead>"
						+ "<tbody>";

				for(ChargeBackManagement cb : cbList)
				{


					emailMessage += "<tr><th style = 'border: 1px solid black;'>"+cb.getCbDate()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getChargeBackType()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnNo()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getCardNo()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getAmount()+" </th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnDate()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getProductType()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getBank()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantTxnId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantLoginId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantName()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getTatDate()+"</th>"
							+ " </tr>";


				}
				emailMessage += " </tbody> </table>";

				
					Message message = new MimeMessage(session);

					message.setRecipients(Message.RecipientType.TO, address);
					message.setFrom(new InternetAddress("disputes@tapits.in"));
					message.setRecipients(Message.RecipientType.BCC, bccaddress);
					message.setRecipients(Message.RecipientType.CC, ccaddress);

					message.setSubject("Deemed Accepted Chargebacks |"+ cbList.get(0).getSuperMerchantName()+" |Fingpay -TAT DATE:"+format.format(new Date()));

					String fullmessage = "Dear Sir/Ma'am," + 
							"<br><br>" + 
							"You have not taken any action on these disputes and today was the last day for action.<b> Hence these disputes have been deemed accepted.</b><br><br>" + 
							emailMessage 
							+ "<br><br>"
							+ "<p> For all these disputes, a penalty of Rs.100 per day from the date of Transaction or as per the discretion of the regulatory authority will be payable.</p>"
							+ "<br>Please implement the 3 way recon API to reduce chargebacks."
							+ "In case of any issue, please contact the disputes team at support@tapits.in.<br>" + 
							"Thank you, <br> Fingpay.";
					System.out.println("FULL message : "+ fullmessage);
					message.setContent(fullmessage, "text/html");

					System.out.println("message : " + message.toString());

					javax.mail.Transport.send(message);

				
			}
			else
			{
				log.error("Super Merchant iD is inactive: SO we stopped sending CB Notifications");
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured sending email:", e);
		}
	}


	public void sendCBNotesEmailNotification(String oldStaus, String newStatus, String remarks, ChargeBackManagement cb)
	{

		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		ArrayList<String> ccMailList = null;
		try
		{
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();

			AggrSmContactDetails sm = aggrSmContactDetailsRepository.findByDistIdAndContactType(cb.getSuperMerchantId(), Constants.CONTACT_TYPE_CB);

			if(sm != null)
			{
				int gmailOrAWS = Integer.parseInt(filesUtil.getProperty("awsemailnotification"));
				System.out.println("awsemailnotification : " + filesUtil.getProperty("awsemailnotification") );
				System.out.println("gmailOrAWS : " + gmailOrAWS);
				if(gmailOrAWS == 1)
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
					props.put("mail.smtp.socketFactory.port", "587");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "587");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication()
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("awsemailusername"),filesUtil.getProperty("awsemailpassword"));
						}
					});
					System.out.println("AWS session : " + session);
				}
				else
				{
					Properties props = new Properties();
					props.put("mail.smtp.host", "smtp.gmail.com");
					props.put("mail.smtp.socketFactory.port", "465");
					props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
					props.put("mail.smtp.auth", "true");
					props.put("mail.smtp.port", "465");

					session = Session.getDefaultInstance(props,
							new javax.mail.Authenticator() {
						protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
						{
							return new javax.mail.PasswordAuthentication(filesUtil.getProperty("emailAddressForNotification"), filesUtil.getProperty("pinForNotification"));
						}
					});
					System.out.println("GMAIL session : " + session);
				}

				if(sm.getEmailId()!=null)
				{
					String[] mailIds = sm.getEmailId().split(",");//"vyshnavi@tapits.in".split(",");  //
					for(String emailId:mailIds)
					{
						try {
							InternetAddress emailAddr = new InternetAddress(emailId);
							emailAddr.validate();
							mailList.add(emailId);
						} catch (AddressException ex) {
							ex.printStackTrace();
						}
					}
				}

				//mailList.add("disputes@tapits.in");
				bccMailList.add("bhaskar@tapits.in");
				bccMailList.add("vyshnavi@tapits.in");

				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");

				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}

				System.out.println("EMAILS DONE : " + session);



				Message message = new MimeMessage(session);

				message.setRecipients(Message.RecipientType.TO, address);
				message.setFrom(new InternetAddress("disputes@tapits.in"));
				message.setRecipients(Message.RecipientType.BCC, bccaddress);
				message.setRecipients(Message.RecipientType.CC, ccaddress);

				message.setSubject("Status-Change -"+ cb.getChargeBackType()+"|RRN - "+cb.getTxnNo()+"|"+ cb.getCbDate()+"|"+cb.getProductType()+"|"+ cb.getSuperMerchantName()+" |Fingpay |");

				Multipart multipart = new MimeMultipart();

				MimeBodyPart messageBodyPart1 = new MimeBodyPart();

				messageBodyPart1.setText("Dear Sir/Ma'am,\r\n\r\nFingpay has change the status of this RRN "+cb.getTxnNo()+" from "+oldStaus+" to "+newStatus+" based on email received from your team. "
						+ "\r\n\r\n In case of any issue,  please contact the disputes team at support@tapits.in. \r\n\r\n Thank you, \r\n Fingpay.");


				multipart.addBodyPart(messageBodyPart1);

				message.setContent(multipart);

				System.out.println("message : " + message.toString());

				javax.mail.Transport.send(message);

			}
			else
			{
				log.error("Super Merchant iD is inactive: SO we stopped sending CB Notifications");
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured sending email:");
		}

	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		log.error("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}

	public ResponseEntity<GeneralResponse> successResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		log.info("Response Occured: status:"+ status+",Meg:"+errorMsg+",status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		log.info("hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ServiceConfig;
import com.apptmyz.fpaepsdb.repository.AadharPayDataRepository;
import com.apptmyz.fpaepsdb.repository.BalanceInquiryDataRepository;
import com.apptmyz.fpaepsdb.repository.BankDetailsMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.BranchMasterRepository;
import com.apptmyz.fpaepsdb.repository.CashWithdrawalDataRepository;
import com.apptmyz.fpaepsdb.repository.CityMasterRepository;
import com.apptmyz.fpaepsdb.repository.CompanyTypeMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.ErrorCodesRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ServiceConfigRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.ServiceConfigDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/enableMerchant")
public class EnableMerchantServicesController {
	
	@Autowired
	private MerchantMasterRepository merchantMasterRepository;

	@Autowired
	private HttpSession httpSession;

	@Autowired
	private StateMasterRepository stateMasterRepository;

	@Autowired
	private CityMasterRepository cityMasterRepository;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private CompanyTypeMasterDataRepository companyTypeMasterDataRepository;

	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	@Autowired
	private CashWithdrawalDataRepository cashWithdrawalDataRepository;
	
	@Autowired
	private AadharPayDataRepository aadharPayDataRepository;
	
	@Autowired
	private BalanceInquiryDataRepository balanceInquiryDataRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private BankDetailsMasterDataRepository bankDetailsMasterDataRepository;
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private ErrorCodesRepository errorCodesRepository;
	
	@Autowired
	private ServiceConfigRepository serviceConfigRepository;


	@GetMapping("/service/config/data")
	 public ResponseEntity<GeneralResponse> serviceConfigData(@RequestHeader("token") String token) {
		AuthenticateUserResponse authenticateUserResponse = null;
	 	try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		 
	 	FpCpAuditLogs auditLogs = null;
	 	
		  if (authenticateUserResponse.getActiveFlag() == 1) {
				  Iterable<ServiceConfig> serviceConfig = serviceConfigRepository.findAll();
				  if(serviceConfig!=null){
					  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESSFUL,
							  Constants.CORRECT_STATUS_CODE, serviceConfig), HttpStatus.OK);
				  }else{
					  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.NO_DATA_AVAILABLE, Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
				  }
		  } else {
			  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						"Invalid User", Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
		  }
	}
	
	@PostMapping("update/service/enable/disable")
	 public ResponseEntity<GeneralResponse> enableOrDisableService(HttpServletRequest request,@RequestHeader("token") String token,@RequestBody ServiceConfigDataModel serviceConfigDataModel) {
		AuthenticateUserResponse authenticateUserResponse = null;
	 	try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			  if(serviceConfigDataModel!=null){
				  String response = null;
				  ServiceConfig serviceConfig = serviceConfigRepository.findOne(serviceConfigDataModel.getServiceCode());
				  if(serviceConfig!=null){
					  serviceConfig.setActiveFlag(serviceConfigDataModel.getActiveFlag());
					  serviceConfig.setUpdatedTimestamp(new Date());
					  serviceConfig.setUpdatedByUsername(authenticateUserResponse.getUserName());
					  serviceConfigRepository.save(serviceConfig);
					  
					  FpCpAuditLogs auditLogs = null;
//						AUDIT LOGS
						auditLogs = new FpCpAuditLogs();

						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData(new Gson().toJson(serviceConfig));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);
						
					  if(serviceConfig.getActiveFlag()==1){
						  response = "Service : "+serviceConfig.getServiceName()+" was enabled by user : "+serviceConfig.getUpdatedByUsername()+" on "+serviceConfig.getUpdatedTimestamp();
					  }else{
						  response = "Service : "+serviceConfig.getServiceName()+" was disabled by user : "+serviceConfig.getUpdatedByUsername()+" on "+serviceConfig.getUpdatedTimestamp();
					  }
					  System.out.println(response);
					  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,response,
							  Constants.CORRECT_STATUS_CODE, serviceConfig), HttpStatus.OK);
				  }else{
					  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.NO_DATA_AVAILABLE, Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
				  }
			  }else{
				  return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERROR_INCOMPLETE_DATA, Constants.INVALID_STATUS_CODE, null), HttpStatus.OK);
			  }
		  } else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);

		  }
	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.RequestOtpDetails;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import org.apache.http.entity.ByteArrayEntity;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.log4j.Logger;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/OTP")
public class GenerateOTPController {
	
	@Autowired
	private JwtUtil jwtUtil;

	String checkOTP = "";
	private static final Logger oTPCalllog = Logger.getLogger("OTPCall");


	@GetMapping(path ="/generate")
	public ResponseEntity<GeneralResponse> generateOTP(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			oTPCalllog.info("generate/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
					
			try
			 {
				 RequestOtpDetails requestOtpDetails=new RequestOtpDetails();
				 requestOtpDetails.setFingpayTxnId(new SimpleDateFormat("yyyyMMddHHmmssss").format(new Date()));
				 requestOtpDetails.setProductName("fpcBankAuth");
				 requestOtpDetails.setCustomerName(authenticateUserResponse.getUserName());
					 requestOtpDetails.setPhoneNumber(authenticateUserResponse.getContactNo());
				 
				 requestOtpDetails.setRemarks("forapprovalrejectioninCP");
				 requestOtpDetails.setServiceType(2);
//				 service 2-otp,1-confirmMsg; channel 2-sms,1 - email, 3-both
				 requestOtpDetails.setChannelType(3);
					 requestOtpDetails.setEmailId(authenticateUserResponse.getEmailId());
				 
//				 requestOtpDetails.setMerchantLoginId(BCVerificationPhone.getMerchantLoginId());
//				 requestOtpDetails.setSuperMerchantId(BCVerificationPhone.getSuperMerchantId());
				 
				 String otpData=gson.toJson(requestOtpDetails);
				 System.out.println(otpData);
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpPost httpPost = new HttpPost("https://fpcorp.tapits.in/fpnotificationmanager/api/notification/request");
			 	 httpPost.setHeader("Content-type", "application/json");
				 httpPost.setHeader("User-Agent", "Mozilla/5.0");
				 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
				 HttpEntity entity = new ByteArrayEntity(otpData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseOtp = httpClient.execute(httpPost);
				 int responseCode = responseOtp.getStatusLine().getStatusCode();
			         String dataSent="";
				 String otp="";
				 System.out.println(responseCode);

				 
				 if(responseCode == 200)
				  {
					dataSent = new BasicResponseHandler().handleResponse(responseOtp);
					GeneralResponse otpDetails=gson.fromJson(dataSent,GeneralResponse.class);
					System.out.println(otpDetails);
					otp=String.valueOf(otpDetails.getData());
				  }
				 oTPCalllog.info("generate/ otp generation api response: "+responseCode+" otp "+otp);
				 System.out.println(otp);
				 
				 this.checkOTP = otp;
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,otp), HttpStatus.OK);
		                

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		

	}
	
//	@GetMapping(path ="/verify/{toVerifyOTP}")
//	public ResponseEntity<GeneralResponse> verifyOTP(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@PathVariable String toVerifyOTP)
//			throws UnsupportedEncodingException, ParseException {
//		AuthenticateUserResponse authenticateUserResponse = null;
//		Gson gson = new GsonBuilder().serializeNulls().create();
//		
//			try
//			 {
//				if(toVerifyOTP.equals((this.checkOTP))) {
//				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
//							Constants.REQUEST_COMPLETED), HttpStatus.OK);
//		               
//				}
//				else {
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.FAILED, null), HttpStatus.OK);
//				}
//
//			 }
//			 catch(Exception e)
//			 {
//				 e.printStackTrace();
//				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
//			 }		
//
//	}
	
	
	
	
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.repository.query.Param;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.BranchMaster;
import com.apptmyz.fpaepsdb.entity.CityMaster;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.StateMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.CityMasterRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.data.MerchantMasterModal;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/getMasters")
public class GetAllMastersController {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private CityMasterRepository cityMasterRepository;

	@Autowired
	private StateMasterRepository stateMasterRepository;

	@Autowired
	private MerchantMasterRepository merchantMasterRepository;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	/*
	 * public List<ParentMerchantMaster> listAll(String keyword) {
	 * 
	 * if (keyword != null) { return parentMerchantMasterRepository.search(keyword);
	 * } return parentMerchantMasterRepository.findAll(); }
	 * 
	 * @RequestMapping("/similar/{keyword}") public ResponseEntity<GeneralResponse>
	 * viewHomePage(Model model, @Param("keyword") String keyword) {
	 * 
	 * List<ParentMerchantMaster> listCompanies = listAll(keyword);
	 * model.addAttribute("listNames", listCompanies); model.addAttribute("keyword",
	 * keyword);
	 * 
	 * // return model; return new ResponseEntity<GeneralResponse>(new
	 * GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, model),
	 * HttpStatus.OK); }
	 */


	@GetMapping("/all/parents")
	public ResponseEntity<Iterable<ParentMerchantMaster>> PMasterList(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {

			e2.printStackTrace();
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;

		if (authenticateUserResponse.getActiveFlag() == 1) {

			//			AUDIT LOGS
			auditLogs = new FpCpAuditLogs();

			List<UserPermissionsModel> userPerms = authenticateUserResponse.getFpUserPermissions();

			auditLogs.setFeatureGrpId("ONBOARDING");
			auditLogs.setFeatureId("ONBOARDING_CRU");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
			//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("all parent master");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);

			return new ResponseEntity<Iterable<ParentMerchantMaster>>(parentMerchantMasterRepository.findAll(),
					HttpStatus.OK);

		}else {
			return new ResponseEntity<Iterable<ParentMerchantMaster>>(HttpStatus.NOT_FOUND);
		}

	}

	@GetMapping("/all/superMerchants")
	public ResponseEntity<Iterable<SuperMerchantMaster>> SMMasterList(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException{
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {

			e2.printStackTrace();
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;

		if (authenticateUserResponse.getActiveFlag() == 1) {

			//			AUDIT LOGS
			auditLogs = new FpCpAuditLogs();

			List<UserPermissionsModel> userPerms = authenticateUserResponse.getFpUserPermissions();

			auditLogs.setFeatureGrpId("ONBOARDING");
			auditLogs.setFeatureId("ONBOARDING_CRU");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
			//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("all super merchant master");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);

			return new ResponseEntity<Iterable<SuperMerchantMaster>>(superMerchantMasterRepository.findAll(),
					HttpStatus.OK);
		}
		else {
			return new ResponseEntity<Iterable<SuperMerchantMaster>>(HttpStatus.NOT_FOUND);
		}

	}

	@GetMapping("all/states")
	public ResponseEntity<Iterable<StateMaster>> getAllStates(HttpServletRequest request, HttpSession httpSession ,@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<Iterable<StateMaster>>( HttpStatus.BAD_REQUEST);
		}
		System.out.println("state master entered");
		return new ResponseEntity<Iterable<StateMaster>>(stateMasterRepository.findByActiveFlagOrderBySortFlag(1), HttpStatus.OK);
	}


	@GetMapping("/all/cities")
	public ResponseEntity<Iterable<CityMaster>> getAllCities(HttpServletRequest request, HttpSession httpSession ,@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {

			e2.printStackTrace();
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<Iterable<CityMaster>>( HttpStatus.BAD_REQUEST);
		}
		return new ResponseEntity<Iterable<CityMaster>>(cityMasterRepository.findByActiveFlag(1), HttpStatus.OK);
	}

	@GetMapping("/merchants/all/parent/{parentId}")
	public ResponseEntity<GeneralResponse> getMerchantDetailsByAggregatorId(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable Integer parentId)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		//			 System.out.println("token "+token);
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (MalformedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (SignatureException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (IllegalArgumentException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e.printStackTrace();
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();


		if (generalResponse == null) {
			Iterable<ParentMerchantMaster> parentList = parentMerchantMasterRepository.findAll();
			Map<Integer, ParentMerchantMaster> parentMap = new HashMap<Integer, ParentMerchantMaster>();
			for (ParentMerchantMaster s : parentList) {
				parentMap.put(s.getId(), s);
			}
			List<MerchantMasterModal> list1 = new ArrayList<MerchantMasterModal>();
			// System.out.println("usertype"+authenticateUserResponse.getUserId());
			if (authenticateUserResponse.getActiveFlag() == 1) {
				List<MerchantMaster> list = new ArrayList<>();
				List<SuperMerchantMaster> superMerchantMaster = superMerchantMasterRepository.findByParentId(parentId);
				if(superMerchantMaster!=null) {
					for(SuperMerchantMaster s : superMerchantMaster) {
						list = merchantMasterRepository.findBySuperMerchantMasterId(s.getId());


						MerchantMasterModal data = null;
						for (MerchantMaster o : list) {
							data = new MerchantMasterModal();
							data.setId(o.getId() == null ? 0 : o.getId());
							data.setMerchantLoginId(o.getMerchantLoginId());
							data.setMerchantName(o.getMerchantName());
							data.setMerchantLogo(o.getMerchantLogo());
							data.setMerchantAddress(o.getMerchantAddress());
							data.setMerchantPhoneNumber(o.getMerchantPhoneNumber());
							data.setEmailId(o.getEmailId());
							data.setTimestamp(o.getTimestamp());
							data.setCompanyLegalName(o.getCompanyLegalName());
							data.setCompanyMarketingName(o.getCompanyMarketingName());
							data.setGstInNumber(o.getGstInNumber());
							data.setAadhaarNumber(o.getAadhaarNumber());
							data.setCompanyBankAccountNumber(o.getCompanyBankAccountNumber());
							data.setCompanyIfscCode(o.getCompanyIfscCode());
							data.setNoOfTerminals(o.getNoOfTerminals());
							data.setCompanyBankName(o.getCompanyBankName());
							data.setUserPan(o.getUserPan());
							data.setCancelledChequeImages(o.getCancelledChequeImages());
							data.setEkycDocuments(o.getEkycDocuments());
							data.setVerifiedBy(o.getVerifiedBy());
							data.setApprovedStatus(o.getApprovedStatus() == null ? 0 : o.getApprovedStatus());
							data.setAutomaticBankVerificationDetails(o.getAutomaticBankVerificationDetails());
							data.setAutomaticPanVerificationDetails(o.getAutomaticPanVerificationDetails());
							data.setAutomaticAadhaarVerification(o.getAutomaticAadhaarVerificationDetails());
							data.setAadharPayEnable(o.getAadharPayEnable() == null ? 0 : o.getAadharPayEnable());
							data.setUpiEnable(o.getUpiEnable() == null ? 0 : o.getUpiEnable());
							data.setUpiQrEnable(o.getUpiQrEnable() == null ? 0 : o.getUpiQrEnable());
							data.setCashWithdrawEnable(o.getCashWithdrawEnable() == null ? 0 : o.getCashWithdrawEnable());
							data.setCashDepositEnable(o.getCashDepositEnable() == null ? 0 : o.getCashDepositEnable());
							data.setFundTransferEnable(o.getFundTransferEnable() == null ? 0 : o.getFundTransferEnable());
							data.setBalanceEnquiryEnable(o.getBalanceEnquiryEnable() == null ? 0 : o.getBalanceEnquiryEnable());
							data.setMinistatmentEnable(o.getMinistatmentEnable() == null ? 0 : o.getMinistatmentEnable());
							data.setActiveFlag(o.getActiveFlag() == null ? 0 : o.getActiveFlag());
							data.setSelfSettlementFlag(o.getSelfSettlementFlag() == null ? 0 : o.getSelfSettlementFlag());
							data.setSuperMerchantId(
									o.getSuperMerchantMaster() == null ? 0 : o.getSuperMerchantMaster().getId());
							data.setSuperMerchantName(o.getSuperMerchantMaster().getSuperMerchantName());
							data.setShopAndPanImage(o.getShopAndPanImage());
							data.setAutomaticBankVerification(
									o.getAutomaticBankVerification() == null ? 0 : o.getAutomaticBankVerification());
							data.setAutomaticPanVerification(
									o.getAutomaticPanVerification() == null ? 0 : o.getAutomaticPanVerification());
							data.setMerchantLoginPin(o.getMerchantLoginPin());
							data.setParentId(o.getSuperMerchantMaster().getParentId() == null ? 0
									: o.getSuperMerchantMaster().getParentId());
							if (o.getSuperMerchantMaster().getParentId() != null
									&& o.getSuperMerchantMaster().getParentId() != 0) {
								if (parentMap.containsKey(o.getSuperMerchantMaster().getParentId())) {
									data.setParentMerchantName(
											parentMap.get(o.getSuperMerchantMaster().getParentId()).getParentMerchantName());
								}
							}
							// data.setParentMerchantName((String) o[41]);
							data.setBranchId(o.getBranchMaster() == null ? 0 : o.getBranchMaster().getId());
							data.setBranchName(o.getBranchMaster() == null ? null : o.getBranchMaster().getBranchName());
							data.setCollectCashEnable(o.getCollectCashEnable() == null ? 0 : o.getCollectCashEnable());
							data.setDemandSheetEnable(o.getDemandSheetEnable() == null ? 0 : o.getDemandSheetEnable());
							data.setDropCashEnable(o.getDropCashEnable() == null ? 0 : o.getDropCashEnable());
							data.setCreatedTimestamp(o.getCreatedTimestamp());
							data.setCreatedByUsername(o.getCreatedByUsername());
							data.setEditedTimestamp(o.getEditedTimestamp());
							data.setEditedByUsername(o.getEditedByUsername());
							data.setUserType(o.getUserType());
							data.setStateId(o.getStateMaster() == null ? 0 : o.getStateMaster().getStateId());

							data.setPgEnable(o.getPgEnable() == null ? 0 : o.getPgEnable());
							data.setMposEnable(o.getMposEnable() == null ? 0 : o.getMposEnable());
							data.setMatmEnable(o.getMicroAtmEnable() == null ? 0 : o.getMicroAtmEnable());
							data.setTwoFaEnable(o.getTwoFaEnable() == null ? 0 : o.getTwoFaEnable());
							
							data.setEkycStatusFlag(o.getEkycStatusFlag());
							data.setTerminalId(o.getTerminalId());
							data.setTerminalIdFlag(o.getTerminalIdFlag());
							data.setKycType(o.getKycType());
							data.setEkycState(o.getEkycState());
							data.setEkycCity(o.getEkycCity());
							data.setEkycAddressLine1(o.getEkycAddressLine1());
							data.setEkycAddressLine2(o.getEkycAddressLine2());
							
							data.setOfflineKycStatusFlag(o.getOfflineKycStatusFlag());
							data.setOfflineKycTerminalId(o.getOfflineKycTerminalId());
							data.setOfflineKycTerminalIdFlag(o.getOfflineKycTerminalIdFlag());
							
							data.setAadharPayEkycStatusFlag(o.getAadharPayEkycStatusFlag());
							data.setAadharPayTerminalId(o.getAadharPayTerminalId());
							data.setAadharPayTerminalIdFlag(o.getAadharPayTerminalIdFlag());
							
							data.setEkycPanNumber(data.getEkycPanNumber());
							data.setDrivingLicense(data.getDrivingLicense());
							data.setVoterId(data.getVoterId());
							
							data.setSwitch1(o.getSwitch1());
							data.setSwitch2(o.getSwitch2());
							data.setSwitch3(o.getSwitch3());
							
							data.setCwSwitch(o.getCwSwitch());
							data.setApSwitch(o.getApSwitch());
							data.setMsSwitch(o.getMsSwitch());
							
							list1.add(data);
						}
					}
					//						AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU_SW");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("all merchant master with parent id "+ parentId);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, list1), HttpStatus.OK);
				}else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, "super merchant doesnt exist", list1), HttpStatus.OK);
				}

			}else {
				generalResponse = new ResponseEntity<GeneralResponse>(HttpStatus.NOT_FOUND);
			}
		} 
		return generalResponse;
	}

	@GetMapping(path ="/all/serviceTypes")
	public ResponseEntity<GeneralResponse> getServiceTypes(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		String ip = commonTasks.getIpAddress(request);



		try
		{

			HttpClient httpClient = new DefaultHttpClient();

			//HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base/retrieve/servicetypes");
			HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/servicetypes");
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);


			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";

			//				     commonTasks.getFullResponse(responseData);

			System.out.println(responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse Rec=gson.fromJson(listData,GeneralResponse.class);
				list = Rec.getData();

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}      
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}		

	}
	@GetMapping(path ="/all/narrations")
	public ResponseEntity<GeneralResponse> getNarrations(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		String ip = commonTasks.getIpAddress(request);



		try
		{

			HttpClient httpClient = new DefaultHttpClient();

			//HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base/retrieve/all/narrations");
			HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/all/narrations");
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);


			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";

			//				     commonTasks.getFullResponse(responseData);

			System.out.println(responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse Rec=gson.fromJson(listData,GeneralResponse.class);
				list = Rec.getData();




				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}      
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}		

	}
	@GetMapping(path ="/all/settl/master/{settlementMasterType}")
	public ResponseEntity<GeneralResponse> getSettlMasters(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String settlementMasterType)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		String ip = commonTasks.getIpAddress(request);


		try
		{

			HttpClient httpClient = new DefaultHttpClient();

			//HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base//retrieve/merchant/parents/supermerchants/"+settlementMasterType);
			HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/merchant/parents/supermerchants/"+settlementMasterType);
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);


			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";

			//				     commonTasks.getFullResponse(responseData);

			System.out.println(responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse Rec=gson.fromJson(listData,GeneralResponse.class);
				list = Rec.getData();




				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}      
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}		

	}
	
	@GetMapping(path ="/all/settl/master/businessteam/{settlementMasterType}")
	public ResponseEntity<GeneralResponse> getSettlMastersForBusiness(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String settlementMasterType)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		String ip = commonTasks.getIpAddress(request);


		try
		{

			HttpClient httpClient = new DefaultHttpClient();

			//HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base//retrieve/merchant/parents/supermerchants/"+settlementMasterType);
			HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/business/merchant/parents/supermerchants/"+settlementMasterType);
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);


			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";

			//				     commonTasks.getFullResponse(responseData);

			System.out.println(responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse Rec=gson.fromJson(listData,GeneralResponse.class);
				list = Rec.getData();




				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}      
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}		

	}

	@GetMapping(path ="/all/bankswitches")
	public ResponseEntity<GeneralResponse> getAllBankSwitches(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}


		String ip = commonTasks.getIpAddress(request);	
		try
		{

			HttpClient httpClient = new DefaultHttpClient();

			//HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base/retrieve/all/narrations");
			HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/bankswitches");
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);


			HttpResponse responseData = httpClient.execute(httpGet);
			int responseCode = responseData.getStatusLine().getStatusCode();
			String listData ="";

			//				     commonTasks.getFullResponse(responseData);

			System.out.println(responseCode);
			System.out.println(responseData);

			Object list = null;
			if(responseCode == 200)
			{
				listData = new BasicResponseHandler().handleResponse(responseData);
				GeneralResponse Rec=gson.fromJson(listData,GeneralResponse.class);
				list = Rec.getData();




				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
			}      
			else
			{
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

			}

		}
		catch(Exception e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
		}		

	}

	@GetMapping("/merchants/all/supermerchant/{smId}")
	public ResponseEntity<GeneralResponse> getMerchantDetailsByDistributorId(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable Integer smId)
	{

		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		//			 System.out.println("token "+token);
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (MalformedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (SignatureException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (IllegalArgumentException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e.printStackTrace();
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		List<MerchantMasterModal> list1 = new ArrayList<MerchantMasterModal>();

		if (generalResponse == null) {
			Iterable<ParentMerchantMaster> parentList = parentMerchantMasterRepository.findAll();
			Map<Integer, ParentMerchantMaster> parentMap = new HashMap<Integer, ParentMerchantMaster>();
			for (ParentMerchantMaster s : parentList) {
				parentMap.put(s.getId(), s);
			}
			if (authenticateUserResponse.getActiveFlag() == 1) {
				List<MerchantMaster> list = new ArrayList<>();
				list = merchantMasterRepository.findBySuperMerchantMasterId(smId);


				MerchantMasterModal data = null;
				for (MerchantMaster o : list) {
					data = new MerchantMasterModal();
					data.setId(o.getId() == null ? 0 : o.getId());
					data.setMerchantLoginId(o.getMerchantLoginId());
					data.setMerchantName(o.getMerchantName());
					data.setMerchantLogo(o.getMerchantLogo());
					data.setMerchantAddress(o.getMerchantAddress());
					data.setMerchantPhoneNumber(o.getMerchantPhoneNumber());
					data.setEmailId(o.getEmailId());
					data.setTimestamp(o.getTimestamp());
					data.setCompanyLegalName(o.getCompanyLegalName());
					data.setCompanyMarketingName(o.getCompanyMarketingName());
					data.setGstInNumber(o.getGstInNumber());
					data.setAadhaarNumber(o.getAadhaarNumber());
					data.setCompanyBankAccountNumber(o.getCompanyBankAccountNumber());
					data.setCompanyIfscCode(o.getCompanyIfscCode());
					data.setNoOfTerminals(o.getNoOfTerminals());
					data.setCompanyBankName(o.getCompanyBankName());
					data.setUserPan(o.getUserPan());
					data.setCancelledChequeImages(o.getCancelledChequeImages());
					data.setEkycDocuments(o.getEkycDocuments());
					data.setVerifiedBy(o.getVerifiedBy());
					data.setApprovedStatus(o.getApprovedStatus() == null ? 0 : o.getApprovedStatus());
					data.setAutomaticBankVerificationDetails(o.getAutomaticBankVerificationDetails());
					data.setAutomaticPanVerificationDetails(o.getAutomaticPanVerificationDetails());
					data.setAutomaticAadhaarVerification(o.getAutomaticAadhaarVerificationDetails());
					data.setAadharPayEnable(o.getAadharPayEnable() == null ? 0 : o.getAadharPayEnable());
					data.setUpiEnable(o.getUpiEnable() == null ? 0 : o.getUpiEnable());
					data.setUpiQrEnable(o.getUpiQrEnable() == null ? 0 : o.getUpiQrEnable());
					data.setCashWithdrawEnable(o.getCashWithdrawEnable() == null ? 0 : o.getCashWithdrawEnable());
					data.setCashDepositEnable(o.getCashDepositEnable() == null ? 0 : o.getCashDepositEnable());
					data.setFundTransferEnable(o.getFundTransferEnable() == null ? 0 : o.getFundTransferEnable());
					data.setBalanceEnquiryEnable(o.getBalanceEnquiryEnable() == null ? 0 : o.getBalanceEnquiryEnable());
					data.setMinistatmentEnable(o.getMinistatmentEnable() == null ? 0 : o.getMinistatmentEnable());
					data.setActiveFlag(o.getActiveFlag() == null ? 0 : o.getActiveFlag());
					data.setSelfSettlementFlag(o.getSelfSettlementFlag() == null ? 0 : o.getSelfSettlementFlag());
					data.setSuperMerchantId(
							o.getSuperMerchantMaster() == null ? 0 : o.getSuperMerchantMaster().getId());
					data.setSuperMerchantName(o.getSuperMerchantMaster().getSuperMerchantName());
					data.setShopAndPanImage(o.getShopAndPanImage());
					data.setAutomaticBankVerification(
							o.getAutomaticBankVerification() == null ? 0 : o.getAutomaticBankVerification());
					data.setAutomaticPanVerification(
							o.getAutomaticPanVerification() == null ? 0 : o.getAutomaticPanVerification());
					data.setMerchantLoginPin(o.getMerchantLoginPin());
					data.setParentId(o.getSuperMerchantMaster().getParentId() == null ? 0
							: o.getSuperMerchantMaster().getParentId());
					if (o.getSuperMerchantMaster().getParentId() != null
							&& o.getSuperMerchantMaster().getParentId() != 0) {
						if (parentMap.containsKey(o.getSuperMerchantMaster().getParentId())) {
							data.setParentMerchantName(
									parentMap.get(o.getSuperMerchantMaster().getParentId()).getParentMerchantName());
						}
					}
					// data.setParentMerchantName((String) o[41]);
					data.setBranchId(o.getBranchMaster() == null ? 0 : o.getBranchMaster().getId());
					data.setBranchName(o.getBranchMaster() == null ? null : o.getBranchMaster().getBranchName());
					data.setCollectCashEnable(o.getCollectCashEnable() == null ? 0 : o.getCollectCashEnable());
					data.setDemandSheetEnable(o.getDemandSheetEnable() == null ? 0 : o.getDemandSheetEnable());
					data.setDropCashEnable(o.getDropCashEnable() == null ? 0 : o.getDropCashEnable());
					data.setCreatedTimestamp(o.getCreatedTimestamp());
					data.setCreatedByUsername(o.getCreatedByUsername());
					data.setEditedTimestamp(o.getEditedTimestamp());
					data.setEditedByUsername(o.getEditedByUsername());
					data.setUserType(o.getUserType());
					data.setStateId(o.getStateMaster() == null ? 0 : o.getStateMaster().getStateId());

					data.setPgEnable(o.getPgEnable() == null ? 0 : o.getPgEnable());
					data.setMposEnable(o.getMposEnable() == null ? 0 : o.getMposEnable());
					data.setMatmEnable(o.getMicroAtmEnable() == null ? 0 : o.getMicroAtmEnable());
					data.setTwoFaEnable(o.getTwoFaEnable() == null ? 0 : o.getTwoFaEnable());
					
					data.setEkycStatusFlag(o.getEkycStatusFlag());
					data.setTerminalId(o.getTerminalId());
					data.setTerminalIdFlag(o.getTerminalIdFlag());
					data.setKycType(o.getKycType());
					data.setEkycState(o.getEkycState());
					data.setEkycCity(o.getEkycCity());
					data.setEkycAddressLine1(o.getEkycAddressLine1());
					data.setEkycAddressLine2(o.getEkycAddressLine2());
					
					data.setOfflineKycStatusFlag(o.getOfflineKycStatusFlag());
					data.setOfflineKycTerminalId(o.getOfflineKycTerminalId());
					data.setOfflineKycTerminalIdFlag(o.getOfflineKycTerminalIdFlag());
					
					data.setAadharPayEkycStatusFlag(o.getAadharPayEkycStatusFlag());
					data.setAadharPayTerminalId(o.getAadharPayTerminalId());
					data.setAadharPayTerminalIdFlag(o.getAadharPayTerminalIdFlag());
					
					data.setEkycPanNumber(data.getEkycPanNumber());
					data.setDrivingLicense(data.getDrivingLicense());
					data.setVoterId(data.getVoterId());
					
					data.setSwitch1(o.getSwitch1());
					data.setSwitch2(o.getSwitch2());
					data.setSwitch3(o.getSwitch3());
					
					data.setCwSwitch(o.getCwSwitch());
					data.setApSwitch(o.getApSwitch());
					data.setMsSwitch(o.getMsSwitch());
					
					list1.add(data);
				}

				//						AUDIT LOGS
				auditLogs = new FpCpAuditLogs();

				auditLogs.setFeatureGrpId("ONBOARDING");
				auditLogs.setFeatureId("ONBOARDING_CRU_SW");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
				//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				auditLogs.setOperation(1);
				auditLogs.setViewData("all merchant master with parent id "+ smId);
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, list1), HttpStatus.OK);
			}else {
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, "super merchant doesnt exist", list1), HttpStatus.OK);
			}

		}else {
			generalResponse = new ResponseEntity<GeneralResponse>(HttpStatus.NOT_FOUND);
		} 
		return generalResponse;

	}

	@GetMapping("/merchants/all/parent/{parentId}/{merchantLoginId}")
	public ResponseEntity<GeneralResponse> getMerchantDetailsByAggregatorAndMerchantLoginId(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable Integer parentId, @PathVariable String merchantLoginId)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		//			 System.out.println("token "+token);
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (MalformedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (SignatureException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (IllegalArgumentException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e.printStackTrace();
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();


		if (generalResponse == null) {

			ParentMerchantMaster parentM = parentMerchantMasterRepository.findOne(parentId);
			List<MerchantMasterModal> list1 = new ArrayList<MerchantMasterModal>();
			// System.out.println("usertype"+authenticateUserResponse.getUserId());
			if (authenticateUserResponse.getActiveFlag() == 1) {
				List<MerchantMaster> list = new ArrayList<>();
				List<SuperMerchantMaster> superMerchantMaster = superMerchantMasterRepository.findByParentId(parentId);
				if(superMerchantMaster!=null) {
					for(SuperMerchantMaster s : superMerchantMaster) {
						list = merchantMasterRepository.findByMerchantLoginIdAndSuperMerchantMasterId(merchantLoginId,s.getId());


						MerchantMasterModal data = null;
						for (MerchantMaster o : list) {
							data = new MerchantMasterModal();
							data.setId(o.getId() == null ? 0 : o.getId());
							data.setMerchantLoginId(o.getMerchantLoginId());
							data.setMerchantName(o.getMerchantName());
							data.setMerchantLogo(o.getMerchantLogo());
							data.setMerchantAddress(o.getMerchantAddress());
							data.setMerchantPhoneNumber(o.getMerchantPhoneNumber());
							data.setEmailId(o.getEmailId());
							data.setTimestamp(o.getTimestamp());
							data.setCompanyLegalName(o.getCompanyLegalName());
							data.setCompanyMarketingName(o.getCompanyMarketingName());
							data.setGstInNumber(o.getGstInNumber());
							data.setAadhaarNumber(o.getAadhaarNumber());
							data.setCompanyBankAccountNumber(o.getCompanyBankAccountNumber());
							data.setCompanyIfscCode(o.getCompanyIfscCode());
							data.setNoOfTerminals(o.getNoOfTerminals());
							data.setCompanyBankName(o.getCompanyBankName());
							data.setUserPan(o.getUserPan());
							data.setCancelledChequeImages(o.getCancelledChequeImages());
							data.setEkycDocuments(o.getEkycDocuments());
							data.setVerifiedBy(o.getVerifiedBy());
							data.setApprovedStatus(o.getApprovedStatus() == null ? 0 : o.getApprovedStatus());
							data.setAutomaticBankVerificationDetails(o.getAutomaticBankVerificationDetails());
							data.setAutomaticPanVerificationDetails(o.getAutomaticPanVerificationDetails());
							data.setAutomaticAadhaarVerification(o.getAutomaticAadhaarVerificationDetails());
							data.setAadharPayEnable(o.getAadharPayEnable() == null ? 0 : o.getAadharPayEnable());
							data.setUpiEnable(o.getUpiEnable() == null ? 0 : o.getUpiEnable());
							data.setUpiQrEnable(o.getUpiQrEnable() == null ? 0 : o.getUpiQrEnable());
							data.setCashWithdrawEnable(o.getCashWithdrawEnable() == null ? 0 : o.getCashWithdrawEnable());
							data.setCashDepositEnable(o.getCashDepositEnable() == null ? 0 : o.getCashDepositEnable());
							data.setFundTransferEnable(o.getFundTransferEnable() == null ? 0 : o.getFundTransferEnable());
							data.setBalanceEnquiryEnable(o.getBalanceEnquiryEnable() == null ? 0 : o.getBalanceEnquiryEnable());
							data.setMinistatmentEnable(o.getMinistatmentEnable() == null ? 0 : o.getMinistatmentEnable());
							data.setActiveFlag(o.getActiveFlag() == null ? 0 : o.getActiveFlag());
							data.setSelfSettlementFlag(o.getSelfSettlementFlag() == null ? 0 : o.getSelfSettlementFlag());
							data.setSuperMerchantId(
									o.getSuperMerchantMaster() == null ? 0 : o.getSuperMerchantMaster().getId());
							data.setSuperMerchantName(o.getSuperMerchantMaster().getSuperMerchantName());
							data.setShopAndPanImage(o.getShopAndPanImage());
							data.setAutomaticBankVerification(
									o.getAutomaticBankVerification() == null ? 0 : o.getAutomaticBankVerification());
							data.setAutomaticPanVerification(
									o.getAutomaticPanVerification() == null ? 0 : o.getAutomaticPanVerification());
							data.setMerchantLoginPin(o.getMerchantLoginPin());
							data.setParentId(o.getSuperMerchantMaster().getParentId() == null ? 0
									: o.getSuperMerchantMaster().getParentId());
							if (o.getSuperMerchantMaster().getParentId() != null
									&& o.getSuperMerchantMaster().getParentId() != 0) {
								data.setParentMerchantName(parentM.getParentMerchantName());
							}
							// data.setParentMerchantName((String) o[41]);
							data.setBranchId(o.getBranchMaster() == null ? 0 : o.getBranchMaster().getId());
							data.setBranchName(o.getBranchMaster() == null ? null : o.getBranchMaster().getBranchName());
							data.setCollectCashEnable(o.getCollectCashEnable() == null ? 0 : o.getCollectCashEnable());
							data.setDemandSheetEnable(o.getDemandSheetEnable() == null ? 0 : o.getDemandSheetEnable());
							data.setDropCashEnable(o.getDropCashEnable() == null ? 0 : o.getDropCashEnable());
							data.setCreatedTimestamp(o.getCreatedTimestamp());
							data.setCreatedByUsername(o.getCreatedByUsername());
							data.setEditedTimestamp(o.getEditedTimestamp());
							data.setEditedByUsername(o.getEditedByUsername());
							data.setUserType(o.getUserType());
							data.setStateId(o.getStateMaster() == null ? 0 : o.getStateMaster().getStateId());

							data.setPgEnable(o.getPgEnable() == null ? 0 : o.getPgEnable());
							data.setMposEnable(o.getMposEnable() == null ? 0 : o.getMposEnable());
							data.setMatmEnable(o.getMicroAtmEnable() == null ? 0 : o.getMicroAtmEnable());
							data.setTwoFaEnable(o.getTwoFaEnable() == null ? 0 : o.getTwoFaEnable());
							
							data.setEkycStatusFlag(o.getEkycStatusFlag());
							data.setTerminalId(o.getTerminalId());
							data.setTerminalIdFlag(o.getTerminalIdFlag());
							data.setKycType(o.getKycType());
							data.setEkycState(o.getEkycState());
							data.setEkycCity(o.getEkycCity());
							data.setEkycAddressLine1(o.getEkycAddressLine1());
							data.setEkycAddressLine2(o.getEkycAddressLine2());
							
							data.setOfflineKycStatusFlag(o.getOfflineKycStatusFlag());
							data.setOfflineKycTerminalId(o.getOfflineKycTerminalId());
							data.setOfflineKycTerminalIdFlag(o.getOfflineKycTerminalIdFlag());
							
							data.setAadharPayEkycStatusFlag(o.getAadharPayEkycStatusFlag());
							data.setAadharPayTerminalId(o.getAadharPayTerminalId());
							data.setAadharPayTerminalIdFlag(o.getAadharPayTerminalIdFlag());
							
							data.setEkycPanNumber(data.getEkycPanNumber());
							data.setDrivingLicense(data.getDrivingLicense());
							data.setVoterId(data.getVoterId());
							
							data.setSwitch1(o.getSwitch1());
							data.setSwitch2(o.getSwitch2());
							data.setSwitch3(o.getSwitch3());
							
							data.setCwSwitch(o.getCwSwitch());
							data.setApSwitch(o.getApSwitch());
							data.setMsSwitch(o.getMsSwitch());
							
							list1.add(data);
						}
					}
					//						AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU_SW");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("merchant master with parent id "+ parentId);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, list1), HttpStatus.OK);
				}else {
					generalResponse = new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, "Merchant doesnt exist", list1), HttpStatus.OK);
				}

			}else {
				generalResponse = new ResponseEntity<GeneralResponse>(HttpStatus.NOT_FOUND);
			}
		} 
		return generalResponse;
	}


	@GetMapping("/merchants/all/supermerchant/{smId}/{merchantLoginId}")
	public ResponseEntity<GeneralResponse> getMerchantDetailsByDistributorId(HttpServletRequest request,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable Integer smId, @PathVariable String  merchantLoginId)
	{

		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		//			 System.out.println("token "+token);
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (MalformedJwtException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (SignatureException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (IllegalArgumentException e2) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e2.printStackTrace();
		} catch (UnsupportedEncodingException e) {
			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.BAD_REQUEST);
			e.printStackTrace();
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		List<MerchantMasterModal> list1 = new ArrayList<MerchantMasterModal>();
		ParentMerchantMaster pm = null;
		if (generalResponse == null) {
			SuperMerchantMaster sm = superMerchantMasterRepository.findOne(smId);
			if(sm.getParentId() != 0)
				pm = parentMerchantMasterRepository.findOne(sm.getParentId());
			if (authenticateUserResponse.getActiveFlag() == 1) {
				List<MerchantMaster> list = new ArrayList<>();
				list = merchantMasterRepository.findByMerchantLoginIdAndSuperMerchantMasterId(merchantLoginId,smId);


				MerchantMasterModal data = null;
				for (MerchantMaster o : list) {
					data = new MerchantMasterModal();
					data.setId(o.getId() == null ? 0 : o.getId());
					data.setMerchantLoginId(o.getMerchantLoginId());
					data.setMerchantName(o.getMerchantName());
					data.setMerchantLogo(o.getMerchantLogo());
					data.setMerchantAddress(o.getMerchantAddress());
					data.setMerchantPhoneNumber(o.getMerchantPhoneNumber());
					data.setEmailId(o.getEmailId());
					data.setTimestamp(o.getTimestamp());
					data.setCompanyLegalName(o.getCompanyLegalName());
					data.setCompanyMarketingName(o.getCompanyMarketingName());
					data.setGstInNumber(o.getGstInNumber());
					data.setAadhaarNumber(o.getAadhaarNumber());
					data.setCompanyBankAccountNumber(o.getCompanyBankAccountNumber());
					data.setCompanyIfscCode(o.getCompanyIfscCode());
					data.setNoOfTerminals(o.getNoOfTerminals());
					data.setCompanyBankName(o.getCompanyBankName());
					data.setUserPan(o.getUserPan());
					data.setCancelledChequeImages(o.getCancelledChequeImages());
					data.setEkycDocuments(o.getEkycDocuments());
					data.setVerifiedBy(o.getVerifiedBy());
					data.setApprovedStatus(o.getApprovedStatus() == null ? 0 : o.getApprovedStatus());
					data.setAutomaticBankVerificationDetails(o.getAutomaticBankVerificationDetails());
					data.setAutomaticPanVerificationDetails(o.getAutomaticPanVerificationDetails());
					data.setAutomaticAadhaarVerification(o.getAutomaticAadhaarVerificationDetails());
					data.setAadharPayEnable(o.getAadharPayEnable() == null ? 0 : o.getAadharPayEnable());
					data.setUpiEnable(o.getUpiEnable() == null ? 0 : o.getUpiEnable());
					data.setUpiQrEnable(o.getUpiQrEnable() == null ? 0 : o.getUpiQrEnable());
					data.setCashWithdrawEnable(o.getCashWithdrawEnable() == null ? 0 : o.getCashWithdrawEnable());
					data.setCashDepositEnable(o.getCashDepositEnable() == null ? 0 : o.getCashDepositEnable());
					data.setFundTransferEnable(o.getFundTransferEnable() == null ? 0 : o.getFundTransferEnable());
					data.setBalanceEnquiryEnable(o.getBalanceEnquiryEnable() == null ? 0 : o.getBalanceEnquiryEnable());
					data.setMinistatmentEnable(o.getMinistatmentEnable() == null ? 0 : o.getMinistatmentEnable());
					data.setActiveFlag(o.getActiveFlag() == null ? 0 : o.getActiveFlag());
					data.setSelfSettlementFlag(o.getSelfSettlementFlag() == null ? 0 : o.getSelfSettlementFlag());
					data.setSuperMerchantId(
							o.getSuperMerchantMaster() == null ? 0 : o.getSuperMerchantMaster().getId());
					data.setSuperMerchantName(o.getSuperMerchantMaster().getSuperMerchantName());
					data.setShopAndPanImage(o.getShopAndPanImage());
					data.setAutomaticBankVerification(
							o.getAutomaticBankVerification() == null ? 0 : o.getAutomaticBankVerification());
					data.setAutomaticPanVerification(
							o.getAutomaticPanVerification() == null ? 0 : o.getAutomaticPanVerification());
					data.setMerchantLoginPin(o.getMerchantLoginPin());
					data.setParentId(o.getSuperMerchantMaster().getParentId() == null ? 0
							: o.getSuperMerchantMaster().getParentId());
					if (o.getSuperMerchantMaster().getParentId() != null && o.getSuperMerchantMaster().getParentId() != 0 && pm != null) {
						data.setParentMerchantName(pm.getParentMerchantName());

					}
					// data.setParentMerchantName((String) o[41]);
					data.setBranchId(o.getBranchMaster() == null ? 0 : o.getBranchMaster().getId());
					data.setBranchName(o.getBranchMaster() == null ? null : o.getBranchMaster().getBranchName());
					data.setCollectCashEnable(o.getCollectCashEnable() == null ? 0 : o.getCollectCashEnable());
					data.setDemandSheetEnable(o.getDemandSheetEnable() == null ? 0 : o.getDemandSheetEnable());
					data.setDropCashEnable(o.getDropCashEnable() == null ? 0 : o.getDropCashEnable());
					data.setCreatedTimestamp(o.getCreatedTimestamp());
					data.setCreatedByUsername(o.getCreatedByUsername());
					data.setEditedTimestamp(o.getEditedTimestamp());
					data.setEditedByUsername(o.getEditedByUsername());
					data.setUserType(o.getUserType());
					data.setStateId(o.getStateMaster() == null ? 0 : o.getStateMaster().getStateId());

					data.setPgEnable(o.getPgEnable() == null ? 0 : o.getPgEnable());
					data.setMposEnable(o.getMposEnable() == null ? 0 : o.getMposEnable());
					data.setMatmEnable(o.getMicroAtmEnable() == null ? 0 : o.getMicroAtmEnable());
					data.setTwoFaEnable(o.getTwoFaEnable() == null ? 0 : o.getTwoFaEnable());
					
					data.setEkycStatusFlag(o.getEkycStatusFlag());
					data.setTerminalId(o.getTerminalId());
					data.setTerminalIdFlag(o.getTerminalIdFlag());
					data.setKycType(o.getKycType());
					data.setEkycState(o.getEkycState());
					data.setEkycCity(o.getEkycCity());
					data.setEkycAddressLine1(o.getEkycAddressLine1());
					data.setEkycAddressLine2(o.getEkycAddressLine2());
					
					data.setOfflineKycStatusFlag(o.getOfflineKycStatusFlag());
					data.setOfflineKycTerminalId(o.getOfflineKycTerminalId());
					data.setOfflineKycTerminalIdFlag(o.getOfflineKycTerminalIdFlag());
					
					data.setAadharPayEkycStatusFlag(o.getAadharPayEkycStatusFlag());
					data.setAadharPayTerminalId(o.getAadharPayTerminalId());
					data.setAadharPayTerminalIdFlag(o.getAadharPayTerminalIdFlag());
					
					data.setEkycPanNumber(data.getEkycPanNumber());
					data.setDrivingLicense(data.getDrivingLicense());
					data.setVoterId(data.getVoterId());
					
					data.setSwitch1(o.getSwitch1());
					data.setSwitch2(o.getSwitch2());
					data.setSwitch3(o.getSwitch3());
					
					data.setCwSwitch(o.getCwSwitch());
					data.setApSwitch(o.getApSwitch());
					data.setMsSwitch(o.getMsSwitch());
					
					list1.add(data);
				}

				//						AUDIT LOGS
				auditLogs = new FpCpAuditLogs();

				auditLogs.setFeatureGrpId("ONBOARDING");
				auditLogs.setFeatureId("ONBOARDING_CRU_SW");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
				//						0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				auditLogs.setOperation(1);
				auditLogs.setViewData("all merchant master with parent id "+ smId);
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, list1), HttpStatus.OK);
			}else {
				generalResponse = new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, "merchant doesnt exist", list1), HttpStatus.OK);
			}

		}else {
			generalResponse = new ResponseEntity<GeneralResponse>(HttpStatus.NOT_FOUND);
		} 
		return generalResponse;

	}
}







package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.ksoap2.transport.HttpsServiceConnectionSE;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ApproveHoldAmountRequestObject;
import com.apptmyz.fpcontrolpanel.data.HoldAmountRequestObject;
import com.apptmyz.fpcontrolpanel.data.SpecificParentSuperMSettleModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.services.HoldAmountService;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;


@RestController
@RequestMapping(value = "/api/holdamount")
public class HoldAmountController {

	@Autowired
	private HoldAmountService holdAmountService;
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@PostMapping("/create/amountrequest")
	public ResponseEntity<GeneralResponse> createHoldAmountRequest(@RequestBody HoldAmountRequestObject request, @RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermCreate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
				String ip = commonTasks.getIpAddress(httpRequest);
				
				System.out.println("Request:"+ (new Gson()).toJson(request));
				response = holdAmountService.createHoldAmountRequest(request, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@PostMapping("/edit/amountrequest")
	public ResponseEntity<GeneralResponse> editHoldAmountRequest(@RequestBody HoldAmountRequestObject request,@RequestHeader("token") String token) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			
			System.out.println("Request:"+ (new Gson()).toJson(request));
			response = holdAmountService.editHoldAmountRequest(request);
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@PostMapping("/approve/request")
	public ResponseEntity<GeneralResponse> approveHoldAmountRequest(@RequestBody ApproveHoldAmountRequestObject request,@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermApprove() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
				String ip = commonTasks.getIpAddress(httpRequest);

				System.out.println("Request:"+ (new Gson()).toJson(request));
				response = holdAmountService.approveHoldAmountRequest(request, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@PostMapping("/cancel/request")
	public ResponseEntity<GeneralResponse> cancelHoldAmountRequest(@RequestBody ApproveHoldAmountRequestObject request,@RequestHeader("token") String token) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("Request:"+ (new Gson()).toJson(request));
			response = holdAmountService.cancelHoldAmountRequest(request);
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@PostMapping("/reject/request")
	public ResponseEntity<GeneralResponse> rejectHoldAmountRequest(@RequestBody ApproveHoldAmountRequestObject request,@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermApprove() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
				String ip = commonTasks.getIpAddress(httpRequest);

				System.out.println("Request:"+ (new Gson()).toJson(request));
				response = holdAmountService.rejectHoldAmountRequest(request, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/validator/request/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> validatorRequest(@PathVariable String fromdate,@PathVariable String todate,@RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("validatorRequest:"+ fromdate +"- To Date:"+ todate);
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
				String ip = commonTasks.getIpAddress(httpRequest);
				
				response = holdAmountService.getValidatorRequests(fromdate, todate, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/validator/request/history")
	public ResponseEntity<GeneralResponse> validatorHistoryRequest(@RequestHeader("token") String token) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			response = holdAmountService.getValidatorHistoryRequests();
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/approved/request/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> approvedRequest(@PathVariable String fromdate,@PathVariable String todate,@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("approvedRequest:"+ fromdate +"- To Date:"+ todate);
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
				String ip = commonTasks.getIpAddress(httpRequest);
				
				response = holdAmountService.getApprovedRequests(fromdate, todate, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	@GetMapping("/toapprove/all/requests")
	public ResponseEntity<GeneralResponse> toApprovedRequest(@RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermApprove() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
				String ip = commonTasks.getIpAddress(httpRequest);
				
				response = holdAmountService.getToApproveRequests(authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/retrieve/parents/supermerchants")
	public ResponseEntity<GeneralResponse> getParentsAndSuperMerchant(@RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			String ip = commonTasks.getIpAddress(httpRequest);
			
			response = holdAmountService.getParentsAndSuperMerchant(authenticateUserResponse, ip);
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@PostMapping("/retrieve/parents/supermerchants/specific")
	public ResponseEntity<GeneralResponse> getParentsAndSuperMerchantSpecific(@RequestHeader("token") String token,HttpServletRequest httpRequest,@RequestBody SpecificParentSuperMSettleModel model) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			System.out.println("SpecificParentSuperMSettleModel:"+ model.getSettleto() +"- User Id:"+ model.getUserId());
			
			String ip = commonTasks.getIpAddress(httpRequest);
			
			response = holdAmountService.getParentsAndSuperMerchantSpecific(authenticateUserResponse, ip, model);
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/reports/settlementhold/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getSettlementHoldReports(@PathVariable String fromdate,@PathVariable String todate,@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("getSettlementHoldReports:"+ fromdate +"- To Date:"+ todate);
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			String ip = commonTasks.getIpAddress(httpRequest);
			boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				response = holdAmountService.getSettlementHoldReports(fromdate, todate, authenticateUserResponse, ip);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/reports/settlementhold/txndetail/{settlementHoldid}")
	public ResponseEntity<GeneralResponse> getSettlementHoldTxnDetailReports(@PathVariable String settlementHoldid,@RequestHeader("token") String token, HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("getSettlementHoldTxnDetailReports:"+ settlementHoldid);
			
			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			String ip = commonTasks.getIpAddress(httpRequest);
			
			response = holdAmountService.getSettlementHoldTxnDetailReports(settlementHoldid, authenticateUserResponse, ip);
		}
		catch (Exception e) 
		{
			
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);
		
		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);
		
		System.out.println("Erros hadled Successfully");
		
		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	
	
	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);
			
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.FundTransferResponseModelCP;
import com.apptmyz.fpcontrolpanel.data.PaytmFundTransferControlPanelData;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpsettlementdb.entity.FundTransferLogData;
import com.apptmyz.fpsettlementdb.repository.FundTransferLogDataRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/kotak")
public class KotakFundTransfer {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private FundTransferLogDataRepository fundTransferLogDataRepository;

	@PostMapping("/fund/transfer")
	public ResponseEntity<GeneralResponse> fundTransfer(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestBody String paytmfunddata,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			String ip = commonTasks.getIpAddress(httprequest);

			boolean permission = false;

			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());

			List<UserPermissionsModel> permissionsList = ((AuthenticateUserResponse)response.getBody().getData()).getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("BANK")) {
					if(data.getFeatureCode().equals("PAYTM_FUND_TRANSFER")) {
						if(data.getPermApprove() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				try
				{

					FundTransferLogData fundentity = saveAndUpdateKotakData(paytmfunddata, authenticateUserResponse);

					HttpClient httpClient = new DefaultHttpClient();
					HttpPost httpPost = null;
					String path = filesUtil.getProperty("fundtransferUAT");

					System.out.println("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/kotak/fundtransfer");

					if(path.equals("1"))
						httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementserviceuat/api/v1/oneofsettlement/kotak/fundtransfer");
					else
						httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/kotak/fundtransfer");

					httpPost.setHeader("Content-type", "application/json");
					httpPost.setHeader("User-Agent", "Mozilla/5.0");
					httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpPost.setHeader("token", token);

					String requestData= paytmfunddata;

					System.out.println("validate model "+paytmfunddata);

					HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
					httpPost.setEntity(entity);
					HttpResponse responseData = httpClient.execute(httpPost);


					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";

					//			     commonTasks.getFullResponse(responseData);

					System.out.println(responseCode);
					System.out.println(responseData);

					Object dataObj = null;
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);

						System.out.println("DATA:"+ data);

						GeneralResponse geres = gson.fromJson(data,GeneralResponse.class);
						//					 dataObj = validatedRecord.getData();

						String msg = "";
						msg = geres.getMessage();


						if(geres.isStatus())
						{
							
							fundentity.setStatus(Constants.SUCCESS);
							System.out.println("DATA:"+ geres.getData().toString());
							
							fundentity.setResponseTimestamp(new Date());
							fundTransferLogDataRepository.save(fundentity);

							response = successResponse(geres.isStatus(),"Success, Kotak file Placed in SFTP", geres.getStatusCode(), null );
						}
						else
						{
							fundentity.setStatus(Constants.FAILURE);
							fundentity.setResponseTimestamp(new Date());
							fundTransferLogDataRepository.save(fundentity);
							response = errorResponse(geres.isStatus(), msg, geres.getStatusCode(), null);
						}
					}    
					else
					{
						fundentity.setStatus(Constants.FAILURE);
						fundentity.setResponseTimestamp(new Date());
						fundTransferLogDataRepository.save(fundentity);
						response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
					}
				}
				catch(Exception e)
				{
					response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
			}
			else
			{
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	private FundTransferLogData saveAndUpdateKotakData(String paytmfunddata,AuthenticateUserResponse authenticateUserResponse)
	{
		FundTransferLogData fundenity = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			PaytmFundTransferControlPanelData data = gson.fromJson(paytmfunddata,PaytmFundTransferControlPanelData.class);
			if(data != null)
			{
				fundenity = new FundTransferLogData();
				fundenity.setAccountNo(data.getAccountNumber());
				fundenity.setAmount(data.getAmount());
				fundenity.setNarration(data.getNarration());
				fundenity.setCreatedBy(authenticateUserResponse.getUserName());
				fundenity.setRequestedTimestamp(new Date());
				fundenity.setStatus(Constants.INITIATED);
				fundenity.setFromBank(Constants.KOTAK);
				fundenity = fundTransferLogDataRepository.save(fundenity);

			}
		}
		catch(Exception e)
		{
			System.out.println("Exception occured:"+ e.getMessage());
		}
		return fundenity;
	}
	
	public Date setformatDate(String format,String date) throws Exception
	{
		SimpleDateFormat dateFormat = null;

		Date fromatedDate = null;

		try {

			dateFormat = new SimpleDateFormat(format);

			fromatedDate = dateFormat.parse(date);

		}
		catch (Exception e) {
			errorResponse(false,"Error Occured checkDateIsNullorNot ",null);			
			throw e;
		}

		return fromatedDate;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		System.out.println("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

		System.out.println(" Successfully");

		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.BranchMasterRepository;
import com.apptmyz.fpaepsdb.repository.CityMasterRepository;
import com.apptmyz.fpaepsdb.repository.CompanyTypeMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.MerchantMasterModal;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpcontrolpanel.services.BaseService;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.globalverification.data.PanMasterDataModel;
import com.apptmyz.globalverification.services.PanMasterService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/merchant")
public class MerchantController {
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private MerchantMasterRepository merchantMasterRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private StateMasterRepository stateMasterRepository;
	
	@Autowired
	private CityMasterRepository cityMasterRepository;
	
	
	@Autowired
	private BranchMasterRepository branchMasterRepository;
	
	@Autowired
	private CompanyTypeMasterDataRepository companyTypeMasterDataRepository;

	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;
	
	@Autowired
	private BaseService baseService;

	@PostMapping("/create")
	public ResponseEntity<GeneralResponse> postAllMerchantDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody MerchantMasterModal merchantMasterModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			Gson gson = new GsonBuilder().serializeNulls().create();
			if (merchantMasterModal != null) {
				MerchantMaster master = merchantMasterRepository.findByMerchantLoginId(merchantMasterModal.getMerchantLoginId());
				if (master == null) {
					MerchantMaster merchantMaster = new MerchantMaster();
					int superUserId = 0;
					if (merchantMasterModal.getSuperMerchantId() != 0) {
						superUserId = merchantMasterModal.getSuperMerchantId();
					}
					ParentMerchantMaster parentMaster = null;
					SuperMerchantMaster superMaster = superMerchantMasterRepository.findOne(superUserId);
					if (superMaster != null && superMaster.getParentId() != null) {
						parentMaster = parentMerchantMasterRepository.findOne(superMaster.getParentId());
					}
					if (parentMaster != null) {
						merchantMaster.setParentId(parentMaster.getId());
					}
					merchantMaster.setAadhaarNumber(merchantMasterModal.getAadhaarNumber());
					merchantMaster.setMerchantName(merchantMasterModal.getMerchantName());
					merchantMaster.setMerchantLoginId(merchantMasterModal.getMerchantLoginId());
					merchantMaster.setMerchantLoginPin(merchantMasterModal.getMerchantLoginPin());
					merchantMaster.setMerchantAddress(merchantMasterModal.getMerchantAddress());
					merchantMaster.setMerchantPhoneNumber(merchantMasterModal.getMerchantPhoneNumber());
					merchantMaster.setEmailId(merchantMasterModal.getEmailId());
					 merchantMaster.setUserPan(merchantMasterModal.getUserPan());
					 
					merchantMaster.setBankAccountName(merchantMasterModal.getBankAccountName());
					merchantMaster.setUserType(String.valueOf(merchantMasterModal.getUserType()));
					merchantMaster.setCompanyBankAccountNumber(merchantMasterModal.getCompanyBankAccountNumber());
					merchantMaster.setCompanyBankBranchName(merchantMasterModal.getCompanyBankBranchName());
					 merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName());
					 merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode());
					merchantMaster.setCompanyLegalName(merchantMasterModal.getCompanyLegalName());
					merchantMaster.setCompanyMarketingName(merchantMasterModal.getCompanyMarketingName());
					merchantMaster.setDateOfIncorporation(merchantMasterModal.getDateOfIncorporation());
					merchantMaster.setNoOfTerminals(merchantMasterModal.getNoOfTerminals());
					merchantMaster.setGstInNumber(merchantMasterModal.getGstInNumber());
					merchantMaster.setAadharPayEnable(merchantMasterModal.getAadharPayEnable());
					merchantMaster.setUpiEnable(merchantMasterModal.getUpiEnable());
					merchantMaster.setUpiQrEnable(merchantMasterModal.getUpiQrEnable());
					merchantMaster.setBalanceEnquiryEnable(merchantMasterModal.getBalanceEnquiryEnable());
					merchantMaster.setCashDepositEnable(merchantMasterModal.getCashDepositEnable());
					merchantMaster.setCashWithdrawEnable(merchantMasterModal.getCashWithdrawEnable());
					merchantMaster.setFundTransferEnable(merchantMasterModal.getFundTransferEnable());
					merchantMaster.setMinistatmentEnable(merchantMasterModal.getMinistatmentEnable());
					merchantMaster.setCollectCashEnable(merchantMasterModal.getCollectCashEnable());
					merchantMaster.setDemandSheetEnable(merchantMasterModal.getDemandSheetEnable());
					merchantMaster.setDropCashEnable(merchantMasterModal.getDropCashEnable());
					merchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
					merchantMaster.setCreatedIpAddress(ip);
					merchantMaster.setMerchantPincode(merchantMasterModal.getMerchantPinCode());
					
					merchantMaster.setPgEnable(merchantMasterModal.getPgEnable());
					merchantMaster.setMposEnable(merchantMasterModal.getMposEnable());
					merchantMaster.setMicroAtmEnable(merchantMasterModal.getMatmEnable());
					merchantMaster.setTwoFaEnable(merchantMasterModal.getTwoFaEnable());
					merchantMaster.setInstantSettlementEnable(0);
					merchantMaster.setActiveFlag(1);
					merchantMaster.setCreatedTimestamp(new Date());
					if(commonTasks.check(merchantMasterModal.getMerchantLogo())){
						merchantMaster.setMerchantLogo(commonTasks.toBase64(merchantMasterModal.getMerchantLogo(), 1001));
					}
					if(commonTasks.check(merchantMasterModal.getEkycDocuments())){
						merchantMaster.setEkycDocuments(commonTasks.toBase64(merchantMasterModal.getEkycDocuments(), 1002));
					}
					if(commonTasks.check(merchantMasterModal.getCancelledChequeImages())){
						merchantMaster.setCancelledChequeImages(commonTasks.toBase64(merchantMasterModal.getCancelledChequeImages(), 1003));
					}
					if(commonTasks.check(merchantMasterModal.getShopAndPanImage())){
						merchantMaster.setShopAndPanImage(commonTasks.toBase64(merchantMasterModal.getShopAndPanImage(), 1004));
					}
					merchantMaster.setStateMaster(stateMasterRepository.findOne(merchantMasterModal.getStateId()));
//					 merchantMaster.setCityMaster(cityMasterRepository.findOne(merchantMasterModal.getCityId()));
					 merchantMaster.setMerchantCityName(merchantMasterModal.getMerchantCityName());

					merchantMaster.setCompanyTypeMasterData(companyTypeMasterDataRepository.findOne(merchantMasterModal.getCompanyTypeId()));
					// merchantMaster.setSuperMerchantMaster(superMe
					// rchantMasterRepository.findOne(superUserId));
					merchantMaster.setSuperMerchantMaster(superMaster);
	//				System.out.println(merchantMasterModal.getBranchId());
					if(merchantMasterModal.getBranchId()!=null){
					merchantMaster.setBranchMaster(branchMasterRepository.findOne(merchantMasterModal.getBranchId()));
					}
					// merchantMaster.setSuperMerchantMaster(superMerchantMasterRepository.findOne(authenticateUserResponse.getUserId()));
					// merchantMaster.setActiveFlag(1);
					// if(superMaster == null || superMaster.getSelfSettlement()
					// ==1)
					// merchantMaster.setSelfsettlementFlag(merchantMasterModal.getSelfSettlementFlag());
					merchantMaster.setTimestamp(new Date());
					merchantMasterRepository.save(merchantMaster);
					
					if (commonTasks.check(merchantMasterModal.getCompanyBankAccountNumber(),merchantMasterModal.getCompanyIfscCode())) {
						merchantMaster.setCompanyBankAccountNumber(merchantMasterModal.getCompanyBankAccountNumber());
						merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode());
						merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName());
						double amount = 1.0;
						try {
							GeneralResponse generalResponse = commonRepositoryMethods.IMPSP2ATransaction(merchantMasterModal.getCompanyBankAccountNumber(), merchantMasterModal.getCompanyIfscCode(),amount, merchantMasterModal.getMerchantName(), merchantMasterModal.getMerchantPhoneNumber(),merchantMasterModal.getMerchantPhoneNumber(), merchantMasterModal.getId());
							if (!generalResponse.isStatus()) {
								merchantMaster.setAutomaticBankVerification(0);
								merchantMaster.setAutomaticBankVerificationDetails((generalResponse.getData()).toString());
								merchantMaster.setRemarks(generalResponse.getMessage());
							} else {
								merchantMaster.setAutomaticBankVerification(1);
								merchantMaster.setAutomaticBankVerificationDetails(((IMPSResponseModel) generalResponse.getData()).getBeneName());
								merchantMaster.setRemarks(generalResponse.getMessage());
							}
						} catch (Exception e) {
							e.printStackTrace();
							merchantMaster.setRemarks(e.getMessage());
						}
					}
					if (commonTasks.check(merchantMasterModal.getUserPan())) {
						merchantMasterModal.setUserPan(merchantMasterModal.getUserPan().toUpperCase());
						String panName = baseService.panVerification(request, merchantMasterModal.getUserPan().toUpperCase());
						if(commonTasks.check(panName)) {
							merchantMasterModal.setAutomaticPanVerification(1);
							merchantMasterModal.setAutomaticPanVerificationDetails(panName);
						}
						else {
							merchantMasterModal.setAutomaticPanVerification(0);
						}
						
					}
					if (merchantMaster.getAutomaticBankVerification() == null && commonTasks.check(merchantMaster.getCompanyBankAccountNumber(), merchantMaster.getCompanyIfscCode())) {
						merchantMasterRepository.save(merchantMaster);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_BANK_DETAILS, merchantMaster.getId()), HttpStatus.OK);
					} else if (merchantMaster.getAutomaticBankVerification() != null) {
						if (merchantMaster.getAutomaticBankVerification() == 0) {
							merchantMasterRepository.save(merchantMaster);
							return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_BANK_DETAILS, merchantMaster.getId()), HttpStatus.OK);
						}
					}
					if (merchantMaster.getAutomaticPanVerification() == 0 ) {
						merchantMasterRepository.save(merchantMaster);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_PAN_DETAILS, merchantMaster.getId()), HttpStatus.OK);
					}
					merchantMasterRepository.save(merchantMaster);
					
					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
	//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(5);
					auditLogs.setNewData("created merchant "+new Gson().toJson(merchantMasterModal));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, merchantMaster.getId()),HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.MERCHANTID_ALREADY_EXISTS, null),HttpStatus.OK);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),HttpStatus.OK);
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@PostMapping("/validatingPanDetails/{panNumber}")
	public ResponseEntity<GeneralResponse> updateMerchantPanDetails(@PathVariable String panNumber, HttpServletRequest request,
			HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody MerchantMasterModal merchantMasterModal) throws UnsupportedEncodingException, ParseException {
		System.out.println("update info:" + merchantMasterModal.toString());
		AuthenticateUserResponse authenticateUserResponse =null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		Gson gson = new GsonBuilder().serializeNulls().create();
		if (merchantMasterModal != null && merchantMasterModal.getId() != null) {
			MerchantMaster merchantMaster = merchantMasterRepository.findOne(merchantMasterModal.getId());
			if (commonTasks.check(panNumber)) {
//				PANVerificationResponse verificationResponse = null;
//				try {
//					verificationResponse = new OnboardAutomationServices().panVerification(panNumber);
//				} catch (IOException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.ENTER_VALID_PAN_DETAILS, merchantMaster.getId()), HttpStatus.BAD_REQUEST);
//				} catch (ParserConfigurationException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.ENTER_VALID_PAN_DETAILS, merchantMaster.getId()), HttpStatus.BAD_REQUEST);
//				} catch (FactoryConfigurationError e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.ENTER_VALID_PAN_DETAILS, merchantMaster.getId()), HttpStatus.BAD_REQUEST);
//				} catch (SAXException e) {
//					// TODO Auto-generated catch block
//					e.printStackTrace();
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//							Constants.ENTER_VALID_PAN_DETAILS, merchantMaster.getId()), HttpStatus.BAD_REQUEST);
//				}
//				if (verificationResponse != null && verificationResponse.getResult() != null
//						&& commonTasks.check(verificationResponse.getResult().getName())) {
//					merchantMaster.setUserPan(merchantMasterModal.getUserPan());
//					merchantMaster.setAutomaticPanVerification(1);
//					merchantMaster.setAutomaticPanVerificationDetails(verificationResponse.getResult().getName());
//				} else {
//					merchantMaster.setAutomaticPanVerification(0);
//					merchantMaster.setUserPan(merchantMasterModal.getUserPan());
//					merchantMaster.setAutomaticPanVerificationDetails(verificationResponse.toString());
//				}
				if (commonTasks.check(merchantMasterModal.getUserPan())) {
					merchantMasterModal.setUserPan(merchantMasterModal.getUserPan().toUpperCase());
					String panName = baseService.panVerification(request, merchantMasterModal.getUserPan().toUpperCase());
					if(commonTasks.check(panName)) {
						merchantMasterModal.setAutomaticPanVerification(1);
						merchantMasterModal.setAutomaticPanVerificationDetails(panName);
					}
					else {
						merchantMasterModal.setAutomaticPanVerification(0);
					}
					
				}
				
				merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
				merchantMaster.setEditedTimestamp(new Date());
			}
			if (merchantMaster.getAutomaticPanVerification() != null && merchantMaster.getAutomaticPanVerification() == 1) {
				merchantMasterRepository.save(merchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				merchantMasterRepository.save(merchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ENTER_VALID_PAN_DETAILS),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}

	}

	@PostMapping("/validatingBankDetails/{bankAccNumber}/{bankIfscCode}/{bankName}")
	public ResponseEntity<GeneralResponse> updateMerchantBankDetails(@PathVariable String bankAccNumber,
			@PathVariable String bankIfscCode, @PathVariable String bankName, HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody MerchantMasterModal merchantMasterModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		// System.out.println("update info:" + merchantMasterModal.toString());
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
//		Gson gson = new GsonBuilder().serializeNulls().create();
		if (merchantMasterModal != null && merchantMasterModal.getId() != null) {
			MerchantMaster merchantMaster = merchantMasterRepository.findOne(merchantMasterModal.getId());
			if (commonTasks.check(bankAccNumber, bankIfscCode)) {
				merchantMaster.setCompanyBankAccountNumber(bankAccNumber);
				merchantMaster.setCompanyIfscCode(bankIfscCode);
				merchantMaster.setCompanyBankName(bankName);
				double amount=1.0;
				try {
					GeneralResponse generalResponse = commonRepositoryMethods.IMPSP2ATransaction(bankAccNumber,
							bankIfscCode, amount, merchantMasterModal.getMerchantName(),
							merchantMasterModal.getMerchantPhoneNumber(), merchantMasterModal.getMerchantPhoneNumber(),
							merchantMasterModal.getId());
					if (!generalResponse.isStatus()) {
						merchantMaster.setAutomaticBankVerification(0);
						merchantMaster.setAutomaticBankVerificationDetails((generalResponse.getData()).toString());
						merchantMaster.setRemarks(generalResponse.getMessage());
					} else {
						merchantMaster.setAutomaticBankVerification(1);
						merchantMaster.setAutomaticBankVerificationDetails(
								((IMPSResponseModel) generalResponse.getData()).getBeneName());
						merchantMaster.setRemarks(generalResponse.getMessage());
					}
//					if (commonTasks.check(merchantMasterModal.getCompanyBankAccountNumber(),merchantMasterModal.getCompanyIfscCode())) {
//						merchantMaster.setCompanyBankAccountNumber(merchantMasterModal.getCompanyBankAccountNumber());
//						merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode().toUpperCase());
//						merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName().toUpperCase());
//						try {
//							BankMasterDataModel verificationResponse = BankMasterService.checkBankDetails(merchantMasterModal.getCompanyBankAccountNumber(), merchantMasterModal.getCompanyIfscCode(), merchantMasterModal.getMerchantName(), merchantMasterModal.getMerchantPhoneNumber(), merchantMasterModal.getId());
//							if (verificationResponse != null && verificationResponse.getBankAccountName()!= null) {
//								merchantMaster.setAutomaticBankVerification(1);
//								merchantMaster.setAutomaticBankVerificationDetails(verificationResponse.getBankAccountName());
//							} else {
//								merchantMaster.setAutomaticBankVerification(0);
//								merchantMaster.setAutomaticBankVerificationDetails(gson.toJson(verificationResponse));
//							}
//						} catch (Exception e) {
//							e.printStackTrace();
//							merchantMaster.setRemarks(e.getMessage());
//						}
//					}
					merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					merchantMaster.setEditedTimestamp(new Date());
				} catch (Exception e) {
					e.printStackTrace();
					merchantMaster.setRemarks(e.getMessage());
				}
			}
			if (merchantMaster.getAutomaticBankVerification() !=null && merchantMaster.getAutomaticBankVerification() == 1) {
				merchantMasterRepository.save(merchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				merchantMasterRepository.save(merchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE,"BANK RESPONSE : "+merchantMaster.getRemarks()),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}
	}
	
	@PostMapping("/update/admin")
	public ResponseEntity<GeneralResponse> updateMerchantDetailsAd(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody MerchantMasterModal merchantMasterModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse 
		authenticateUserResponse = null;
		// System.out.println("update info:" + merchantMasterModal.toString());
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();	
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			System.out.println("merchant Master Modal "+merchantMasterModal);
			if (merchantMasterModal != null) {
				System.out.println("merchant id : "+merchantMasterModal.getId()+" record is edited by : "+authenticateUserResponse.getUserName());
				System.out.println("The merchant edited data id : "+merchantMasterModal);
	            System.out.println("entered");
				if (merchantMasterModal.getId() != null) {
					MerchantMaster merchantMaster = merchantMasterRepository.findOne(merchantMasterModal.getId());
					if(merchantMaster !=null){
						
						auditLogs.setNewData(new Gson().toJson(merchantMaster));
	
						SuperMerchantMaster superMerchantMaster=null;
						if(merchantMaster.getSuperMerchantMaster() != null){
						   superMerchantMaster = merchantMaster.getSuperMerchantMaster();
						}
						ParentMerchantMaster parentMaster=null;
						if(merchantMaster.getSuperMerchantMaster().getParentId() != null){
							 parentMaster = parentMerchantMasterRepository.findOne(merchantMaster.getSuperMerchantMaster().getParentId());
						}
						if (commonTasks.check(merchantMasterModal.getMerchantName())) {
							merchantMaster.setMerchantName(merchantMasterModal.getMerchantName());
						}
						if (commonTasks.check(merchantMasterModal.getMerchantLoginId())) {
							merchantMaster.setMerchantLoginId(merchantMasterModal.getMerchantLoginId());
						}
						if (commonTasks.check(merchantMasterModal.getMerchantAddress())) {
							merchantMaster.setMerchantAddress(merchantMasterModal.getMerchantAddress());
						}
						if (commonTasks.check(merchantMasterModal.getMerchantPhoneNumber())) {
							merchantMaster.setMerchantPhoneNumber(merchantMasterModal.getMerchantPhoneNumber());
						}
						if (commonTasks.check(merchantMasterModal.getEmailId())) {
							merchantMaster.setEmailId(merchantMasterModal.getEmailId());
						}
						if (commonTasks.check(merchantMasterModal.getUserPan())) {
							merchantMaster.setUserPan(merchantMasterModal.getUserPan());
						}
						if (commonTasks.check(merchantMasterModal.getBankAccountName())) {
							merchantMaster.setBankAccountName(merchantMasterModal.getBankAccountName());
						}
						if (commonTasks.check(merchantMasterModal.getCompanyBankBranchName())) {
							merchantMaster.setCompanyBankBranchName(merchantMasterModal.getCompanyBankBranchName());
						}
						if (commonTasks.check(merchantMasterModal.getCompanyBankName())) {
							merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName());
						}
						if (commonTasks.check(merchantMasterModal.getCompanyIfscCode())) {
							merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode());
						}
						if (commonTasks.check(merchantMasterModal.getCompanyLegalName())) {
							merchantMaster.setCompanyLegalName(merchantMasterModal.getCompanyLegalName());
						}
						if (commonTasks.check(merchantMasterModal.getCompanyMarketingName())) {
							merchantMaster.setCompanyMarketingName(merchantMasterModal.getCompanyMarketingName());
						}
						if (commonTasks.check(merchantMasterModal.getDateOfIncorporation())) {
							merchantMaster.setDateOfIncorporation(merchantMasterModal.getDateOfIncorporation());
						}
						if (commonTasks.check(merchantMasterModal.getNoOfTerminals())) {
							merchantMaster.setNoOfTerminals(merchantMasterModal.getNoOfTerminals());
						}
						if (commonTasks.check(merchantMasterModal.getGstInNumber())) {
							merchantMaster.setGstInNumber(merchantMasterModal.getGstInNumber());
						}
						if(commonTasks.check(merchantMasterModal.getRemarks())) {
							merchantMaster.setRemarks(merchantMasterModal.getRemarks());
						}
						if (merchantMasterModal.getAadharPayEnable() != null) {
							merchantMaster.setAadharPayEnable(merchantMasterModal.getAadharPayEnable());
						}
						if (merchantMasterModal.getUpiEnable() != null) {
							merchantMaster.setUpiEnable(merchantMasterModal.getUpiEnable());
						}
						if (merchantMasterModal.getUpiQrEnable() != null) {
							merchantMaster.setUpiQrEnable(merchantMasterModal.getUpiQrEnable());
						}
						if (merchantMasterModal.getBalanceEnquiryEnable() != null) {
							merchantMaster.setBalanceEnquiryEnable(merchantMasterModal.getBalanceEnquiryEnable());
						}
						if (merchantMasterModal.getCashDepositEnable() != null) {
							merchantMaster.setCashDepositEnable(merchantMasterModal.getCashDepositEnable());
						}
						if (merchantMasterModal.getCashWithdrawEnable() != null) {
							merchantMaster.setCashWithdrawEnable(merchantMasterModal.getCashWithdrawEnable());
						}
						if (merchantMasterModal.getFundTransferEnable() != null) {
							merchantMaster.setFundTransferEnable(merchantMasterModal.getFundTransferEnable());
						}
						if (merchantMasterModal.getMinistatmentEnable() != null) {
							merchantMaster.setMinistatmentEnable(merchantMasterModal.getMinistatmentEnable());
						}
						System.out.println(merchantMasterModal.getDropCashEnable()+" +collect "+merchantMasterModal.getCollectCashEnable());
						if (merchantMasterModal.getCollectCashEnable() != null) {
							merchantMaster.setCollectCashEnable(merchantMasterModal.getCollectCashEnable());
						}
						if (merchantMasterModal.getDemandSheetEnable() != null) {
							merchantMaster.setDemandSheetEnable(merchantMasterModal.getDemandSheetEnable());
						}
						if (merchantMasterModal.getDropCashEnable() != null) {
							System.out.println("drop : "+merchantMasterModal.getDropCashEnable());
							merchantMaster.setDropCashEnable(merchantMasterModal.getDropCashEnable());
						}
						
						if (merchantMasterModal.getPgEnable() != null) {
							System.out.println("pg : "+merchantMasterModal.getPgEnable());
							merchantMaster.setPgEnable(merchantMasterModal.getPgEnable());
						}
						
						if (merchantMasterModal.getMposEnable() != null) {
							System.out.println("mpos : "+merchantMasterModal.getMposEnable());
							merchantMaster.setMposEnable(merchantMasterModal.getMposEnable());
						}
						
						if (merchantMasterModal.getMatmEnable() != null) {
							System.out.println("matm : "+merchantMasterModal.getMatmEnable());
							merchantMaster.setMicroAtmEnable(merchantMasterModal.getMatmEnable());
						}
						
						if (merchantMasterModal.getTwoFaEnable() != null) {
							System.out.println("tfa : "+merchantMasterModal.getTwoFaEnable());
							merchantMaster.setTwoFaEnable(merchantMasterModal.getTwoFaEnable());
						}
						System.out.println(" Active Flag : "+merchantMasterModal.getActiveFlag());
						if (merchantMasterModal.getActiveFlag() != null) {
							if(merchantMasterModal.getActiveFlag() == 0){
							    merchantMaster.setActiveFlag(0);
							}else if(merchantMasterModal.getActiveFlag() == 1){
								merchantMaster.setActiveFlag(1);
							}
						}
						if (merchantMasterModal.getBranchId() != null) {
							merchantMaster.setBranchMaster(branchMasterRepository.findOne(merchantMasterModal.getBranchId()));
						}
						merchantMasterRepository.save(merchantMaster);
										if (commonTasks.check(merchantMasterModal.getMerchantLoginPin())
								&& merchantMasterModal.getMerchantLoginPin() != null) {
							merchantMaster.setMerchantLoginPin(merchantMasterModal.getMerchantLoginPin());
						}
						merchantMaster.setSubmitedTimestamp(new Date());
						merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
						merchantMaster.setEditedIpAddress(ip);
						merchantMaster.setEditedTimestamp(new Date());
						merchantMasterRepository.save(merchantMaster);
						if(merchantMasterModal.getSelfSettlementFlag()!=null && merchantMasterModal.getSelfSettlementFlag()!=0) {
							if(merchantMasterModal.getActiveFlag()!=null && merchantMasterModal.getActiveFlag()!=0) {
								if(merchantMaster.getAutomaticBankVerification() !=null && merchantMaster.getAutomaticBankVerification() == 1){
									if(merchantMasterModal.getSelfSettlementFlag()!=null) {
										if(merchantMasterModal.getSelfSettlementFlag() == 1){
											if (parentMaster != null) {
												if (parentMaster.getSelfSettlementFlag() != null && parentMaster.getSelfSettlementFlag() == 1) {
													return new ResponseEntity<GeneralResponse>(
															new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_DISTRIBUTOR_SETTLEMENT, null),
															HttpStatus.BAD_REQUEST);
												} else {
													if (superMerchantMaster != null) {
														if (superMerchantMaster.getSelfSettlement() != null && superMerchantMaster.getSelfSettlement() == 1 ) {
															return new ResponseEntity<GeneralResponse>(
																	new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_MERCHANT_SETTLEMENT, null),
																	HttpStatus.BAD_REQUEST);
														} else {
															merchantMaster.setSelfSettlementFlag(merchantMasterModal.getSelfSettlementFlag());
														}
													} else {
														merchantMaster.setSelfSettlementFlag(merchantMasterModal.getSelfSettlementFlag());
												   }
												}
											} else {
												if (superMerchantMaster != null) {
													if (superMerchantMaster.getSelfSettlement() != null && superMerchantMaster.getSelfSettlement() == 1 ) {
														return new ResponseEntity<GeneralResponse>(
																new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_MERCHANT_SETTLEMENT, null),
																HttpStatus.BAD_REQUEST);
													} else {
														merchantMaster.setSelfSettlementFlag(merchantMasterModal.getSelfSettlementFlag());
													}
												} else {
													merchantMaster.setSelfSettlementFlag(merchantMasterModal.getSelfSettlementFlag());
											  }
											}
										}else{
											merchantMaster.setSelfSettlementFlag(0);
										}
									}
								}else{
									return new ResponseEntity<GeneralResponse>(
											new GeneralResponse(Constants.FALSE, "Please validate bank details for self settlement.", null),
											HttpStatus.BAD_REQUEST);
								}
							}else{
								return new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.FALSE,"MERCHANT should be enabled for self settlement ", null),
										HttpStatus.BAD_REQUEST);
							}
						}else{
							merchantMaster.setSelfSettlementFlag(0);
						}
						merchantMasterRepository.save(merchantMaster);
						
						auditLogs.setFeatureGrpId("ONBOARDING");
						auditLogs.setFeatureId("ONBOARDING_CRU");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
	//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setNewData(new Gson().toJson(merchantMasterModal));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						fpCpAuditLogsRepository.save(auditLogs);
						
						return new ResponseEntity<GeneralResponse>(
								new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, merchantMaster.getId()),
								HttpStatus.OK);
					}else{
						return new ResponseEntity<GeneralResponse>(
								new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
								HttpStatus.BAD_REQUEST);
					}
				} else {
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
							HttpStatus.BAD_REQUEST);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
						HttpStatus.BAD_REQUEST);
	
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@PostMapping("/createMerchant")
	public ResponseEntity<GeneralResponse> postAllMerchantDetailsNew(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody MerchantMasterModal merchantMasterModal)
			throws UnsupportedEncodingException, ParseException {
		
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);
		
		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
		
			if (merchantMasterModal != null) {
				MerchantMaster master = merchantMasterRepository.findByMerchantLoginId(merchantMasterModal.getMerchantLoginId());
				if (master == null) {
					MerchantMaster merchantMaster = new MerchantMaster();
					int superUserId = 0;
					if (merchantMasterModal.getSuperMerchantId() != 0 ) {
						superUserId = merchantMasterModal.getSuperMerchantId();
					}else{
						 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.SELECT_DISTRIBUTOR,merchantMaster.getId()) ,HttpStatus.BAD_REQUEST);
					}
					ParentMerchantMaster parentMaster = null;
					SuperMerchantMaster superMaster = superMerchantMasterRepository.findOne(superUserId);
					if (superMaster != null && superMaster.getParentId() != null) {
						parentMaster = parentMerchantMasterRepository.findOne(superMaster.getParentId());
					}
	
					merchantMaster.setMerchantCityName(merchantMasterModal.getMerchantCityName());
					merchantMaster.setMerchantDistrictName(merchantMasterModal.getMerchantDistrictName());
					merchantMaster.setMerchantPincode(merchantMasterModal.getMerchantPinCode());
					merchantMaster.setAadhaarNumber(merchantMasterModal.getAadhaarNumber());
					merchantMaster.setMerchantName(merchantMasterModal.getMerchantName());
					merchantMaster.setMerchantLoginId(merchantMasterModal.getMerchantLoginId());
					merchantMaster.setMerchantLoginPin(merchantMasterModal.getMerchantLoginPin());
					merchantMaster.setMerchantAddress(merchantMasterModal.getMerchantAddress());
					merchantMaster.setMerchantPhoneNumber(merchantMasterModal.getMerchantPhoneNumber());
					merchantMaster.setEmailId(merchantMasterModal.getEmailId());
					 merchantMaster.setUserPan(merchantMasterModal.getUserPan());
					merchantMaster.setBankAccountName(merchantMasterModal.getBankAccountName());
					merchantMaster.setUserType(String.valueOf(merchantMasterModal.getUserType()));
					 merchantMaster.setCompanyBankAccountNumber(merchantMasterModal.getCompanyBankAccountNumber());
					merchantMaster.setCompanyBankBranchName(merchantMasterModal.getCompanyBankBranchName());
					 merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName());
					 merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode());
					merchantMaster.setCompanyLegalName(merchantMasterModal.getCompanyLegalName());
					merchantMaster.setCompanyMarketingName(merchantMasterModal.getCompanyMarketingName());
					merchantMaster.setDateOfIncorporation(merchantMasterModal.getDateOfIncorporation());
					merchantMaster.setNoOfTerminals(merchantMasterModal.getNoOfTerminals());
					merchantMaster.setGstInNumber(merchantMasterModal.getGstInNumber());
					merchantMaster.setAadharPayEnable(merchantMasterModal.getAadharPayEnable());
					merchantMaster.setUpiEnable(merchantMasterModal.getUpiEnable());
					merchantMaster.setUpiQrEnable(merchantMasterModal.getUpiQrEnable());
					merchantMaster.setBalanceEnquiryEnable(merchantMasterModal.getBalanceEnquiryEnable());
					merchantMaster.setCashDepositEnable(merchantMasterModal.getCashDepositEnable());
					merchantMaster.setCashWithdrawEnable(merchantMasterModal.getCashWithdrawEnable());
					merchantMaster.setFundTransferEnable(merchantMasterModal.getFundTransferEnable());
					merchantMaster.setMinistatmentEnable(merchantMasterModal.getMinistatmentEnable());
					merchantMaster.setCollectCashEnable(merchantMasterModal.getCollectCashEnable());
					merchantMaster.setDemandSheetEnable(merchantMasterModal.getDemandSheetEnable());
					merchantMaster.setDropCashEnable(merchantMasterModal.getDropCashEnable());
					merchantMaster.setInstantSettlementEnable(0);
					merchantMaster.setActiveFlag(1);
					merchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
					merchantMaster.setCreatedIpAddress(ip);
					merchantMaster.setPgEnable(merchantMasterModal.getPgEnable());
					merchantMaster.setMposEnable(merchantMasterModal.getMposEnable());
					
					merchantMaster.setMicroAtmEnable(merchantMasterModal.getMatmEnable());
					merchantMaster.setTwoFaEnable(merchantMasterModal.getTwoFaEnable());
					merchantMaster.setUpiIntentEnable(merchantMasterModal.getUpiIntentEnable());
					merchantMaster.setCreatedTimestamp(new Date());
					if(commonTasks.check(merchantMasterModal.getMerchantLogo())){
						merchantMaster.setMerchantLogo(commonTasks.toBase64(merchantMasterModal.getMerchantLogo(), 1001));
					}
					if(commonTasks.check(merchantMasterModal.getEkycDocuments())){
						merchantMaster.setEkycDocuments(commonTasks.toBase64(merchantMasterModal.getEkycDocuments(), 1002));
					}
					if(commonTasks.check(merchantMasterModal.getCancelledChequeImages())){
						merchantMaster.setCancelledChequeImages(commonTasks.toBase64(merchantMasterModal.getCancelledChequeImages(), 1003));
					}
					if(commonTasks.check(merchantMasterModal.getShopAndPanImage())){
						merchantMaster.setShopAndPanImage(commonTasks.toBase64(merchantMasterModal.getShopAndPanImage(), 1004));
					}
					merchantMaster.setStateMaster(stateMasterRepository.findOne(merchantMasterModal.getStateId()));
					merchantMaster.setCompanyTypeMasterData(companyTypeMasterDataRepository.findOne(merchantMasterModal.getCompanyTypeId()));
					merchantMaster.setSuperMerchantMaster(superMerchantMasterRepository.findOne(superUserId));
					System.out.println(merchantMasterModal.getBranchId());
					if(merchantMasterModal.getBranchId()!=null){
					merchantMaster.setBranchMaster(branchMasterRepository.findOne(merchantMasterModal.getBranchId()));
					}
					
					merchantMaster.setTimestamp(new Date());
					merchantMasterRepository.save(merchantMaster);
					
					if (commonTasks.check(merchantMasterModal.getCompanyBankAccountNumber(),merchantMasterModal.getCompanyIfscCode())) {
						merchantMaster.setCompanyBankAccountNumber(merchantMasterModal.getCompanyBankAccountNumber());
						merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode().toUpperCase());
						merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName().toUpperCase());
						double amount=1.0;
						try {
							GeneralResponse generalResponse = commonRepositoryMethods.IMPSP2ATransaction(merchantMasterModal.getCompanyBankAccountNumber(), merchantMasterModal.getCompanyIfscCode(),amount, merchantMasterModal.getMerchantName(), merchantMasterModal.getMerchantPhoneNumber(),merchantMasterModal.getMerchantPhoneNumber(), merchantMasterModal.getId());
							if (!generalResponse.isStatus()) {
								merchantMaster.setAutomaticBankVerification(0);
								merchantMaster.setAutomaticBankVerificationDetails((generalResponse.getData()).toString());
								merchantMaster.setRemarks(generalResponse.getMessage());
							} else {
								merchantMaster.setAutomaticBankVerification(1);
								merchantMaster.setAutomaticBankVerificationDetails(((IMPSResponseModel) generalResponse.getData()).getBeneName());
								merchantMaster.setRemarks(generalResponse.getMessage());
							}
	
						} catch (Exception e) {
							e.printStackTrace();
							merchantMaster.setRemarks(e.getMessage());
						}
					}
					
					if (commonTasks.check(merchantMasterModal.getUserPan())) {
						merchantMasterModal.setUserPan(merchantMasterModal.getUserPan().toUpperCase());
						String panName = baseService.panVerification(request, merchantMasterModal.getUserPan().toUpperCase());
						if(commonTasks.check(panName)) {
							merchantMasterModal.setAutomaticPanVerification(1);
							merchantMasterModal.setAutomaticPanVerificationDetails(panName);
						}
						else {
							merchantMasterModal.setAutomaticPanVerification(0);
						}
						
					}
					
					
					if (merchantMaster.getAutomaticBankVerification() == null && commonTasks.check(merchantMaster.getCompanyBankAccountNumber(), merchantMaster.getCompanyIfscCode())) {
						merchantMasterRepository.save(merchantMaster);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_BANK_DETAILS, merchantMaster.getId()), HttpStatus.OK);
					} else if (merchantMaster.getAutomaticBankVerification() != null) {
						if (merchantMaster.getAutomaticBankVerification() == 0) {
							merchantMasterRepository.save(merchantMaster);
							return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_BANK_DETAILS, merchantMaster.getId()), HttpStatus.OK);
						}
					}
					merchantMasterRepository.save(merchantMaster);
					
//					AUDIT LOGS
					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(5);
					auditLogs.setNewData("created merchant "+new Gson().toJson(merchantMasterModal));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, merchantMaster.getId()),HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.MERCHANTID_ALREADY_EXISTS, null),HttpStatus.BAD_REQUEST);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),HttpStatus.BAD_REQUEST);
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			
		}
	}
	
	@PostMapping("/updateMerchant")
	public ResponseEntity<GeneralResponse> updateMerchantDetailsNew(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody MerchantMasterModal merchantMasterModal)
			throws UnsupportedEncodingException, ParseException {
		
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);
		
		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
		
				if (merchantMasterModal != null) {
				// MerchantMaster merchantMaster = new MerchantMaster();
				// merchantMaster.setId();
	
				if (merchantMasterModal.getId() != null) {
					System.out.println("merchant id : "+merchantMasterModal.getId()+" record is edited by : "+authenticateUserResponse.getUserName());
					System.out.println("The merchant edited data id : "+merchantMasterModal);
					
					MerchantMaster merchantMaster = merchantMasterRepository.findOne(merchantMasterModal.getId());
					SuperMerchantMaster superMerchantMaster=null;
					if(merchantMaster.getSuperMerchantMaster() != null){
					superMerchantMaster = merchantMaster.getSuperMerchantMaster();
					}
					ParentMerchantMaster parentMaster=null;
					if(merchantMaster.getSuperMerchantMaster().getParentId() != null){
						 parentMaster = parentMerchantMasterRepository.findOne(merchantMaster.getSuperMerchantMaster().getParentId());
						}
					if (commonTasks.check(merchantMasterModal.getMerchantName())) {
						merchantMaster.setMerchantName(merchantMasterModal.getMerchantName());
					}
					if (commonTasks.check(merchantMasterModal.getMerchantLoginId())) {
						merchantMaster.setMerchantLoginId(merchantMasterModal.getMerchantLoginId());
					}
					if (commonTasks.check(merchantMasterModal.getMerchantAddress())) {
						merchantMaster.setMerchantAddress(merchantMasterModal.getMerchantAddress());
					}
					if (commonTasks.check(merchantMasterModal.getMerchantPhoneNumber())) {
						merchantMaster.setMerchantPhoneNumber(merchantMasterModal.getMerchantPhoneNumber());
					}
					if (commonTasks.check(merchantMasterModal.getEmailId())) {
						merchantMaster.setEmailId(merchantMasterModal.getEmailId());
					}
					if (commonTasks.check(merchantMasterModal.getMerchantCityName())) {
						merchantMaster.setMerchantCityName(merchantMasterModal.getMerchantCityName());
					}
					if (commonTasks.check(merchantMasterModal.getMerchantDistrictName())) {
						merchantMaster.setMerchantDistrictName(merchantMasterModal.getMerchantDistrictName());
					}
					if (commonTasks.check(merchantMasterModal.getUserPan())) {
						merchantMaster.setUserPan(merchantMasterModal.getUserPan());
					}
					if (commonTasks.check(merchantMasterModal.getBankAccountName())) {
						merchantMaster.setBankAccountName(merchantMasterModal.getBankAccountName());
					}
					if (commonTasks.check(merchantMasterModal.getCompanyBankBranchName())) {
						merchantMaster.setCompanyBankBranchName(merchantMasterModal.getCompanyBankBranchName());
					}
					if (commonTasks.check(merchantMasterModal.getCompanyBankName())) {
						merchantMaster.setCompanyBankName(merchantMasterModal.getCompanyBankName());
					}
					if (commonTasks.check(merchantMasterModal.getCompanyIfscCode())) {
						merchantMaster.setCompanyIfscCode(merchantMasterModal.getCompanyIfscCode());
					}
					if (commonTasks.check(merchantMasterModal.getCompanyLegalName())) {
						merchantMaster.setCompanyLegalName(merchantMasterModal.getCompanyLegalName());
					}
					if (commonTasks.check(merchantMasterModal.getCompanyMarketingName())) {
						merchantMaster.setCompanyMarketingName(merchantMasterModal.getCompanyMarketingName());
					}
					if (commonTasks.check(merchantMasterModal.getDateOfIncorporation())) {
						merchantMaster.setDateOfIncorporation(merchantMasterModal.getDateOfIncorporation());
					}
					if (commonTasks.check(merchantMasterModal.getNoOfTerminals())) {
						merchantMaster.setNoOfTerminals(merchantMasterModal.getNoOfTerminals());
					}
					if (commonTasks.check(merchantMasterModal.getGstInNumber())) {
						merchantMaster.setGstInNumber(merchantMasterModal.getGstInNumber());
					}
					if(commonTasks.check(merchantMasterModal.getRemarks())) {
						merchantMaster.setRemarks(merchantMasterModal.getRemarks());
					}
					if (merchantMasterModal.getAadharPayEnable() != null) {
						merchantMaster.setAadharPayEnable(merchantMasterModal.getAadharPayEnable());
					}
					if (merchantMasterModal.getUpiEnable() != null) {
						merchantMaster.setUpiEnable(merchantMasterModal.getUpiEnable());
					}
					if (merchantMasterModal.getUpiQrEnable() != null) {
						merchantMaster.setUpiQrEnable(merchantMasterModal.getUpiQrEnable());
					}
					if (merchantMasterModal.getBalanceEnquiryEnable() != null) {
						merchantMaster.setBalanceEnquiryEnable(merchantMasterModal.getBalanceEnquiryEnable());
					}
					if (merchantMasterModal.getCashDepositEnable() != null) {
						merchantMaster.setCashDepositEnable(merchantMasterModal.getCashDepositEnable());
					}
					if (merchantMasterModal.getCashWithdrawEnable() != null) {
						merchantMaster.setCashWithdrawEnable(merchantMasterModal.getCashWithdrawEnable());
					}
					if (merchantMasterModal.getFundTransferEnable() != null) {
						merchantMaster.setFundTransferEnable(merchantMasterModal.getFundTransferEnable());
					}
					if (merchantMasterModal.getMinistatmentEnable() != null) {
						merchantMaster.setMinistatmentEnable(merchantMasterModal.getMinistatmentEnable());
					}
					if (merchantMasterModal.getCollectCashEnable() != null) {
						merchantMaster.setCollectCashEnable(merchantMasterModal.getCollectCashEnable());
					}
					if (merchantMasterModal.getDemandSheetEnable() != null) {
						merchantMaster.setDemandSheetEnable(merchantMasterModal.getDemandSheetEnable());
					}
					if (merchantMasterModal.getDropCashEnable() != null) {
						merchantMaster.setDropCashEnable(merchantMasterModal.getDropCashEnable());
					}
					if (merchantMasterModal.getPgEnable() != null) {
						merchantMaster.setPgEnable(merchantMasterModal.getPgEnable());
					}
					if (merchantMasterModal.getMposEnable() != null) {
						merchantMaster.setMposEnable(merchantMasterModal.getMposEnable());
					}
					if (merchantMasterModal.getMatmEnable() != null) {
						merchantMaster.setMicroAtmEnable(merchantMasterModal.getMatmEnable());
					}
					if (merchantMasterModal.getTwoFaEnable() != null) {
						merchantMaster.setTwoFaEnable(merchantMasterModal.getTwoFaEnable());
					}
					if (merchantMasterModal.getUpiIntentEnable() != null) {
						merchantMaster.setUpiIntentEnable(merchantMasterModal.getUpiIntentEnable());
					}
					System.out.println(" Active Flag : "+merchantMasterModal.getActiveFlag());
					if (merchantMasterModal.getActiveFlag() != null) {
						if(merchantMasterModal.getActiveFlag() != 0){
						merchantMaster.setActiveFlag(1);
						}else{
							merchantMaster.setActiveFlag(0);
						} 
					}
						if (merchantMasterModal.getBranchId() != null) {
	//						BranchMaster branchMas=;
							merchantMaster.setBranchMaster(branchMasterRepository.findOne(merchantMasterModal.getBranchId()));
						}
					merchantMasterRepository.save(merchantMaster);
									if (commonTasks.check(merchantMasterModal.getMerchantLoginPin())
							&& merchantMasterModal.getMerchantLoginPin() != null) {
						merchantMaster.setMerchantLoginPin(merchantMasterModal.getMerchantLoginPin());
					}
					merchantMaster.setSubmitedTimestamp(new Date());
					merchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					merchantMaster.setEditedIpAddress(ip);
					merchantMaster.setEditedTimestamp(new Date());
					merchantMasterRepository.save(merchantMaster);
	
					
					merchantMasterRepository.save(merchantMaster);
					
//					AUDIT LOGS
					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData(new Gson().toJson(merchantMasterModal));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, merchantMaster.getId()),
							HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
							HttpStatus.BAD_REQUEST);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
						HttpStatus.BAD_REQUEST);
	
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			
		}

	}




}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.jpa.repository.Query;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.BlockedMerchantData;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.MerchantTerminalMap;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.BlockedMerchantDataRepository;
import com.apptmyz.fpaepsdb.repository.BranchMasterRepository;
import com.apptmyz.fpaepsdb.repository.CityMasterRepository;
import com.apptmyz.fpaepsdb.repository.CompanyTypeMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.MerchantTerminalMapRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.MerchantDemographicsDataModel;
import com.apptmyz.fpcontrolpanel.data.MerchantDemographicsResDataModel;
import com.apptmyz.fpcontrolpanel.data.MerchantMasterModal;
import com.apptmyz.fpcontrolpanel.data.MerchantTransactionDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpcontrolpanel.response.RRNSearchResponseModel;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.fingpay.fpekycdatadb.entity.EkycAssignedTerminalData;
import com.fingpay.fpekycdatadb.entity.EkycInfoData;
import com.fingpay.fpekycdatadb.repository.EkycAssignedTerminalDataRepository;
import com.fingpay.fpekycdatadb.repository.EkycInfoDataRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/demographics")
public class MerchantDemographicsController {
	
	@Autowired
	JwtUtil jwtUtil;
	
	@Autowired
	CommonTasks commonTasks;
	
	@Autowired
	MerchantMasterRepository merchantMasterRepository;
	
	@Autowired
	BlockedMerchantDataRepository blockedMerchantDataRepository;
	
	@Autowired
	SuperMerchantMasterRepository superMerchantMasterRepository;
	
	@Autowired
	EkycInfoDataRepository ekycInfoDataRepository;
	
	@Autowired
	EkycAssignedTerminalDataRepository ekycAssignedTerminalDataRepository;
	
	@Autowired
	MerchantTerminalMapRepository merchantTerminalMapRepository;

//	@PostMapping("/data/{rrn}/{bankSwitch}/{product}")
//	public ResponseEntity<GeneralResponse> postDemographicsData(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@RequestHeader("token") String token,@PathVariable String rrn,@PathVariable String bankSwitch,@PathVariable String product){
	@GetMapping("/data/{mLoginId}/{aggrName}")
	public ResponseEntity<GeneralResponse> postDemographicsData(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,@RequestHeader("token") String token,@PathVariable String mLoginId,@PathVariable String aggrName){
	AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (MalformedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("INFORMATION")) {
				if(data.getFeatureCode().equals("DEMOGRAPHIC_DATA")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		Integer merchantId =0;
		SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy hh:mm:ss");
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
		if (mLoginId != null && aggrName != null) {
//			if (rrn != null && bankSwitch != null && product != null) {
//				if(product.equals("CW") || product.equals("MATMCW") || product.equals("AP")){
//					merchantId = getMerchantData(rrn,product,bankSwitch);
//					merchantId = getMerchantData(mLoginId,aggrName,merchantName);
//			       merchantId = merchantMasterRepository.findByMerchantLoginIdAndMerchantNameAndSuperMerchantMasterSuperMerchantName(mLoginId,aggrName);
//					if(merchantId !=null){
			     List<MerchantDemographicsDataModel> merchantdemoList = new ArrayList<MerchantDemographicsDataModel>();
						MerchantDemographicsDataModel merchantDemographicsDataModel = null;
						System.out.println("MLoginID:"+ mLoginId+"AGRNEM:"+aggrName);
						MerchantMaster merchantMaster  = merchantMasterRepository.findTopByMerchantLoginIdAndSuperMerchantMasterSuperMerchantName(mLoginId,aggrName);
						if(merchantMaster !=null){
							List<MerchantMaster> mmasterL = merchantMasterRepository.getMerchantDataPanAndHash(merchantMaster.getEkycPanNumber(),merchantMaster.getLastUsedHash());
							if(mmasterL!=null && mmasterL.size() > 0){
								for(MerchantMaster mmaster : mmasterL){
									merchantDemographicsDataModel = new MerchantDemographicsDataModel();
									merchantDemographicsDataModel.setMerchantName(mmaster.getMerchantName());
									merchantDemographicsDataModel.setLoginID(mmaster.getMerchantLoginId());
									merchantDemographicsDataModel.setFirstOnboardingDate(mmaster.getCreatedTimestamp() !=null ?formatter.format(mmaster.getCreatedTimestamp()):null);
									merchantDemographicsDataModel.setEkycAddress(mmaster.getEkycAddressLine1()+","+mmaster.getEkycAddressLine2()+","+mmaster.getEkycState()+","+mmaster.getEkycCity());
									merchantDemographicsDataModel.setOnboardingAddress(mmaster.getMerchantAddress());
									merchantDemographicsDataModel.setOnboardingMobileNumber(mmaster.getMerchantPhoneNumber());
									merchantDemographicsDataModel.setPanNumber(mmaster.getEkycPanNumber());
									merchantDemographicsDataModel.setLastHash(mmaster.getLastUsedHash());
//									merchantDemographicsDataModel.setEkycPdf((String) mmaster[9]);
									SuperMerchantMaster smaster = superMerchantMasterRepository.findOne(mmaster.getSuperMerchantMaster().getId());
									if(smaster != null){
										merchantDemographicsDataModel.setAggregatorName(smaster.getSuperMerchantName());
									}
									List<EkycAssignedTerminalData> assignedTerminalData = ekycAssignedTerminalDataRepository.findByMerchantId(mmaster.getId());
									if(assignedTerminalData!=null){
										for(EkycAssignedTerminalData ekycassigned : assignedTerminalData){
											merchantDemographicsDataModel.setDateofICICIAprovaledTID(ekycassigned.getRequestedTimestamp() !=null ?formatter.format(ekycassigned.getRequestedTimestamp() ):null);
										}
									}
									
									List<MerchantTerminalMap> merchantterminal = merchantTerminalMapRepository.findByMerchantId(mmaster.getId());
									if(merchantterminal!=null){
										for(MerchantTerminalMap terminal : merchantterminal){
											if(merchantDemographicsDataModel.getTerminalId()!=null) {
												merchantDemographicsDataModel.setTerminalId(merchantDemographicsDataModel.getTerminalId()+","+terminal.getAcqSwitch()+"-"+terminal.getTerminalId());
											}else {
												merchantDemographicsDataModel.setTerminalId(terminal.getAcqSwitch()+"-"+terminal.getTerminalId());
											}
										}
									}
									
									EkycInfoData ekycInfoData = ekycInfoDataRepository.findByMerchantId(mmaster.getId());
									if(ekycInfoData != null){
										merchantDemographicsDataModel.setOnboardingLatLong(ekycInfoData.getLatitude()+","+ekycInfoData.getLongitude());
										merchantDemographicsDataModel.setEkycAadhaar(ekycInfoData.getAadharNumber());
										merchantDemographicsDataModel.seteEkycDate(ekycInfoData.getRequestTimestamp() !=null ?formatter.format(ekycInfoData.getRequestTimestamp()):null);
										merchantDemographicsDataModel.setEkycPhoneNumber(ekycInfoData.getMobileNumber());
										merchantDemographicsDataModel.setApprovedTid(ekycInfoData.getTerminalId());
										merchantDemographicsDataModel.setOnboardingDeviceIMEI(ekycInfoData.getDeviceImei());
									}
									List<BlockedMerchantData> blockedMerchantData1 = blockedMerchantDataRepository.getBlockedMerchantDataWithPanORAadharMore(merchantDemographicsDataModel.getPanNumber(),merchantDemographicsDataModel.getLastHash(),merchantDemographicsDataModel.getOnboardingDeviceIMEI(),"",merchantDemographicsDataModel.getOnboardingMobileNumber(),"","","","");
									for(BlockedMerchantData blockedMerchantData : blockedMerchantData1){
										if(blockedMerchantData !=null){
											merchantDemographicsDataModel.setBlockDate(blockedMerchantData.getBlockedTime() !=null?formatter.format(blockedMerchantData.getBlockedTime()):null);
											merchantDemographicsDataModel.setBlocked("Y");
											merchantDemographicsDataModel.setReasonForBlocking(blockedMerchantData.getBlockedBy());
										}else{
											merchantDemographicsDataModel.setBlocked("N");
										}
									}
									merchantdemoList.add(merchantDemographicsDataModel);
								}
//							for(MerchantMaster mmaster : mmasterL){
////								Object[] mmaster = mmasterL.get(0);
//								merchantDemographicsDataModel = new MerchantDemographicsDataModel();
//								merchantDemographicsDataModel.setMerchantName((String) mmaster[0]);
//								merchantDemographicsDataModel.setLoginID((String) mmaster[1]);
//								merchantDemographicsDataModel.seteEkycDate(mmaster[2] !=null ?formatter.format(mmaster[2]):null);
//								merchantDemographicsDataModel.setAggregatorName((String) mmaster[3]);
//								merchantDemographicsDataModel.setFirstOnboardingDate(mmaster[4] !=null ?formatter.format(mmaster[4]):null);
//								merchantDemographicsDataModel.setEkycAddress((String) mmaster[5]+","+(String) mmaster[6]+","+(String) mmaster[7]+","+(String) mmaster[8]);
//								merchantDemographicsDataModel.setEkycPhoneNumber((String) mmaster[9]);
//								merchantDemographicsDataModel.setOnboardingAddress((String) mmaster[10]);
//								merchantDemographicsDataModel.setOnboardingMobileNumber((String) mmaster[11]);
//								merchantDemographicsDataModel.setApprovedTid((String) mmaster[12]);
//								merchantDemographicsDataModel.setDateofICICIAprovaledTID(mmaster[13] !=null ?formatter.format(mmaster[13]):null);
//								merchantDemographicsDataModel.setOnboardingDeviceIMEI((String) mmaster[14]);
//								merchantDemographicsDataModel.setEkycAadhaar((String) mmaster[15]);
//								merchantDemographicsDataModel.setPanNumber((String) mmaster[16]);
//								merchantDemographicsDataModel.setOnboardingLatLong((Double) mmaster[17]+","+(Double) mmaster[18]);
//								merchantDemographicsDataModel.setLastHash((String) mmaster[22]);
////								merchantDemographicsDataModel.setEkycPdf((String) mmaster[9]);
//								List<BlockedMerchantData> blockedMerchantData1 = blockedMerchantDataRepository.findBySuperMerchantIdAndMerchantLoginId((Integer) mmaster[21], merchantDemographicsDataModel.getLoginID());
//								for(BlockedMerchantData blockedMerchantData : blockedMerchantData1){
//									if(blockedMerchantData !=null){
//										merchantDemographicsDataModel.setBlockDate(blockedMerchantData.getBlockedTime() !=null?formatter.format(blockedMerchantData.getBlockedTime()):null);
//										merchantDemographicsDataModel.setBlocked("Y");
//										merchantDemographicsDataModel.setReasonForBlocking(blockedMerchantData.getBlockedBy());
//									}else{
//										merchantDemographicsDataModel.setBlocked("N");
//									}
//								}
//								merchantdemoList.add(merchantDemographicsDataModel);
//							}
							}
						}
						else {
							return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),HttpStatus.OK);
						}
						
//						List<Integer> merchantList = new ArrayList<Integer>();
//						List<MerchantTransactionDataModel> merchantTransactionsList = new ArrayList<MerchantTransactionDataModel>();
//						List<MerchantMaster> arkMerchants = merchantMasterRepository.findByLastUsedHashAndEkycPanNumber(merchantDemographicsDataModel.getLastHash(),merchantDemographicsDataModel.getPanNumber());
//						if(arkMerchants != null){
//							for(MerchantMaster mlist : arkMerchants){
//								MerchantTransactionDataModel txnList = getTransactionData(mlist.getId());
//								MerchantTransactionDataModel merchantTransactionDataModel= null;
//								for(MerchantTransactionDataModel txn: txnList){
//									merchantTransactionDataModel= new MerchantTransactionDataModel();
//									merchantTransactionDataModel.setAadhaarCustomer(txn.getAadhaarCustomer());
//									merchantTransactionDataModel.setAggregatorName(txn.getAggregatorName());
//									merchantTransactionDataModel.setBankSwitch(bankSwitch);
//									merchantTransactionDataModel.setErrorMsg(txn.getErrorMsg());
//									merchantTransactionDataModel.setIMEI(txn.getIMEI());
//									merchantTransactionDataModel.setIssuingBank(txn.getIssuingBank());
//									merchantTransactionDataModel.setLatLong(txn.getLatLong());
//									merchantTransactionDataModel.setMerchantId(txn.getMerchantId());
//									merchantTransactionDataModel.setMerchantLoginId(txn.getMerchantLoginId());
//									merchantTransactionDataModel.setMerchantName(txn.getMerchantName());
//									merchantTransactionDataModel.setMerchantTxnId(txn.getMerchantTxnId());
//									merchantTransactionDataModel.setProduct(product);
//									merchantTransactionDataModel.setRequestedTimestamp(txn.getRequestedTimestamp());
//									merchantTransactionDataModel.setResponseRRN(txn.getResponseRRN());
//									merchantTransactionDataModel.setStatusCode(txn.getStatusCode());
//									merchantTransactionDataModel.setTid(txn.getTid());
//									merchantTransactionDataModel.setTransactionAmount(txn.getTransactionAmount());
//									merchantTransactionsList.add(txnList);
//								}
//							}
//						}
						
						
						MerchantDemographicsResDataModel merchantDemographicsResDataModel  = new MerchantDemographicsResDataModel();
						merchantDemographicsResDataModel.setMerchantDemographics(merchantdemoList);
//						merchantDemographicsResDataModel.setMerchantTransactions(merchantTransactionsList);
						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, merchantDemographicsResDataModel),HttpStatus.OK);
//					}else{
//						return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, "coudn't find rrn in database", null),HttpStatus.OK);
//					}
//				}else{
//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, "invalid product mentioned", null),HttpStatus.OK);
//				}
			} else {
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, "Invalid input fields mentioned or invalid mLoginId.", null),HttpStatus.OK);
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	public Integer getMerchantData(String rrn,String product,String bankswitch) {
		RRNSearchResponseModel getMerchantDetailsResponse = null;
		GeneralResponse panVerificationResponse = new GeneralResponse();
		try{
			String url = "https://fpekyc.tapits.in/fpdockyc/api/v1/rrnsearch/rrn/"+rrn;
			System.out.println("getMerchantData : \nSending 'POST' request to URL : " + url);			
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			con.setRequestMethod("POST");
			con.setRequestProperty("Content-Type", "application/json");
			con.setReadTimeout(50000);
			con.setDoOutput(true);
			DataOutputStream wr = new DataOutputStream(con.getOutputStream());
			wr.flush();
			wr.close();
			int responseCode = con.getResponseCode();
			System.out.println("getMerchantData : Response Code : " + responseCode);
			BufferedReader in = null;
			String inputLine;
			StringBuffer response = new StringBuffer();
			if(con.getResponseCode() != 200){
				System.out.println("getMerchantData : merchantLoginId verification api response from client is success");
				in = new BufferedReader(new InputStreamReader(con.getErrorStream()));
			} else {
				System.out.println("getMerchantData : merchantLoginId verification api response from client is success");
				in = new BufferedReader(new InputStreamReader(con.getInputStream()));
			}
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			Gson gson = new Gson();
			System.out.println("verifyMerchantData : merchantLoginId verification api response from client= "+response.toString());
			
			JSONObject objdata = new JSONObject(response.toString());
			
			if(objdata.getJSONObject("data") != null)
			{
			getMerchantDetailsResponse = gson.fromJson(objdata.getJSONObject("data").toString(), RRNSearchResponseModel.class);
			
			System.out.println("verifyMerchantDatagetMerchantDetailsResponse : "+getMerchantDetailsResponse.toString());
			}
			
			return getMerchantDetailsResponse.getMerchantId();
		} catch (Exception e){
			System.out.println("getMerchantData : "+e.getMessage());
		}
		return getMerchantDetailsResponse.getMerchantId();
	}
	
	public MerchantTransactionDataModel getTransactionData(Integer merchantId) {
		MerchantTransactionDataModel getMerchantDetailsResponse = null;
		try{
			String url = "https://fpuat.tapits.in/fpaepsanalytics/api/mLoginIdsearch/demography/"+merchantId;
			System.out.println("getMerchantTransactionData : \nSending 'POST' request to URL : " + url);			
			URL obj = new URL(url);
			HttpURLConnection con = (HttpURLConnection) obj.openConnection();
			System.out.println("getMerchantTransactionData :****************GET");
			con.setRequestMethod("GET");
			con.setRequestProperty("Content-Type", "application/json");
			con.setReadTimeout(50000);
			con.setDoOutput(true);
			DataOutputStream wr = new DataOutputStream(con.getOutputStream());
			wr.flush();
			wr.close();
			int responseCode = con.getResponseCode();
			System.out.println("getMerchantTransactionData : Response Code : " + responseCode);
			BufferedReader in = null;
			String inputLine;
			StringBuffer response = new StringBuffer();
			if(con.getResponseCode() != 200){
				System.out.println("getMerchantTransactionData : merchantLoginId verification api response from client is success");
				in = new BufferedReader(new InputStreamReader(con.getErrorStream()));
			} else {
				System.out.println("getMerchantTransactionData : merchantLoginId verification api response from client is success");
				in = new BufferedReader(new InputStreamReader(con.getInputStream()));
			}
			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();
			Gson gson = new Gson();
			System.out.println("getMerchantTransactionData : merchantLoginId verification api response from client= "+response.toString());
			
			JSONObject objdata = new JSONObject(response.toString());
			
			if(objdata.getJSONObject("data") != null)
			{
			getMerchantDetailsResponse = gson.fromJson(objdata.getJSONObject("data").toString(), MerchantTransactionDataModel.class);
			
			System.out.println("getMerchantTransactionData : "+getMerchantDetailsResponse.toString());
			}
			
			return getMerchantDetailsResponse;
		} catch (Exception e){
			System.out.println("getMerchantTransactionData : "+e.getMessage());
		}
		return getMerchantDetailsResponse;
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.MerchantReportDataModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/onboardingReport")
public class OnboardingReportsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private MerchantMasterRepository merchantMasterRepository;

	@PostMapping("/merchant/kotak/Excel/report/{fromDate}/{toDate}/{id}")
	public ResponseEntity<GeneralResponse> merchantReport(@PathVariable String fromDate, @PathVariable String toDate,@PathVariable Integer id, HttpSession httpSession ,@RequestHeader("token") String token)
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> generalResponse = null;
		  try{
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
	  } catch (ExpiredJwtException e2) {
		  e2.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (UnsupportedJwtException e2) {
		  e2.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	 
	  } catch (MalformedJwtException e2) {
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (SignatureException e2) {
		  e2.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (IllegalArgumentException e2) {
		  e2.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (UnsupportedEncodingException e) {
		  e.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  }
		  boolean flag =true;
	  List<MerchantReportDataModel> merchants = new ArrayList<MerchantReportDataModel>();
	  MerchantReportDataModel model=null;
	  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	  System.out.println("fromDate:"+fromDate);
	  System.out.println("toDate:"+toDate);
	  
	  if (authenticateUserResponse.getActiveFlag() == 101)
	  {
		  try
		  {
			  
//			  SuperMerchantMaster superMaster= superMerchantMasterRepository.findOne(id);
			  List<MerchantMaster> merchantList = merchantMasterRepository.findByTimestampBetweenAndMerchantFranchiseIdIsNullAndSuperMerchantMasterId(dateFormat.parse(fromDate), dateFormat.parse(toDate),id);
			  if(merchantList.size()>0)
			  {
				  for(MerchantMaster m: merchantList)
				  {
					  flag=true;
					   model=new MerchantReportDataModel();
					  if(m.getMerchantName()!=null && !m.getMerchantName().equals(""))
					  {
						  model.setMerchantName(m.getMerchantName());
					  }
					  else
					  {
						  flag= false;
						  model.setRemarks("Inavlid Merchant Name");
						  model.setStatus("Failed");
					  }
					  if(m.getStateMaster()!=null)
					  {
						  model.setMerchantState(m.getStateMaster().getStateCode());
					  }
					  else if(m.getMerchantStateName()!=null && !m.getMerchantStateName().equals(""))
					  {
						  model.setMerchantState(m.getMerchantStateName());
					  }
					  else
					  {
						  flag= false;
						  if(model.getRemarks()==null)
						  {
						     model.setRemarks("Inavlid Merchant State");
						  }
						  else
						  {
							  model.setRemarks(model.getRemarks()+","+"Inavlid Merchant State");
						  }
				       }
					  if(m.getMerchantPhoneNumber()!=null && !m.getMerchantPhoneNumber().equals("") && m.getMerchantPhoneNumber().length()==10)
					  {
						  model.setMerchantPhoneNumber(m.getMerchantPhoneNumber());
					  }
					  else
					  {
						  flag= false;
						  if(model.getRemarks()==null)
						  {
						     model.setRemarks("Inavlid Merchant PhoneNumber");
						  }
						  else
						  {
							  model.setRemarks(model.getRemarks()+","+"Inavlid Merchant PhoneNumber");
						  }
					  }
//					  if(m.getUserPan()!=null && !m.getUserPan().equals(""))
//					  {
//						  model.setMerchantUserPan(m.getUserPan());
//					  }
//					  else
//					  {
//						  flag= false;
//						  if(model.getRemarks()==null)
//						  {
//						     model.setRemarks("Inavlid Merchant UserPan");
//						  }
//						  else
//						  {
//							  model.setRemarks(model.getRemarks()+","+"Inavlid Merchant UserPan");
//						  }
//					  }
					  if(m.getMerchantPincode()!=null && !m.getMerchantPincode().equals(""))
					  {
						  model.setMerchantPinCode(m.getMerchantPincode());
					  }
					  else
					  {
						  flag= false;
						  if(model.getRemarks()==null)
						  {
						     model.setRemarks("Inavlid Merchant PinCode");
						  }
						  else
						  {
							  model.setRemarks(model.getRemarks()+","+"Inavlid Merchant PinCode");
						  }
					  }
//					  if(m.getMerchantAddress()!=null && !m.getMerchantAddress().equals(""))
//					  {
//						  model.setMerchantAddress(m.getMerchantAddress());
//					  }
//					  else
//					  {
//						  flag= false;
//						  if(model.getRemarks()==null)
//						  {
//						     model.setRemarks("Inavlid Merchant Address");
//						  }
//						  else
//						  {
//							  model.setRemarks(model.getRemarks()+","+"Inavlid Merchant Address");
//						  }
//					  }
					  model.setMerchantAddress(m.getMerchantAddress()); 
					  model.setEmailId(m.getEmailId());
					  model.setGstInNumber(m.getGstInNumber());
					  model.setMerchantUserPan(m.getUserPan());
					  model.setMerchantLoginId(m.getMerchantLoginId());
					  if(m.getSuperMerchantMaster()!=null)
					  {
					     model.setSuperMerchantName(m.getSuperMerchantMaster().getLoginId()==null?m.getSuperMerchantMaster().getLoginId():m.getSuperMerchantMaster().getSuperMerchantName());
					  }
					  if(flag==true)
					  {
						  
						  model.setAccountNumber("");
						  model.setMappedTo("");
						  model.setDailyTransactionLimit("");
						  model.setMcc("");
						  model.setIfsc("");
						  model.setPurpose("");
						  model.setMerchantFranchiseId("FINGPAY"+String.format("%08d", m.getId()));
						  m.setMerchantFranchiseId(model.getMerchantFranchiseId());
						  model.setStatus("SUCCESS");
						  model.setVendorCode("FPY");
						  model.setTan("");
						  model.setMdr("");
						  m.setEditedTimestamp(new Date());
						  merchantMasterRepository.save(m);
					  }
					  else
					  {
						  model.setStatus("FAILED");
					  }
					  merchants.add(model);
					  
				  }
				  generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.SUCCESSFUL, merchants),
							HttpStatus.OK);
			  }
			  else
			  {
				  generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.NO_DATA_AVAILABLE, null),
							HttpStatus.OK);
			  }
		  }
		  catch(Exception e)
		  {
			  e.printStackTrace();
			  generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERRORS_EXCEPTION_IN_SERVER, null),
						HttpStatus.OK);
		  }
	  }
	  else
	  {
		  return new ResponseEntity<GeneralResponse>( HttpStatus.NOT_FOUND);
	  }
	  return generalResponse;
	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.SettlementInfoDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/oneOfSettl")
public class OneOfSettlementController {

	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@GetMapping(path ="/createRequest/data/{transactionDate}/{settlement}/{transactionType}/{primaryKey}/{settlementType}")
	public ResponseEntity<GeneralResponse> getMerchantSettlRecords(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String transactionDate,@PathVariable String settlement,@PathVariable String transactionType,
			@PathVariable String primaryKey, @PathVariable String settlementType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/createrequest/"+transactionDate+"/"+settlement+"/"+transactionType+"/"+primaryKey+"/"+settlementType);
		   	  HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/createrequest/"+transactionDate+"/"+settlement+"/"+transactionType+"/"+primaryKey+"/"+settlementType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
		   	   	 
				 System.out.println("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/createrequest/"+transactionDate+"/"+settlement+"/"+transactionType+"/"+primaryKey+"/"+settlementType);

	
				 System.out.println("http get set");
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 String msg = "";
				 if(responseCode == 200)
				  {
						 listData = new BasicResponseHandler().handleResponse(responseData);
						 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
						 
						 list = merchRec.getData();
						 msg = merchRec.getMessage();
						 
						 if(merchRec.isStatus()) {
							 	
			//					AUDIT LOGS
							    FpCpAuditLogs auditLogs = new FpCpAuditLogs();
			
								auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
								auditLogs.setFeatureId("ONE_OF_SETTL");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
			//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(1);
								auditLogs.setViewData("One of settlement request data "+transactionDate+","+transactionType+","+primaryKey+","+settlementType);
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
								fpCpAuditLogsRepository.save(auditLogs);
								
								return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
										msg,list), HttpStatus.OK);
						 }
					     
						 else
						 {
							 System.out.println(" respponse was 500");
					    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
		
						 }
				 }
				 else {
					 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PostMapping(path ="/validatePin/{transactionPin}")
	public ResponseEntity<GeneralResponse> validateSettlRecord(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody SettlementInfoDataModel validateModel, @PathVariable String transactionPin)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/oneOf/request/"+transactionPin);
			   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/oneOf/request/"+transactionPin);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=gson.toJson(validateModel);
				 
				 System.out.println("validate model "+validateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
//					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
						 
					 
//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setOldData(new Gson().toJson(validateModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,null), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping(path ="/toApprove/data/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getOneofToApprove(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/oneOf/requested/data/"+fromDate+"/"+toDate);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/oneOf/requested/data/"+fromDate+"/"+toDate);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("To approve One of settlement requests fetched from "+fromDate+" to "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PostMapping(path ="/approve/request/{transactionPin}")
	public ResponseEntity<GeneralResponse> approveOneofSettlRequest(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody SettlementInfoDataModel validateModel, @PathVariable String transactionPin)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/oneOf/settle/approver/"+transactionPin);
			   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/oneOf/settle/approver/"+transactionPin);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=gson.toJson(validateModel);
				 System.out.println("Validate model approver "+validateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(3);
					auditLogs.setOldData(new Gson().toJson(validateModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,dataObj), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping(path ="/oneOfSettl/his/report/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getOneofSettlReport(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/oneOf/history/data/"+fromDate+"/"+toDate);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/oneOf/history/data/"+fromDate+"/"+toDate);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("One of settlement history report fetched "+fromDate+" to "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@GetMapping(path ="/oneOfSettl/impshistory/report/{primarykeyid}")
	public ResponseEntity<GeneralResponse> getOneofIMPSHistorySettlReport(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable Integer primarykeyid)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("ONE_OF_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/oneofsettlement/oneOf/history/data/"+fromDate+"/"+toDate);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/oneofsettlement/oneOf/imps/history/data/"+primarykeyid);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("One of settlement imps history report fetched "+primarykeyid);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.CityMasterRepository;
import com.apptmyz.fpaepsdb.repository.CompanyTypeMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.AggregatorDataModal;
import com.apptmyz.fpcontrolpanel.data.SessionData;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpcontrolpanel.services.BaseService;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpSettlementTypeTemp;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBankDetailsTempRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpSettlementTypeTempRepository;
import com.apptmyz.globalverification.data.PanMasterDataModel;
import com.apptmyz.globalverification.services.PanMasterService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.itextpdf.text.pdf.codec.Base64;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/aggregator")
public class ParentMerchantController {
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private HttpSession httpSession;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private FpCpBankDetailsTempRepository fpCpBankDetailsTempRepository;

	@Autowired
	private FpCpSettlementTypeTempRepository fpCpSettlementTypeTempRepository;

	@Autowired
	private StateMasterRepository stateMasterRepository;

	@Autowired
	private CityMasterRepository cityMasterRepository;

	@Autowired
	private CompanyTypeMasterDataRepository companyTypeMasterDataRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private BaseService baseService;

	@PostMapping("/create")
	public ResponseEntity<GeneralResponse> postAllAggregtorDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody AggregatorDataModal aggregatorDataModal)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpSettlementTypeTemp settlemetType = null;
		FpCpBankDetailsTemp bankdetails = null;
		FpCpAuditLogs auditLogs = null;
		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			if (aggregatorDataModal != null) {
				ParentMerchantMaster supermaster = parentMerchantMasterRepository
						.findByUserId(aggregatorDataModal.getUserId());
				if (supermaster == null) {
					ParentMerchantMaster parentMerchantMaster = new ParentMerchantMaster();
					parentMerchantMaster.setParentMerchantName(aggregatorDataModal.getParentMerchantName());
					parentMerchantMaster.setUserId(aggregatorDataModal.getUserId());
					parentMerchantMaster.setUserPassword(aggregatorDataModal.getUserPassword());
					parentMerchantMaster.setAnalyticsPortalPassword(aggregatorDataModal.getUserPassword());
					
					Calendar calendar = Calendar.getInstance();
					calendar.setTime(new Date());
					calendar.add(Calendar.DATE, -92);
					
					parentMerchantMaster.setPwdLastChangedTimestamp(calendar.getTime());
					parentMerchantMaster.setTypeOfBusiness(aggregatorDataModal.getTypeOfBusiness());
					parentMerchantMaster.setHoPhoneNumber(aggregatorDataModal.getHoPhoneNumber());
					parentMerchantMaster.setHoAddress(aggregatorDataModal.getHoAddress());
					parentMerchantMaster.setEmailId(aggregatorDataModal.getEmailId());
					parentMerchantMaster.setUserPan(aggregatorDataModal.getUserPan());
					parentMerchantMaster.setAadhaarNumber(aggregatorDataModal.getAadhaarNumber());
					parentMerchantMaster.setBankAccountName(aggregatorDataModal.getBankAccountName());
					parentMerchantMaster.setUserType(String.valueOf(aggregatorDataModal.getUserType()));
					parentMerchantMaster.setStateMaster(stateMasterRepository.findOne(aggregatorDataModal.getStateId()));
					// parentMerchantMaster.setCityMaster(cityMasterRepository.findOne(aggregatorDataModal.getCityId()));
					//					 parentMerchantMaster.setCompanyBankAccountNumber(aggregatorDataModal.getCompanyBankAccountNumber());
					parentMerchantMaster.setCompanyBankBranchName(aggregatorDataModal.getCompanyBankBranchName());
					//					 parentMerchantMaster.setCompanyBankName(aggregatorDataModal.getCompanyBankName());
					//					 parentMerchantMaster.setCompanyIfscCode(aggregatorDataModal.getCompanyIfscCode());
					parentMerchantMaster.setCompanyLegalName(aggregatorDataModal.getCompanyLegalName());
					parentMerchantMaster.setAutomaticBankVerificationDetails(aggregatorDataModal.getCompanyLegalName());
					parentMerchantMaster.setAutomaticBankVerification(1);
					parentMerchantMaster.setCompanyMarketingName(aggregatorDataModal.getCompanyMarketingName());
					parentMerchantMaster.setCompanyTypeMasterData(
							companyTypeMasterDataRepository.findOne(aggregatorDataModal.getCompanyTypeId()));
					parentMerchantMaster.setDateOfIncorporation(aggregatorDataModal.getDateOfIncorporation());
					parentMerchantMaster.setNoOfTerminals(aggregatorDataModal.getNoOfTerminals());
					parentMerchantMaster.setOfficialContactNo(aggregatorDataModal.getOfficialContactNo());
					parentMerchantMaster.setGstInNumber(aggregatorDataModal.getGstInNumber());
					//				parentMerchantMaster.setSelfSettlementFlag(aggregatorDataModal.getSelfSettlementFlag());
					// parentMerchantMaster.setActiveFlag(1);
					parentMerchantMaster.setTimesatmp(new Date());
					parentMerchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
					parentMerchantMaster.setCreatedIpAddress(ip);
					parentMerchantMaster.setCreatedTimestamp(new Date());
					parentMerchantMaster.setOrganisation(aggregatorDataModal.getOrganisation());

					//				parentMerchantMaster.setInstantSettlementEnable(0);
					parentMerchantMaster.setActiveFlag(aggregatorDataModal.getActiveFlag());
					parentMerchantMaster.setOnboardingFormFileId(getFileId("onboard", aggregatorDataModal.getOnboardingformdata()));
					parentMerchantMaster.setGstCertificateFileId(getFileId("gst", aggregatorDataModal.getGstformdata()));
					parentMerchantMaster.setAoaFileId(getFileId("aoa", aggregatorDataModal.getAoaformdata()));
					parentMerchantMaster.setKycFileId(getFileId("kyc", aggregatorDataModal.getKycformdata()));

					parentMerchantMasterRepository.save(parentMerchantMaster);


					if (aggregatorDataModal.getSelfSettlementFlag() !=null && aggregatorDataModal.getSelfSettlementFlag()==1) {
						settlemetType = new FpCpSettlementTypeTemp();
						settlemetType.setType(103);
						settlemetType.setTypeId(parentMerchantMaster.getId());
						settlemetType.setTypeName(parentMerchantMaster.getCompanyLegalName());
						settlemetType.setTPlusOneSettlement(aggregatorDataModal.getSelfSettlementFlag());
						settlemetType.setTypeActiveFlag(aggregatorDataModal.getActiveFlag());
						settlemetType.setRequestedByUser(authenticateUserResponse.getUserName());
						settlemetType.setRequestedByTimestamp(new Date());
						settlemetType.setApprovalStatus(0);


						fpCpSettlementTypeTempRepository.save(settlemetType);


					} else if (aggregatorDataModal.getInstantSettlementFlag()!=null && aggregatorDataModal.getInstantSettlementFlag()==1){
						settlemetType = new FpCpSettlementTypeTemp();
						settlemetType.setType(103);
						settlemetType.setTypeId(parentMerchantMaster.getId());
						settlemetType.setTypeName(parentMerchantMaster.getCompanyLegalName());
						settlemetType.setInstantSettlement(aggregatorDataModal.getInstantSettlementFlag());
						settlemetType.setTypeActiveFlag(aggregatorDataModal.getActiveFlag());
						settlemetType.setRequestedByUser(authenticateUserResponse.getUserName());
						settlemetType.setRequestedByTimestamp(new Date());
						settlemetType.setApprovalStatus(0);

						fpCpSettlementTypeTempRepository.save(settlemetType);

					}


					//bank temp verifications
					if (commonTasks.check(aggregatorDataModal.getCompanyBankAccountNumber(),aggregatorDataModal.getCompanyIfscCode())) {
						bankdetails = new FpCpBankDetailsTemp();
						bankdetails.setType(103);
						bankdetails.setTypeId(parentMerchantMaster.getId());
						bankdetails.setTypeName(parentMerchantMaster.getCompanyLegalName());

						bankdetails.setBankAccountName(aggregatorDataModal.getBankAccountName());
						bankdetails.setBankAccountNumber(aggregatorDataModal.getCompanyBankAccountNumber());
						bankdetails.setBankIfscCode(aggregatorDataModal.getCompanyIfscCode());
						bankdetails.setAutomaticBankVerification(0);
						bankdetails.setAutomaticBankVerificationDetails(aggregatorDataModal.getAutomaticBankVerificationDetails());
						bankdetails.setCancelledChequeImages(aggregatorDataModal.getCancelledChequeImages());
						bankdetails.setRequestedByUser(authenticateUserResponse.getUserName());
						bankdetails.setRequestedByTimestamp(new Date());
						bankdetails.setRequestedByRemarks(aggregatorDataModal.getRemarks());
						bankdetails.setApprovalStatus(0);
						fpCpBankDetailsTempRepository.save(bankdetails);
					}
					if (commonTasks.check(aggregatorDataModal.getUserPan())) {
						parentMerchantMaster.setUserPan(aggregatorDataModal.getUserPan().toUpperCase());
						String panName = baseService.panVerification(request, aggregatorDataModal.getUserPan().toUpperCase());
						if(commonTasks.check(panName)) {
							parentMerchantMaster.setAutomaticPanVerification(1);
							parentMerchantMaster.setAutomaticPanVerificationDetails(panName);
						}
						else {
							parentMerchantMaster.setAutomaticPanVerification(0);
						}
						
					}
					parentMerchantMaster.setOrganisation("Aggregator");
					parentMerchantMasterRepository.save(parentMerchantMaster);

					//				AUDIT LOGS
					auditLogs = new FpCpAuditLogs();
					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(5);
					auditLogs.setNewData("created parent merchant master "+parentMerchantMaster.toString());
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);


					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, parentMerchantMaster.getId()),
							HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.PARENTID_ALREADY_EXISTS, null), HttpStatus.OK);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
						HttpStatus.BAD_REQUEST);
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@PostMapping("/validatingPanDetails/{panNumber}")
	public ResponseEntity<GeneralResponse> updateMerchantPanDetails(@PathVariable String panNumber,
			HttpSession httpSession, @RequestHeader("token") String token,HttpServletRequest request,
			@RequestBody AggregatorDataModal aggregatorDataModal) throws UnsupportedEncodingException, ParseException {
		System.out.println("update info:" + aggregatorDataModal.toString());
		AuthenticateUserResponse authenticateUserResponse =  null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData,
					AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		if (aggregatorDataModal != null && aggregatorDataModal.getId() != null) {
			ParentMerchantMaster parentMerchantMaster = parentMerchantMasterRepository.findOne(aggregatorDataModal.getId());
			if (commonTasks.check(panNumber)) {
				parentMerchantMaster.setUserPan(panNumber.toUpperCase());
				
				String panName = baseService.panVerification(request, panNumber.toUpperCase());
				if(commonTasks.check(panName)) {
					parentMerchantMaster.setAutomaticPanVerification(1);
					parentMerchantMaster.setAutomaticPanVerificationDetails(panName);
				}
				else {
					parentMerchantMaster.setAutomaticPanVerification(0);
				}
			}
			if (parentMerchantMaster.getAutomaticPanVerification() !=null && parentMerchantMaster.getAutomaticPanVerification() == 1) {
				parentMerchantMasterRepository.save(parentMerchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				parentMerchantMasterRepository.save(parentMerchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ENTER_VALID_PAN_DETAILS),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}

	}


	@PostMapping("/validatingBankDetails/{bankAccNumber}/{bankIfscCode}/{bankName}")
	public ResponseEntity<GeneralResponse> updateMerchantBankDetails(@PathVariable String bankAccNumber,@PathVariable String bankIfscCode, @PathVariable String bankName, HttpSession httpSession,@RequestHeader("token") String token, @RequestBody AggregatorDataModal aggregatorDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		// System.out.println("update info:" + merchantMasterModal.toString());
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		//		Gson gson = new GsonBuilder().serializeNulls().create();
		if (aggregatorDataModal != null && aggregatorDataModal.getId() != null) {
			ParentMerchantMaster parentMerchantMaster = parentMerchantMasterRepository.findOne(aggregatorDataModal.getId());
			if (commonTasks.check(aggregatorDataModal.getCompanyBankAccountNumber(),aggregatorDataModal.getCompanyIfscCode())) {
				parentMerchantMaster.setCompanyBankAccountNumber(aggregatorDataModal.getCompanyBankAccountNumber());
				parentMerchantMaster.setCompanyIfscCode(aggregatorDataModal.getCompanyIfscCode());
				parentMerchantMaster.setCompanyBankName(aggregatorDataModal.getCompanyBankName());
				double amount = 1.0;
				try {
					GeneralResponse generalResponse = commonRepositoryMethods.IMPSP2ATransaction(bankAccNumber,
							bankIfscCode, amount, aggregatorDataModal.getParentMerchantName(),
							aggregatorDataModal.getHoPhoneNumber(), aggregatorDataModal.getHoPhoneNumber(),
							aggregatorDataModal.getId());
					if (!generalResponse.isStatus()) {
						parentMerchantMaster.setAutomaticBankVerification(0);
						parentMerchantMaster.setAutomaticBankVerificationDetails((generalResponse.getData()).toString());
						parentMerchantMaster.setRemarks(generalResponse.getMessage());
					} else {
						parentMerchantMaster.setAutomaticBankVerification(1);
						parentMerchantMaster.setAutomaticBankVerificationDetails(((IMPSResponseModel) generalResponse.getData()).getBeneName());
						parentMerchantMaster.setRemarks(generalResponse.getMessage());
					}
					parentMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					parentMerchantMaster.setEditedTimestamp(new Date());
				} catch (Exception e) {
					e.printStackTrace();
					parentMerchantMaster.setRemarks(e.getMessage());
				}
			}

			if (parentMerchantMaster.getAutomaticBankVerification()!=null && parentMerchantMaster.getAutomaticBankVerification() == 1) {
				parentMerchantMasterRepository.save(parentMerchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				parentMerchantMasterRepository.save(parentMerchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, "BANK RESPONSE : "+parentMerchantMaster.getRemarks()),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}
	}

	@PostMapping("/update/admin")
	public ResponseEntity<GeneralResponse> updateMerchantDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody AggregatorDataModal aggregatorDataModal)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			if (aggregatorDataModal != null) {
				System.out.println("parent merchant id : "+aggregatorDataModal.getId()+" record is edited by : "+" "+authenticateUserResponse.getUserName());
				System.out.println("The parent merchant edited data id : "+aggregatorDataModal);
				if (aggregatorDataModal.getId() != null) {
					ParentMerchantMaster parentMerchantMaster = parentMerchantMasterRepository
							.findOne(aggregatorDataModal.getId());



					if (commonTasks.check(aggregatorDataModal.getParentMerchantName())) {
						parentMerchantMaster.setParentMerchantName(aggregatorDataModal.getParentMerchantName());
					}
					if (commonTasks.check(aggregatorDataModal.getUserId())) {
						parentMerchantMaster.setUserId(aggregatorDataModal.getUserId());
					}
					if (commonTasks.check(aggregatorDataModal.getHoAddress())) {
						parentMerchantMaster.setHoAddress(aggregatorDataModal.getHoAddress());
					}
					if (commonTasks.check(aggregatorDataModal.getHoPhoneNumber())) {
						parentMerchantMaster.setHoPhoneNumber(aggregatorDataModal.getHoPhoneNumber());
					}
					if (commonTasks.check(aggregatorDataModal.getEmailId())) {
						parentMerchantMaster.setEmailId(aggregatorDataModal.getEmailId());
					}
					if (commonTasks.check(aggregatorDataModal.getUserPan())) {
						parentMerchantMaster.setUserPan(aggregatorDataModal.getUserPan());
					}
					if (commonTasks.check(aggregatorDataModal.getBankAccountName())) {
						parentMerchantMaster.setBankAccountName(aggregatorDataModal.getBankAccountName());
					}
					if (commonTasks.check(aggregatorDataModal.getCompanyBankBranchName())) {
						parentMerchantMaster.setCompanyBankBranchName(aggregatorDataModal.getCompanyBankBranchName());
					}
					if (commonTasks.check(aggregatorDataModal.getCompanyBankName())) {
						parentMerchantMaster.setCompanyBankName(aggregatorDataModal.getCompanyBankName());
					}
					if (commonTasks.check(aggregatorDataModal.getCompanyIfscCode())) {
						parentMerchantMaster.setCompanyIfscCode(aggregatorDataModal.getCompanyIfscCode());
					}
					if (commonTasks.check(aggregatorDataModal.getCompanyLegalName())) {
						parentMerchantMaster.setCompanyLegalName(aggregatorDataModal.getCompanyLegalName());
						parentMerchantMaster.setAutomaticBankVerificationDetails(aggregatorDataModal.getCompanyLegalName());
						parentMerchantMaster.setAutomaticBankVerification(1);
					}
					if (commonTasks.check(aggregatorDataModal.getCompanyMarketingName())) {
						parentMerchantMaster.setCompanyMarketingName(aggregatorDataModal.getCompanyMarketingName());
					}
					if (commonTasks.check(aggregatorDataModal.getDateOfIncorporation())) {
						parentMerchantMaster.setDateOfIncorporation(aggregatorDataModal.getDateOfIncorporation());
					}
					if (aggregatorDataModal.getNoOfTerminals() != null) {
						parentMerchantMaster.setNoOfTerminals(aggregatorDataModal.getNoOfTerminals());
					}
					if (commonTasks.check(aggregatorDataModal.getGstInNumber())) {
						parentMerchantMaster.setGstInNumber(aggregatorDataModal.getGstInNumber());
					}
					if (aggregatorDataModal.getActiveFlag() != null) {
						parentMerchantMaster.setActiveFlag(aggregatorDataModal.getActiveFlag());
					}

					if(aggregatorDataModal.getInstantSettlementFlag()!=null) {
						parentMerchantMaster.setInstantSettlementEnable(aggregatorDataModal.getInstantSettlementFlag());
					}
					
					
					parentMerchantMaster.setActiveFlag(aggregatorDataModal.getActiveFlag());
					
					if (commonTasks.check(aggregatorDataModal.getOnboardingformdata())) {
					parentMerchantMaster.setOnboardingFormFileId(getFileId("onboard", aggregatorDataModal.getOnboardingformdata()));
					}
					if (commonTasks.check(aggregatorDataModal.getGstformdata())) {
					parentMerchantMaster.setGstCertificateFileId(getFileId("gst", aggregatorDataModal.getGstformdata()));
					}
					if (commonTasks.check(aggregatorDataModal.getAoaformdata())) {
					parentMerchantMaster.setAoaFileId(getFileId("aoa", aggregatorDataModal.getAoaformdata()));
					}
					if (commonTasks.check(aggregatorDataModal.getKycformdata())) {
					parentMerchantMaster.setKycFileId(getFileId("kyc", aggregatorDataModal.getKycformdata()));
					}
					
					
					parentMerchantMasterRepository.save(parentMerchantMaster);
					if(aggregatorDataModal.getSelfSettlementFlag()!=null && aggregatorDataModal.getSelfSettlementFlag()!=0) {
						if(parentMerchantMaster.getAutomaticBankVerification() !=null && parentMerchantMaster.getAutomaticBankVerification() ==1){
							if (checkParentSettlement(aggregatorDataModal.getId())) {
								return new ResponseEntity<GeneralResponse>(
										new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_SETTLEMENT, null),
										HttpStatus.OK);
							} else {
								parentMerchantMaster.setSelfSettlementFlag(aggregatorDataModal.getSelfSettlementFlag());
							}
						}else{
							return new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, "Please enter valid bank details for self settlement.", null),
									HttpStatus.BAD_REQUEST);
						}
					}else {
						parentMerchantMaster.setSelfSettlementFlag(0);
					}
					parentMerchantMaster.setUpdatedTimestamp(new Date());
					parentMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					parentMerchantMaster.setEditedIpAddress(ip);
					parentMerchantMaster.setEditedTimestamp(new Date());
					parentMerchantMasterRepository.save(parentMerchantMaster);

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("updated parent merchant master "+ new Gson().toJson(aggregatorDataModal));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, parentMerchantMaster.getId()),
							HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
							HttpStatus.BAD_REQUEST);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
						HttpStatus.BAD_REQUEST);

			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}



	@GetMapping("/download/{fileName:.+}")
	public ResponseEntity<?> downloadfile(@PathVariable String fileName)
	{
		ResponseEntity<InputStreamResource> resp = null;		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			
			System.out.println("Input Request JfiLE: "+fileName);
			resp = getDownloadFile(fileName);
			
			return resp;
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.OK);
		}
	}

	private boolean checkParentSettlement(Integer id) {
		ParentMerchantMaster parentMerchantMaster = parentMerchantMasterRepository.findOne(id);
		if (parentMerchantMaster != null) {
			List<SuperMerchantMaster> superMerchantMaster = superMerchantMasterRepository.findByParentId(id);
			if (superMerchantMaster != null) {
				for (SuperMerchantMaster s : superMerchantMaster) {
					if (s.getSelfSettlement() != null) {
						if (s.getSelfSettlement() == 1) {
							return true;
						} else {
							List<MerchantMaster> merchantMaster = s.getListOfMerchantMaster();
							for (MerchantMaster m : merchantMaster) {
								if (m.getSelfSettlementFlag() == 1) {
									return true;
								}
							}
						}
					}
				}
			} else {
				return false;
			}
		}
		return false;
	}

	private String getFileId(String formType, String formData){
		String returnId = null;
		try{
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
			Date date = new Date();
			if(formData != null)
			{
				String filePath = fileUtil.getProperty("parent.compliace.docpath") ;
				if(formType.equalsIgnoreCase("onboard"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_ONBOARD.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("gst"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_GST.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("aoa"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_AOA.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("kyc"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_KYC.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
			}
		}catch(Exception e){
			e.printStackTrace();
			System.out.println("Exception occured..."+ formType);
			returnId = null;
		}
		return returnId;
	}
	
	public ResponseEntity<InputStreamResource> getDownloadFile(String fileName) throws Exception
	{
		System.out.println("getDownloadFile.......Started");
		try
		{
			String filePath = fileUtil.getProperty("parent.compliace.docpath") ;
			System.out.println("PATH:"+filePath+"TEFILE:"+fileName);

			File file = new File(filePath+""+fileName);
			InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
			System.out.println("PATH:"+filePath+"TEFILE:"+fileName);
			if(fileName.endsWith("pdf") || fileName.endsWith("pdf"))
			{
				return ResponseEntity.ok()
						.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName)
						.contentType(MediaType.parseMediaType("application/pdf"))
						.contentLength(file.length())
						.body(resource);
			}
			else
			{
				return ResponseEntity.ok()
						.contentLength(file.length())
						.contentType(MediaType.APPLICATION_OCTET_STREAM)
						.body(resource);
			}

		}
		catch (Exception e) {

			e.printStackTrace();
			System.out.println("Error Occured getTotalSettlementsData.....");

			throw e;
		}		
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.FundTransferResponseModelCP;
import com.apptmyz.fpcontrolpanel.data.PaytmFundTransferControlPanelData;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpsettlementdb.entity.FundTransferLogData;
import com.apptmyz.fpsettlementdb.repository.FundTransferLogDataRepository;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/paytm")
public class PaytmFundTransfer {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private FundTransferLogDataRepository fundTransferLogDataRepository;

	@PostMapping("/fund/transfer")
	public ResponseEntity<GeneralResponse> fundTransfer(HttpServletRequest httprequest,HttpSession httpSession, HttpServletResponse httpresponse,
			@RequestBody String paytmfunddata,@RequestHeader("token") String token)
	{		
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			String ip = commonTasks.getIpAddress(httprequest);

			boolean permission = false;

			AuthenticateUserResponse authenticateUserResponse = ((AuthenticateUserResponse)response.getBody().getData());

			List<UserPermissionsModel> permissionsList = ((AuthenticateUserResponse)response.getBody().getData()).getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {

				if(data.getFeatureGrpCode().equals("BANK")) {
					if(data.getFeatureCode().equals("PAYTM_FUND_TRANSFER")) {
						if(data.getPermApprove() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				try
				{

					FundTransferLogData fundentity = saveAndUpdatePytmFundData(paytmfunddata, authenticateUserResponse);

					HttpClient httpClient = new DefaultHttpClient();
					HttpPost httpPost = null;
					String path = filesUtil.getProperty("fundtransferUAT");

					System.out.println("http://10.0.8.235:8080/fpaepspaytm/api/paytm/fundtransfer/controlpanel");

					if(path.equals("1"))
						httpPost = new HttpPost("http://10.0.8.235:8080/fpaepspaytmtest/api/paytm/fundtransfer/controlpanel");
					else
						httpPost = new HttpPost("http://10.0.8.235:8080/fpaepspaytm/api/paytm/fundtransfer/controlpanel");

					httpPost.setHeader("Content-type", "application/json");
					httpPost.setHeader("User-Agent", "Mozilla/5.0");
					httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
					httpPost.setHeader("token", token);

					String requestData= paytmfunddata;

					System.out.println("validate model "+paytmfunddata);

					HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
					httpPost.setEntity(entity);
					HttpResponse responseData = httpClient.execute(httpPost);


					int responseCode = responseData.getStatusLine().getStatusCode();
					String data ="";

					//			     commonTasks.getFullResponse(responseData);

					System.out.println(responseCode);
					System.out.println(responseData);

					Object dataObj = null;
					if(responseCode == 200)
					{
						data = new BasicResponseHandler().handleResponse(responseData);

						System.out.println("DATA:"+ data);

						GeneralResponse geres = gson.fromJson(data,GeneralResponse.class);
						//					 dataObj = validatedRecord.getData();

						String msg = "";
						msg = geres.getMessage();
						ObjectMapper mapper1 = new ObjectMapper();

						if(geres.isStatus())
						{
							FpCpAuditLogs auditLogs = new FpCpAuditLogs();
							auditLogs.setFeatureGrpId("BANK");
							auditLogs.setFeatureId("PAYTM_FUND_TRANSFER");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
							//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(2);
							auditLogs.setOldData(new Gson().toJson(paytmfunddata));
							auditLogs.setNewData(new Gson().toJson(dataObj));
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							//					fpCpAuditLogsRepository.save(auditLogs);

							fundentity.setStatus(Constants.SUCCESS);
							
							System.out.println("DATA:"+ geres.getData().toString());
						    String jsonString = mapper1.writeValueAsString(geres.getData());
						    System.out.println(jsonString);
						    FundTransferResponseModelCP respfund = mapper1.readValue(jsonString, FundTransferResponseModelCP.class);
						    System.out.println(respfund);
						    
							fundentity.setTransactionStatus(respfund.getTransactionStatus());
							fundentity.setResponseCode(respfund.getResponse_code()+"");
							fundentity.setTxnId(respfund.getTxn_id());
							fundentity.setRequestId(respfund.getRequestId());

							fundentity.setResponseTimestamp(new Date());
							fundTransferLogDataRepository.save(fundentity);

							response = successResponse(geres.isStatus(),"Status is "+ respfund.getTransactionStatus()+" \r\nIF not success, Please check the status with reqId", geres.getStatusCode(), geres.getData() );
						}
						else
						{
							fundentity.setStatus(Constants.FAILURE);
							if(geres.getData() != null)
							{
								System.out.println("DATA:"+ geres.getData().toString());
							    String jsonString = mapper1.writeValueAsString(geres.getData());
							    System.out.println(jsonString);
							    FundTransferResponseModelCP respfund = mapper1.readValue(jsonString, FundTransferResponseModelCP.class);
							    System.out.println(respfund);
							    
								fundentity.setTransactionStatus(respfund.getTransactionStatus());
								fundentity.setResponseCode(respfund.getResponse_code()+"");
								fundentity.setTxnId(respfund.getTxn_id());
								fundentity.setRequestId(respfund.getRequestId());
							}

							fundentity.setResponseTimestamp(new Date());
							fundTransferLogDataRepository.save(fundentity);
							response = errorResponse(geres.isStatus(), msg, geres.getStatusCode(), geres.getData());
						}
					}    
					else
					{
						fundentity.setStatus(Constants.FAILURE);
						fundentity.setResponseTimestamp(new Date());
						fundTransferLogDataRepository.save(fundentity);
						response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
					}
				}
				catch(Exception e)
				{
					response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}
			}
			else
			{
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}


	@GetMapping("/fund/transfer/history")
	public ResponseEntity<GeneralResponse> fundTransferHistory(@RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("BANK")) {
					if(data.getFeatureCode().equals("PAYTM_FUND_TRANSFER")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);

				List<FundTransferLogData> fundTransferlist = fundTransferLogDataRepository.findTop15ByOrderByIdDesc();

				response = successResponse(true, Constants.SUCCESS, Constants.CORRECT_STATUS_CODE, fundTransferlist);

			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/fund/transfer/history/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> validatorRequest(@PathVariable String fromdate,@PathVariable String todate,@RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;
			System.out.println("validatorRequest:"+ fromdate +"- To Date:"+ todate);

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("BANK")) {
					if(data.getFeatureCode().equals("PAYTM_FUND_TRANSFER")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {


				String ip = commonTasks.getIpAddress(httpRequest);

				Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
				Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");

				List<FundTransferLogData> fundTransferlist = fundTransferLogDataRepository.findByRequestedTimestampBetween(formatdFromDate, formatdToDate);

				response = successResponse(true, Constants.SUCCESS, Constants.CORRECT_STATUS_CODE, fundTransferlist);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/fund/transfer/statuscheck/{requID}")
	public ResponseEntity<GeneralResponse> fundTransferHistory(@RequestHeader("token") String token,HttpServletRequest httpRequest, @PathVariable String requID) {		
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("BANK")) {
					if(data.getFeatureCode().equals("PAYTM_FUND_TRANSFER")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);

				FundTransferLogData fundentity = fundTransferLogDataRepository.findByRequestId(requID);

				if(fundentity == null )
					return errorResponse(false, "Request Id not found", Constants.ERROR_INVAILD_ACTION_CODE, null);

				HttpClient httpClient = new DefaultHttpClient();
				HttpGet httpGet = null;

				//		   	   	 HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests/"+fromDate+"/"+toDate);
				System.out.println("http://10.0.8.235:8080/fpaepspaytm/api/paytm/statusCheck/cp/"+requID);
				
				httpGet = new HttpGet("http://10.0.8.235:8080/fpaepspaytm/api/paytm/statusCheck/cp/"+requID);

				httpGet.setHeader("Content-type", "application/json");
				httpGet.setHeader("User-Agent", "Mozilla/5.0");
				httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
				httpGet.setHeader("token", token);


				HttpResponse responseData = httpClient.execute(httpGet);

				int responseCode = responseData.getStatusLine().getStatusCode();
				String data ="";

				System.out.println(responseCode);
				System.out.println(responseData);

				Object dataObj = null;
				ObjectMapper mapper1 = new ObjectMapper();
				
				if(responseCode == 200)
				{
					data = new BasicResponseHandler().handleResponse(responseData);

					System.out.println("DATA:"+ data);

					GeneralResponse geres = gson.fromJson(data,GeneralResponse.class);

					String msg = "";
					msg = geres.getMessage();


					if(geres.isStatus())
					{
						FpCpAuditLogs auditLogs = new FpCpAuditLogs();
						auditLogs.setFeatureGrpId("BANK");
						auditLogs.setFeatureId("PAYTM_FUND_TRANSFER");
						auditLogs.setUserName(authenticateUserResponse.getUserName());
						//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
						auditLogs.setOperation(2);
						auditLogs.setOldData(requID);
						auditLogs.setNewData(new Gson().toJson(dataObj));
						auditLogs.setAuditTimestamp(new Date());
						auditLogs.setIpAddress(ip);
						//					fpCpAuditLogsRepository.save(auditLogs);

						fundentity.setStatus(Constants.SUCCESS);
						
						System.out.println("DATA:"+ geres.getData().toString());
					    String jsonString = mapper1.writeValueAsString(geres.getData());
					    System.out.println(jsonString);
					    FundTransferResponseModelCP respfund = mapper1.readValue(jsonString, FundTransferResponseModelCP.class);
					    System.out.println(respfund);
					    
						fundentity.setTransactionStatus(respfund.getTransactionStatus());
						fundentity.setResponseCode(respfund.getResponse_code()+"");
						fundentity.setTxnId(respfund.getTxn_id());
						fundentity.setRequestId(respfund.getRequestId());

						fundentity.setResponseTimestamp(new Date());
						fundTransferLogDataRepository.save(fundentity);

						response = successResponse(geres.isStatus(), "Status is "+ respfund.getTransactionStatus() , geres.getStatusCode(), geres.getData() );
					}
					else
					{
						fundentity.setStatus(Constants.FAILURE);
						if(geres.getData() != null)
						{
							System.out.println("DATA:"+ geres.getData().toString());
						    String jsonString = mapper1.writeValueAsString(geres.getData());
						    System.out.println(jsonString);
						    FundTransferResponseModelCP respfund = mapper1.readValue(jsonString, FundTransferResponseModelCP.class);
						    System.out.println(respfund);
						    
							fundentity.setTransactionStatus(respfund.getTransactionStatus());
							fundentity.setResponseCode(respfund.getResponse_code()+"");
							fundentity.setTxnId(respfund.getTxn_id());
							fundentity.setRequestId(respfund.getRequestId());
						}

						fundentity.setResponseTimestamp(new Date());
						fundTransferLogDataRepository.save(fundentity);
						response = errorResponse(geres.isStatus(), msg, geres.getStatusCode(), geres.getData());
					}
				}    
				else
				{
					fundentity.setStatus(Constants.FAILURE);
					fundentity.setResponseTimestamp(new Date());
					fundTransferLogDataRepository.save(fundentity);
					response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE,null);
				}


			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	private FundTransferLogData saveAndUpdatePytmFundData(String paytmfunddata,AuthenticateUserResponse authenticateUserResponse)
	{
		FundTransferLogData fundenity = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			PaytmFundTransferControlPanelData data = gson.fromJson(paytmfunddata,PaytmFundTransferControlPanelData.class);
			if(data != null)
			{
				fundenity = new FundTransferLogData();
				fundenity.setAccountNo(data.getAccountNumber());
				fundenity.setAmount(data.getAmount());
				fundenity.setNarration(data.getNarration());
				fundenity.setCreatedBy(authenticateUserResponse.getUserName());
				fundenity.setRequestedTimestamp(new Date());
				fundenity.setStatus(Constants.INITIATED);
				fundenity.setFromBank(Constants.PAYTM);
				fundenity = fundTransferLogDataRepository.save(fundenity);

			}
		}
		catch(Exception e)
		{
			System.out.println("Exception occured:"+ e.getMessage());
		}
		return fundenity;
	}

	public Date setformatDate(String format,String date) throws Exception
	{
		SimpleDateFormat dateFormat = null;

		Date fromatedDate = null;

		try {

			dateFormat = new SimpleDateFormat(format);

			fromatedDate = dateFormat.parse(date);

		}
		catch (Exception e) {
			errorResponse(false,"Error Occured checkDateIsNullorNot ",null);			
			throw e;
		}

		return fromatedDate;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		System.out.println("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

		System.out.println(" Successfully");

		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
	
	public static void main(String[] args) throws IOException
	{
		Gson gson = new GsonBuilder().serializeNulls().create();
		String data = "{\"status\":false,\"message\":\"Transaction failed.\",\"data\":{\"status\":\"failure\",\"amount\":null,\"transactionStatus\":null,\"response_code\":9032,\"externalTransactionId\":null,\"message\":\"Request volume breach only 1 successful transfer is allowed every 10 minutes.\",\"txn_id\":\"D0M3S5QX0B34X\",\"errorCode\":null,\"errorMessage\":null,\"requestId\":\"FT2204281024000040\"},\"statusCode\":10016}";
		       //data = "{\"status\":trnue,\"message\":\"Request Completed\",\"data\":{\"status\":\"success\",\"amount\":2194585.21,\"transactionStatus\":\"success\",\"response_code\":0,\"externalTransactionId\":\"PYTMR22022042800382662\",\"message\":null,\"txn_id\":null,\"errorCode\":null,\"errorMessage\":null,\"requestId\":null},\"statusCode\":0}";
		GeneralResponse geres = gson.fromJson(data,GeneralResponse.class);
		System.out.println("geres"+ geres.toString());
		System.out.println("DATA:" + geres.getData());
		
		ObjectMapper mapper1 = new ObjectMapper();
	    String jsonString = mapper1.writeValueAsString(geres.getData());
	    System.out.println(jsonString);
	    FundTransferResponseModelCP t2 = mapper1.readValue(jsonString, FundTransferResponseModelCP.class);
	    System.out.println(t2);
	    
		
		
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ProxyRequestModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpProxyUrlRouteData;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpProxyUrlRouteDataRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/proxy")
public class ProxyRedirectionController {

	private static final Logger log = Logger.getLogger("ProxyRedirectionController");

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private FpCpProxyUrlRouteDataRepository fpCpProxyUrlRouteDataRepository;

	@PostMapping("/create/request")
	public ResponseEntity<GeneralResponse> createProxyRequest(@RequestBody ProxyRequestModel request, @RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;
		log.info("createProxyRequest started");
		FpCpAuditLogs auditLogs = null;
		String proxyurl = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("PROXY")) {
					if(data.getFeatureCode().equals("PROXY_REDIRECTIOIN")) {
						if(data.getPermCreate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);

				System.out.println("Request:"+ (new Gson()).toJson(request));

				if(isEmpty(request.getRequestType()) || isEmpty(request.getUri()) || isEmpty(request.getBaseUrlProd())
						|| isEmpty(request.getBaseUrlUat()) || isEmpty(request.getEnv()+""))
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Required Fields is Missing",null), HttpStatus.OK);

				FpCpProxyUrlRouteData data = new FpCpProxyUrlRouteData();
				data.setRequestType(request.getRequestType());
				data.setUri(request.getUri());
				data.setBaseUrlUat(request.getBaseUrlUat());
				data.setBaseUrlProd(request.getBaseUrlProd());
				data.setEnv(request.getEnv());
				data.setActiveFlag(1);
				data.setCreatedTimestamp(new Date());
				data.setUpdatedTimestamp(new Date());

				fpCpProxyUrlRouteDataRepository.save(data);
				log.info("Object create prxy:"+ data.toString());

				if(request.getRequestType().equalsIgnoreCase("POST"))
					proxyurl = "https://fpekyc.tapits.in/fpekyc/api/common/post/path/"+data.getId();
				else
					proxyurl = "https://fpekyc.tapits.in/fpekyc/api/common/get/path/"+data.getId();
				// AUDIT LOGS
				auditLogs = new FpCpAuditLogs();

				auditLogs.setFeatureGrpId("PROXY");
				auditLogs.setFeatureId("PROXY_REDIRECTIOIN");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
				//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				auditLogs.setOperation(1);
				auditLogs.setViewData("Proxy Details and id "+data.getId());
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				log.info("createProxyRequest data is sent in response");

				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						"Success - Expose Proxy URL: \r\n"+proxyurl,null), HttpStatus.OK);
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@GetMapping("/check/request/{id}")
	public ResponseEntity<GeneralResponse> checkProxyIDRequest(@PathVariable int id, @RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;

		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("PROXY")) {
					if(data.getFeatureCode().equals("PROXY_REDIRECTIOIN")) {
						if(data.getPermUpdate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);
				System.out.println("IP Request:"+ ip);
				System.out.println("Request:"+ id);

				FpCpProxyUrlRouteData data = fpCpProxyUrlRouteDataRepository.findByActiveFlagAndId(1, id);
				if(data != null)
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							"Successfully ",data), HttpStatus.OK);
				}
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"We are unable to identify the data",null), HttpStatus.OK);
				}
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	@PostMapping("/edit/request")
	public ResponseEntity<GeneralResponse> editProxyRequest(@RequestBody ProxyRequestModel request, @RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;

		FpCpAuditLogs auditLogs = null;
		String proxyurl = null;
		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("PROXY")) {
					if(data.getFeatureCode().equals("PROXY_REDIRECTIOIN")) {
						if(data.getPermUpdate() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);

				System.out.println("Request:"+ (new Gson()).toJson(request));

				if(isEmpty(request.getId()+"")||isEmpty(request.getRequestType()) || isEmpty(request.getUri()) || isEmpty(request.getBaseUrlProd())
						|| isEmpty(request.getBaseUrlUat()) || isEmpty(request.getEnv()+""))
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Required Fields is Missing",null), HttpStatus.OK);

				FpCpProxyUrlRouteData data = fpCpProxyUrlRouteDataRepository.findByActiveFlagAndId(1, request.getId());
				if(data != null)
				{
					data.setRequestType(request.getRequestType());
					data.setUri(request.getUri());
					data.setBaseUrlUat(request.getBaseUrlUat());
					data.setBaseUrlProd(request.getBaseUrlProd());
					data.setEnv(request.getEnv());
					data.setActiveFlag(1);
					data.setUpdatedTimestamp(new Date());

					fpCpProxyUrlRouteDataRepository.save(data);
					log.info("Object create prxy:"+ data.toString());

					if(request.getRequestType().equalsIgnoreCase("POST"))
						proxyurl = "https://fpekyc.tapits.in/fpekyc/api/common/post/path/"+data.getId();
					else
						proxyurl = "https://fpekyc.tapits.in/fpekyc/api/common/get/path/"+data.getId();
					// AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("PROXY");
					auditLogs.setFeatureId("PROXY_REDIRECTIOIN");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("Proxy Details and id "+data.getId());
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					log.info("agg/sm/read/ data is sent in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							"Updated Successfully - \r\n"+proxyurl,null), HttpStatus.OK);
				}else{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"We are unable to identify the data",null), HttpStatus.OK);
				}
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}
	
	@GetMapping("/report/request/{fromdate}/{todate}")
	public ResponseEntity<GeneralResponse> getProxyDateRequests(@PathVariable String fromdate,@PathVariable String todate, @RequestHeader("token") String token,HttpServletRequest httpRequest) {		
		ResponseEntity<GeneralResponse> response = null;

		try 
		{
			response = checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;

			AuthenticateUserResponse authenticateUserResponse = null;
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			boolean permission = false;

			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("PROXY")) {
					if(data.getFeatureCode().equals("PROXY_REDIRECTIOIN")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {

				String ip = commonTasks.getIpAddress(httpRequest);
				System.out.println("IP Request:"+ ip);
				System.out.println("Request:"+ fromdate+"--Todate"+ todate);

				Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
				Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");
				
				if(!(formatdFromDate.before(formatdToDate)  || formatdFromDate.equals(formatdToDate)))
					return errorResponse(false,"From Date is Before To Date",500,null);
				
				List<FpCpProxyUrlRouteData> datalist = fpCpProxyUrlRouteDataRepository.findByUpdatedTimestampBetween(formatdFromDate, formatdToDate);
				if(datalist != null)
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							"Successfully ",datalist), HttpStatus.OK);
				}
				else
				{
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"We are unable to identify the data",null), HttpStatus.OK);
				}
			}
			else {
				return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;
	}

	public Date setformatDate(String format,String date) throws Exception
	{
		SimpleDateFormat dateFormat = null;
		
		Date fromatedDate = null;
		
		try {
			dateFormat = new SimpleDateFormat(format);
			
			fromatedDate = dateFormat.parse(date);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured checkDateIsNullorNot ",null);			
			throw e;
		}
		
		return fromatedDate;
	}
	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		log.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);
		
	}
	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}

	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	private ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.BranchMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.entity.User;
import com.apptmyz.fpcontrolpanel.data.ChangePasswordModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUser;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserRepository;
import com.google.gson.Gson;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;


@RestController
@RequestMapping(value="/api/settings")
public class SettingsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FpCpUserRepository fpCpUserRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@PostMapping("/changePassword")
	 public ResponseEntity<GeneralResponse> changePasswordUserData(HttpServletRequest request, HttpServletResponse response, HttpSession httpSession ,@RequestHeader("token") String token,@RequestBody ChangePasswordModel changePasswordUserData) throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		  try{
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
	  } catch (ExpiredJwtException e2) {
		  e2.printStackTrace();
	   return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (UnsupportedJwtException e2) {
		  e2.printStackTrace();
		  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);	 
	  } catch (MalformedJwtException e2) {
		  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (SignatureException e2) {
		  e2.printStackTrace();
		  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (IllegalArgumentException e2) {
		  e2.printStackTrace();
		  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  } catch (UnsupportedEncodingException e) {
		  e.printStackTrace();
		  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
	  }
			String ip = commonTasks.getIpAddress(request);

	  System.out.println("usertype"+authenticateUserResponse.getUserName());
	  FpCpAuditLogs auditLogs = new FpCpAuditLogs();
	  
		if(changePasswordUserData != null) {
			
				 FpCpUser data = fpCpUserRepository.findByUserName(changePasswordUserData.getUserName());
                
				 if(data != null) {
	                if((data.getPassword()).equals(changePasswordUserData.getCurrentPassword())) {
		                	 data.setPassword(changePasswordUserData.getConfirmNewPassword());
		                	 System.out.println(changePasswordUserData.getConfirmNewPassword());
		                	 data.setUpdatedTimestamp(new Date());
		                	 auditLogs.setOldData(new Gson().toJson(changePasswordUserData));

		                	 fpCpUserRepository.save(data);
		                	 
		                	 
		                	 
		                	 return new ResponseEntity<GeneralResponse>(
		     						new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),HttpStatus.OK);
		           }
	               else {
	            	   
	               	 return new ResponseEntity<GeneralResponse>(
	     						new GeneralResponse(Constants.FALSE, Constants.PASSWORD_INCORRECT_RESET, null),
	     						HttpStatus.BAD_REQUEST);
	                }
                }				 
		}
		
	  	else 
	  	{
		    	  return new ResponseEntity<GeneralResponse>( HttpStatus.BAD_REQUEST);
		}
		
		return null;
	  
	 }
	

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.BankDetailsModel;
import com.apptmyz.fpcontrolpanel.data.EmailNotificationModel;
import com.apptmyz.fpcontrolpanel.data.SettlementDetailsModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpSettlementTypeTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBankDetailsTempRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpSettlementTypeTempRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserPermissionsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpUserRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/settlDetails")
public class SettlementDetailsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	
	@Autowired
	private FpCpUserPermissionsRepository fpCpUserPermissionsRepository;
	
	@Autowired
	private FpCpSettlementTypeTempRepository fpCpSettlementTypeTempRepository;
	
	@Autowired
	private FpCpUserRepository fpCpUserRepository;
	
	private static final Logger settlDetailsMClog = Logger.getLogger("SettlDetailsMC");

	@GetMapping("agg/read/{coName}")
	public ResponseEntity<GeneralResponse> readBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("agg/read/ Reading parent settlement details with name like "+coName);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("agg/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("agg/read/ Permission validation true");

			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName);
				 System.out.println(coName);
				 
				 if(parentMerchantMasterList != null)
				 {
					 System.out.println("not equals null");
					System.out.println(parentMerchantMasterList.size());
					settlDetailsMClog.info("agg/read/ parentMerchantMasterList not null, size "+parentMerchantMasterList.size());

				 }
				 else {
					 settlDetailsMClog.info("agg/read/ parentMerchantMasterList is null");

				 }
				//System.out.println(parentMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName));
				List<SettlementDetailsModel> settlDet=new ArrayList<SettlementDetailsModel>();

				 if(parentMerchantMasterList.size()>0)
				 {
					 SettlementDetailsModel tempTable = null;
						
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							
							tempTable= new SettlementDetailsModel();
							
							tempTable.setType(103);
							tempTable.setTypeName(parentRep.getCompanyLegalName());
							tempTable.setTypeId(parentRep.getId());
							tempTable.setTypeActiveFlag(parentRep.getActiveFlag());
							tempTable.settPlusOneSettlFlag(parentRep.getSelfSettlementFlag());
							tempTable.setInstantSettlFlag(parentRep.getInstantSettlementEnable());
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							settlDet.add(tempTable);
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("SETTLEMENT");
							auditLogs.setFeatureId("SETTLEMENT_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
							auditLogs.setOperation(1);
							auditLogs.setViewData("parent settlement details like"+coName);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
							
							
							
						}
						settlDetailsMClog.info("agg/read/ parentMerchantMasterList is sent in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDet), HttpStatus.OK);
					
				 }
				 else
				 {

			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 settlDetailsMClog.info("agg/read/ Exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
					
		}
		else {
			settlDetailsMClog.info("agg/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping("agg/getPreviousData/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> PreviousBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		int parentId = Integer.parseInt(coId);

		
			
			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameAndId(coName, parentId);
				 System.out.println(coName);
				 
				 if(parentMerchantMasterList != null)
				 {
					 System.out.println("not equals null");
					System.out.println(parentMerchantMasterList.size());
				 }
				List<SettlementDetailsModel> settlDet=new ArrayList<SettlementDetailsModel>();

				 if(parentMerchantMasterList.size()>0)
				 {
					 SettlementDetailsModel tempTable = null;
						
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							
							tempTable= new SettlementDetailsModel();
							
							tempTable.setType(103);
							tempTable.setTypeName(parentRep.getCompanyLegalName());
							tempTable.setTypeId(parentRep.getId());
							tempTable.setTypeActiveFlag(parentRep.getActiveFlag());
							tempTable.settPlusOneSettlFlag(parentRep.getSelfSettlementFlag());
							tempTable.setInstantSettlFlag(parentRep.getInstantSettlementEnable());
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							
							settlDet.add(tempTable);
							
							
							
						}
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDet), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
						

	}

	
	@PostMapping("agg/update/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> updateBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		settlDetailsMClog.info("agg/update/ Updating parent settlement details with request data: "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("agg/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		System.out.println("here in agg update");
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		int parentId = Integer.parseInt(coId);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("agg/update/ Permission validation true");

			try
			 {
//				name
				List<ParentMerchantMaster> parentMerchantMasterList = parentMerchantMasterRepository.findByCompanyLegalNameAndId(coName, parentId);
				 ParentMerchantMaster parentRecord = parentMerchantMasterList.get(0);
					System.out.println(parentRecord);


				 if(parentMerchantMasterList.size()>0)
				 {
						settlDetailsMClog.info("agg/update/ parentMerchantMasterList not null of name and id:"+coName+" "+parentId);

					 System.out.println("Size not zero");
					 FpCpSettlementTypeTemp tempTable = null;
						for(ParentMerchantMaster parentRep: parentMerchantMasterList) {
							

//							Inserting the entry into temp table if does'nt exist
//							name
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(parentId, 103);
							auditLogs.setOldData(new Gson().toJson(tempRecord));

							
							if(tempRecord == null) {
								settlDetailsMClog.info("agg/update/ tempTable record does not exist");

								 System.out.println("Record does not exist");

								tempTable= new FpCpSettlementTypeTemp();

								tempTable.setType(103);
								tempTable.setTypeName(coName);
								tempTable.setTypeId(parentRep.getId());
								
								tempTable.setTypeActiveFlag(parentRep.getActiveFlag());
								tempTable.setTPlusOneSettlement(parentRep.getSelfSettlementFlag());
								tempTable.setInstantSettlement(parentRep.getInstantSettlementEnable());
								
								tempTable.setRequestedByUser(authenticateUserResponse.getUserName());
								tempTable.setRequestedByTimestamp(new Date());
								tempTable.setApprovalStatus(0);

								auditLogs.setOldData(new Gson().toJson(tempTable));

								System.out.println(authenticateUserResponse.getUserName());

								fpCpSettlementTypeTempRepository.save(tempTable);
								
								tempRecord = tempTable;

							}
							settlDetailsMClog.info("agg/update/ tempTable record does exist");

							if(settlDetDataModal != null && tempRecord != null) {

//								System.out.print(settlDetDataModal.gettPlusOneSettlFlag());
								
									
//									if (settlDetDataModal.getTypeActiveFlag() != null) {
//										tempRecord.setTypeActiveFlag(settlDetDataModal.getTypeActiveFlag());
//									}
									tempRecord.setTPlusOneSettlement(parentRep.getSelfSettlementFlag());
									tempRecord.setInstantSettlement(parentRep.getInstantSettlementEnable());
								
									if (settlDetDataModal.gettPlusOneSettlFlag() != null && (parentRecord.getSelfSettlementFlag() != settlDetDataModal.gettPlusOneSettlFlag())) {
										System.out.println("parent "+parentRecord.getSelfSettlementFlag()+ " model "+settlDetDataModal.gettPlusOneSettlFlag());
										if((parentRecord.getSelfSettlementFlag() == 1 && settlDetDataModal.gettPlusOneSettlFlag() == 1) || (parentRecord.getSelfSettlementFlag() == 1 && settlDetDataModal.gettPlusOneSettlFlag() == 0)) {
											tempRecord.setTPlusOneSettlement(settlDetDataModal.gettPlusOneSettlFlag());
											
										}
										else 
											return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
													Constants.ERROR_INVAILD_ACTION, null), HttpStatus.OK);
											
									}
									
									if (settlDetDataModal.getInstantSettlFlag() != null && (parentRecord.getInstantSettlementEnable() != settlDetDataModal.getInstantSettlFlag())) {
										System.out.println("parent "+parentRecord.getInstantSettlementEnable()+ " model "+settlDetDataModal.getInstantSettlFlag());
										if((parentRecord.getInstantSettlementEnable() == 1 && settlDetDataModal.getInstantSettlFlag() == 1) || (parentRecord.getInstantSettlementEnable() == 1 && settlDetDataModal.getInstantSettlFlag() == 0))
											tempRecord.setInstantSettlement(settlDetDataModal.getInstantSettlFlag());
										else 
											return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
													Constants.ERROR_INVAILD_ACTION, null), HttpStatus.OK);
									}
									
										tempRecord.setRequestedByUser(authenticateUserResponse.getUserName());
										tempRecord.setRequestedByTimestamp(new Date());
										tempRecord.setApprovalStatus(0);
									fpCpSettlementTypeTempRepository.save(tempRecord);
	
									List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermApproveAndActiveFlag("SETTLEMENT_MC", 1, 1);
									
									if(approversList != null) {

										List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
										EmailNotificationModel emailModel = new EmailNotificationModel();
										
										for(FpCpUserPermissions approver: approversList) {
											
											if(emailModel.getEmailId()!= null)
												emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
											else
												emailModel.setEmailId(approver.getFpCpUser().getEmailId());											
											emailModel.setMasterName(parentRecord.getParentMerchantName());
											emailModel.setPrimaryKeyId(parentRecord.getId());
											emailModel.setUserName(authenticateUserResponse.getUserName());
											emailModel.setMessage("Request for approval of Settlement flags modification");
											emailModel.setMasterType("parent");
											emailModel.setRequestAction("Kindly approve");
											
										}
										emailList.add(emailModel);
										commonTasks.sendEmails(emailList);
									}
									
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("SETTLEMENT");
									auditLogs.setFeatureId("SETTLEMENT_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(2);

									auditLogs.setNewData(new Gson().toJson(tempRecord));
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
					
										
							}
							
						}
						settlDetailsMClog.info("agg/update/ to update data saved in temp table successfully");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDetDataModal), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("agg/update/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		
		else {
			settlDetailsMClog.info("agg/update/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	
	@GetMapping("agg/approveTable/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> approveBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("agg/approveTable/  to approve details for parent requested from "+fromDate+" to "+toDate);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("agg/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}

		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("agg/approveTable/  Permission validation true");

			try
			 {
				
				List<FpCpSettlementTypeTemp> tempRecordZeroApproval = fpCpSettlementTypeTempRepository.findByApprovalStatusAndTypeAndRequestedByTimestampBetween(0, 103,dateFormat.parse(fromDate),dateFormat.parse(toDate));
				  List<SettlementDetailsModel> settlDetAppr=new ArrayList<SettlementDetailsModel>();

				 if(tempRecordZeroApproval.size() > 0)
				 {
					 SettlementDetailsModel approvalTable = null;
						
						for(FpCpSettlementTypeTemp tempRecord: tempRecordZeroApproval) {	
												
							approvalTable= new SettlementDetailsModel();
								
							approvalTable.setType(tempRecord.getType());
							approvalTable.setTypeName(tempRecord.getTypeName());
							approvalTable.setTypeId(tempRecord.getTypeId());
							
//							approvalTable.setTypeActiveFlag(tempRecord.getTypeActiveFlag());
							approvalTable.settPlusOneSettlFlag(tempRecord.getTPlusOneSettlement());
							approvalTable.setInstantSettlFlag(tempRecord.getInstantSettlement());
													
							approvalTable.setRequestedUserName(tempRecord.getRequestedByUser());
							approvalTable.setRequestedUserTimestamp(tempRecord.getRequestedByTimestamp());

							settlDetAppr.add(approvalTable);
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();
							
							auditLogs.setFeatureGrpId("SETTLEMENT");
							auditLogs.setFeatureId("SETTLEMENT_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-read,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("to approve parent settlement details from"+fromDate+"to"+toDate);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
	
			
						}
						settlDetailsMClog.info("agg/approveTable/  temp table records to be approved sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDetAppr), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("agg/approveTable/  exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}

		else {
			settlDetailsMClog.info("agg/approveTable/  Permission validation false");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@PostMapping("agg/giveApproval")
	public ResponseEntity<GeneralResponse> updateApprovedBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("agg/giveApproval/ Approving parent settlement details sent with request data: "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("agg/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
			
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
				
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("agg/giveApproval/  Permission validation true");

			try
			 {

				 		if(settlDetDataModal != null) {
				 			
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(settlDetDataModal.getTypeId(), 103);
							List<ParentMerchantMaster> parentMerchantMasterList =  parentMerchantMasterRepository.findByCompanyLegalNameAndId(settlDetDataModal.getTypeName(), settlDetDataModal.getTypeId());
							ParentMerchantMaster parentRecordEmail = parentMerchantMasterList.get(0);
							
							System.out.println(settlDetDataModal.getTypeName());

// audit bug fix
							FpCpSettlementTypeTemp tempRecordAudit = new FpCpSettlementTypeTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(ParentMerchantMaster parentRep: parentMerchantMasterList) {

								 tempRecordAudit.setType(103);
								 tempRecordAudit.setTypeName(parentRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(parentRep.getId());
								 
								 tempRecordAudit.setTypeActiveFlag(parentRep.getActiveFlag());
								 tempRecordAudit.setTPlusOneSettlement(parentRep.getSelfSettlementFlag());
								 tempRecordAudit.setInstantSettlement(parentRep.getInstantSettlementEnable());
								 
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
								 tempRecordAudit.setRequestedByTimestamp(new Date());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(ParentMerchantMaster parentRecord: parentMerchantMasterList) {

//									if (settlDetDataModal.getTypeActiveFlag() != null) {
//										parentRecord.setActiveFlag((settlDetDataModal.getTypeActiveFlag()));
//									}
									
									if (settlDetDataModal.gettPlusOneSettlFlag() != null) {
										parentRecord.setSelfSettlementFlag((settlDetDataModal.gettPlusOneSettlFlag()));
									}
									
									if (settlDetDataModal.getInstantSettlFlag() != null) {
										parentRecord.setInstantSettlementEnable((settlDetDataModal.getInstantSettlFlag()));
									}
									
									parentRecord.setEditedByUsername(authenticateUserResponse.getUserName());						
									parentRecord.setEditedTimestamp(new Date());
										
									
									parentMerchantMasterRepository.save(parentRecord);
									
									tempRecord.setApprovalStatus(1);
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByRemarks(settlDetDataModal.getApprRejRemarks());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									
									fpCpSettlementTypeTempRepository.save(tempRecord);
									
																					
							}
							
							List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermInfoAndActiveFlag("SETTLEMENT_MC", 1, 1);
							
							if(approversList != null) {
								List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
								EmailNotificationModel emailModel = new EmailNotificationModel();

								for(FpCpUserPermissions approver: approversList) {
									
									if(emailModel.getEmailId()!= null)
										emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
									else
										emailModel.setEmailId(approver.getFpCpUser().getEmailId());									emailModel.setMasterName(parentRecordEmail.getParentMerchantName());
									emailModel.setPrimaryKeyId(parentRecordEmail.getId());
									emailModel.setUserName(authenticateUserResponse.getUserName());
									emailModel.setMessage("Approval of settlement flags modification");
									emailModel.setMasterType("parent");
									emailModel.setRequestAction("");
									
								}
								emailList.add(emailModel);
								commonTasks.sendEmails(emailList);
							}
							
//							AUDIT LOGS
								 
							auditLogs.setFeatureGrpId("SETTLEMENT");
							auditLogs.setFeatureId("SETTLEMENT_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(3);
//							auditLogs.setOldData(new Gson().toJson(tempRecord));
							auditLogs.setNewData(new Gson().toJson(settlDetDataModal));
							auditLogs.setApprovedByUser(authenticateUserResponse.getUserName());
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);

							settlDetailsMClog.info("agg/giveApproval/  Parent merchant master updated");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("agg/giveApproval/  exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		else {
			settlDetailsMClog.info("agg/giveApproval/  Permission validation false "+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	@PostMapping("agg/giveRejection")
	public ResponseEntity<GeneralResponse> rejectApprovedBankDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("agg/giveRejection/ Rejecting parent settlement details sent with request data: "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("agg/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("agg/giveRejection/  Permission validation true");

			try
			 {


				 		if(settlDetDataModal != null) {

				 			
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(settlDetDataModal.getTypeId(), 103);
							List<ParentMerchantMaster> parentMerchantMasterList =  parentMerchantMasterRepository.findByCompanyLegalNameAndId(settlDetDataModal.getTypeName(),settlDetDataModal.getTypeId());
							ParentMerchantMaster parentRecordEmail = parentMerchantMasterList.get(0);
							// audit bug fix
							FpCpSettlementTypeTemp tempRecordAudit = new FpCpSettlementTypeTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(ParentMerchantMaster parentRep: parentMerchantMasterList) {

								 tempRecordAudit.setType(103);
								 tempRecordAudit.setTypeName(parentRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(parentRep.getId());
								 
//								 tempRecordAudit.setTypeActiveFlag(parentRep.getActiveFlag());
								 tempRecordAudit.setTPlusOneSettlement(parentRep.getSelfSettlementFlag());
								 tempRecordAudit.setInstantSettlement(parentRep.getInstantSettlementEnable());
								 
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
								 tempRecordAudit.setRequestedByTimestamp(new Date());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(ParentMerchantMaster parentRecord: parentMerchantMasterList) {


									
									tempRecord.setApprovalStatus(2);
									tempRecord.setApprovedRejectedByRemarks(settlDetDataModal.getApprRejRemarks());
									tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
									tempRecord.setApprovedRejectedByTimestamp(new Date());
									fpCpSettlementTypeTempRepository.save(tempRecord);
									
									List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermInfoAndActiveFlag("SETTLEMENT_MC", 1, 1);
									
									if(approversList != null) {

										List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
										EmailNotificationModel emailModel = new EmailNotificationModel();

										for(FpCpUserPermissions approver: approversList) {
											
											if(emailModel.getEmailId()!= null)
												emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
											else
												emailModel.setEmailId(approver.getFpCpUser().getEmailId());											emailModel.setMasterName(parentRecordEmail.getParentMerchantName());
											emailModel.setPrimaryKeyId(parentRecordEmail.getId());
											emailModel.setUserName(authenticateUserResponse.getUserName());
											emailModel.setMessage("Rejection of settlement flags modification");
											emailModel.setMasterType("parent");
											emailModel.setRequestAction("");
											
										}
										emailList.add(emailModel);
										commonTasks.sendEmails(emailList);
									}

									
//									AUDIT LOGS
									auditLogs = new FpCpAuditLogs();

									auditLogs.setFeatureGrpId("SETTLEMENT");
									auditLogs.setFeatureId("SETTLEMENT_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(4);
//									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(settlDetDataModal));
									auditLogs.setRejectedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);

									
							}

							settlDetailsMClog.info("agg/giveRejection/  temp record status updated to rejected");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("agg/giveRejection/  exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		
		else {
			settlDetailsMClog.info("agg/giveRejection/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
//	apis for parent end here
	
	@GetMapping("sm/read/{coName}")
	public ResponseEntity<GeneralResponse> readBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("sm/read/ Reading super merchant settlement details with name "+coName);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("sm/read/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("sm/read/ Permission validation true");

			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameContainingIgnoreCase(coName);
				  List<SettlementDetailsModel> settlDet=new ArrayList<SettlementDetailsModel>();

				 if(smMerchantMasterList.size()>0)
				 {
						settlDetailsMClog.info("sm/read/ smMerchantMasterList not null");

					 SettlementDetailsModel tempTable = null;
						
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							tempTable= new SettlementDetailsModel();
							
							tempTable.setType(103);
							tempTable.setTypeName(smRep.getCompanyLegalName());
							tempTable.setTypeId(smRep.getId());
							tempTable.setTypeActiveFlag(smRep.getActiveFlag());
							tempTable.settPlusOneSettlFlag(smRep.getSelfSettlement());
							tempTable.setInstantSettlFlag(smRep.getInstantSettlementEnable());
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							System.out.println(authenticateUserResponse.getUserName());
							settlDet.add(tempTable);
							
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("SETTLEMENT");
							auditLogs.setFeatureId("SETTLEMENT_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							0-login,1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("super merchant settlement details like"+coName);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
							
						}
						settlDetailsMClog.info("sm/read/ smMasterList sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDet), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 
				 e.printStackTrace();
					settlDetailsMClog.info("sm/read/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
		}
		else {
			settlDetailsMClog.info("sm/read/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}


	}
	
	@GetMapping("sm/getPreviousData/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> readBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		int superMerId = Integer.parseInt(coId);

		
//		if(operation.equals("R")) {
			
			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameAndId(coName, superMerId);
				  List<SettlementDetailsModel> settlDet=new ArrayList<SettlementDetailsModel>();

				 if(smMerchantMasterList.size()>0)
				 {
					 SettlementDetailsModel tempTable = null;
						
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							tempTable= new SettlementDetailsModel();
							
							tempTable.setType(103);
							tempTable.setTypeName(smRep.getCompanyLegalName());
							tempTable.setTypeId(smRep.getId());
							tempTable.setTypeActiveFlag(smRep.getActiveFlag());
							tempTable.settPlusOneSettlFlag(smRep.getSelfSettlement());
							tempTable.setInstantSettlFlag(smRep.getInstantSettlementEnable());
							tempTable.setRequestedUserName(authenticateUserResponse.getUserName());
							tempTable.setRequestedUserTimestamp(new Date());

							
							settlDet.add(tempTable);
						}
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDet), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		
				


	}
	

	
	@PostMapping("sm/update/{coName}/{coId}")
	public ResponseEntity<GeneralResponse> updateBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal,@PathVariable String coName,@PathVariable String coId)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("sm/update/ Updating super merchant settlement details with request data "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("sm/update/ response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		System.out.println("here in corp update");

		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());
		int superMerId = Integer.parseInt(coId);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}

		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("sm/update/ Permission validation true");

			try
			 {
				
				List<SuperMerchantMaster> smMerchantMasterList = superMerchantMasterRepository.findByCompanyLegalNameAndId(coName, superMerId);
				SuperMerchantMaster smRecord = smMerchantMasterList.get(0);
				System.out.println(smRecord);
				
				 if(smMerchantMasterList.size()>0)
				 {
						settlDetailsMClog.info("sm/update/ smMerchantMasterList not null");

					 FpCpSettlementTypeTemp tempTable = null;
						for(SuperMerchantMaster smRep: smMerchantMasterList) {
							
							
//							Inserting the entry into temp table if does'nt exist
							
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(superMerId, 102);
							if(tempRecord != null) {
								auditLogs.setOldData(new Gson().toJson(tempRecord));
							}

							if(tempRecord == null) {
								settlDetailsMClog.info("sm/update/ temp record does not exist");

								tempTable= new FpCpSettlementTypeTemp();

								tempTable.setType(102);
								tempTable.setTypeName(coName);
								tempTable.setTypeId(smRep.getId());
								
								tempTable.setTypeActiveFlag(smRep.getActiveFlag());
								tempTable.setTPlusOneSettlement(smRep.getSelfSettlement());
								tempTable.setInstantSettlement(smRep.getInstantSettlementEnable());
								
								tempTable.setRequestedByUser(authenticateUserResponse.getUserName());
								tempTable.setRequestedByTimestamp(new Date());
								tempTable.setApprovalStatus(0);

								auditLogs.setOldData(new Gson().toJson(tempTable));

								System.out.println(authenticateUserResponse.getUserName());

								fpCpSettlementTypeTempRepository.save(tempTable);
								
								tempRecord = tempTable;

							}
							settlDetailsMClog.info("sm/update/ temp record does exist");

							if(settlDetDataModal != null && tempRecord != null) {
								System.out.print(settlDetDataModal.gettPlusOneSettlFlag());
								
								
//								if (settlDetDataModal.getTypeActiveFlag() != null) {
//									tempRecord.setTypeActiveFlag(settlDetDataModal.getTypeActiveFlag());
//								}
								tempRecord.setTPlusOneSettlement(smRecord.getSelfSettlement());
								tempRecord.setInstantSettlement(smRecord.getInstantSettlementEnable());
								
								if (settlDetDataModal.gettPlusOneSettlFlag() != null && (smRecord.getSelfSettlement() != settlDetDataModal.gettPlusOneSettlFlag())) {
									System.out.println("sm self"+smRecord.getSelfSettlement()+" "+settlDetDataModal.gettPlusOneSettlFlag());
									if((smRecord.getSelfSettlement() == 1 && settlDetDataModal.gettPlusOneSettlFlag() == 1) || (smRecord.getSelfSettlement() == 1 && settlDetDataModal.gettPlusOneSettlFlag() == 0))
										tempRecord.setTPlusOneSettlement(settlDetDataModal.gettPlusOneSettlFlag());
									
									else 
										return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
												Constants.ERROR_INVAILD_ACTION, null), HttpStatus.OK);
								}
								
								if (settlDetDataModal.getInstantSettlFlag() != null && (smRecord.getInstantSettlementEnable() != settlDetDataModal.getInstantSettlFlag())) {
									System.out.println("sm inst"+smRecord.getInstantSettlementEnable()+" "+settlDetDataModal.getInstantSettlFlag());

									if((smRecord.getInstantSettlementEnable() == 1 && settlDetDataModal.getInstantSettlFlag() == 1) || (smRecord.getInstantSettlementEnable() == 1 && settlDetDataModal.getInstantSettlFlag() == 0))
										tempRecord.setInstantSettlement(settlDetDataModal.getInstantSettlFlag());
									else
										return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
												Constants.ERROR_INVAILD_ACTION, null), HttpStatus.OK);
								}
								
									tempRecord.setRequestedByUser(authenticateUserResponse.getUserName());
									tempRecord.setRequestedByTimestamp(new Date());
									tempRecord.setApprovalStatus(0);
								fpCpSettlementTypeTempRepository.save(tempRecord);
	
								List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermApproveAndActiveFlag("SETTLEMENT_MC", 1, 1);
								
								if(approversList != null) {

									List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
									EmailNotificationModel emailModel = new EmailNotificationModel();
									for(FpCpUserPermissions approver: approversList) {
										//EmailNotificationModel emailModel = new EmailNotificationModel();
										if(emailModel.getEmailId()!= null)
											emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
										else
											emailModel.setEmailId(approver.getFpCpUser().getEmailId());
										emailModel.setMasterName(smRecord.getSuperMerchantName());
										emailModel.setPrimaryKeyId(smRecord.getId());
										emailModel.setUserName(authenticateUserResponse.getUserName());
										emailModel.setMessage("Request for approval of Settlement flags modification");
										emailModel.setMasterType("super merchant");
										emailModel.setRequestAction("Kindly approve");				
									}
									emailList.add(emailModel);
									 commonTasks.sendEmails(emailList);
								}
								
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("SETTLEMENT");
									auditLogs.setFeatureId("SETTLEMENT_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(2);

									auditLogs.setNewData(new Gson().toJson(tempRecord));
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);
	
										
							}
							
						}
						settlDetailsMClog.info("sm/update/ to update data saved in temp table successfully");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDetDataModal), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("sm/update/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			settlDetailsMClog.info("sm/update/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	

	
	@GetMapping("sm/approveTable/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> approveBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("sm/approveTable/  to approve details for super merchant requested from "+fromDate+" to "+toDate);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("sm/approveTable/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}

		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("sm/approveTable/  Permission validation true");

			try
			 {
				
				List<FpCpSettlementTypeTemp> tempRecordZeroApproval = fpCpSettlementTypeTempRepository.findByApprovalStatusAndTypeAndRequestedByTimestampBetween(0, 102, dateFormat.parse(fromDate),dateFormat.parse(toDate));
				  List<SettlementDetailsModel> settlDetAppr=new ArrayList<SettlementDetailsModel>();

				 if(tempRecordZeroApproval.size() > 0)
				 {
						settlDetailsMClog.info("sm/approveTable/  temp table record found");

					 SettlementDetailsModel approvalTable = null;
						
						for(FpCpSettlementTypeTemp tempRecord: tempRecordZeroApproval) {	
												
							approvalTable= new SettlementDetailsModel();
							
							approvalTable.setType(tempRecord.getType());
							approvalTable.setTypeName(tempRecord.getTypeName());
							approvalTable.setTypeId(tempRecord.getTypeId());
							
//							approvalTable.setTypeActiveFlag(tempRecord.getTypeActiveFlag());
							approvalTable.settPlusOneSettlFlag(tempRecord.getTPlusOneSettlement());
							approvalTable.setInstantSettlFlag(tempRecord.getInstantSettlement());
													
							approvalTable.setRequestedUserName(tempRecord.getRequestedByUser());
							approvalTable.setRequestedUserTimestamp(tempRecord.getRequestedByTimestamp());

							settlDetAppr.add(approvalTable);
	
//							AUDIT LOGS
							auditLogs = new FpCpAuditLogs();

							auditLogs.setFeatureGrpId("SETTLEMENT");
							auditLogs.setFeatureId("SETTLEMENT_MC");
							auditLogs.setUserName(authenticateUserResponse.getUserName());
//							1-read,2-update,3-approval,4-rejection
							auditLogs.setOperation(1);
							auditLogs.setViewData("to approve super merchant settlement details from"+fromDate+"to"+toDate);
							auditLogs.setAuditTimestamp(new Date());
							auditLogs.setIpAddress(ip);
							fpCpAuditLogsRepository.save(auditLogs);
	
			
						}
						settlDetailsMClog.info("sm/approveTable/  temp table records to be approved sent to device in response");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED, settlDetAppr), HttpStatus.OK);
					
				 }
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);

				 }
			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("sm/approveTable/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }
		}
		else {
			settlDetailsMClog.info("sm/approveTable/  Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
			
		

	}
	
	@PostMapping("sm/giveApproval")
	public ResponseEntity<GeneralResponse> updateApprovedBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		settlDetailsMClog.info("sm/giveApproval/ Approving super merchant settlement details sent with request data: "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveApproval/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MMddhhmmss");
		String dateAsString = simpleDateFormat.format(new Date());

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("sm/giveApproval/ Permission validation true");

			
			try
			 {


				 		if(settlDetDataModal != null) {
				 			
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(settlDetDataModal.getTypeId(), 102);
							List<SuperMerchantMaster> smMerchantMasterList =  superMerchantMasterRepository.findByCompanyLegalNameAndId(settlDetDataModal.getTypeName(), settlDetDataModal.getTypeId());
							SuperMerchantMaster smRecordEmail = smMerchantMasterList.get(0);
							
							// audit bug fix
							FpCpSettlementTypeTemp tempRecordAudit = new FpCpSettlementTypeTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(SuperMerchantMaster smRep: smMerchantMasterList) {

								 tempRecordAudit.setType(103);
								 tempRecordAudit.setTypeName(smRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(smRep.getId());
								 
								 tempRecordAudit.setTypeActiveFlag(smRep.getActiveFlag());
								 tempRecordAudit.setTPlusOneSettlement(smRep.getSelfSettlement());
								 tempRecordAudit.setInstantSettlement(smRep.getInstantSettlementEnable());
								 
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
								 tempRecordAudit.setRequestedByTimestamp(new Date());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(SuperMerchantMaster smRecord: smMerchantMasterList) {

								if (settlDetDataModal.getTypeActiveFlag() != null) {
									smRecord.setActiveFlag((settlDetDataModal.getTypeActiveFlag()));
								}
								
								if (settlDetDataModal.gettPlusOneSettlFlag() != null) {
									smRecord.setSelfSettlement((settlDetDataModal.gettPlusOneSettlFlag()));
								}
								
								if (settlDetDataModal.getInstantSettlFlag() != null) {
									smRecord.setInstantSettlementEnable((settlDetDataModal.getInstantSettlFlag()));
								}
								
								smRecord.setEditedByUsername(authenticateUserResponse.getUserName());						
								smRecord.setEditedTimestamp(new Date());
									
								
								superMerchantMasterRepository.save(smRecord);
								
								tempRecord.setApprovalStatus(1);
								tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
								tempRecord.setApprovedRejectedByRemarks(settlDetDataModal.getApprRejRemarks());
								tempRecord.setApprovedRejectedByTimestamp(new Date());
								
								fpCpSettlementTypeTempRepository.save(tempRecord);
								
								List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermInfoAndActiveFlag("SETTLEMENT_MC", 1, 1);
								
								if(approversList != null) {

									List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
									EmailNotificationModel emailModel = new EmailNotificationModel();

									for(FpCpUserPermissions approver: approversList) {
										
										if(emailModel.getEmailId()!= null)
											emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
										else
											emailModel.setEmailId(approver.getFpCpUser().getEmailId());										emailModel.setMasterName(smRecordEmail.getSuperMerchantName());
										emailModel.setPrimaryKeyId(smRecordEmail.getId());
										emailModel.setUserName(authenticateUserResponse.getUserName());
										emailModel.setMessage("Approval of settlement flags modification");
										emailModel.setMasterType("super merchant");
										emailModel.setRequestAction("");
										
									}
									emailList.add(emailModel);
									commonTasks.sendEmails(emailList);
								}
								
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("SETTLEMENT");
									auditLogs.setFeatureId("SETTLEMENT_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(3);
//									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(settlDetDataModal));
									auditLogs.setApprovedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);


									
							}
							settlDetailsMClog.info("agg/giveApproval/  Super merchant master updated");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("sm/giveApproval/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		}
		else {
			settlDetailsMClog.info("sm/giveApproval/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}
	
	@PostMapping("sm/giveRejection")
	public ResponseEntity<GeneralResponse> rejectApprovedBankDetailsSM(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SettlementDetailsModel settlDetDataModal)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		settlDetailsMClog.info("sm/giveRejection/ Rejecting super merchant settlement details sent with request data: "+new Gson().toJson(settlDetDataModal));

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			settlDetailsMClog.info("sm/giveRejection/  sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;
		auditLogs = new FpCpAuditLogs();

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT")) {
				if(data.getFeatureCode().equals("SETTLEMENT_MC")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			settlDetailsMClog.info("sm/giveRejection/ Permission validation true");

			try
			 {

				 		if(settlDetDataModal != null) {

				 			
							FpCpSettlementTypeTemp tempRecord = fpCpSettlementTypeTempRepository.findByTypeIdAndType(settlDetDataModal.getTypeId(), 102);
							List<SuperMerchantMaster> smMerchantMasterList =  superMerchantMasterRepository.findByCompanyLegalNameAndId(settlDetDataModal.getTypeName(), settlDetDataModal.getTypeId());
							
							// audit bug fix
							FpCpSettlementTypeTemp tempRecordAudit = new FpCpSettlementTypeTemp();
//							auditLogs.setOldData(new Gson().toJson(tempRecord));

							for(SuperMerchantMaster smRep: smMerchantMasterList) {

								 tempRecordAudit.setType(102);
								 tempRecordAudit.setTypeName(smRep.getCompanyLegalName());
								 tempRecordAudit.setTypeId(smRep.getId());
								 
								 tempRecordAudit.setTypeActiveFlag(smRep.getActiveFlag());
								 tempRecordAudit.setTPlusOneSettlement(smRep.getSelfSettlement());
								 tempRecordAudit.setInstantSettlement(smRep.getInstantSettlementEnable());
								 
								 tempRecordAudit.setRequestedByUser(authenticateUserResponse.getUserName());
								 tempRecordAudit.setRequestedByTimestamp(new Date());
							}
							auditLogs.setOldData(new Gson().toJson(tempRecordAudit));

//bug fix

							
							for(SuperMerchantMaster smRecord: smMerchantMasterList) {

								tempRecord.setApprovalStatus(2);
								tempRecord.setApprovedRejectedByRemarks(settlDetDataModal.getApprRejRemarks());
								tempRecord.setApprovedRejectedByUser(authenticateUserResponse.getUserName());
								tempRecord.setApprovedRejectedByTimestamp(new Date());
								fpCpSettlementTypeTempRepository.save(tempRecord);
								
								List<FpCpUserPermissions> approversList = fpCpUserPermissionsRepository.findByFeatureCodeAndPermInfoAndActiveFlag("SETTLEMENT_MC", 1, 1);
								
								if(approversList != null) {

									List<EmailNotificationModel> emailList = new ArrayList<EmailNotificationModel>();
									EmailNotificationModel emailModel = new EmailNotificationModel();

									for(FpCpUserPermissions approver: approversList) {
										
										if(emailModel.getEmailId()!= null)
											emailModel.setEmailId(emailModel.getEmailId()+","+approver.getFpCpUser().getEmailId());
										else
											emailModel.setEmailId(approver.getFpCpUser().getEmailId());										emailModel.setMasterName(smRecord.getSuperMerchantName());
										emailModel.setPrimaryKeyId(smRecord.getId());
										emailModel.setUserName(authenticateUserResponse.getUserName());
										emailModel.setMessage("Rejection of settlement flags modification");
										emailModel.setMasterType("super merchant");
										emailModel.setRequestAction("");
										
									}
									emailList.add(emailModel);
									commonTasks.sendEmails(emailList);
								}
									
//									AUDIT LOGS

									auditLogs.setFeatureGrpId("SETTLEMENT");
									auditLogs.setFeatureId("SETTLEMENT_MC");
									auditLogs.setUserName(authenticateUserResponse.getUserName());
//									0-login,1-read,2-update,3-approval,4-rejection
									auditLogs.setOperation(4);
									auditLogs.setOldData(new Gson().toJson(tempRecord));
									auditLogs.setNewData(new Gson().toJson(settlDetDataModal));
									auditLogs.setRejectedByUser(authenticateUserResponse.getUserName());
									auditLogs.setAuditTimestamp(new Date());
									auditLogs.setIpAddress(ip);
									fpCpAuditLogsRepository.save(auditLogs);


									
							}
							settlDetailsMClog.info("sm/giveRejection/  temp record status updated to rejected");

									return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
											Constants.REQUEST_COMPLETED), HttpStatus.OK);
									
							}
				 		
				 		else
							 {
						    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.NO_DATA_AVAILABLE,null), HttpStatus.OK);
			
							 }
							
			 }
			catch(Exception e)
			 {
				 e.printStackTrace();
					settlDetailsMClog.info("sm/giveRejection/ exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
			
		 	
		}
		else {
			settlDetailsMClog.info("sm/giveRejection/ Permission validation false"+authenticateUserResponse.getUserName());

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
		
	
}

package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.OneOffSettlementInfoDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpsettlementdb.entity.OneOffSettlementInfo;
import com.apptmyz.fpsettlementdb.repository.OneOffSettlementInfoRepository;
import com.google.gson.Gson;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/settlReports")
public class SettlementReportsController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FilesUtil fileUtil;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private OneOffSettlementInfoRepository oneOffSettlementInfoRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@GetMapping("oneOf/history/data/{fromDate}/{toDate}")
	 public ResponseEntity<GeneralResponse> oneOfHistoryData(HttpServletRequest request,@PathVariable String fromDate,@PathVariable String toDate,HttpSession httpSession ,@RequestHeader("token") String token) throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		   try {
				String jwtData = jwtUtil.parseJWT(token);
				authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
			} catch (ExpiredJwtException e2) {
				e2.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			} catch (UnsupportedJwtException e2) {
				e2.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			} catch (MalformedJwtException e2) {
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			} catch (SignatureException e2) {
				e2.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			} catch (IllegalArgumentException e2) {
				e2.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
			}
		   SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:SS");
		   List<OneOffSettlementInfoDataModel> list = new ArrayList<>();
		   OneOffSettlementInfoDataModel model = null;
		   List<OneOffSettlementInfo> oneOffSettlementInfo = null;
			String ip = commonTasks.getIpAddress(request);

		   FpCpAuditLogs auditLogs = null;

		   boolean permission = false;
			
			List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
			for (UserPermissionsModel data  : permissionsList) {
				System.out.println(data.toString());
				if(data.getFeatureGrpCode().equals("SETTL_ADJUST")) {
					if(data.getFeatureCode().equals("SETTL_ADJUSTMENT_CRA")) {
						if(data.getPermRead() == 1) {
							permission = true;
							break;
						}
					}
				}
			}
			if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			   
			   oneOffSettlementInfo=oneOffSettlementInfoRepository.findByRequestedTimestampBetween(dateformat.parse(fromDate),dateformat.parse(toDate));
			   if(oneOffSettlementInfo!=null && oneOffSettlementInfo.size()>0) {
				   for(OneOffSettlementInfo data:oneOffSettlementInfo) {
					   model = new OneOffSettlementInfoDataModel();
					   model.setId(data.getId());
					   model.setAmount(data.getAmount());
					   model.setApprovedByUsername(data.getApprovedByUsername());
					   model.setApprovedFlag(data.getApprovedFlag());
					   model.setApprovedTimestamp(data.getApprovedTimestamp());
					   model.setCompanyBankAccountName(data.getCompanyBankAccountName());
					   model.setCompanyBankAccountNumber(data.getCompanyBankAccountNumber());
					   model.setCompanyIfscCode(data.getCompanyIfscCode());
					   model.setFileName(data.getFileName());
					   model.setFilePath(data.getFilePath());
					   model.setImagePath(data.getImagePath());
					   model.setPrimaryKeyId(data.getPrimaryKeyId());
					   model.setRejectedByUsername(data.getRejectedByUsername());
					   model.setRejectedTimestamp(data.getRejectedTimestamp());
					   model.setRejectedFlag(data.getRejectedFlag());
					   model.setRequestedByUsername(data.getRequestedByUsername());
					   model.setRequestedTimestamp(data.getRequestedTimestamp());
					   model.setSettlementTo(data.getSettlementTo());
					   model.setTypeOfTransaction(data.getTypeOfTransaction());
					   model.setRemarks(data.getRemarks());
					   model.setFileReferenceNumber(data.getFileReferenceNumber());
					   model.setEmailId(data.getEmailId());
					   model.setMobileNumber(data.getMobileNumber());
					   model.setNarration(data.getNarration());
					   model.setRejectedTimestamp(data.getRejectedTimestamp());
					   model.setImagePath(data.getImagePath());
					   model.setRemarks(data.getRemarks());
					   model.setStatus(data.getStatus());
					   model.setStatusMessage(data.getStatusMessage());
					   model.setStatusUpdatedTimestamp(data.getStatusUpdatedTimestamp());
					   model.setCmsNumber(data.getCmsNumber());
					   model.setServiceType(data.getServiceType());
					   model.setSettlementType(data.getSettlementType());
					   list.add(model);
				   }
				   
//					AUDIT LOGS
					auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTL_ADJUST");
					auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("One of history settlement report from "+fromDate+" to "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					
				   return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESSFUL,list), HttpStatus.OK);
				   

			   }else {
				   return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,"No Data Available",null), HttpStatus.OK);
			   }
		   }else {
			  return new ResponseEntity<GeneralResponse>( HttpStatus.NOT_FOUND);
		   }	
	}
	

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpaepsdb.entity.AggrSmContactDetails;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.AggrSmContactDetailsRepository;
//import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
//import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.CompanyTypeMasterDataRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.StateMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.Contact;
import com.apptmyz.fpcontrolpanel.data.ContactDetailsModel;
import com.apptmyz.fpcontrolpanel.data.SuperMerchantMasterModal;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;
import com.apptmyz.fpcontrolpanel.services.BaseService;
import com.apptmyz.fpcontrolpanel.utils.CommonRepositoryMethods;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpBankDetailsTemp;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpSettlementTypeTemp;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpBankDetailsTempRepository;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpSettlementTypeTempRepository;
import com.apptmyz.globalverification.data.PanMasterDataModel;
import com.apptmyz.globalverification.services.PanMasterService;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.itextpdf.text.pdf.codec.Base64;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/superMerchant")
public class SuperMerchantController {

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private FpCpBankDetailsTempRepository fpCpBankDetailsTempRepository;

	@Autowired
	private FpCpSettlementTypeTempRepository fpCpSettlementTypeTempRepository;

	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;

	@Autowired
	private StateMasterRepository stateMasterRepository;

	@Autowired
	private CompanyTypeMasterDataRepository companyTypeMasterDataRepository;

	@Autowired
	private CommonTasks commonTasks;
	@Autowired
	private CommonRepositoryMethods commonRepositoryMethods;

	@Autowired
	private FilesUtil fileUtil;

	@Autowired
	private AggrSmContactDetailsRepository aggrSmContactDetailsRepository;
	
	@Autowired
	private BaseService baseService;

	@PostMapping("/create")
	public ResponseEntity<GeneralResponse> postAllSuperMerchantDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SuperMerchantMasterModal superMerchantMasterModal)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = null;

		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermCreate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {

			if (superMerchantMasterModal != null) {
				SuperMerchantMaster supermaster = superMerchantMasterRepository.findByLoginId(superMerchantMasterModal.getLoginId());
				ParentMerchantMaster parentmaster = null;
				FpCpSettlementTypeTemp settlemetType = null;
				FpCpBankDetailsTemp bankdetails = null;
				if (supermaster != null && supermaster.getParentId() != null) {
					parentmaster = parentMerchantMasterRepository.findOne(superMerchantMasterModal.getParentId());
				}
				if (supermaster == null) {
					SuperMerchantMaster superMerchantMaster = new SuperMerchantMaster();
					int parentId = 0;
					if (superMerchantMasterModal.getParentId() == null) {
						parentId = 0;
					} else {
						parentId = superMerchantMasterModal.getParentId();
					}

					superMerchantMaster.setSuperMerchantName(superMerchantMasterModal.getSuperMerchantName());
					superMerchantMaster.setLoginId(superMerchantMasterModal.getLoginId());
					superMerchantMaster.setLoginPassword(superMerchantMasterModal.getLoginPassword());
					superMerchantMaster.setAnalyticsPortalPassword(superMerchantMasterModal.getLoginPassword());

					Calendar calendar = Calendar.getInstance();
					calendar.setTime(new Date());
					calendar.add(Calendar.DATE, -92);

					superMerchantMaster.setPwdLastChangedTimestamp(calendar.getTime());
					superMerchantMaster.setTypeOfBusiness(superMerchantMasterModal.getTypeOfBusiness());
					superMerchantMaster.setHoPhoneNumber(superMerchantMasterModal.getHoPhoneNumber());
					superMerchantMaster.setHoAddress(superMerchantMasterModal.getHoAddress());
					superMerchantMaster.setEmailId(superMerchantMasterModal.getEmailId());
					// superMerchantMaster.setUserPan(superMerchantMasterModal.getUserPan());
					superMerchantMaster.setAadhaarNumber(superMerchantMasterModal.getAadhaarNumber());
					//					superMerchantMaster.setBankAccountName(superMerchantMasterModal.getBankAccountName());
					superMerchantMaster.setUserType(String.valueOf(superMerchantMasterModal.getUserType()));
					superMerchantMaster.setStateMaster(stateMasterRepository.findOne(superMerchantMasterModal.getStateId()));
					// superMerchantMaster.setCityMaster(cityMasterRepository.findOne(superMerchantMasterModal.getCityId()));
					// superMerchantMaster.setCompanyBankAccountNumber(superMerchantMasterModal.getCompanyBankAccountNumber());
					superMerchantMaster.setCompanyBankBranchName(superMerchantMasterModal.getCompanyBankBranchName());
					// superMerchantMaster.setCompanyBankName(superMerchantMasterModal.getCompanyBankName());
					// superMerchantMaster.setCompanyIfscCode(superMerchantMasterModal.getCompanyIfscCode());
					superMerchantMaster.setCompanyLegalName(superMerchantMasterModal.getCompanyLegalName());
					superMerchantMaster.setAutomaticBankVerificationDetails(superMerchantMasterModal.getCompanyLegalName());
					superMerchantMaster.setAutomaticBankVerification(1);
					superMerchantMaster.setCompanyMarketingName(superMerchantMasterModal.getCompanyMarketingName());
					superMerchantMaster.setCompanyTypeMasterData(companyTypeMasterDataRepository.findOne(superMerchantMasterModal.getCompanyTypeId()));
					superMerchantMaster.setDateOfIncorporation(superMerchantMasterModal.getDateOfIncorporation());
					superMerchantMaster.setNoOfTerminals(superMerchantMasterModal.getNoOfTerminals());
					superMerchantMaster.setOfficialContactNo(superMerchantMasterModal.getOfficialContactNo());
					superMerchantMaster.setGstInNumber(superMerchantMasterModal.getGstInNumber());
					superMerchantMaster.setParentId(parentId);
					superMerchantMaster.setTimesatmp(new Date());
					superMerchantMaster.setCreatedByUsername(authenticateUserResponse.getUserName());
					superMerchantMaster.setCreatedIpAddress(ip);
					superMerchantMaster.setCreatedTimestamp(new Date());
					superMerchantMaster.setInstantSettlementEnable(0);
					superMerchantMaster.setActiveFlag(superMerchantMasterModal.getActiveFlag());
					superMerchantMaster.setOrganisation(superMerchantMasterModal.getOrganisation());

					superMerchantMaster.setActiveFlag(superMerchantMasterModal.getActiveFlag());
					superMerchantMaster.setOnboardingFormFileId(getFileId("onboard", superMerchantMasterModal.getOnboardingformdata()));
					superMerchantMaster.setGstCertificateFileId(getFileId("gst", superMerchantMasterModal.getGstformdata()));
					superMerchantMaster.setAoaFileId(getFileId("aoa", superMerchantMasterModal.getAoaformdata()));
					superMerchantMaster.setKycFileId(getFileId("kyc", superMerchantMasterModal.getKycformdata()));
					superMerchantMaster.setPanVerificationActiveFlag(superMerchantMasterModal.getPanVerifications());
					superMerchantMaster.setBankVerificationActiveFlag(superMerchantMasterModal.getBankVerifications());
					superMerchantMaster.setVoterIdVerificationActiveFlag(superMerchantMasterModal.getVoterIdVerifications());
					
					superMerchantMasterRepository.save(superMerchantMaster);

					//settlemt temp table 
					if (parentmaster != null) {
						if (parentmaster.getSelfSettlementFlag() == 1) {
							superMerchantMaster.setSelfSettlement(0);
						} else {
							if(superMerchantMasterModal.getSelfSettlement() !=null && superMerchantMasterModal.getSelfSettlement()==1) {
								settlemetType = new FpCpSettlementTypeTemp();
								settlemetType.setType(102);
								settlemetType.setTypeId(superMerchantMaster.getId());
								settlemetType.setTypeName(superMerchantMaster.getCompanyLegalName());
								settlemetType.setTPlusOneSettlement(superMerchantMasterModal.getSelfSettlement());
								settlemetType.setTypeActiveFlag(superMerchantMasterModal.getActiveFlag());
							}else if(superMerchantMasterModal.getInstantSettlement()!=null && superMerchantMasterModal.getInstantSettlement()==1) {
								settlemetType = new FpCpSettlementTypeTemp();
								settlemetType.setType(102);
								settlemetType.setTypeId(superMerchantMaster.getId());
								settlemetType.setTypeName(superMerchantMaster.getCompanyLegalName());
								settlemetType.setInstantSettlement(superMerchantMasterModal.getInstantSettlement());
								settlemetType.setTypeActiveFlag(superMerchantMasterModal.getActiveFlag());
							}

						}
					} else {	
						if(superMerchantMasterModal.getSelfSettlement() !=null && superMerchantMasterModal.getSelfSettlement()==1) {
							settlemetType = new FpCpSettlementTypeTemp();
							settlemetType.setType(102);
							settlemetType.setTypeId(superMerchantMaster.getId());
							settlemetType.setTypeName(superMerchantMaster.getCompanyLegalName());
							settlemetType.setTPlusOneSettlement(superMerchantMasterModal.getSelfSettlement());
							settlemetType.setTypeActiveFlag(superMerchantMasterModal.getActiveFlag());
							settlemetType.setRequestedByUser(authenticateUserResponse.getUserName());
							settlemetType.setRequestedByTimestamp(new Date());
							settlemetType.setApprovalStatus(0);
							fpCpSettlementTypeTempRepository.save(settlemetType);

						}else if(superMerchantMasterModal.getInstantSettlement()!=null && superMerchantMasterModal.getInstantSettlement()==1){
							settlemetType = new FpCpSettlementTypeTemp();
							settlemetType.setType(102);
							settlemetType.setTypeId(superMerchantMaster.getId());
							settlemetType.setTypeName(superMerchantMaster.getCompanyLegalName());
							settlemetType.setInstantSettlement(superMerchantMasterModal.getInstantSettlement());
							settlemetType.setTypeActiveFlag(superMerchantMasterModal.getActiveFlag());
							settlemetType.setRequestedByUser(authenticateUserResponse.getUserName());
							settlemetType.setRequestedByTimestamp(new Date());
							settlemetType.setApprovalStatus(0);
							fpCpSettlementTypeTempRepository.save(settlemetType);

						}
					}
					//bank temp verifications
					if (commonTasks.check(superMerchantMasterModal.getCompanyBankAccountNumber(),superMerchantMasterModal.getCompanyIfscCode())) {
						bankdetails = new FpCpBankDetailsTemp();
						bankdetails.setType(102);
						bankdetails.setTypeId(superMerchantMaster.getId());
						bankdetails.setTypeName(superMerchantMaster.getCompanyLegalName());

						bankdetails.setBankAccountName(superMerchantMasterModal.getBankAccountName());
						bankdetails.setBankAccountNumber(superMerchantMasterModal.getCompanyBankAccountNumber());
						bankdetails.setBankIfscCode(superMerchantMasterModal.getCompanyIfscCode());
						bankdetails.setAutomaticBankVerification(0);
						bankdetails.setAutomaticBankVerificationDetails(superMerchantMasterModal.getAutomaticBankVerificationDetails());
						bankdetails.setCancelledChequeImages(superMerchantMasterModal.getCancelledChequeImages());
						bankdetails.setRequestedByTimestamp(new Date());
						bankdetails.setRequestedByRemarks(superMerchantMasterModal.getRemarks());
						bankdetails.setRequestedByUser(authenticateUserResponse.getUserName());
						bankdetails.setRequestedByTimestamp(new Date());
						bankdetails.setApprovalStatus(0);
						fpCpBankDetailsTempRepository.save(bankdetails);
					}
					
					if (commonTasks.check(superMerchantMasterModal.getUserPan())) {
						superMerchantMaster.setUserPan(superMerchantMasterModal.getUserPan().toUpperCase());
						String panName = baseService.panVerification(request, superMerchantMasterModal.getUserPan().toUpperCase());
						if(commonTasks.check(panName)) {
							superMerchantMaster.setAutomaticPanVerification(1);
							superMerchantMaster.setAutomaticPanVerificationDetails(panName);
						}
						else {
							superMerchantMaster.setAutomaticPanVerification(0);
						}
						
					}
					
					superMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					superMerchantMaster.setEditedTimestamp(new Date());

					superMerchantMaster.setCashDepositEnable(0);
					superMerchantMaster.setCashDepositOtpEnable(0);
					superMerchantMaster.setCashDepositPreEnable(0);
					superMerchantMaster.setSmsApFlag(0);
					superMerchantMaster.setSmsCashDepositFlag(0);
					superMerchantMaster.setSmsCwFlag(0);
					superMerchantMaster.setSmsDropCashFlag(0);
					superMerchantMaster.setMicroAtmEnable(0);
					superMerchantMaster.setTwoFaEnable(0);
					//				if (superMerchantMaster.getAutomaticPanVerification() == 0) {
					//					superMerchantMasterRepository.save(superMerchantMaster);
					//					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,Constants.SUCCESS_NO_PAN_DETAILS, superMerchantMaster.getId()), HttpStatus.BAD_REQUEST);
					//				}


					superMerchantMasterRepository.save(superMerchantMaster);

					//				AUDIT LOGS
					auditLogs = new FpCpAuditLogs();


					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(5);
					auditLogs.setNewData("created super merchant master "+ superMerchantMaster.toString());
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, superMerchantMaster.getId()),HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.SUPERMERCHANTID_ALREADY_EXISTS, null),HttpStatus.OK);
				}
			} 
			else {return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),HttpStatus.BAD_REQUEST);
			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);

		}
	}

	@PostMapping("/validatingPanDetails/{panNumber}")
	public ResponseEntity<GeneralResponse> updateMerchantPanDetails(@PathVariable String panNumber,
			HttpSession httpSession, @RequestHeader("token") String token,HttpServletRequest request,
			@RequestBody SuperMerchantMasterModal superMerchantMasterModal) throws UnsupportedEncodingException, ParseException {
		System.out.println("update info:" + superMerchantMasterModal.toString());
		AuthenticateUserResponse authenticateUserResponse =null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		if (superMerchantMasterModal != null && superMerchantMasterModal.getId() != null) {
			SuperMerchantMaster superMerchantMaster = superMerchantMasterRepository.findOne(superMerchantMasterModal.getId());
			
			if (commonTasks.check(panNumber)) {
				superMerchantMaster.setUserPan(panNumber.toUpperCase());
				String panName = baseService.panVerification(request, panNumber.toUpperCase());
				if(commonTasks.check(panName)) {
					superMerchantMaster.setAutomaticPanVerification(1);
					superMerchantMaster.setAutomaticPanVerificationDetails(panName);
				}
				else {
					superMerchantMaster.setAutomaticPanVerification(0);
				}
				superMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
				superMerchantMaster.setEditedTimestamp(new Date());
			}
			if (superMerchantMaster.getAutomaticPanVerification() !=null && superMerchantMaster.getAutomaticPanVerification() == 1) {
				superMerchantMasterRepository.save(superMerchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				superMerchantMasterRepository.save(superMerchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ENTER_VALID_PAN_DETAILS),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}

	}

	@PostMapping("/validatingBankDetails/{bankAccNumber}/{bankIfscCode}/{bankName}")
	public ResponseEntity<GeneralResponse> updateMerchantBankDetails(@PathVariable String bankAccNumber,
			@PathVariable String bankIfscCode, @PathVariable String bankName, HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SuperMerchantMasterModal superMerchantMasterModal)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		// System.out.println("update info:" + merchantMasterModal.toString());
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
		Gson gson = new GsonBuilder().serializeNulls().create();
		if (superMerchantMasterModal != null && superMerchantMasterModal.getId() != null) {
			SuperMerchantMaster superMerchantMaster = superMerchantMasterRepository.findOne(superMerchantMasterModal.getId());
			//				if (commonTasks.check(superMerchantMasterModal.getCompanyBankAccountNumber(),superMerchantMasterModal.getCompanyIfscCode())) {
			//					superMerchantMaster.setCompanyBankAccountNumber(superMerchantMasterModal.getCompanyBankAccountNumber());
			//					superMerchantMaster.setCompanyIfscCode(superMerchantMasterModal.getCompanyIfscCode().toUpperCase());
			//					superMerchantMaster.setCompanyBankName(superMerchantMasterModal.getCompanyBankName().toUpperCase());
			//					try {
			//						BankMasterDataModel verificationResponse = BankMasterService.checkBankDetails(superMerchantMasterModal.getCompanyBankAccountNumber(), superMerchantMasterModal.getCompanyIfscCode(), superMerchantMasterModal.getSuperMerchantName(), superMerchantMasterModal.getHoPhoneNumber(), superMerchantMasterModal.getId());
			//						if (verificationResponse != null && verificationResponse.getBankAccountName()!= null) {
			//							superMerchantMaster.setAutomaticBankVerification(1);
			//							superMerchantMaster.setAutomaticBankVerificationDetails(verificationResponse.getBankAccountName());
			//						} else {
			//							superMerchantMaster.setAutomaticBankVerification(0);
			//							superMerchantMaster.setAutomaticBankVerificationDetails(gson.toJson(verificationResponse));
			//						}
			//						superMerchantMaster.setEditedByUsername(authenticateUserResponse.getUsername());
			//						superMerchantMaster.setEditedTimestamp(new Date());
			//					} catch (Exception e) {
			//						e.printStackTrace();
			//						superMerchantMaster.setRemarks(e.getMessage());
			//					}
			//				}
			if (commonTasks.check(superMerchantMasterModal.getCompanyBankAccountNumber(),superMerchantMasterModal.getCompanyIfscCode())) {
				superMerchantMaster.setCompanyBankAccountNumber(superMerchantMasterModal.getCompanyBankAccountNumber());
				superMerchantMaster.setCompanyIfscCode(superMerchantMasterModal.getCompanyIfscCode());
				superMerchantMaster.setCompanyBankName(superMerchantMasterModal.getCompanyBankName());
				double amount = 1.0;
				try {
					GeneralResponse generalResponse = commonRepositoryMethods.IMPSP2ATransaction(superMerchantMasterModal.getCompanyBankAccountNumber(),superMerchantMasterModal.getCompanyIfscCode(), amount,superMerchantMasterModal.getSuperMerchantName(),superMerchantMasterModal.getHoPhoneNumber(), superMerchantMasterModal.getHoPhoneNumber(),superMerchantMasterModal.getId());
					if (!generalResponse.isStatus()) {
						superMerchantMaster.setAutomaticBankVerification(0);
						superMerchantMaster.setAutomaticBankVerificationDetails((generalResponse.getData()).toString());
						superMerchantMaster.setRemarks(generalResponse.getMessage());
					} else {
						superMerchantMaster.setAutomaticBankVerification(1);
						superMerchantMaster.setAutomaticBankVerificationDetails(((IMPSResponseModel) generalResponse.getData()).getBeneName());
						superMerchantMaster.setRemarks(generalResponse.getMessage());
					}
					superMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					superMerchantMaster.setEditedTimestamp(new Date());
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (superMerchantMaster.getAutomaticBankVerification() !=null && superMerchantMaster.getAutomaticBankVerification() == 1) {
				superMerchantMasterRepository.save(superMerchantMaster);
				return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL),
						HttpStatus.OK);
			} else {
				superMerchantMasterRepository.save(superMerchantMaster);
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, "BANK RESPONSE : "+superMerchantMaster.getRemarks()),
						HttpStatus.BAD_REQUEST);
			}
		} else {
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.BAD_REQUEST);
		}
	}


	@PostMapping("/update/admin")
	public ResponseEntity<GeneralResponse> updateMerchantDetails(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @RequestBody SuperMerchantMasterModal superMerchantMasterModal)
					throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		try {
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(HttpStatus.BAD_REQUEST);
		}
		String ip = commonTasks.getIpAddress(request);

		FpCpAuditLogs auditLogs = new FpCpAuditLogs();
		boolean permission = false;

		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {

			if(data.getFeatureGrpCode().equals("ONBOARDING")) {
				if(data.getFeatureCode().equals("ONBOARDING_CRU")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {


			if (superMerchantMasterModal != null) {
				System.out.println("super merchant id : "+superMerchantMasterModal.getId()+" record is edited by : "+authenticateUserResponse.getUserName());
				System.out.println("The super merchant edited data id : "+superMerchantMasterModal);
				if (superMerchantMasterModal.getId() != null) {
					SuperMerchantMaster superMerchantMaster = superMerchantMasterRepository
							.findOne(superMerchantMasterModal.getId());


					if (commonTasks.check(superMerchantMasterModal.getSuperMerchantName())) {
						superMerchantMaster.setSuperMerchantName(superMerchantMasterModal.getSuperMerchantName());
					}
					if (commonTasks.check(superMerchantMasterModal.getLoginId())) {
						superMerchantMaster.setLoginId(superMerchantMasterModal.getLoginId());
					}
					if (commonTasks.check(superMerchantMasterModal.getHoAddress())) {
						superMerchantMaster.setHoAddress(superMerchantMasterModal.getHoAddress());
					}
					if (commonTasks.check(superMerchantMasterModal.getHoPhoneNumber())) {
						superMerchantMaster.setHoPhoneNumber(superMerchantMasterModal.getHoPhoneNumber());
					}
					if (commonTasks.check(superMerchantMasterModal.getEmailId())) {
						superMerchantMaster.setEmailId(superMerchantMasterModal.getEmailId());
					}
					if (commonTasks.check(superMerchantMasterModal.getUserPan())) {
						superMerchantMaster.setUserPan(superMerchantMasterModal.getUserPan());
					}
					if (commonTasks.check(superMerchantMasterModal.getBankAccountName())) {
						superMerchantMaster.setBankAccountName(superMerchantMasterModal.getBankAccountName());
					}
					if (commonTasks.check(superMerchantMasterModal.getCompanyBankBranchName())) {
						superMerchantMaster.setCompanyBankBranchName(superMerchantMasterModal.getCompanyBankBranchName());
					}
					if (commonTasks.check(superMerchantMasterModal.getCompanyBankName())) {
						superMerchantMaster.setCompanyBankName(superMerchantMasterModal.getCompanyBankName());
					}
					if (commonTasks.check(superMerchantMasterModal.getCompanyIfscCode())) {
						superMerchantMaster.setCompanyIfscCode(superMerchantMasterModal.getCompanyIfscCode());
					}
					if (commonTasks.check(superMerchantMasterModal.getCompanyLegalName())) {
						superMerchantMaster.setCompanyLegalName(superMerchantMasterModal.getCompanyLegalName());
						superMerchantMaster.setAutomaticBankVerificationDetails(superMerchantMasterModal.getCompanyLegalName());
						superMerchantMaster.setAutomaticBankVerification(1);
					}
					if (commonTasks.check(superMerchantMasterModal.getCompanyMarketingName())) {
						superMerchantMaster.setCompanyMarketingName(superMerchantMasterModal.getCompanyMarketingName());
					}
					if (commonTasks.check(superMerchantMasterModal.getDateOfIncorporation())) {
						superMerchantMaster.setDateOfIncorporation(superMerchantMasterModal.getDateOfIncorporation());
					}
					if (superMerchantMasterModal.getNoOfTerminals() != null) {
						superMerchantMaster.setNoOfTerminals(superMerchantMasterModal.getNoOfTerminals());
					}
					if (commonTasks.check(superMerchantMasterModal.getGstInNumber())) {
						superMerchantMaster.setGstInNumber(superMerchantMasterModal.getGstInNumber());
					}
					if (superMerchantMasterModal.getActiveFlag() != null) {
						if(superMerchantMasterModal.getActiveFlag() == 0){
							superMerchantMaster.setActiveFlag(0);
						}else if(superMerchantMasterModal.getActiveFlag() == 1){
							superMerchantMaster.setActiveFlag(1);
						}
					}

					if (commonTasks.check(superMerchantMasterModal.getOnboardingformdata())) {
						superMerchantMaster.setOnboardingFormFileId(getFileId("onboard", superMerchantMasterModal.getOnboardingformdata()));
					}
					if (commonTasks.check(superMerchantMasterModal.getGstformdata())) {
						superMerchantMaster.setGstCertificateFileId(getFileId("gst", superMerchantMasterModal.getGstformdata()));
					}
					if (commonTasks.check(superMerchantMasterModal.getAoaformdata())) {
						superMerchantMaster.setAoaFileId(getFileId("aoa", superMerchantMasterModal.getAoaformdata()));
					}
					if (commonTasks.check(superMerchantMasterModal.getKycformdata())) {
						superMerchantMaster.setKycFileId(getFileId("kyc", superMerchantMasterModal.getKycformdata()));
					}

					superMerchantMasterRepository.save(superMerchantMaster);
					if(superMerchantMasterModal.getSelfSettlement()!=null && superMerchantMasterModal.getSelfSettlement()!=0) {
						if(superMerchantMaster.getAutomaticBankVerification() !=null && superMerchantMaster.getAutomaticBankVerification() == 1){
							if (superMerchantMaster.getParentId() != null) {
								ParentMerchantMaster parentMaster = parentMerchantMasterRepository
										.findOne(superMerchantMaster.getParentId());
								if (parentMaster != null) {
									if (parentMaster.getSelfSettlementFlag() != null && parentMaster.getSelfSettlementFlag() == 1 && superMerchantMasterModal.getSelfSettlement() == 1) {
										return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
												Constants.NO_ACCESS_DISTRIBUTOR_SETTLEMENT, null), HttpStatus.BAD_REQUEST);
									} else {
										List<MerchantMaster> merchantMaster = superMerchantMaster.getListOfMerchantMaster();
										for (MerchantMaster m : merchantMaster) {
											if (m.getSelfSettlementFlag() != null && m.getSelfSettlementFlag() == 1) {
												return new ResponseEntity<GeneralResponse>(
														new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_MER_SETTLEMENT, null),
														HttpStatus.BAD_REQUEST);
											} else {
												superMerchantMaster.setSelfSettlement(superMerchantMasterModal.getSelfSettlement());
											}
										}
									}
								} else {
									List<MerchantMaster> merchantMaster = superMerchantMaster.getListOfMerchantMaster();
									for (MerchantMaster m : merchantMaster) {
										if (m.getSelfSettlementFlag() != null && m.getSelfSettlementFlag() == 1) {
											return new ResponseEntity<GeneralResponse>(
													new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_MER_SETTLEMENT, null),
													HttpStatus.BAD_REQUEST);
										} else {
											superMerchantMaster.setSelfSettlement(superMerchantMasterModal.getSelfSettlement());
										}
									}
								}
							} else {
								List<MerchantMaster> merchantMaster = superMerchantMaster.getListOfMerchantMaster();
								for (MerchantMaster m : merchantMaster) {
									if (m.getSelfSettlementFlag() != null && m.getSelfSettlementFlag() == 1) {
										return new ResponseEntity<GeneralResponse>(
												new GeneralResponse(Constants.FALSE, Constants.NO_ACCESS_MER_SETTLEMENT, null),
												HttpStatus.BAD_REQUEST);
									} else {
										superMerchantMaster.setSelfSettlement(superMerchantMasterModal.getSelfSettlement());
									}
								}
							}
						}else{
							return new ResponseEntity<GeneralResponse>(
									new GeneralResponse(Constants.FALSE, "Please enter valid bank details for self settlement.", null),
									HttpStatus.BAD_REQUEST);
						}
					}else {
						superMerchantMaster.setSelfSettlement(0);
					}
					superMerchantMaster.setUpdatedTimestamp(new Date());
					superMerchantMaster.setEditedByUsername(authenticateUserResponse.getUserName());
					superMerchantMaster.setEditedIpAddress(ip);
					superMerchantMaster.setEditedTimestamp(new Date());
					superMerchantMasterRepository.save(superMerchantMaster);

					auditLogs.setFeatureGrpId("ONBOARDING");
					auditLogs.setFeatureId("ONBOARDING_CRU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
					//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData("updated super merchant master "+  new Gson().toJson( superMerchantMasterModal));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);

					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.TRUE, Constants.SUCCESSFUL, superMerchantMaster.getId()),
							HttpStatus.OK);
				} else {
					return new ResponseEntity<GeneralResponse>(
							new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
							HttpStatus.BAD_REQUEST);
				}
			} else {
				return new ResponseEntity<GeneralResponse>(
						new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
						HttpStatus.BAD_REQUEST);

			}
		}
		else {
			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping("/download/{fileName:.+}")
	public ResponseEntity<?> downloadfile(@PathVariable String fileName)
	{
		ResponseEntity<InputStreamResource> resp = null;		
		ResponseEntity<GeneralResponse> response = null;
		try 
		{

			System.out.println("Input Request JfiLE: "+fileName);
			resp = getDownloadFile(fileName);

			return resp;
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(
					new GeneralResponse(Constants.FALSE, Constants.ERROR_INCOMPLETE_DATA, null),
					HttpStatus.OK);
		}
	}

	public ResponseEntity<InputStreamResource> getDownloadFile(String fileName) throws Exception
	{
		System.out.println("getDownloadFile.......Started");
		try
		{
			String filePath = fileUtil.getProperty("supermerchant.compliance.docpath") ;
			System.out.println("PATH:"+filePath+"TEFILE:"+fileName);

			File file = new File(filePath+""+fileName);
			InputStreamResource resource = new InputStreamResource(new FileInputStream(file));
			System.out.println("PATH:"+filePath+"TEFILE:"+fileName);
			if(fileName.endsWith("pdf") || fileName.endsWith("pdf"))
			{
				return ResponseEntity.ok()
						.header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + fileName)
						.contentType(MediaType.parseMediaType("application/pdf"))
						.contentLength(file.length())
						.body(resource);
			}
			else
			{
				return ResponseEntity.ok()
						.contentLength(file.length())
						.contentType(MediaType.APPLICATION_OCTET_STREAM)
						.body(resource);
			}

		}
		catch (Exception e) {

			e.printStackTrace();
			System.out.println("Error Occured getTotalSettlementsData.....");

			throw e;
		}		
	}

	private String getFileId(String formType, String formData){
		String returnId = null;
		try{
			SimpleDateFormat format = new SimpleDateFormat("yyyyMMddHHmmssss");
			Date date = new Date();
			if(formData != null)
			{
				String filePath = fileUtil.getProperty("supermerchant.compliance.docpath") ;
				if(formType.equalsIgnoreCase("onboard"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_ONBOARD.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("gst"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_GST.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("aoa"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_AOA.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
				if(formType.equalsIgnoreCase("kyc"))
				{
					byte[] decodedString = Base64.decode(formData);
					returnId = format.format(date)+"_KYC.pdf";
					OutputStream out = new FileOutputStream(new File(filePath,returnId));
					out.write(decodedString);
					out.close();
				}
			}
		}catch(Exception e){
			e.printStackTrace();
			System.out.println("Exception occured..."+ formType);
			returnId = null;
		}
		return returnId;
	}

	@GetMapping("/contact/details/{smid}")
	public ResponseEntity<GeneralResponse> getContactDetais(@PathVariable Integer smid, HttpSession httpSession, @RequestHeader("token") String token)
	{
		System.out.println("update info:" + smid);
		AuthenticateUserResponse authenticateUserResponse =null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		List<AggrSmContactDetails> smList = aggrSmContactDetailsRepository.findByDistId(smid);

		if(smList != null && !smList.isEmpty() && smList.size() > 0)
		{
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, smList), HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_NO_DATA_AVAILABLE, Constants.CORRECT_STATUS_CODE, null), HttpStatus.OK);
		}
	}

	@PostMapping("/update/contact/details")
	public ResponseEntity<GeneralResponse> updateContactDetais(HttpSession httpSession, @RequestHeader("token") String token, @RequestBody ContactDetailsModel model)
	{
		System.out.println("update info:" + model.toString());
		AuthenticateUserResponse authenticateUserResponse =null;
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

		if(model != null && model.getSmid() != null)
		{
			List<AggrSmContactDetails> smList = aggrSmContactDetailsRepository.findByDistId(model.getSmid());

			if(smList != null && !smList.isEmpty() && smList.size() > 0)
			{
				Map<String, AggrSmContactDetails> map = new LinkedHashMap<String, AggrSmContactDetails>();
				for(AggrSmContactDetails sm: smList)
					if(!map.containsKey(sm.getContactType()))
						map.put(sm.getContactType(), sm);
				for(Contact contact : model.getContactdetails())
				{
					if(map.containsKey(contact.getContactType()))
					{
						AggrSmContactDetails sm = map.get(contact.getContactType());
						sm.setContactName(contact.getContactName());
						sm.setEmailId(contact.getEmailId());
						sm.setMobileNumber(contact.getMobileNumber());
						sm.setWhatsappFlag(contact.getWhatsappFlag());
						sm.setUpdatedTimestamp(new Date());
						aggrSmContactDetailsRepository.save(sm);
					}
					else{
						AggrSmContactDetails sm = new AggrSmContactDetails();
						sm.setAggrId(model.getParentid());
						sm.setDistId(model.getSmid());
						sm.setContactType(contact.getContactType());
						sm.setContactName(contact.getContactName());
						sm.setEmailId(contact.getEmailId());
						sm.setMobileNumber(contact.getMobileNumber());
						sm.setWhatsappFlag(contact.getWhatsappFlag());
						sm.setCreatedTimestamp(new Date());
						sm.setUpdatedTimestamp(new Date());
						aggrSmContactDetailsRepository.save(sm);
					}
				}
			}
			else
			{
				for(Contact contact : model.getContactdetails())
				{
					AggrSmContactDetails sm = new AggrSmContactDetails();
					sm.setAggrId(model.getParentid());
					sm.setDistId(model.getSmid());
					sm.setContactType(contact.getContactType());
					sm.setContactName(contact.getContactName());
					sm.setEmailId(contact.getEmailId());
					sm.setMobileNumber(contact.getMobileNumber());
					sm.setWhatsappFlag(contact.getWhatsappFlag());
					sm.setCreatedTimestamp(new Date());
					sm.setUpdatedTimestamp(new Date());
					aggrSmContactDetailsRepository.save(sm);
				}
			}
			
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					Constants.SUCCESSFUL, Constants.CORRECT_STATUS_CODE, null), HttpStatus.OK);
		}
		else
		{
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_NO_DATA_AVAILABLE, Constants.CORRECT_STATUS_CODE, null), HttpStatus.OK);
		}

	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.Constants;

@RestController
@RequestMapping(value = "/test")
public class TestController {

	@GetMapping(path ="/noca/balanceInfo/{accNo}")
	public ResponseEntity<GeneralResponse> getCWCommMaster(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String accNo)
			throws UnsupportedEncodingException, ParseException {			
			try
			 {
				System.out.println("Test");
			   	 HttpClient httpClient = new DefaultHttpClient();
				
			   	 
		   	   	// HttpGet httpGet = new HttpGet("http://10.0.0.187:8080/fpcibservice/api/cib/balancefetch/"+accNo);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpaepsservice/api/proxy/balancecheck/"+accNo);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
				  System.out.println("list bank"+list);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
	}
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.codec.binary.Base64;
import org.apache.poi.ss.usermodel.DataFormatter;
import org.apache.poi.ss.usermodel.FormulaEvaluator;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFFormulaEvaluator;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;


import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.ThreeWayModel;
import com.apptmyz.fpcontrolpanel.data.Threewayfilemodel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.FilesUtil;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayRecon;
import com.apptmyz.fpsettlementdb.entity.MaAggregatorThreewayRecon;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayReconRepository;
import com.apptmyz.fpsettlementdb.repository.MaAggregatorThreewayReconRepository;


import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
@RestController
@RequestMapping(value="/api")
public class ThreeWayUploadController {

	@Autowired
	private Environment env;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private FilesUtil filesUtil;

	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;

	@Autowired
	private AggregatorThreewayReconRepository aggregatorThreewayReconRepository;

	@Autowired
	private MaAggregatorThreewayReconRepository maAggregatorThreewayReconRepository;

	@PostMapping("/files")
	public ResponseEntity<GeneralResponse> uploadFile(@RequestParam("file") MultipartFile uploadFile)
	{
		try 
		{
			String fileName = uploadFile.getOriginalFilename();
			fileName = "demandsheet" + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date())
					+ fileName.substring(fileName.lastIndexOf("."));
			String directory = env.getProperty("documentUploadPath");
			System.out.println(directory);
			if (!new File(directory).exists())
			{
				new File(directory).mkdirs();
			}
			final BufferedOutputStream stream = new BufferedOutputStream(
					new FileOutputStream(new File(directory + File.separator + fileName)));
			stream.write(uploadFile.getBytes());
			stream.close();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, "File uploaded", fileName),
					HttpStatus.OK);
		} 
		catch (FileNotFoundException e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, "No File to Upload"),
					HttpStatus.NO_CONTENT);
		}
		catch (IOException e)
		{
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE, "Unable to uploadFile"),
					HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

	@PostMapping("/threeway/Excel/")
	public ResponseEntity<GeneralResponse> threewayfile(HttpServletRequest request,
			HttpSession httpSession, @RequestHeader("token") String token,
			@RequestBody String data)
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			response = commonTasks.checkAuthentication(token);
			if(!response.getBody().isStatus())
				return response;	

			authenticateUserResponse = (AuthenticateUserResponse)response.getBody().getData();
			Threewayfilemodel modelM = new Threewayfilemodel();
			try
			{
				System.out.println("model enetreed");
				Gson gson = new GsonBuilder().serializeNulls().create();
				modelM = gson.fromJson(data, Threewayfilemodel.class);
			} 
			catch (Exception e)
			{
				e.printStackTrace();
				response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
						HttpStatus.BAD_REQUEST);
			}
			SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");
			HashMap<Integer, SuperMerchantMaster> superMerchantMap=new HashMap<>();
			Iterable<SuperMerchantMaster> superMerchantsLists=superMerchantMasterRepository.findAll();
			for(SuperMerchantMaster s: superMerchantsLists)
				superMerchantMap.put(s.getId(),s);

			SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
			dateFormat.setLenient(false);
			System.out.println("model=====" + modelM.getFile());
			String docName = toImgFromBase64(modelM.getFile(), "threeway" + authenticateUserResponse.getUserName(), "xlsx");
			System.out.println(docName);
			String path = filesUtil.getProperty("threewaydocumentUploadPath");
			FileInputStream inputStream = new FileInputStream(new File(path + docName));
			XSSFWorkbook workbook = new XSSFWorkbook(inputStream);
			XSSFSheet sheet = workbook.getSheetAt(0);
			DataFormatter objDefaultFormat = new DataFormatter();
			FormulaEvaluator objFormulaEvaluator = new XSSFFormulaEvaluator((XSSFWorkbook) workbook);
			Row row;
			boolean fileHeadersAreInValid=false;
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			int cellCount= headerRow.getLastCellNum();
			System.out.println("count :"+cellCount);
			System.out.println("request count :"+sheet.getLastRowNum());
			if(cellCount != 7)
			{
				fileHeadersAreInValid=true;
			}
			else
			{

				if (headerRow.getCell(0)== null || headerRow.getCell(0).getStringCellValue() == null || headerRow.getCell(0).getStringCellValue().equals("") || headerRow.getCell(0).getStringCellValue().trim().equals("") || !headerRow.getCell(0).getStringCellValue().trim().equals("Merchant Transaction Id")) {
					fileHeadersAreInValid=true;

				}
				if (headerRow.getCell(1)== null || headerRow.getCell(1).getStringCellValue() == null || headerRow.getCell(1).getStringCellValue().equals("") || headerRow.getCell(1).getStringCellValue().trim().equals("") || !headerRow.getCell(1).getStringCellValue().trim().equals("Response Code")) {
					fileHeadersAreInValid=true;

				}

				if (headerRow.getCell(2)== null || headerRow.getCell(2).getStringCellValue() == null || headerRow.getCell(2).getStringCellValue().equals("") || headerRow.getCell(2).getStringCellValue().trim().equals("") || !headerRow.getCell(2).getStringCellValue().trim().equals("Transaction Date")) {
					fileHeadersAreInValid=true;

				}
				if (headerRow.getCell(3)== null || headerRow.getCell(3).getStringCellValue() == null || headerRow.getCell(3).getStringCellValue().equals("") || headerRow.getCell(3).getStringCellValue().trim().equals("") || !headerRow.getCell(3).getStringCellValue().trim().equals("Service Type")) {
					fileHeadersAreInValid=true;

				}
				if (headerRow.getCell(4)== null || headerRow.getCell(4).getStringCellValue() == null || headerRow.getCell(4).getStringCellValue().equals("") || headerRow.getCell(4).getStringCellValue().trim().equals("") || !headerRow.getCell(4).getStringCellValue().trim().equals("Supermerchant Id")) {
					fileHeadersAreInValid=true;

				}
				if (headerRow.getCell(5)== null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals("") || !headerRow.getCell(5).getStringCellValue().trim().equals("Fingpay Transaction Id")) {
					fileHeadersAreInValid=true;

				}
				if (headerRow.getCell(6)== null || headerRow.getCell(6).getStringCellValue() == null || headerRow.getCell(6).getStringCellValue().equals("") || headerRow.getCell(6).getStringCellValue().trim().equals("") || !headerRow.getCell(6).getStringCellValue().trim().equals("Response RRN")) {
					fileHeadersAreInValid=true;

				}
			}
			if(fileHeadersAreInValid==true)
			{
				response =  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
						"File uploaded is not valid because header columns are incorrect. Please follow the sample file.", null),HttpStatus.OK);
			}
			else
			{

				List<ThreeWayModel> list = new ArrayList<ThreeWayModel>();
				ThreeWayModel model = null;

				List<AggregatorThreewayRecon> aepsList = new ArrayList<AggregatorThreewayRecon>();
				List<AggregatorThreewayRecon> finalList = new ArrayList<AggregatorThreewayRecon>();
				List<MaAggregatorThreewayRecon> matmcwList = new ArrayList<MaAggregatorThreewayRecon>();
				List<MaAggregatorThreewayRecon> finalmatmcwList = new ArrayList<MaAggregatorThreewayRecon>();
				AggregatorThreewayRecon recon =null;
				MaAggregatorThreewayRecon marecon = null;
				String refernceId=commonTasks.getThreeWayReferenceNumber("123");
				Gson gson = new GsonBuilder().serializeNulls().create();
				if(sheet.getLastRowNum()<=10000) {
					System.out.println("row count :"+sheet.getLastRowNum());
					for (int i = 1; i <= sheet.getLastRowNum(); i++)
					{
						row = sheet.getRow(i);
						model=new ThreeWayModel();
						recon = new AggregatorThreewayRecon();
						marecon = new MaAggregatorThreewayRecon();
						try
						{

							if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("CW") || objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("cw"))
							{

								if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).compareTo("")!=0)
								{
									recon.setMerchantTransactionId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
									model.setMerchantTransactionId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									model.setRemarks("Invalid Merchant Transaction Id");
								}
								if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).compareTo("")!=0)
								{
									recon.setResponseCode(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", ""));
									model.setResponseCode(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Response Code");
									}
									else
									{
										model.setRemarks("Invalid Response Code");
									}
								}

								if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).compareTo("")!=0)
								{
									try
									{
										System.out.println("dateFormat:"+dateFormat.parse(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)));
										recon.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
										model.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
									}
									catch (Exception e)
									{
										model.setFlag(1);
										model.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
										if(model.getRemarks()!=null)
										{
											model.setRemarks(model.getRemarks()+" ,Invalid Transaction date");
										}
										else
										{
											model.setRemarks("Invalid Transaction date");
										}
									}
								}

								if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).compareTo("")!=0)
								{
									recon.setServiceType("CW");
									model.setServiceType(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Service Type");
									}
									else
									{
										model.setRemarks("Invalid Service Type");
									}
								}
								if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).compareTo("")!=0)
								{
									recon.setSuperMerchantId(Integer.valueOf(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)));
									model.setSuperMerchantId(Integer.valueOf(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Supermerchant Id");
									}
									else
									{
										model.setRemarks("Invalid Supermerchant Id");
									}
								}

								recon.setFingpayTransactionId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).equals("")?null:objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));
								model.setFingpayTransactionId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));
								recon.setTransactionRrn(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator).equals("")?null:objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator));
								model.setResponseRrn(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator));

								if(model.getRemarks()==null)
								{
									recon.setCreatedTimestamp(new Date());
									recon.setProcessFlag(1);
									recon.setReferenceId(refernceId);
									recon.setAnalysisDate(dateFormat1.format(recon.getCreatedTimestamp()));
									recon.setTxnDate(dateFormat.parse(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)));
									if(recon.getSuperMerchantId()!=null) {
										recon.setParentId(superMerchantMap.get(recon.getSuperMerchantId())!=null? superMerchantMap.get(recon.getSuperMerchantId()).getParentId():null);
									}
									model.setStatus("Successfully Uploaded");

									aepsList.add(recon);
									finalList.add(recon);

								}
								else
								{
									model.setStatus("Failed To Upload");
								}
							}
							else if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("MATMCW")|| objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).equals("matmcw"))
							{

								if(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator).compareTo("")!=0)
								{
									marecon.setMerchantTransactionId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
									model.setMerchantTransactionId(objDefaultFormat.formatCellValue(row.getCell(0),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									model.setRemarks("Invalid Merchant Transaction Id");
								}
								if(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).compareTo("")!=0)
								{
									marecon.setResponseCode(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator).replaceAll("\\p{C}", ""));
									model.setResponseCode(objDefaultFormat.formatCellValue(row.getCell(1),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Response Code");
									}
									else
									{
										model.setRemarks("Invalid Response Code");
									}
								}
								if(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).compareTo("")!=0)
								{
									try 
									{
										System.out.println("dateFormat:"+dateFormat.parse(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)));
										marecon.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator).replaceAll("\\p{C}", ""));
										model.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
									}
									catch (Exception e)
									{
										model.setFlag(1);
										model.setTransactionDate(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator));
										if(model.getRemarks()!=null)
											model.setRemarks(model.getRemarks()+" ,Invalid Transaction date");
										else
											model.setRemarks("Invalid Transaction date");
									}
								}
								if(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator).compareTo("")!=0)
								{
									marecon.setServiceType("MATMCW");
									model.setServiceType(objDefaultFormat.formatCellValue(row.getCell(3),objFormulaEvaluator));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Service Type");
									}
									else
									{
										model.setRemarks("Invalid Service Type");
									}
								}
								if(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)!=null && objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator).compareTo("")!=0)
								{
									marecon.setSuperMerchantId(Integer.valueOf(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)));
									model.setSuperMerchantId(Integer.valueOf(objDefaultFormat.formatCellValue(row.getCell(4),objFormulaEvaluator)));
								}
								else
								{
									model.setFlag(1);
									if(model.getRemarks()!=null)
									{
										model.setRemarks(model.getRemarks()+" ,Invalid Supermerchant Id");
									}
									else
									{
										model.setRemarks("Invalid Supermerchant Id");
									}
								}

								marecon.setFingpayTransactionId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator).equals("")?null:objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));
								model.setFingpayTransactionId(objDefaultFormat.formatCellValue(row.getCell(5),objFormulaEvaluator));
								marecon.setTransactionRrn(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator).equals("")?null:objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator));
								model.setResponseRrn(objDefaultFormat.formatCellValue(row.getCell(6),objFormulaEvaluator));


								if(model.getRemarks()==null)
								{
									marecon.setCreatedTimestamp(new Date());
									marecon.setProcessFlag(1);
									marecon.setReferenceId(refernceId);
									marecon.setAnalysisDate(dateFormat1.format(marecon.getCreatedTimestamp()));
									marecon.setTxnDate(dateFormat.parse(objDefaultFormat.formatCellValue(row.getCell(2),objFormulaEvaluator)));

									if(marecon.getSuperMerchantId()!=null)
									{
										marecon.setParentId(superMerchantMap.get(marecon.getSuperMerchantId())!=null? superMerchantMap.get(marecon.getSuperMerchantId()).getParentId():null);
									}
									model.setStatus("Successfully Uploaded");
									matmcwList.add(marecon);
									finalmatmcwList.add(marecon);

								}
								else
								{
									model.setStatus("Failed To Upload");
								}
							}
							list.add(model);
						}
						catch(Exception e)
						{
							e.printStackTrace();
							response=  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
									Constants.ERRORS_EXCEPTION_IN_SERVER, null),HttpStatus.OK);
						}
						if(aepsList != null && aepsList.size() == 2)
						{
							System.out.println("save ");
							aggregatorThreewayReconRepository.save(aepsList);
							aepsList.clear();
						}
						if(matmcwList != null && matmcwList.size() == 2)
						{
							maAggregatorThreewayReconRepository.save(matmcwList);// save 1000 list at a time
							matmcwList.clear();
						}

					}
					if(aepsList != null && aepsList.size() !=0)
					{
						aggregatorThreewayReconRepository.save(aepsList);
					}
					if(matmcwList != null && matmcwList.size()!=0) {
						maAggregatorThreewayReconRepository.save(matmcwList);
					}
					if(finalList.size()>0)
					{
						String responseString = commonTasks.postthreewaydata(filesUtil.getProperty("postthreewayUrl") , gson.toJson(finalList));
						System.out.println("RESPONSE STRING:"+ responseString);
					}
					if(finalmatmcwList.size()>0)
					{
						String matmresponseString = commonTasks.postthreewaymatmdata(filesUtil.getProperty("postthreewaymatmUrl") , gson.toJson(finalmatmcwList));
						System.out.println("MA RESPONSE STRING:"+ matmresponseString);
					}
				}
				else
				{
					response = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							"Only 10000 Transactions Accepted Per A Request.", null), HttpStatus.OK);
				}
				response =  new  ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
						Constants.SUCCESSFUL, list),HttpStatus.OK);
			}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		return response;

	}
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

		System.out.println("Erros hadled Successfully");

		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}	

	public String toImgFromBase64(String pic,String mName,String ext)
	{

		String extension = ext;
		String path = filesUtil.getProperty("threewaydocumentUploadPath");

		System.out.println("NEW PATH: " + path);
		System.out.println(pic+"===pic");
		File fileImg = new File(path);
		fileImg.mkdirs();

		byte[] imgBytes = Base64.decodeBase64(pic);
		System.out.println("imgBytes==="+imgBytes);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension).trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ParentMerchantCommConditionModel;
import com.apptmyz.fpcontrolpanel.data.SettlementInfoDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/tPlusOne")
public class TplusOneSettlementController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@GetMapping(path ="/records/merchant/{transactionDate}/{serviceType}")
	public ResponseEntity<GeneralResponse> getMerchantSettlRecords(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String transactionDate,@PathVariable String serviceType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);


		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("T_PLUS_ONE_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/report/date/merchant/"+transactionDate+"/"+serviceType);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/selfsettlement/report/date/merchant/"+transactionDate+"/"+serviceType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 

				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("T_PLUS_ONE_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("T_plus_one settlement merchant records fetched with txn. data "+transactionDate+" "+serviceType);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@GetMapping(path ="/records/Supermerchant/{transactionDate}/{serviceType}")
	public ResponseEntity<GeneralResponse> getSuperMerchSettlRecords(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String transactionDate,@PathVariable String serviceType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);


		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("T_PLUS_ONE_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/report/date/superMerchant/"+transactionDate+"/"+serviceType);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/selfsettlement/report/date/superMerchant/"+transactionDate+"/"+serviceType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
					
//				 String url = "https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/report/date/superMerchant/"+transactionDate+"/"+serviceType;
//				 HttpResponse responseData = commonTasks.callGetMethod(url, token);
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
//				 Boolean responseStatus = responseData.getStatusLine()
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("T_PLUS_ONE_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("T_plus_one settlement super merchant records fetched with txn. data "+transactionDate+" "+serviceType);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@GetMapping(path ="/records/parent/{transactionDate}/{serviceType}")
	public ResponseEntity<GeneralResponse> getParentSettlRecords(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String transactionDate,@PathVariable String serviceType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("T_PLUS_ONE_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/selfsettlement/report/date/parent/"+transactionDate+"/"+serviceType);
		   	  // HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/report/date/parent/"+transactionDate+"/"+serviceType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("T_PLUS_ONE_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("T_plus_one settlement parent records fetched with txn. data "+transactionDate+" "+serviceType);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

	@PostMapping(path ="/validatePin/{transactionPin}")
	public ResponseEntity<GeneralResponse> validateSettlRecord(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody SettlementInfoDataModel validateModel, @PathVariable String transactionPin)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("T_PLUS_ONE_SETTL")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 System.out.println("validateModel"+validateModel.toString());

			   	 HttpClient httpClient = new DefaultHttpClient();
				
			   	 
		   	   	 //HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/validatePin/"+transactionPin);
			   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/v1/selfsettlement/validatePin/"+transactionPin);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=gson.toJson(validateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

//			   	 String url = "https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/validatePin/"+transactionPin;
//				 HttpResponse responseData = commonTasks.callPostMethod(url, validateModel, token);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("T_PLUS_ONE_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setOldData(new Gson().toJson(validateModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,dataObj), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@PostMapping(path ="/settle/{transactionPin}/{typeOfSettlement}/{serviceType}")
	public ResponseEntity<GeneralResponse> postSettlRecord(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody List<SettlementInfoDataModel> settlModel, @PathVariable String transactionPin,@PathVariable String typeOfSettlement,@PathVariable String serviceType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("T_PLUS_ONE_SETTL")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
				
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/v1/selfsettlement/settle/"+transactionPin+"/"+typeOfSettlement+"/"+serviceType);
		   	   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/v1/selfsettlement/settle/"+transactionPin+"/"+typeOfSettlement+"/"+serviceType);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=gson.toJson(settlModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("T_PLUS_ONE_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setOldData(new Gson().toJson(settlModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,dataObj), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	
}
package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.net.InetAddress;
import java.net.UnknownHostException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ParentMerchantCommConditionModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.data.upiresponseModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="api/upiRefund/")

public class UPIRefundController {
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private CommonTasks commonTasks;
	
	private static final Logger uPIRefundlog = Logger.getLogger("UPIRefund");

	@GetMapping("/toIntiateRefund/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getToInitiateRefund(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate, @PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		uPIRefundlog.info("/toIntiateRefund to inititate upi refund list of records from "+fromDate+" to "+toDate);

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			uPIRefundlog.info("/toIntiateRefund response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("UPI_REFUND")) {
				if(data.getPermRead() == 1) {
					permission = true;
					break;
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			uPIRefundlog.info("/toIntiateRefund Permission validation true");

			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 String url="https://fpanalytics.tapits.in/fpaepsanalytics/api/anomaly/reports/upidata/"+fromDate+"/"+toDate;
				 url = url.replace(" ", "%20");

		   	   	 HttpGet httpGet = new HttpGet(url);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);

				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
					uPIRefundlog.info("/toIntiateRefund Refund request api hit "+responseCode);

			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					GeneralResponse commissionMaster=gson.fromJson(listData,GeneralResponse.class);
					 list = commissionMaster.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("UPI_REFUND");
					auditLogs.setFeatureId("UPI_REFUND_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("To initiate refund data from "+fromDate+" "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					uPIRefundlog.info("/toIntiateRefund List sent in response to device");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					uPIRefundlog.info("/toIntiateRefund exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
		}
		else {
			uPIRefundlog.info("/toIntiateRefund Permission validation false");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);

		}
		

	}

	@PostMapping("/sendRefundRequest")
	public ResponseEntity<GeneralResponse> sendRefundRequest(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody String dataSent)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		uPIRefundlog.info("/sendRefundRequest sending refund request");

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			uPIRefundlog.info("/sendRefundRequest response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("UPI_REFUND")) {
				if(data.getPermUpdate() == 1) {
					permission = true;
					break;
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			uPIRefundlog.info("/sendRefundRequest Permission validation true");

			
			try
			 {
				System.out.println("in refund req");
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpPost httpPost = new HttpPost("https://fingpayap.tapits.in/fpaepsservice/api/upi/refundRequestService/portal");
//		   	   	 HttpPost httpPost = new HttpPost("http://10.0.0.30/fpaepsservice/api/upi/refundRequestService/portal");

//		   	   	 'Access-Control-Allow-Origin' : '*'
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);
//		   	   	 httpPost.setHeader("Access-Control-Allow-Origin", "*");


//				 String requestData=gson.toJson(dataSent);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(dataSent.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

					uPIRefundlog.info("/sendRefundRequest Refund request api hit "+responseCode+" "+responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse upiData=gson.fromJson(data,GeneralResponse.class);
					 dataObj = upiData.getData();
					 String dataMsg = upiData.getMessage();


//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("UPI_REFUND");
					auditLogs.setFeatureId("UPI_REFUND_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					uPIRefundlog.info("/sendRefundRequest Response sent to device");

					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							dataMsg,dataObj), HttpStatus.OK);
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
					uPIRefundlog.info("/sendRefundRequest exception in server");

				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
		}
		else {
			uPIRefundlog.info("/sendRefundRequest Permission validation false");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);

		}
		

	}

	@PostMapping(path ="/sendRefundSuccStatus")
	public ResponseEntity<GeneralResponse> sendRefundSuccess(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody upiresponseModel model)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		uPIRefundlog.info("/sendRefundSuccStatus sending refund success status");

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			uPIRefundlog.info("/sendRefundSuccStatus response sent to device : Security Session expired. Please login again to continue.");

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}
				
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("UPI_REFUND")) {
				if(data.getPermUpdate() == 1) {
					permission = true;
					break;
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			uPIRefundlog.info("/sendRefundSuccStatus Permission validation true");

			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 HttpPost httpPost = new HttpPost("https://fpanalytics.tapits.in/fpaepsanalytics/api/anomaly/reports/upidata/response");
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=gson.toJson(model);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);
				 
					uPIRefundlog.info("/sendRefundSuccStatus Send success status api hit "+responseCode+" "+responseData);


				 Object dataObj = null;
				 String dataMsg = null;

				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse upiData=gson.fromJson(data,GeneralResponse.class);
					 dataObj = upiData.getData();
					 dataMsg = upiData.getMessage();

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("UPI_REFUND");
					auditLogs.setFeatureId("UPI_REFUND_RU");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setNewData(new Gson().toJson(dataObj)+" . Refund success");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					uPIRefundlog.info("/sendRefundSuccStatus sent success status");

					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							dataMsg,dataObj), HttpStatus.OK);
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }	
		}
		else {
			uPIRefundlog.info("/sendRefundSuccStatus Permission validation true");

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
		

	}


}

package com.apptmyz.fpcontrolpanel.controller;

import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.SettlementInfoDataModel;
import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value="/api/weekendSettl")
public class WeekendSettlementController {

	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private JwtUtil jwtUtil;
	
	@GetMapping(path ="/eligible/masters/{settlementType}")
	public ResponseEntity<GeneralResponse> getMerchantSettlRecords(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token, @PathVariable String settlementType)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
			   	 
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/v1/base/retrieve/merchant/parents/supermerchants/settlementstype/"+settlementType);
		   	  HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/v1/base/retrieve/merchant/parents/supermerchants/settlementstype/"+settlementType);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
		   	   	 
				 System.out.println("https://fpuat.tapits.in/fpsettlementservice/api/v1/base/retrieve/merchant/parents/supermerchants/settlementstype/"+settlementType);
		   	   	 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 String msg = "";
				 if(responseCode == 200)
				  {
						 listData = new BasicResponseHandler().handleResponse(responseData);
						 GeneralResponse recordsRes=gson.fromJson(listData,GeneralResponse.class);
						 
						 list = recordsRes.getData();
						 msg = recordsRes.getMessage();
						 
						 if(recordsRes.isStatus()) {
							 	
			//					AUDIT LOGS
							    FpCpAuditLogs auditLogs = new FpCpAuditLogs();
			
								auditLogs.setFeatureGrpId("WEEKEND_SETTL");
								auditLogs.setFeatureId("ONE_OF_SETTL");
								auditLogs.setUserName(authenticateUserResponse.getUserName());
			//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
								auditLogs.setOperation(1);
								auditLogs.setViewData("Weekend of settlement eligible masters fetched"+","+settlementType);
								auditLogs.setAuditTimestamp(new Date());
								auditLogs.setIpAddress(ip);
//								fpCpAuditLogsRepository.save(auditLogs);
								
								return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
										msg,list), HttpStatus.OK);
						 }
					     
						 else
						 {
							 System.out.println(" response was not 200");
					    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);
		
						 }
				 }
				 else {
					 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
								Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PostMapping(path ="/validatePin/{transactionPin}")
	public ResponseEntity<GeneralResponse> validateSettlRecord(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody String validateModel, @PathVariable String transactionPin)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
						
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermUpdate() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/create/request/"+transactionPin);
			   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/weekend/transform/v1/create/request/"+transactionPin);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=validateModel;
				 
				 System.out.println("validate model "+validateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
//					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
						 
					 
//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("WEEKEND_SETTL");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(2);
					auditLogs.setOldData(new Gson().toJson(validateModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
//					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,null), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}

	@GetMapping(path ="/toApprove")
	public ResponseEntity<GeneralResponse> getOneofToApprove(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
//		   	   	 HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests/"+fromDate+"/"+toDate);
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/toapprove/requests");
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/weekend/transform/v1/toapprove/requests");

		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("WEEKEND_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("To approve weekend requests fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@PostMapping(path ="/approve/request/{transactionPin}")
	public ResponseEntity<GeneralResponse> approveSettlRecord(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@RequestBody String validateModel, @PathVariable String transactionPin)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);
		
						
		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermApprove() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	// HttpPost httpPost = new HttpPost("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/approve/requests/"+transactionPin);
		   	   	 HttpPost httpPost = new HttpPost("http://10.0.0.30:8080/fpsettlementservice/api/weekend/transform/v1/approve/requests/"+transactionPin);
		   	   	 httpPost.setHeader("Content-type", "application/json");
		   	   	 httpPost.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpPost.setHeader("token", token);

				 String requestData=validateModel;
				 
				 System.out.println("validate model "+validateModel);
		   	   	 
				 HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
				 httpPost.setEntity(entity);
				 HttpResponse responseData = httpClient.execute(httpPost);

				 
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String data ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object dataObj = null;
				 if(responseCode == 200)
				  {
					 data = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse validatedRecord=gson.fromJson(data,GeneralResponse.class);
//					 dataObj = validatedRecord.getData();
				  
					 String msg = "";
					 msg = validatedRecord.getMessage();

					 
					 if(validatedRecord.isStatus()) {
						 
					 
//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("WEEKEND_SETTL");
					auditLogs.setFeatureId("ONE_OF_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(3);
					auditLogs.setOldData(new Gson().toJson(validateModel));
					auditLogs.setNewData(new Gson().toJson(dataObj));
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
//					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							msg,null), HttpStatus.OK);
					 }
					 else {
				    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,msg,null), HttpStatus.OK);

					 }
				 }    
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}

	}
	
	@GetMapping(path ="/report/date/{fromDate}/{toDate}")
	public ResponseEntity<GeneralResponse> getWeekendSettlReport(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token,@PathVariable String fromDate,@PathVariable String toDate)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/reports/"+fromDate+"/"+toDate);
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/weekend/transform/v1/reports/"+fromDate+"/"+toDate);
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("WEEKEND_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("weekend settl reports fetched from "+fromDate+" to "+toDate);
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}
	
	@GetMapping(path ="/report")
	public ResponseEntity<GeneralResponse> getWeekendSettlReportNodate(HttpServletRequest request, HttpServletResponse response,HttpSession httpSession,
			@RequestHeader("token") String token)
			throws UnsupportedEncodingException, ParseException {
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		
		ResponseEntity<GeneralResponse> tokenResponse = commonTasks.checkAuthentication(token);
		if(!tokenResponse.getBody().isStatus())
			return tokenResponse;
		String jwtData = jwtUtil.parseJWT(token);
		authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);				

		String ip = commonTasks.getIpAddress(request);

		boolean permission = false;
		
		List<UserPermissionsModel> permissionsList = authenticateUserResponse.getFpUserPermissions();
		for (UserPermissionsModel data  : permissionsList) {
			
			if(data.getFeatureGrpCode().equals("SETTLEMENT_TXN")) {
				if(data.getFeatureCode().equals("WEEKEND_SETTL")) {
					if(data.getPermRead() == 1) {
						permission = true;
						break;
					}
				}
			}
		}
		if(permission && authenticateUserResponse.getActiveFlag() == 1) {
			
			try
			 {
				
			   	 HttpClient httpClient = new DefaultHttpClient();
				
		   	   	 //HttpGet httpGet = new HttpGet("https://fpuat.tapits.in/fpsettlementservice/api/weekend/transform/v1/reports");
			   	 HttpGet httpGet = new HttpGet("http://10.0.0.30:8080/fpsettlementservice/api/weekend/transform/v1/reports");
		   	   	 httpGet.setHeader("Content-type", "application/json");
		   	   	 httpGet.setHeader("User-Agent", "Mozilla/5.0");
		   	   	 httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
		   	   	 httpGet.setHeader("token", token);
	
				 
				 HttpResponse responseData = httpClient.execute(httpGet);
				 int responseCode = responseData.getStatusLine().getStatusCode();
			     String listData ="";
			     
//			     commonTasks.getFullResponse(responseData);

				 System.out.println(responseCode);
				 System.out.println(responseData);

				 Object list = null;
				 if(responseCode == 200)
				  {
					 listData = new BasicResponseHandler().handleResponse(responseData);
					 GeneralResponse merchRec=gson.fromJson(listData,GeneralResponse.class);
					 list = merchRec.getData();
				  

//					AUDIT LOGS
				    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

					auditLogs.setFeatureGrpId("SETTLEMENT_TXN");
					auditLogs.setFeatureId("WEEKEND_SETTL");
					auditLogs.setUserName(authenticateUserResponse.getUserName());
//					0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
					auditLogs.setOperation(1);
					auditLogs.setViewData("weekend settl report fetched");
					auditLogs.setAuditTimestamp(new Date());
					auditLogs.setIpAddress(ip);
					fpCpAuditLogsRepository.save(auditLogs);
					
					return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
							Constants.REQUEST_COMPLETED,list), HttpStatus.OK);
				 }      
				 else
				 {
			    	 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,null), HttpStatus.OK);

				 }

			 }
			 catch(Exception e)
			 {
				 e.printStackTrace();
				 return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
							Constants.ERRORS_EXCEPTION_IN_SERVER, null), HttpStatus.OK);
			 }		
		
		}
		else {

			return new ResponseEntity<GeneralResponse>( HttpStatus.UNAUTHORIZED);
		}
	}

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class AadhaarPayDataModel {
	
	    private Integer    id           ;
	    private String     fingpayTransactionId ;
	    private String     adhaarNumber ;
	    private String     phoneNumber  ;
	    private String     pan          ;
	    private String     stan         ;
	    private String     iin          ;
	    private Double     transactionAmount ;
	    private String     track3Data   ;
	    private String     cardAcceptorTerminalIdentification ;
	    private String     bcIdentificationCode ;
	    private String     transactionIdentifier ;
	    private Date       requestedTimestamp ;
	    private String     requestedRemarks ;
	    private String     webStatus    ;
	    private Double     latitude     ;
	    private Double     longitude    ;
	    private String     deviceImei   ;
	    private Integer    merchantId   ;
	    private String     lastUsedHash ;
	    private String     responsePan  ;
	    private String     responseTime ;
	    private String     responseDate ;
	    private String     responseRrn  ;
	    private String     responseAuthorizationIdentificationResponse ;
	    private String     responseCode ;
	    private String     responseCardAcceptorTerminalIdentification ;
	    private String     responceCardAcceptorNameOrLocation ;
	    private String     responseAdditionalAmounts ;
	    private String     responseAddtionalData ;
	    private String     responseAuthenticationCode ;
	    private String     responseRemarks ;
	    private String     merchantTransactionId ;
	    private String     responseAccountIdentification1 ;
	    private Date       resposeTimestamp ;
	    private String     merchantName;
	    private String     superMerchantName;
	    private String     State;
	    private String     branchName;
	    private Integer    branchId;
	    private String     bankName;
	    private String     parentMerchantName;
	    private String     errorMessage;
	    private String     merchantLoginId;
	    private String     branchLoginId;
	    
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getFingpayTransactionId() {
			return fingpayTransactionId;
		}
		public void setFingpayTransactionId(String fingpayTransactionId) {
			this.fingpayTransactionId = fingpayTransactionId;
		}
		public String getAdhaarNumber() {
			return adhaarNumber;
		}
		public void setAdhaarNumber(String adhaarNumber) {
			this.adhaarNumber = adhaarNumber;
		}
		public String getPhoneNumber() {
			return phoneNumber;
		}
		public void setPhoneNumber(String phoneNumber) {
			this.phoneNumber = phoneNumber;
		}
		public String getPan() {
			return pan;
		}
		public void setPan(String pan) {
			this.pan = pan;
		}
		public String getStan() {
			return stan;
		}
		public void setStan(String stan) {
			this.stan = stan;
		}
		public String getIin() {
			return iin;
		}
		public void setIin(String iin) {
			this.iin = iin;
		}
		public Double getTransactionAmount() {
			return transactionAmount;
		}
		public void setTransactionAmount(Double transactionAmount) {
			this.transactionAmount = transactionAmount;
		}
		public String getTrack3Data() {
			return track3Data;
		}
		public void setTrack3Data(String track3Data) {
			this.track3Data = track3Data;
		}
		public String getCardAcceptorTerminalIdentification() {
			return cardAcceptorTerminalIdentification;
		}
		public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
			this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
		}
		public String getBcIdentificationCode() {
			return bcIdentificationCode;
		}
		public void setBcIdentificationCode(String bcIdentificationCode) {
			this.bcIdentificationCode = bcIdentificationCode;
		}
		public String getTransactionIdentifier() {
			return transactionIdentifier;
		}
		public void setTransactionIdentifier(String transactionIdentifier) {
			this.transactionIdentifier = transactionIdentifier;
		}
		public Date getRequestedTimestamp() {
			return requestedTimestamp;
		}
		public void setRequestedTimestamp(Date requestedTimestamp) {
			this.requestedTimestamp = requestedTimestamp;
		}
		public String getRequestedRemarks() {
			return requestedRemarks;
		}
		public void setRequestedRemarks(String requestedRemarks) {
			this.requestedRemarks = requestedRemarks;
		}
		public String getWebStatus() {
			return webStatus;
		}
		public void setWebStatus(String webStatus) {
			this.webStatus = webStatus;
		}
		public Double getLatitude() {
			return latitude;
		}
		public void setLatitude(Double latitude) {
			this.latitude = latitude;
		}
		public Double getLongitude() {
			return longitude;
		}
		public void setLongitude(Double longitude) {
			this.longitude = longitude;
		}
		public String getDeviceImei() {
			return deviceImei;
		}
		public void setDeviceImei(String deviceImei) {
			this.deviceImei = deviceImei;
		}
		public Integer getMerchantId() {
			return merchantId;
		}
		public void setMerchantId(Integer merchantId) {
			this.merchantId = merchantId;
		}
		public String getLastUsedHash() {
			return lastUsedHash;
		}
		public void setLastUsedHash(String lastUsedHash) {
			this.lastUsedHash = lastUsedHash;
		}
		public String getResponsePan() {
			return responsePan;
		}
		public void setResponsePan(String responsePan) {
			this.responsePan = responsePan;
		}
		public String getResponseTime() {
			return responseTime;
		}
		public void setResponseTime(String responseTime) {
			this.responseTime = responseTime;
		}
		public String getResponseDate() {
			return responseDate;
		}
		public void setResponseDate(String responseDate) {
			this.responseDate = responseDate;
		}
		public String getResponseRrn() {
			return responseRrn;
		}
		public void setResponseRrn(String responseRrn) {
			this.responseRrn = responseRrn;
		}
		public String getResponseAuthorizationIdentificationResponse() {
			return responseAuthorizationIdentificationResponse;
		}
		public void setResponseAuthorizationIdentificationResponse(String responseAuthorizationIdentificationResponse) {
			this.responseAuthorizationIdentificationResponse = responseAuthorizationIdentificationResponse;
		}
		public String getResponseCode() {
			return responseCode;
		}
		public void setResponseCode(String responseCode) {
			this.responseCode = responseCode;
		}
		public String getResponseCardAcceptorTerminalIdentification() {
			return responseCardAcceptorTerminalIdentification;
		}
		public void setResponseCardAcceptorTerminalIdentification(String responseCardAcceptorTerminalIdentification) {
			this.responseCardAcceptorTerminalIdentification = responseCardAcceptorTerminalIdentification;
		}
		public String getResponceCardAcceptorNameOrLocation() {
			return responceCardAcceptorNameOrLocation;
		}
		public void setResponceCardAcceptorNameOrLocation(String responceCardAcceptorNameOrLocation) {
			this.responceCardAcceptorNameOrLocation = responceCardAcceptorNameOrLocation;
		}
		public String getResponseAdditionalAmounts() {
			return responseAdditionalAmounts;
		}
		public void setResponseAdditionalAmounts(String responseAdditionalAmounts) {
			this.responseAdditionalAmounts = responseAdditionalAmounts;
		}
		public String getResponseAddtionalData() {
			return responseAddtionalData;
		}
		public void setResponseAddtionalData(String responseAddtionalData) {
			this.responseAddtionalData = responseAddtionalData;
		}
		public String getResponseAuthenticationCode() {
			return responseAuthenticationCode;
		}
		public void setResponseAuthenticationCode(String responseAuthenticationCode) {
			this.responseAuthenticationCode = responseAuthenticationCode;
		}
		public String getResponseRemarks() {
			return responseRemarks;
		}
		public void setResponseRemarks(String responseRemarks) {
			this.responseRemarks = responseRemarks;
		}
		public String getMerchantTransactionId() {
			return merchantTransactionId;
		}
		public void setMerchantTransactionId(String merchantTransactionId) {
			this.merchantTransactionId = merchantTransactionId;
		}
		public String getResponseAccountIdentification1() {
			return responseAccountIdentification1;
		}
		public void setResponseAccountIdentification1(String responseAccountIdentification1) {
			this.responseAccountIdentification1 = responseAccountIdentification1;
		}
		public Date getResposeTimestamp() {
			return resposeTimestamp;
		}
		public void setResposeTimestamp(Date resposeTimestamp) {
			this.resposeTimestamp = resposeTimestamp;
		}
		public String getMerchantName() {
			return merchantName;
		}
		public void setMerchantName(String merchantName) {
			this.merchantName = merchantName;
		}
		public String getSuperMerchantName() {
			return superMerchantName;
		}
		public void setSuperMerchantName(String superMerchantName) {
			this.superMerchantName = superMerchantName;
		}
		public String getState() {
			return State;
		}
		public void setState(String state) {
			State = state;
		}
		public String getBranchName() {
			return branchName;
		}
		public void setBranchName(String branchName) {
			this.branchName = branchName;
		}
		public Integer getBranchId() {
			return branchId;
		}
		public void setBranchId(Integer branchId) {
			this.branchId = branchId;
		}
		public String getBankName() {
			return bankName;
		}
		public void setBankName(String bankName) {
			this.bankName = bankName;
		}
		public String getParentMerchantName() {
			return parentMerchantName;
		}
		public void setParentMerchantName(String parentMerchantName) {
			this.parentMerchantName = parentMerchantName;
		}
		public String getErrorMessage() {
			return errorMessage;
		}
		public void setErrorMessage(String errorMessage) {
			this.errorMessage = errorMessage;
		}
		public String getMerchantLoginId() {
			return merchantLoginId;
		}
		public void setMerchantLoginId(String merchantLoginId) {
			this.merchantLoginId = merchantLoginId;
		}
		public String getBranchLoginId() {
			return branchLoginId;
		}
		public void setBranchLoginId(String branchLoginId) {
			this.branchLoginId = branchLoginId;
		}
		
	    

	    

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;


public class AggregatorDataModal {

    private Integer    id           ;
    private String     parentMerchantName ;
    private String     userId       ;
    private String     userPassword ;
    private String     typeOfBusiness ;
    private String     hoAddress    ;
    private String     hoPhoneNumber ;
    private String     logo         ;
    private String     remarks      ;
    private Date       timesatmp    ;
    private Date       updatedTimestamp ;
    private Integer    activeFlag   ;
    private String     companyLegalName ;
    private String     companyMarketingName ;
    private String     dateOfIncorporation ;
    private String     officialContactNo ;
    private String     emailId      ;
    private String     pincode      ;
    private String     shopAndPanImage ;
    private String     certificateOfIncorporationImage ;
    private String     userType     ;
    private String     userName     ;
    private String     userPan      ;
    private String     userMobileNumber ;
    private String     userEmailId  ;
    private String     letterOfDeclarationAuthorizedSignatory ;
    private String     companyBankAccountNumber ;
    private String     companyIfscCode ;
    private String     companyBankName ;
    private String     companyBankBranchName ;
    private Integer    termsConditionCheck ;
    private Integer    confirmationCheck ;
    private Integer    noOfTerminals ;
    private Integer    ekycStatus   ;
    private String     otp          ;
    private Integer    otpValidation ;
    private String     bankAccountName ;
    private String     cancelledChequeImages ;
    private String     ekycDocuments ;
    private String     gstInNumber  ;
    private String     companyOrShopPan ;
    private Integer    collectKycDoc ;
    private Integer    selfSettlement ;
    private String     aadhaarNumber ;
    private Integer    automaticBankVerification ;
    private String     automaticBankVerificationDetails ;
    private Integer    automaticPanVerification ;
    private String     automaticPanVerificationDetails ;
    private Integer    automaticAadhaarVerification ;
    private String     automaticAadhaarVerificationDetails ;
    private Integer    selfSettlementFlag ;
    private int    stateId;
    private int    cityId;
    private int    companyTypeId;
    
    private Integer instantSettlementFlag;
    private String organisation;
    private String onboardingformdata;
    private String gstformdata;
    private String aoaformdata;
    private String kycformdata;
    
    
//    private CityMaster cityMaster2 ;
//    private StateMaster stateMaster ;
//    private CompanyTypeMasterData companyTypeMasterData2;
//    private StateMaster stateMaster2;
//    private CityMaster cityMaster  ;
//    private CompanyTypeMasterData companyTypeMasterData;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getParentMerchantName() {
		return parentMerchantName;
	}
	public void setParentMerchantName(String parentMerchantName) {
		this.parentMerchantName = parentMerchantName;
	}
	public String getUserId() {
		return userId;
	}
	public void setUserId(String userId) {
		this.userId = userId;
	}
	public String getUserPassword() {
		return userPassword;
	}
	public void setUserPassword(String userPassword) {
		this.userPassword = userPassword;
	}
	public String getTypeOfBusiness() {
		return typeOfBusiness;
	}
	public void setTypeOfBusiness(String typeOfBusiness) {
		this.typeOfBusiness = typeOfBusiness;
	}
	public String getHoAddress() {
		return hoAddress;
	}
	public void setHoAddress(String hoAddress) {
		this.hoAddress = hoAddress;
	}
	public String getHoPhoneNumber() {
		return hoPhoneNumber;
	}
	public void setHoPhoneNumber(String hoPhoneNumber) {
		this.hoPhoneNumber = hoPhoneNumber;
	}
	public String getLogo() {
		return logo;
	}
	public void setLogo(String logo) {
		this.logo = logo;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Date getTimesatmp() {
		return timesatmp;
	}
	public void setTimesatmp(Date timesatmp) {
		this.timesatmp = timesatmp;
	}
	public Date getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(Date updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public String getCompanyLegalName() {
		return companyLegalName;
	}
	public void setCompanyLegalName(String companyLegalName) {
		this.companyLegalName = companyLegalName;
	}
	public String getCompanyMarketingName() {
		return companyMarketingName;
	}
	public void setCompanyMarketingName(String companyMarketingName) {
		this.companyMarketingName = companyMarketingName;
	}
	public String getDateOfIncorporation() {
		return dateOfIncorporation;
	}
	public void setDateOfIncorporation(String dateOfIncorporation) {
		this.dateOfIncorporation = dateOfIncorporation;
	}
	public String getOfficialContactNo() {
		return officialContactNo;
	}
	public void setOfficialContactNo(String officialContactNo) {
		this.officialContactNo = officialContactNo;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getPincode() {
		return pincode;
	}
	public void setPincode(String pincode) {
		this.pincode = pincode;
	}
	public String getShopAndPanImage() {
		return shopAndPanImage;
	}
	public void setShopAndPanImage(String shopAndPanImage) {
		this.shopAndPanImage = shopAndPanImage;
	}
	public String getCertificateOfIncorporationImage() {
		return certificateOfIncorporationImage;
	}
	public void setCertificateOfIncorporationImage(String certificateOfIncorporationImage) {
		this.certificateOfIncorporationImage = certificateOfIncorporationImage;
	}
	public String getUserType() {
		return userType;
	}
	public void setUserType(String userType) {
		this.userType = userType;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getUserPan() {
		return userPan;
	}
	public void setUserPan(String userPan) {
		this.userPan = userPan;
	}
	public String getUserMobileNumber() {
		return userMobileNumber;
	}
	public void setUserMobileNumber(String userMobileNumber) {
		this.userMobileNumber = userMobileNumber;
	}
	public String getUserEmailId() {
		return userEmailId;
	}
	public void setUserEmailId(String userEmailId) {
		this.userEmailId = userEmailId;
	}
	public String getLetterOfDeclarationAuthorizedSignatory() {
		return letterOfDeclarationAuthorizedSignatory;
	}
	public void setLetterOfDeclarationAuthorizedSignatory(String letterOfDeclarationAuthorizedSignatory) {
		this.letterOfDeclarationAuthorizedSignatory = letterOfDeclarationAuthorizedSignatory;
	}
	public String getCompanyBankAccountNumber() {
		return companyBankAccountNumber;
	}
	public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
		this.companyBankAccountNumber = companyBankAccountNumber;
	}
	public String getCompanyIfscCode() {
		return companyIfscCode;
	}
	public void setCompanyIfscCode(String companyIfscCode) {
		this.companyIfscCode = companyIfscCode;
	}
	public String getCompanyBankName() {
		return companyBankName;
	}
	public void setCompanyBankName(String companyBankName) {
		this.companyBankName = companyBankName;
	}
	public String getCompanyBankBranchName() {
		return companyBankBranchName;
	}
	public void setCompanyBankBranchName(String companyBankBranchName) {
		this.companyBankBranchName = companyBankBranchName;
	}
	public Integer getTermsConditionCheck() {
		return termsConditionCheck;
	}
	public void setTermsConditionCheck(Integer termsConditionCheck) {
		this.termsConditionCheck = termsConditionCheck;
	}
	public Integer getConfirmationCheck() {
		return confirmationCheck;
	}
	public void setConfirmationCheck(Integer confirmationCheck) {
		this.confirmationCheck = confirmationCheck;
	}
	public Integer getNoOfTerminals() {
		return noOfTerminals;
	}
	public void setNoOfTerminals(Integer noOfTerminals) {
		this.noOfTerminals = noOfTerminals;
	}
	public Integer getEkycStatus() {
		return ekycStatus;
	}
	public void setEkycStatus(Integer ekycStatus) {
		this.ekycStatus = ekycStatus;
	}
	public String getOtp() {
		return otp;
	}
	public void setOtp(String otp) {
		this.otp = otp;
	}
	public Integer getOtpValidation() {
		return otpValidation;
	}
	public void setOtpValidation(Integer otpValidation) {
		this.otpValidation = otpValidation;
	}
	public String getBankAccountName() {
		return bankAccountName;
	}
	public void setBankAccountName(String bankAccountName) {
		this.bankAccountName = bankAccountName;
	}
	public String getCancelledChequeImages() {
		return cancelledChequeImages;
	}
	public void setCancelledChequeImages(String cancelledChequeImages) {
		this.cancelledChequeImages = cancelledChequeImages;
	}
	public String getEkycDocuments() {
		return ekycDocuments;
	}
	public void setEkycDocuments(String ekycDocuments) {
		this.ekycDocuments = ekycDocuments;
	}
	public String getGstInNumber() {
		return gstInNumber;
	}
	public void setGstInNumber(String gstInNumber) {
		this.gstInNumber = gstInNumber;
	}
	public String getCompanyOrShopPan() {
		return companyOrShopPan;
	}
	public void setCompanyOrShopPan(String companyOrShopPan) {
		this.companyOrShopPan = companyOrShopPan;
	}
	public Integer getCollectKycDoc() {
		return collectKycDoc;
	}
	public void setCollectKycDoc(Integer collectKycDoc) {
		this.collectKycDoc = collectKycDoc;
	}
	public Integer getSelfSettlement() {
		return selfSettlement;
	}
	public void setSelfSettlement(Integer selfSettlement) {
		this.selfSettlement = selfSettlement;
	}
	public String getAadhaarNumber() {
		return aadhaarNumber;
	}
	public void setAadhaarNumber(String aadhaarNumber) {
		this.aadhaarNumber = aadhaarNumber;
	}
	public Integer getAutomaticBankVerification() {
		return automaticBankVerification;
	}
	public void setAutomaticBankVerification(Integer automaticBankVerification) {
		this.automaticBankVerification = automaticBankVerification;
	}
	public String getAutomaticBankVerificationDetails() {
		return automaticBankVerificationDetails;
	}
	public void setAutomaticBankVerificationDetails(String automaticBankVerificationDetails) {
		this.automaticBankVerificationDetails = automaticBankVerificationDetails;
	}
	public Integer getAutomaticPanVerification() {
		return automaticPanVerification;
	}
	public void setAutomaticPanVerification(Integer automaticPanVerification) {
		this.automaticPanVerification = automaticPanVerification;
	}
	public String getAutomaticPanVerificationDetails() {
		return automaticPanVerificationDetails;
	}
	public void setAutomaticPanVerificationDetails(String automaticPanVerificationDetails) {
		this.automaticPanVerificationDetails = automaticPanVerificationDetails;
	}
	public Integer getAutomaticAadhaarVerification() {
		return automaticAadhaarVerification;
	}
	public void setAutomaticAadhaarVerification(Integer automaticAadhaarVerification) {
		this.automaticAadhaarVerification = automaticAadhaarVerification;
	}
	public String getAutomaticAadhaarVerificationDetails() {
		return automaticAadhaarVerificationDetails;
	}
	public void setAutomaticAadhaarVerificationDetails(String automaticAadhaarVerificationDetails) {
		this.automaticAadhaarVerificationDetails = automaticAadhaarVerificationDetails;
	}
	public Integer getSelfSettlementFlag() {
		return selfSettlementFlag;
	}
	public void setSelfSettlementFlag(Integer selfSettlementFlag) {
		this.selfSettlementFlag = selfSettlementFlag;
	}
	public Integer getStateId() {
		return stateId;
	}
	public void setStateId(Integer stateId) {
		this.stateId = stateId;
	}
	public Integer getCityId() {
		return cityId;
	}
	public void setCityId(Integer cityId) {
		this.cityId = cityId;
	}
	public Integer getCompanyTypeId() {
		return companyTypeId;
	}
	public void setCompanyTypeId(Integer companyTypeId) {
		this.companyTypeId = companyTypeId;
	}
	public Integer getInstantSettlementFlag() {
		return instantSettlementFlag;
	}
	public void setInstantSettlementFlag(Integer instantSettlementFlag) {
		this.instantSettlementFlag = instantSettlementFlag;
	}
	public String getOrganisation() {
		return organisation;
	}
	public void setOrganisation(String organisation) {
		this.organisation = organisation;
	}
	public String getOnboardingformdata() {
		return onboardingformdata;
	}
	public void setOnboardingformdata(String onboardingformdata) {
		this.onboardingformdata = onboardingformdata;
	}
	public String getGstformdata() {
		return gstformdata;
	}
	public void setGstformdata(String gstformdata) {
		this.gstformdata = gstformdata;
	}
	public String getAoaformdata() {
		return aoaformdata;
	}
	public void setAoaformdata(String aoaformdata) {
		this.aoaformdata = aoaformdata;
	}
	public String getKycformdata() {
		return kycformdata;
	}
	public void setKycformdata(String kycformdata) {
		this.kycformdata = kycformdata;
	}

	
    
    
}
package com.apptmyz.fpcontrolpanel.data;

public class AggregatorSuperMerchantUploadFile {

	private String docname;
	private String fileName;
	private String base64data;
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	public String getBase64data() {
		return base64data;
	}
	public void setBase64data(String base64data) {
		this.base64data = base64data;
	}
	public String getDocname() {
		return docname;
	}
	public void setDocname(String docname) {
		this.docname = docname;
	}
}
package com.apptmyz.fpcontrolpanel.data;

public class Anomalymodel {
	
	private String serviceType;
	private double anomalyAmount;
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public double getAnomalyAmount() {
		return anomalyAmount;
	}
	public void setAnomalyAmount(double anomalyAmount) {
		this.anomalyAmount = anomalyAmount;
	}
	
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)

public class ApproveHoldAmountRequestObject {

	private String settlementHoldId;
	private String aggregatorId;
	private String distributorId;
	private String approvedBy;
	private String remarks;
//	send 1 and last mandatory
	
	public String getSettlementHoldId() {
		return settlementHoldId;
	}
	public void setSettlementHoldId(String settlementHoldId) {
		this.settlementHoldId = settlementHoldId;
	}
	public String getAggregatorId() {
		return aggregatorId;
	}
	public void setAggregatorId(String aggregatorId) {
		this.aggregatorId = aggregatorId;
	}
	public String getDistributorId() {
		return distributorId;
	}
	public void setDistributorId(String distributorId) {
		this.distributorId = distributorId;
	}
	public String getApprovedBy() {
		return approvedBy;
	}
	public void setApprovedBy(String approvedBy) {
		this.approvedBy = approvedBy;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ApproveRejectBulkDataModel {

	private Integer id;
	private String chargeBackType;
	private String action;
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getChargeBackType() {
		return chargeBackType;
	}
	public void setChargeBackType(String chargeBackType) {
		this.chargeBackType = chargeBackType;
	}
	public String getAction() {
		return action;
	}
	public void setAction(String action) {
		this.action = action;
	}
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class ApproveRejectBulkModel {

	private List<ApproveRejectBulkDataModel> approveRejectBulkDataModel;

	public List<ApproveRejectBulkDataModel> getApproveRejectBulkDataModel() {
		return approveRejectBulkDataModel;
	}

	public void setApproveRejectBulkDataModel(List<ApproveRejectBulkDataModel> approveRejectBulkDataModel) {
		this.approveRejectBulkDataModel = approveRejectBulkDataModel;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class ApproveRejectDataModel {

	private Integer id;
	private String rrn;
	private Integer flag;
	private String cbRemarks;
	private List<AggregatorSuperMerchantUploadFile> uploadFiles;
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getRrn() {
		return rrn;
	}
	public void setRrn(String rrn) {
		this.rrn = rrn;
	}
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public List<AggregatorSuperMerchantUploadFile> getUploadFiles() {
		return uploadFiles;
	}
	public void setUploadFiles(List<AggregatorSuperMerchantUploadFile> uploadFiles) {
		this.uploadFiles = uploadFiles;
	}
	public String getCbRemarks() {
		return cbRemarks;
	}
	public void setCbRemarks(String cbRemarks) {
		this.cbRemarks = cbRemarks;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class AssignFeaturePermissionModel 
{
	private String featureCode;
	private String userName;
	private String permCreate;
	private String permRead;
	private String permUpdate;
	private String permDelete;
	private String permApprove;
	public String getFeatureCode() {
		return featureCode;
	}
	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPermCreate() {
		return permCreate;
	}
	public void setPermCreate(String permCreate) {
		this.permCreate = permCreate;
	}
	public String getPermRead() {
		return permRead;
	}
	public void setPermRead(String permRead) {
		this.permRead = permRead;
	}
	public String getPermUpdate() {
		return permUpdate;
	}
	public void setPermUpdate(String permUpdate) {
		this.permUpdate = permUpdate;
	}
	public String getPermDelete() {
		return permDelete;
	}
	public void setPermDelete(String permDelete) {
		this.permDelete = permDelete;
	}
	public String getPermApprove() {
		return permApprove;
	}
	public void setPermApprove(String permApprove) {
		this.permApprove = permApprove;
	}
	@Override
	public String toString() {
		return "AssignFeaturePermissionModel [featureCode=" + featureCode + ", userName=" + userName + ", permCreate="
				+ permCreate + ", permRead=" + permRead + ", permUpdate=" + permUpdate + ", permDelete=" + permDelete
				+ ", permApprove=" + permApprove + "]";
	}
	
	
	
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class AuditLogsModel {

	private String featureGroup;
	private String feature;
	private String userName;
	private Integer operation;
	private String viewData;
	private String oldData;
	private String newData;
	private Date auditTimestamp;
	private String ipAddress;
	private String apprUser;
	private String rejUser;
	
	public String getFeatureGroup() {
		return featureGroup;
	}
	public void setFeatureGroup(String featureGroup) {
		this.featureGroup = featureGroup;
	}
	public String getFeature() {
		return feature;
	}
	public void setFeature(String feature) {
		this.feature = feature;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public Integer getOperation() {
		return operation;
	}
	public void setOperation(Integer operation) {
		this.operation = operation;
	}
	public String getViewData() {
		return viewData;
	}
	public void setViewData(String viewData) {
		this.viewData = viewData;
	}
	public String getOldData() {
		return oldData;
	}
	public void setOldData(String oldData) {
		this.oldData = oldData;
	}
	public String getNewData() {
		return newData;
	}
	public void setNewData(String newData) {
		this.newData = newData;
	}
	public Date getAuditTimestamp() {
		return auditTimestamp;
	}
	public void setAuditTimestamp(Date auditTimestamp) {
		this.auditTimestamp = auditTimestamp;
	}
	public String getIpAddress() {
		return ipAddress;
	}
	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}
	public String getApprUser() {
		return apprUser;
	}
	public void setApprUser(String apprUser) {
		this.apprUser = apprUser;
	}
	public String getRejUser() {
		return rejUser;
	}
	public void setRejUser(String rejUser) {
		this.rejUser = rejUser;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class AuthenticateUserResponseAnalytics {

	private Integer userId;
	private String username;
	private Integer userType;
	private Integer activeFlag;
	private Integer adminRadioButton;
	private Integer distributorRadioButton;
	private Integer aggregatorRadioButton;
	private Integer merchantRadioButton;
	private Integer branchRadioButton;
	private Integer branchRoleId;
	private Integer superUserId;
	private Integer cbmRadioButton;
	private String  branchName;
	private Integer role;
	private String latitude;
	private String longitude;
	private String merchantId;
	private int id;
	
	public Integer getUserId() {
		return userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public Integer getUserType() {
		return userType;
	}

	public void setUserType(Integer userType) {
		this.userType = userType;
	}

	public Integer getActiveFlag() {
		return activeFlag;
	}

	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}

	public Integer getAdminRadioButton() {
		return adminRadioButton;
	}

	public void setAdminRadioButton(Integer adminRadioButton) {
		this.adminRadioButton = adminRadioButton;
	}

	public Integer getDistributorRadioButton() {
		return distributorRadioButton;
	}

	public void setDistributorRadioButton(Integer distributorRadioButton) {
		this.distributorRadioButton = distributorRadioButton;
	}

	public Integer getAggregatorRadioButton() {
		return aggregatorRadioButton;
	}

	public void setAggregatorRadioButton(Integer aggregatorRadioButton) {
		this.aggregatorRadioButton = aggregatorRadioButton;
	}

	public Integer getMerchantRadioButton() {
		return merchantRadioButton;
	}

	public void setMerchantRadioButton(Integer merchantRadioButton) {
		this.merchantRadioButton = merchantRadioButton;
	}

	public Integer getBranchRoleId() {
		return branchRoleId;
	}

	public void setBranchRoleId(Integer branchRoleId) {
		this.branchRoleId = branchRoleId;
	}

	public Integer getBranchRadioButton() {
		return branchRadioButton;
	}

	public void setBranchRadioButton(Integer branchRadioButton) {
		this.branchRadioButton = branchRadioButton;
	}

	public Integer getSuperUserId() {
		return superUserId;
	}

	public void setSuperUserId(Integer superUserId) {
		this.superUserId = superUserId;
	}

	public Integer getCbmRadioButton() {
		return cbmRadioButton;
	}

	public void setCbmRadioButton(Integer cbmRadioButton) {
		this.cbmRadioButton = cbmRadioButton;
	}

	public String getBranchName() {
		return branchName;
	}

	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}

	public Integer getRole() {
		return role;
	}

	public void setRole(Integer role) {
		this.role = role;
	}

	public String getLatitude() {
		return latitude;
	}

	public void setLatitude(String latitude) {
		this.latitude = latitude;
	}

	public String getLongitude() {
		return longitude;
	}

	public void setLongitude(String longitude) {
		this.longitude = longitude;
	}
	
	public String getMerchantId() {
		return merchantId;
	}

	public void setMerchantId(String merchantId) {
		this.merchantId = merchantId;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Override
	public String toString() {
		return "AuthenticateUserResponse [userId=" + userId + ", username=" + username + ", userType=" + userType
				+ ", activeFlag=" + activeFlag + ", adminRadioButton=" + adminRadioButton + ", distributorRadioButton="
				+ distributorRadioButton + ", aggregatorRadioButton=" + aggregatorRadioButton + ", merchantRadioButton="
				+ merchantRadioButton + ", branchRadioButton=" + branchRadioButton + ", branchRoleId=" + branchRoleId
				+ ", superUserId=" + superUserId + ", cbmRadioButton=" + cbmRadioButton + ", branchName=" + branchName
				+ ", role=" + role + ", latitude=" + latitude + ", longitude=" + longitude + ", merchantId="
				+ merchantId + ", id=" + id + "]";
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

public class BankBulkVerificationResponseDataModel {
	
	    private String     beneAccNo    ;
	    private String     beneIfscCode ;
	    private String     timestamp ;
	    private String     statusCode   ;
	    private String     rrn   ;
	    private String     beneName  ;
	    private String     errorResponse  ;
	    private String     requestId ;
	    private String     referrenceNo;
	    
		public String getBeneAccNo() {
			return beneAccNo;
		}
		public void setBeneAccNo(String beneAccNo) {
			this.beneAccNo = beneAccNo;
		}
		public String getBeneIfscCode() {
			return beneIfscCode;
		}
		public void setBeneIfscCode(String beneIfscCode) {
			this.beneIfscCode = beneIfscCode;
		}
		public String getTimestamp() {
			return timestamp;
		}
		public void setTimestamp(String timestamp) {
			this.timestamp = timestamp;
		}
		public String getStatusCode() {
			return statusCode;
		}
		public void setStatusCode(String statusCode) {
			this.statusCode = statusCode;
		}
		public String getRrn() {
			return rrn;
		}
		public void setRrn(String rrn) {
			this.rrn = rrn;
		}
		public String getBeneName() {
			return beneName;
		}
		public void setBeneName(String beneName) {
			this.beneName = beneName;
		}
		public String getErrorResponse() {
			return errorResponse;
		}
		public void setErrorResponse(String errorResponse) {
			this.errorResponse = errorResponse;
		}
		public String getRequestId() {
			return requestId;
		}
		public void setRequestId(String requestId) {
			this.requestId = requestId;
		}
		public String getReferrenceNo() {
			return referrenceNo;
		}
		public void setReferrenceNo(String referrenceNo) {
			this.referrenceNo = referrenceNo;
		}
		@Override
		public String toString() {
			return "BankBulkVerificationResponseDataModel [beneAccNo=" + beneAccNo + ", beneIfscCode=" + beneIfscCode
					+ ", timestamp=" + timestamp + ", statusCode=" + statusCode + ", rrn=" + rrn + ", beneName="
					+ beneName + ", errorResponse=" + errorResponse + ", requestId=" + requestId + ", referrenceNo="
					+ referrenceNo + "]";
		}

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class BankDetailsModel {
	
	private Integer id;
	private Integer type;
	private Integer typeId;
	private String typeName;
	private String bankAccName;
	private String bankAccNo;
	private String bankIFSC;
	private Integer autoBankVerFlag;
	private String autoBankVerDetails;
	private String cancelledChequeImg;
	private String requestedUserName;
	private Date requestedUserTimestamp;
	private String requestedRemarks;
	private String apprRejUserName;
	private Date apprRejUserTimestamp;
	private String apprRejRemarks;
	private Integer approvalStatus;
	
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getType() {
		return type;
	}
	public void setType(Integer type) {
		this.type = type;
	}
	public Integer getTypeId() {
		return typeId;
	}
	public void setTypeId(Integer typeId) {
		this.typeId = typeId;
	}
	public String getTypeName() {
		return typeName;
	}
	public void setTypeName(String typeName) {
		this.typeName = typeName;
	}
	public String getBankAccName() {
		return bankAccName;
	}
	public void setBankAccName(String bankAccName) {
		this.bankAccName = bankAccName;
	}
	public String getBankAccNo() {
		return bankAccNo;
	}
	public void setBankAccNo(String bankAccNo) {
		this.bankAccNo = bankAccNo;
	}
	public String getBankIFSC() {
		return bankIFSC;
	}
	public void setBankIFSC(String bankIFSC) {
		this.bankIFSC = bankIFSC;
	}
	public Integer getAutoBankVerFlag() {
		return autoBankVerFlag;
	}
	public void setAutoBankVerFlag(Integer autoBankVerFlag) {
		this.autoBankVerFlag = autoBankVerFlag;
	}
	public String getAutoBankVerDetails() {
		return autoBankVerDetails;
	}
	public void setAutoBankVerDetails(String autoBankVerDetails) {
		this.autoBankVerDetails = autoBankVerDetails;
	}
	public String getCancelledChequeImg() {
		return cancelledChequeImg;
	}
	public void setCancelledChequeImg(String cancelledChequeImg) {
		this.cancelledChequeImg = cancelledChequeImg;
	}
	public String getRequestedUserName() {
		return requestedUserName;
	}
	public void setRequestedUserName(String requestedUserName) {
		this.requestedUserName = requestedUserName;
	}
	public Date getRequestedUserTimestamp() {
		return requestedUserTimestamp;
	}
	public void setRequestedUserTimestamp(Date requestedUserTimestamp) {
		this.requestedUserTimestamp = requestedUserTimestamp;
	}
	public String getRequestedRemarks() {
		return requestedRemarks;
	}
	public void setRequestedRemarks(String requestedRemarks) {
		this.requestedRemarks = requestedRemarks;
	}
	
	public String getApprRejUserName() {
		return apprRejUserName;
	}
	public void setApprRejUserName(String apprRejUserName) {
		this.apprRejUserName = apprRejUserName;
	}
	public Date getApprRejUserTimestamp() {
		return apprRejUserTimestamp;
	}
	public void setApprRejUserTimestamp(Date apprRejUserTimestamp) {
		this.apprRejUserTimestamp = apprRejUserTimestamp;
	}
	public String getApprRejRemarks() {
		return apprRejRemarks;
	}
	public void setApprRejRemarks(String apprRejRemarks) {
		this.apprRejRemarks = apprRejRemarks;
	}
	public Integer getApprovalStatus() {
		return approvalStatus;
	}
	public void setApprovalStatus(Integer approvalStatus) {
		this.approvalStatus = approvalStatus;
	}
	
	

	

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class BlockedLoginModel {
	
	private Integer id;
	private String ipAddress;
	private Integer userExists;
	private String remarks;
	private Date timestamp;
	private String userName;
	
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getIpAddress() {
		return ipAddress;
	}
	public void setIpAddress(String ipAddress) {
		this.ipAddress = ipAddress;
	}
	public Integer getUserExists() {
		return userExists;
	}
	public void setUserExists(Integer userExists) {
		this.userExists = userExists;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Date getTimestamp() {
		return timestamp;
	}
	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}

}
package com.apptmyz.fpcontrolpanel.data;

public class BlockFraudMerchantModel {

	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;
public class BranchMasterModel {
	
    private Integer    id           ;
    private String     branchLoginId ;
    private String     branchLoginPassword ;
    private String     branchName   ;
    private String     subBranchName ;
    private String     subBranchAddress ;
    private String     subBranchPhoneNumber ;
    private Integer    activeFlag   ;
    private String     remarks      ;
    private String     createdIpAddress ;
    private String     createdUsername ;
    private Date       createdTimestamp ;
    private String     editedIpAddress ;
    private String     editedUsername ;
    private Date       editedTimestamp ;
    private Integer        branchRole;
    private Integer        parentMerchantMasterId;
    private Integer        superMerchantMasterId;
    private String     emailId;
    
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getBranchLoginId() {
		return branchLoginId;
	}
	public void setBranchLoginId(String branchLoginId) {
		this.branchLoginId = branchLoginId;
	}
	public String getBranchLoginPassword() {
		return branchLoginPassword;
	}
	public void setBranchLoginPassword(String branchLoginPassword) {
		this.branchLoginPassword = branchLoginPassword;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	public String getSubBranchName() {
		return subBranchName;
	}
	public void setSubBranchName(String subBranchName) {
		this.subBranchName = subBranchName;
	}
	public String getSubBranchAddress() {
		return subBranchAddress;
	}
	public void setSubBranchAddress(String subBranchAddress) {
		this.subBranchAddress = subBranchAddress;
	}
	public String getSubBranchPhoneNumber() {
		return subBranchPhoneNumber;
	}
	public void setSubBranchPhoneNumber(String subBranchPhoneNumber) {
		this.subBranchPhoneNumber = subBranchPhoneNumber;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getCreatedIpAddress() {
		return createdIpAddress;
	}
	public void setCreatedIpAddress(String createdIpAddress) {
		this.createdIpAddress = createdIpAddress;
	}
	public String getCreatedUsername() {
		return createdUsername;
	}
	public void setCreatedUsername(String createdUsername) {
		this.createdUsername = createdUsername;
	}
	public Date getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(Date createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public String getEditedIpAddress() {
		return editedIpAddress;
	}
	public void setEditedIpAddress(String editedIpAddress) {
		this.editedIpAddress = editedIpAddress;
	}
	public String getEditedUsername() {
		return editedUsername;
	}
	public void setEditedUsername(String editedUsername) {
		this.editedUsername = editedUsername;
	}
	public Date getEditedTimestamp() {
		return editedTimestamp;
	}
	public void setEditedTimestamp(Date editedTimestamp) {
		this.editedTimestamp = editedTimestamp;
	}
	public Integer getBranchRole() {
		return branchRole;
	}
	public void setBranchRole(Integer branchRole) {
		this.branchRole = branchRole;
	}
	public Integer getParentMerchantMasterId() {
		return parentMerchantMasterId;
	}
	public void setParentMerchantMasterId(Integer parentMerchantMasterId) {
		this.parentMerchantMasterId = parentMerchantMasterId;
	}
	public Integer getSuperMerchantMasterId() {
		return superMerchantMasterId;
	}
	public void setSuperMerchantMasterId(Integer superMerchantMasterId) {
		this.superMerchantMasterId = superMerchantMasterId;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
    

}
package com.apptmyz.fpcontrolpanel.data;

public class BulkFileFormatUploadModel {

	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
}
package com.apptmyz.fpcontrolpanel.data;

public class ChangePasswordModel {
	private String userName;
    private String currentPassword;
    private String newPassword;
    private String confirmNewPassword;
	
    
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getCurrentPassword() {
		return currentPassword;
	}
	public void setCurrentPassword(String currentPassword) {
		this.currentPassword = currentPassword;
	}
	public String getNewPassword() {
		return newPassword;
	}
	public void setNewPassword(String newPassword) {
		this.newPassword = newPassword;
	}
	public String getConfirmNewPassword() {
		return confirmNewPassword;
	}
	public void setConfirmNewPassword(String confirmNewPassword) {
		this.confirmNewPassword = confirmNewPassword;
	}
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class ChargebackAggregatorDistributorRequestModel {

	private String fromtime;
	private String totime;
	private Integer parentId;
    private Integer superMerchantId;
    
    private Integer id;
	private String rrn;
	private Integer flag;
	
	private String fileName;
	private List<AggregatorSuperMerchantUploadFile> uploadFiles;
	private String cbRemarks;
	
	public String getFromtime() {
		return fromtime;
	}
	public void setFromtime(String fromtime) {
		this.fromtime = fromtime;
	}
	public String getTotime() {
		return totime;
	}
	public void setTotime(String totime) {
		this.totime = totime;
	}
	public Integer getParentId() {
		return parentId;
	}
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getRrn() {
		return rrn;
	}
	public void setRrn(String rrn) {
		this.rrn = rrn;
	}
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public List<AggregatorSuperMerchantUploadFile> getUploadFiles() {
		return uploadFiles;
	}
	public void setUploadFiles(List<AggregatorSuperMerchantUploadFile> uploadFiles) {
		this.uploadFiles = uploadFiles;
	}
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	public String getCbRemarks() {
		return cbRemarks;
	}
	public void setCbRemarks(String cbRemarks) {
		this.cbRemarks = cbRemarks;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import javax.persistence.Column;

public class ChargeBackManagementResponseModel 
{
    
	private Integer    id           ;
    private String     chargeBackDate ;
    private String     chargeBackType ;
    private String     bank         ;
    private String     cardNo       ;
    private String     txnNo        ;
    private Double     amount       ;
    private String     txnDate      ;
    private String     trnCode      ;
    private String     tat          ;
    private String     bcTerminalId ;
    private String     status       ;
    private String     uploadedBy   ;
    private String     uploadedTimestamp ;
    private String     updatedBy    ;
    private String     updatedTimestamp ;
    private String     fingpayTxnId ;
    private String     bcResponse   ;
    private String     responseMessage ;
    private Integer    superMerchantId ;
    private String     superMerchantName ;
    private Integer    merchantId ;
    private String     merchantName ;
    private String     merchantLoginId;
    private Integer    parentId ;
    private Double     transactionAmount;
    private String     transactionTimestamp ;
    private String     transactionResponseCode ;
    private String     productType ;
    private Integer    statusFlag ;
    private String     responseRemarks ;
    private Integer    countPenaltyDays ;
    private Double     chargeBackAmount;
    private Double     penaltyAmount;
    private Integer    chargeBackFlag ;
    private Integer    penaltyFlag ;
    private String     chargebackTimestamp ;
    private String     penaltyTimestamp ;
    private String	   parentName;
    private String     cbOrFraud ;
    private Integer    fraudFlag;
    private String     fraudTimestamp;
    private String     cbType;
    private Integer    threeWayAnomalyFlag ;
    private String     threeWayFingpayTxnId ;
    private Integer    ekycStatusFlag ;
    private Integer    nocaSettlementFlag ;
    private String     bankSwitch;
    private String 	   cbFraudAttachmentsPath;
    private String     cbDate ;
    private String     txnTime ;
    private String     tatDate ;
    private String     uploadedChargebackType ;
    private Integer 	   liveFlag;
    private String 		chargebackStatus;
    private String 		atmId;
    private String 		bcName;
    private String 		transactionLogId;
    private String 		intimationMailSr;
    private String      cbRemarks;
    private String 		acquirerBank;
    private String      merchantTxnId;
    private String 		srNo;
    private String     aggregatorUpdatedTimestamp;
    private String     mdeclarationAttachmentsPath;
    private String 	   mpanAttachmentsPath;
    private String     mkycAttachmentsPath;
    private String     cdeclarationAttachmentsPath;
    private String     mtxnlogAttachmentsPath;
    private String     mregistercopyAttachmentsPath;
    
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	
	public String getChargeBackDate() {
		return chargeBackDate;
	}
	public void setChargeBackDate(String chargeBackDate) {
		this.chargeBackDate = chargeBackDate;
	}
	public String getChargeBackType() {
		return chargeBackType;
	}
	public void setChargeBackType(String chargeBackType) {
		this.chargeBackType = chargeBackType;
	}
	public String getBank() {
		return bank;
	}
	public void setBank(String bank) {
		this.bank = bank;
	}
	public String getCardNo() {
		return cardNo;
	}
	public void setCardNo(String cardNo) {
		this.cardNo = cardNo;
	}
	public String getTxnNo() {
		return txnNo;
	}
	public void setTxnNo(String txnNo) {
		this.txnNo = txnNo;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public String getTrnCode() {
		return trnCode;
	}
	public void setTrnCode(String trnCode) {
		this.trnCode = trnCode;
	}
	public String getTat() {
		return tat;
	}
	public void setTat(String tat) {
		this.tat = tat;
	}
	public String getBcTerminalId() {
		return bcTerminalId;
	}
	public void setBcTerminalId(String bcTerminalId) {
		this.bcTerminalId = bcTerminalId;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getUploadedBy() {
		return uploadedBy;
	}
	public void setUploadedBy(String uploadedBy) {
		this.uploadedBy = uploadedBy;
	}
	public String getUploadedTimestamp() {
		return uploadedTimestamp;
	}
	public void setUploadedTimestamp(String uploadedTimestamp) {
		this.uploadedTimestamp = uploadedTimestamp;
	}
	
	public String getFingpayTxnId() {
		return fingpayTxnId;
	}
	public void setFingpayTxnId(String fingpayTxnId) {
		this.fingpayTxnId = fingpayTxnId;
	}
	public String getBcResponse() {
		return bcResponse;
	}
	public void setBcResponse(String bcResponse) {
		this.bcResponse = bcResponse;
	}
	public String getResponseMessage() {
		return responseMessage;
	}
	public void setResponseMessage(String responseMessage) {
		this.responseMessage = responseMessage;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public Integer getParentId() {
		return parentId;
	}
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	public Double getTransactionAmount() {
		return transactionAmount;
	}
	public void setTransactionAmount(Double transactionAmount) {
		this.transactionAmount = transactionAmount;
	}
	public String getTransactionTimestamp() {
		return transactionTimestamp;
	}
	public void setTransactionTimestamp(String transactionTimestamp) {
		this.transactionTimestamp = transactionTimestamp;
	}
	public String getTransactionResponseCode() {
		return transactionResponseCode;
	}
	public void setTransactionResponseCode(String transactionResponseCode) {
		this.transactionResponseCode = transactionResponseCode;
	}
	public String getProductType() {
		return productType;
	}
	public void setProductType(String productType) {
		this.productType = productType;
	}
	public Integer getStatusFlag() {
		return statusFlag;
	}
	public void setStatusFlag(Integer statusFlag) {
		this.statusFlag = statusFlag;
	}
	public String getResponseRemarks() {
		return responseRemarks;
	}
	public void setResponseRemarks(String responseRemarks) {
		this.responseRemarks = responseRemarks;
	}
	public Integer getCountPenaltyDays() {
		return countPenaltyDays;
	}
	public void setCountPenaltyDays(Integer countPenaltyDays) {
		this.countPenaltyDays = countPenaltyDays;
	}
	public Double getChargeBackAmount() {
		return chargeBackAmount;
	}
	public void setChargeBackAmount(Double chargeBackAmount) {
		this.chargeBackAmount = chargeBackAmount;
	}
	public Double getPenaltyAmount() {
		return penaltyAmount;
	}
	public void setPenaltyAmount(Double penaltyAmount) {
		this.penaltyAmount = penaltyAmount;
	}
	public Integer getChargeBackFlag() {
		return chargeBackFlag;
	}
	public void setChargeBackFlag(Integer chargeBackFlag) {
		this.chargeBackFlag = chargeBackFlag;
	}
	public Integer getPenaltyFlag() {
		return penaltyFlag;
	}
	public void setPenaltyFlag(Integer penaltyFlag) {
		this.penaltyFlag = penaltyFlag;
	}
	public String getChargebackTimestamp() {
		return chargebackTimestamp;
	}
	public void setChargebackTimestamp(String chargebackTimestamp) {
		this.chargebackTimestamp = chargebackTimestamp;
	}
	public String getPenaltyTimestamp() {
		return penaltyTimestamp;
	}
	public void setPenaltyTimestamp(String penaltyTimestamp) {
		this.penaltyTimestamp = penaltyTimestamp;
	}
	public String getTxnDate() {
		return txnDate;
	}
	public void setTxnDate(String txnDate) {
		this.txnDate = txnDate;
	}
	public String getUpdatedBy() {
		return updatedBy;
	}
	public void setUpdatedBy(String updatedBy) {
		this.updatedBy = updatedBy;
	}
	public String getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(String updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	public String getParentName() {
		return parentName;
	}
	public void setParentName(String parentName) {
		this.parentName = parentName;
	}
	public String getCbOrFraud() {
		return cbOrFraud;
	}
	public void setCbOrFraud(String cbOrFraud) {
		this.cbOrFraud = cbOrFraud;
	}
	public Integer getFraudFlag() {
		return fraudFlag;
	}
	public void setFraudFlag(Integer fraudFlag) {
		this.fraudFlag = fraudFlag;
	}
	public String getFraudTimestamp() {
		return fraudTimestamp;
	}
	public void setFraudTimestamp(String fraudTimestamp) {
		this.fraudTimestamp = fraudTimestamp;
	}
	public String getCbType() {
		return cbType;
	}
	public void setCbType(String cbType) {
		this.cbType = cbType;
	}
	public Integer getThreeWayAnomalyFlag() {
		return threeWayAnomalyFlag;
	}
	public void setThreeWayAnomalyFlag(Integer threeWayAnomalyFlag) {
		this.threeWayAnomalyFlag = threeWayAnomalyFlag;
	}
	public String getThreeWayFingpayTxnId() {
		return threeWayFingpayTxnId;
	}
	public void setThreeWayFingpayTxnId(String threeWayFingpayTxnId) {
		this.threeWayFingpayTxnId = threeWayFingpayTxnId;
	}
	public Integer getEkycStatusFlag() {
		return ekycStatusFlag;
	}
	public void setEkycStatusFlag(Integer ekycStatusFlag) {
		this.ekycStatusFlag = ekycStatusFlag;
	}
	public Integer getNocaSettlementFlag() {
		return nocaSettlementFlag;
	}
	public void setNocaSettlementFlag(Integer nocaSettlementFlag) {
		this.nocaSettlementFlag = nocaSettlementFlag;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getCbFraudAttachmentsPath() {
		return cbFraudAttachmentsPath;
	}
	public void setCbFraudAttachmentsPath(String cbFraudAttachmentsPath) {
		this.cbFraudAttachmentsPath = cbFraudAttachmentsPath;
	}

	public String getCbDate() {
		return cbDate;
	}

	public void setCbDate(String cbDate) {
		this.cbDate = cbDate;
	}

	public String getTxnTime() {
		return txnTime;
	}

	public void setTxnTime(String txnTime) {
		this.txnTime = txnTime;
	}

	public String getTatDate() {
		return tatDate;
	}

	public void setTatDate(String tatDate) {
		this.tatDate = tatDate;
	}

	public String getUploadedChargebackType() {
		return uploadedChargebackType;
	}

	public void setUploadedChargebackType(String uploadedChargebackType) {
		this.uploadedChargebackType = uploadedChargebackType;
	}
	public Integer getLiveFlag() {
		return liveFlag;
	}
	public void setLiveFlag(Integer liveFlag) {
		this.liveFlag = liveFlag;
	}
	public String getChargebackStatus() {
		return chargebackStatus;
	}
	public void setChargebackStatus(String chargebackStatus) {
		this.chargebackStatus = chargebackStatus;
	}
	public String getAtmId() {
		return atmId;
	}
	public void setAtmId(String atmId) {
		this.atmId = atmId;
	}
	public String getBcName() {
		return bcName;
	}
	public void setBcName(String bcName) {
		this.bcName = bcName;
	}
	public String getTransactionLogId() {
		return transactionLogId;
	}
	public void setTransactionLogId(String transactionLogId) {
		this.transactionLogId = transactionLogId;
	}
	public String getIntimationMailSr() {
		return intimationMailSr;
	}
	public void setIntimationMailSr(String intimationMailSr) {
		this.intimationMailSr = intimationMailSr;
	}
	public String getCbRemarks() {
		return cbRemarks;
	}
	public void setCbRemarks(String cbRemarks) {
		this.cbRemarks = cbRemarks;
	}
	public String getAcquirerBank() {
		return acquirerBank;
	}
	public void setAcquirerBank(String acquirerBank) {
		this.acquirerBank = acquirerBank;
	}
	public String getMerchantTxnId() {
		return merchantTxnId;
	}
	public void setMerchantTxnId(String merchantTxnId) {
		this.merchantTxnId = merchantTxnId;
	}
	public String getSrNo() {
		return srNo;
	}
	public void setSrNo(String srNo) {
		this.srNo = srNo;
	}
	public String getAggregatorUpdatedTimestamp() {
		return aggregatorUpdatedTimestamp;
	}
	public void setAggregatorUpdatedTimestamp(String aggregatorUpdatedTimestamp) {
		this.aggregatorUpdatedTimestamp = aggregatorUpdatedTimestamp;
	}
	public String getMdeclarationAttachmentsPath() {
		return mdeclarationAttachmentsPath;
	}
	public void setMdeclarationAttachmentsPath(String mdeclarationAttachmentsPath) {
		this.mdeclarationAttachmentsPath = mdeclarationAttachmentsPath;
	}
	public String getMpanAttachmentsPath() {
		return mpanAttachmentsPath;
	}
	public void setMpanAttachmentsPath(String mpanAttachmentsPath) {
		this.mpanAttachmentsPath = mpanAttachmentsPath;
	}
	public String getMkycAttachmentsPath() {
		return mkycAttachmentsPath;
	}
	public void setMkycAttachmentsPath(String mkycAttachmentsPath) {
		this.mkycAttachmentsPath = mkycAttachmentsPath;
	}
	public String getCdeclarationAttachmentsPath() {
		return cdeclarationAttachmentsPath;
	}
	public void setCdeclarationAttachmentsPath(String cdeclarationAttachmentsPath) {
		this.cdeclarationAttachmentsPath = cdeclarationAttachmentsPath;
	}
	public String getMtxnlogAttachmentsPath() {
		return mtxnlogAttachmentsPath;
	}
	public void setMtxnlogAttachmentsPath(String mtxnlogAttachmentsPath) {
		this.mtxnlogAttachmentsPath = mtxnlogAttachmentsPath;
	}
	public String getMregistercopyAttachmentsPath() {
		return mregistercopyAttachmentsPath;
	}
	public void setMregistercopyAttachmentsPath(String mregistercopyAttachmentsPath) {
		this.mregistercopyAttachmentsPath = mregistercopyAttachmentsPath;
	}
}package com.apptmyz.fpcontrolpanel.data;

public class ChargebackModel {

	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
}
package com.apptmyz.fpcontrolpanel.data;

public class ChargebackNotesDataModel {

	private Integer primaryKeyId;
	private String srNo;
	private String chargeBackType;
	private String product;
	private String txnNo;
	private Integer status;
	private Integer newStatus;
	private String remarks;
	
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public String getSrNo() {
		return srNo;
	}
	public void setSrNo(String srNo) {
		this.srNo = srNo;
	}
	public String getChargeBackType() {
		return chargeBackType;
	}
	public void setChargeBackType(String chargeBackType) {
		this.chargeBackType = chargeBackType;
	}
	public String getProduct() {
		return product;
	}
	public void setProduct(String product) {
		this.product = product;
	}
	public String getTxnNo() {
		return txnNo;
	}
	public void setTxnNo(String txnNo) {
		this.txnNo = txnNo;
	}
	
	public Integer getStatus() {
		return status;
	}
	public void setStatus(Integer status) {
		this.status = status;
	}
	public Integer getNewStatus() {
		return newStatus;
	}
	public void setNewStatus(Integer newStatus) {
		this.newStatus = newStatus;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	@Override
	public String toString() {
		return "ChargebackNotesDataModel [primaryKeyId=" + primaryKeyId + ", srNo=" + srNo + ", chargeBackType="
				+ chargeBackType + ", product=" + product + ", txnNo=" + txnNo + ", status=" + status + ", newStatus="
				+ newStatus + ", remarks=" + remarks + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ChargebackRequestModel {

	private String chargeBackDate;
	private String chargeBackType;
	private String bank;
	private String cardNo;
	private String txnRrn;
	private String amount;
	private String txnDate;
	private String txnTime;
	private String trnCode;
	private String transactionLogId;
	private String deadLine;
	private String atmId;
	private String bcName;
	private String bankSwitch;
	private String tat;
	
	public String getChargeBackDate() {
		return chargeBackDate;
	}
	public void setChargeBackDate(String chargeBackDate) {
		this.chargeBackDate = chargeBackDate;
	}
	public String getChargeBackType() {
		return chargeBackType;
	}
	public void setChargeBackType(String chargeBackType) {
		this.chargeBackType = chargeBackType;
	}
	public String getBank() {
		return bank;
	}
	public void setBank(String bank) {
		this.bank = bank;
	}
	public String getCardNo() {
		return cardNo;
	}
	public void setCardNo(String cardNo) {
		this.cardNo = cardNo;
	}
	public String getTxnRrn() {
		return txnRrn;
	}
	public void setTxnRrn(String txnRrn) {
		this.txnRrn = txnRrn;
	}
	public String getAmount() {
		return amount;
	}
	public void setAmount(String amount) {
		this.amount = amount;
	}
	public String getTxnDate() {
		return txnDate;
	}
	public void setTxnDate(String txnDate) {
		this.txnDate = txnDate;
	}
	public String getTxnTime() {
		return txnTime;
	}
	public void setTxnTime(String txnTime) {
		this.txnTime = txnTime;
	}
	public String getTrnCode() {
		return trnCode;
	}
	public void setTrnCode(String trnCode) {
		this.trnCode = trnCode;
	}
	public String getTransactionLogId() {
		return transactionLogId;
	}
	public void setTransactionLogId(String transactionLogId) {
		this.transactionLogId = transactionLogId;
	}
	public String getDeadLine() {
		return deadLine;
	}
	public void setDeadLine(String deadLine) {
		this.deadLine = deadLine;
	}
	public String getAtmId() {
		return atmId;
	}
	public void setAtmId(String atmId) {
		this.atmId = atmId;
	}
	public String getBcName() {
		return bcName;
	}
	public void setBcName(String bcName) {
		this.bcName = bcName;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getTat() {
		return tat;
	}
	public void setTat(String tat) {
		this.tat = tat;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class CommissionDetailsModel {

	private Integer primaryKey;
	private String serviceType;
	private String bankSwitch;
	private Double mixTxnAmt;
	private Double maxTxnAmt;
	private Double commissionPercentage;
	private String commissionType;
	private Date commissionEffetiveDate;
	private Double maxCommAmtPerTxn;
	private Double commEligibiltyAmt;
	private String userType;
	
	public Integer getPrimaryKey() {
		return primaryKey;
	}
	public void setPrimaryKey(Integer primaryKey) {
		this.primaryKey = primaryKey;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public Double getMixTxnAmt() {
		return mixTxnAmt;
	}
	public void setMixTxnAmt(Double mixTxnAmt) {
		this.mixTxnAmt = mixTxnAmt;
	}
	public Double getMaxTxnAmt() {
		return maxTxnAmt;
	}
	public void setMaxTxnAmt(Double maxTxnAmt) {
		this.maxTxnAmt = maxTxnAmt;
	}
	public Double getCommissionPercentage() {
		return commissionPercentage;
	}
	public void setCommissionPercentage(Double commissionPercentage) {
		this.commissionPercentage = commissionPercentage;
	}
	public String getCommissionType() {
		return commissionType;
	}
	public void setCommissionType(String commissionType) {
		this.commissionType = commissionType;
	}
	public Date getCommissionEffetiveDate() {
		return commissionEffetiveDate;
	}
	public void setCommissionEffetiveDate(Date commissionEffetiveDate) {
		this.commissionEffetiveDate = commissionEffetiveDate;
	}
	public Double getMaxCommAmtPerTxn() {
		return maxCommAmtPerTxn;
	}
	public void setMaxCommAmtPerTxn(Double maxCommAmtPerTxn) {
		this.maxCommAmtPerTxn = maxCommAmtPerTxn;
	}
	public Double getCommEligibiltyAmt() {
		return commEligibiltyAmt;
	}
	public void setCommEligibiltyAmt(Double commEligibiltyAmt) {
		this.commEligibiltyAmt = commEligibiltyAmt;
	}
	
	
	public String getUserType() {
		return userType;
	}
	public void setUserType(String userType) {
		this.userType = userType;
	}
	@Override
	public String toString() {
		return "CommissionDetailsModel [primaryKey=" + primaryKey + ", serviceType=" + serviceType + ", bankSwitch="
				+ bankSwitch + ", mixTxnAmt=" + mixTxnAmt + ", maxTxnAmt=" + maxTxnAmt + ", commissionPercentage="
				+ commissionPercentage + ", commissionType=" + commissionType + ", commissionEffetiveDate="
				+ commissionEffetiveDate + ", maxCommAmtPerTxn=" + maxCommAmtPerTxn + ", commEligibiltyAmt="
				+ commEligibiltyAmt + ", userType=" + userType + "]";
	}
	
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class CommissionDetailsModelObject {

	private Integer primaryKeyId;
	private List<CommissionDetailsModel> commissionDetailsList;
	
	
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public List<CommissionDetailsModel> getCommissionDetailsList() {
		return commissionDetailsList;
	}
	public void setCommissionDetailsList(List<CommissionDetailsModel> commissionDetailsList) {
		this.commissionDetailsList = commissionDetailsList;
	}
	@Override
	public String toString() {
		return "CommissionDetailsModelObject [primaryKeyId=" + primaryKeyId + ", commissionDetailsList="
				+ commissionDetailsList + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class CommSlabsModel {
	private Integer id;
	private Integer merchantId;
	private Integer superMerchId;
	private Integer parentId;
	private String txnType;
	private Integer minAmt;
	private Integer maxAmt;
	private Double absValue;
	private Double percentage;
	private Double maxAmtComm;
	private String remarks;
	private Integer flag;
	
	
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public Integer getSuperMerchId() {
		return superMerchId;
	}
	public void setSuperMerchId(Integer superMerchId) {
		this.superMerchId = superMerchId;
	}
	public Integer getParentId() {
		return parentId;
	}
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	public String getTxnType() {
		return txnType;
	}
	public void setTxnType(String txnType) {
		this.txnType = txnType;
	}
	
	public Integer getMinAmt() {
		return minAmt;
	}
	public void setMinAmt(Integer minAmt) {
		this.minAmt = minAmt;
	}
	public Integer getMaxAmt() {
		return maxAmt;
	}
	public void setMaxAmt(Integer maxAmt) {
		this.maxAmt = maxAmt;
	}
	public Double getAbsValue() {
		return absValue;
	}
	public void setAbsValue(Double absValue) {
		this.absValue = absValue;
	}
	public Double getPercentage() {
		return percentage;
	}
	public void setPercentage(Double percentage) {
		this.percentage = percentage;
	}
	public Double getMaxAmtComm() {
		return maxAmtComm;
	}
	public void setMaxAmtComm(Double maxAmtComm) {
		this.maxAmtComm = maxAmtComm;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	

}
package com.apptmyz.fpcontrolpanel.data;

public class Contact{
	private String contactType;
	private String contactName;
	private String emailId;
	private String mobileNumber;
	private Integer whatsappFlag;
	
	public String getContactType() {
		return contactType;
	}
	public void setContactType(String contactType) {
		this.contactType = contactType;
	}
	public String getContactName() {
		return contactName;
	}
	public void setContactName(String contactName) {
		this.contactName = contactName;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getMobileNumber() {
		return mobileNumber;
	}
	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}
	public Integer getWhatsappFlag() {
		return whatsappFlag;
	}
	public void setWhatsappFlag(Integer whatsappFlag) {
		this.whatsappFlag = whatsappFlag;
	}
	@Override
	public String toString() {
		return "Contact [contactType=" + contactType + ", contactName=" + contactName + ", emailId=" + emailId
				+ ", mobileNumber=" + mobileNumber + ", whatsappFlag=" + whatsappFlag + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class ContactDetailsModel {

	private Integer smid;
	private Integer parentid;
	private List<Contact> contactdetails;
	
	public Integer getSmid() {
		return smid;
	}
	public void setSmid(Integer smid) {
		this.smid = smid;
	}
	public Integer getParentid() {
		return parentid;
	}
	public void setParentid(Integer parentid) {
		this.parentid = parentid;
	}
	public List<Contact> getContactdetails() {
		return contactdetails;
	}
	public void setContactdetails(List<Contact> contactdetails) {
		this.contactdetails = contactdetails;
	}
	
	@Override
	public String toString() {
		return "ContactDetailsModel [smid=" + smid + ", parentid=" + parentid + ", contactdetails=" + contactdetails
				+ "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ControlPanelPermissionsModel {

	private Integer id;
	private String userName;
	private String featureGrpCode;
	private String featureCode;
	private String permCreate;
	private String permRead;
	private String permUpdate;
	private String permDelete;
	private String permApprove;
	private String activeFlag;
	private String permInfo;
	private String createdTimestamp;
	private String updatedTimestamp;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getFeatureGrpCode() {
		return featureGrpCode;
	}
	public void setFeatureGrpCode(String featureGrpCode) {
		this.featureGrpCode = featureGrpCode;
	}
	public String getFeatureCode() {
		return featureCode;
	}
	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}
	public String getPermCreate() {
		return permCreate;
	}
	public void setPermCreate(String permCreate) {
		this.permCreate = permCreate;
	}
	public String getPermRead() {
		return permRead;
	}
	public void setPermRead(String permRead) {
		this.permRead = permRead;
	}
	public String getPermUpdate() {
		return permUpdate;
	}
	public void setPermUpdate(String permUpdate) {
		this.permUpdate = permUpdate;
	}
	public String getPermDelete() {
		return permDelete;
	}
	public void setPermDelete(String permDelete) {
		this.permDelete = permDelete;
	}
	public String getPermApprove() {
		return permApprove;
	}
	public void setPermApprove(String permApprove) {
		this.permApprove = permApprove;
	}
	public String getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(String activeFlag) {
		this.activeFlag = activeFlag;
	}
	public String getPermInfo() {
		return permInfo;
	}
	public void setPermInfo(String permInfo) {
		this.permInfo = permInfo;
	}
	public String getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(String createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public String getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(String updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	@Override
	public String toString() {
		return "ControlPanelPermissionsModel [id=" + id + ", userName=" + userName + ", featureGrpCode="
				+ featureGrpCode + ", featureCode=" + featureCode + ", permCreate=" + permCreate + ", permRead="
				+ permRead + ", permUpdate=" + permUpdate + ", permDelete=" + permDelete + ", permApprove="
				+ permApprove + ", activeFlag=" + activeFlag + ", permInfo=" + permInfo + ", createdTimestamp="
				+ createdTimestamp + ", updatedTimestamp=" + updatedTimestamp + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class CorporateUserModelUploadDataModel {

	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}

}
package com.apptmyz.fpcontrolpanel.data;

public class EmailNotificationModel {
	
	private String emailId;
	private String userName;
	private Integer primaryKeyId;
	private String masterName;
	private String message;
	private String masterType;
	private String requestAction;
	
	
	
	public String getMasterType() {
		return masterType;
	}
	public void setMasterType(String masterType) {
		this.masterType = masterType;
	}
	public String getRequestAction() {
		return requestAction;
	}
	public void setRequestAction(String requestAction) {
		this.requestAction = requestAction;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public String getMasterName() {
		return masterName;
	}
	public void setMasterName(String masterName) {
		this.masterName = masterName;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	@Override
	public String toString() {
		return "EmailNotificationModel [emailId=" + emailId + ", userName=" + userName + ", primaryKeyId="
				+ primaryKeyId + ", masterName=" + masterName + ", message=" + message + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ExcelUpload {
	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
}
package com.apptmyz.fpcontrolpanel.data;

public class FileUploadModel {
	
	private String file;
	private String bankSwitch;
	private String product;
	private String cbType;
	private String srNo;
	private String userName;
	private Integer oldCbFilesFlag;
	
	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}

	public String getBankSwitch() {
		return bankSwitch;
	}

	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}

	public String getProduct() {
		return product;
	}

	public void setProduct(String product) {
		this.product = product;
	}

	public String getCbType() {
		return cbType;
	}

	public void setCbType(String cbType) {
		this.cbType = cbType;
	}

	public String getSrNo() {
		return srNo;
	}

	public void setSrNo(String srNo) {
		this.srNo = srNo;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public Integer getOldCbFilesFlag() {
		return oldCbFilesFlag;
	}

	public void setOldCbFilesFlag(Integer oldCbFilesFlag) {
		this.oldCbFilesFlag = oldCbFilesFlag;
	}
	
}

package com.apptmyz.fpcontrolpanel.data;

public class FpCpUserPermissionDetails {

	private String id;
	private String userName;
	private String featureGrpCode;
	private String featureCode;
	private String permCreate;
	private String permRead;
	private String permUpdate;
	private String permDelete;
	private String permApprove;
	private String activeFlag;
	private String permInfo;
	private String createdTimestamp;
	private String updatedTimestamp;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getFeatureGrpCode() {
		return featureGrpCode;
	}
	public void setFeatureGrpCode(String featureGrpCode) {
		this.featureGrpCode = featureGrpCode;
	}
	public String getFeatureCode() {
		return featureCode;
	}
	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}
	public String getPermCreate() {
		return permCreate;
	}
	public void setPermCreate(String permCreate) {
		this.permCreate = permCreate;
	}
	public String getPermRead() {
		return permRead;
	}
	public void setPermRead(String permRead) {
		this.permRead = permRead;
	}
	public String getPermUpdate() {
		return permUpdate;
	}
	public void setPermUpdate(String permUpdate) {
		this.permUpdate = permUpdate;
	}
	public String getPermDelete() {
		return permDelete;
	}
	public void setPermDelete(String permDelete) {
		this.permDelete = permDelete;
	}
	public String getPermApprove() {
		return permApprove;
	}
	public void setPermApprove(String permApprove) {
		this.permApprove = permApprove;
	}
	public String getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(String activeFlag) {
		this.activeFlag = activeFlag;
	}
	public String getPermInfo() {
		return permInfo;
	}
	public void setPermInfo(String permInfo) {
		this.permInfo = permInfo;
	}
	public String getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(String createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public String getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(String updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	@Override
	public String toString() {
		return "FpCpUserPermissionDetails [id=" + id + ", userName=" + userName + ", featureGrpCode=" + featureGrpCode
				+ ", featureCode=" + featureCode + ", permCreate=" + permCreate + ", permRead=" + permRead
				+ ", permUpdate=" + permUpdate + ", permDelete=" + permDelete + ", permApprove=" + permApprove
				+ ", activeFlag=" + activeFlag + ", permInfo=" + permInfo + ", createdTimestamp=" + createdTimestamp
				+ ", updatedTimestamp=" + updatedTimestamp + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class FpfeatureCodeModel
{
	private String featureCode;

	public String getFeatureCode() {
		return featureCode;
	}

	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}

	@Override
	public String toString() {
		return "FpfeatureCodeModel [featureCode=" + featureCode + "]";
	}
	

}
package com.apptmyz.fpcontrolpanel.data;

public class FpUserNameModel 
{
	private String userName;

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	@Override
	public String toString() {
		return "FpUserNameModel [userName=" + userName + "]";
	}

	

}
package com.apptmyz.fpcontrolpanel.data;

public class FundTransferResponseModelCP {

	private String status;
	private Double amount;
	private String transactionStatus;
	private Integer response_code;
	private String externalTransactionId;
	private String message;
	private String txn_id;
	private String errorCode;
	private String errorMessage;
	private String requestId;
	
	public String getErrorCode() {
		return errorCode;
	}
	public void setErrorCode(String errorCode) {
		this.errorCode = errorCode;
	}
	public String getErrorMessage() {
		return errorMessage;
	}
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public String getTransactionStatus() {
		return transactionStatus;
	}
	public void setTransactionStatus(String transactionStatus) {
		this.transactionStatus = transactionStatus;
	}
	public Integer getResponse_code() {
		return response_code;
	}
	public void setResponse_code(Integer response_code) {
		this.response_code = response_code;
	}
	public String getExternalTransactionId() {
		return externalTransactionId;
	}
	public void setExternalTransactionId(String externalTransactionId) {
		this.externalTransactionId = externalTransactionId;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public String getTxn_id() {
		return txn_id;
	}
	public void setTxn_id(String txn_id) {
		this.txn_id = txn_id;
	}
	public String getRequestId() {
		return requestId;
	}
	public void setRequestId(String requestId) {
		this.requestId = requestId;
	}
	@Override
	public String toString() {
		return "FundTransferResponseModelCP [status=" + status + ", amount=" + amount + ", transactionStatus="
				+ transactionStatus + ", response_code=" + response_code + ", externalTransactionId="
				+ externalTransactionId + ", message=" + message + ", txn_id=" + txn_id + ", errorCode=" + errorCode
				+ ", errorMessage=" + errorMessage + ", requestId=" + requestId + "]";
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class HoldAmountRequestObject {
		private String aggregatorId;
		private String distributerId;
		private String startDate;
		private String amountToHold;
		private String maxAmountPerSettleToHold;
		private String maxAmountPerDayToHold;
		private String validatedBy;
		private String approvedBy;
		private String settlementHoldId;
		private String serviceType;
		private String remarks;
		
		public String getAggregatorId() {
			return aggregatorId;
		}
		public void setAggregatorId(String aggregatorId) {
			this.aggregatorId = aggregatorId;
		}
		public String getDistributerId() {
			return distributerId;
		}
		public void setDistributerId(String distributerId) {
			this.distributerId = distributerId;
		}
		public String getStartDate() {
			return startDate;
		}
		public void setStartDate(String startDate) {
			this.startDate = startDate;
		}
		public String getAmountToHold() {
			return amountToHold;
		}
		public void setAmountToHold(String amountToHold) {
			this.amountToHold = amountToHold;
		}
		public String getMaxAmountPerSettleToHold() {
			return maxAmountPerSettleToHold;
		}
		public void setMaxAmountPerSettleToHold(String maxAmountPerSettleToHold) {
			this.maxAmountPerSettleToHold = maxAmountPerSettleToHold;
		}
		public String getMaxAmountPerDayToHold() {
			return maxAmountPerDayToHold;
		}
		public void setMaxAmountPerDayToHold(String maxAmountPerDayToHold) {
			this.maxAmountPerDayToHold = maxAmountPerDayToHold;
		}
		public String getValidatedBy() {
			return validatedBy;
		}
		public void setValidatedBy(String validatedBy) {
			this.validatedBy = validatedBy;
		}
		public String getApprovedBy() {
			return approvedBy;
		}
		public void setApprovedBy(String approvedBy) {
			this.approvedBy = approvedBy;
		}
		public String getSettlementHoldId() {
			return settlementHoldId;
		}
		public void setSettlementHoldId(String settlementHoldId) {
			this.settlementHoldId = settlementHoldId;
		}
		public String getServiceType() {
			return serviceType;
		}
		public void setServiceType(String serviceType) {
			this.serviceType = serviceType;
		}
		public String getRemarks() {
			return remarks;
		}
		public void setRemarks(String remarks) {
			this.remarks = remarks;
		}
		
		
}
package com.apptmyz.fpcontrolpanel.data;

import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonToken;
import com.google.gson.stream.JsonWriter;

import java.io.IOException;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Locale;
import java.util.TimeZone;

public final class ImprovedDateTypeAdapter extends TypeAdapter<Date> {

    public static final TypeAdapterFactory FACTORY = new TypeAdapterFactory() {

        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> typeToken) {

            @SuppressWarnings("unchecked")
            TypeAdapter<T> typeAdapter = (TypeAdapter<T>) ((typeToken.getRawType() == Date.class) ? new ImprovedDateTypeAdapter()
                    : null);
            return typeAdapter;
        }
    };
    private final DateFormat enUsFormat;
    private final DateFormat localFormat;
    private final DateFormat iso8601Format;

    public ImprovedDateTypeAdapter() {
        this.enUsFormat = DateFormat.getDateTimeInstance(2, 2, Locale.US);

        this.localFormat = DateFormat.getDateTimeInstance(2, 2);

        this.iso8601Format = buildIso8601Format();
    }

    private static DateFormat buildIso8601Format() {
        DateFormat iso8601Format = new SimpleDateFormat(
                "yyyy-MM-dd'T'HH:mm:ss'Z'", Locale.US);
        iso8601Format.setTimeZone(TimeZone.getTimeZone("UTC"));
        return iso8601Format;
    }

    public Date read(JsonReader in) throws IOException {
        if (in.peek() == JsonToken.NULL) {
            in.nextNull();
            return null;
        }
        return deserializeToDate(in.nextString());
    }

    private synchronized Date deserializeToDate(String json) {
        try {

            return new Date(Long.parseLong(json));
        } catch (Exception e) {

            try {

                return this.localFormat.parse(json);
            } catch (ParseException e1) {

                try {

                    return this.enUsFormat.parse(json);
                } catch (ParseException e2) {

                    try {

                        return this.iso8601Format.parse(json);
                    } catch (ParseException e3) {

                        throw new JsonSyntaxException(json, e3);
                    }
                }
            }
        }
    }

    public synchronized void write(JsonWriter out, Date value)
            throws IOException {
        if (value == null) {
            out.nullValue();
            return;
        }
        String dateFormatAsString = this.enUsFormat.format(value);
        out.value(dateFormatAsString);
    }
}package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;


public class InstantSettlementDetailsModel {
	
	    private Integer    id           ;
	    private String     filename     ;
	    private Date       requestedTimestamp ;
	    private String     requestRemarks ;
	    private String     ipAddress    ;
	    private String     status       ;
	    private Date       responseTimestamp ;
	    private String     responseRemarks ;
	    private String     typeOfSettlement ;
	    private Double     totalAmount  ;
	    private Double     merchantAmount ;
	    private String     accountNumber ;
	    private String     ifscCode     ;
	    private String     name         ;
	    private String     referrenceNumber ;
	    private String     loginId      ;
	    private String     fromAccount  ;
	    private Date       statusUpdatedTimestamp ;
	    private String     cmsNumber ;
	    private String     statusMessage ;
	    private String     responseData ;
	    private String     responseUniqueId ;
	    private String     responseReqId ;
	    private String     responseResponse ;
	    private String     responseMessage ;
	    private Integer    retryCount         ;
	    private Integer    reconFlag    ;
	    private String     reconFlagDesc ;
	    private String     fpFromAccount ;
	    private Double     settleAmount  ;
	    private Date     transactionDate  ;
	    private String   transactionInquiryStatus;
	    private Integer primarykey;
	    private String settleTo;
	    private String corporateName;
	    
	    private Double anomalyAmount;
	    private Double holdAmount;
	    private Date createdTimestamp;
	   
	    
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getFilename() {
			return filename;
		}
		public void setFilename(String filename) {
			this.filename = filename;
		}
		public Date getRequestedTimestamp() {
			return requestedTimestamp;
		}
		public void setRequestedTimestamp(Date requestedTimestamp) {
			this.requestedTimestamp = requestedTimestamp;
		}
		public String getRequestRemarks() {
			return requestRemarks;
		}
		public void setRequestRemarks(String requestRemarks) {
			this.requestRemarks = requestRemarks;
		}
		public String getIpAddress() {
			return ipAddress;
		}
		public void setIpAddress(String ipAddress) {
			this.ipAddress = ipAddress;
		}
		public String getStatus() {
			return status;
		}
		public void setStatus(String status) {
			this.status = status;
		}
		public Date getResponseTimestamp() {
			return responseTimestamp;
		}
		public void setResponseTimestamp(Date responseTimestamp) {
			this.responseTimestamp = responseTimestamp;
		}
		public String getResponseRemarks() {
			return responseRemarks;
		}
		public void setResponseRemarks(String responseRemarks) {
			this.responseRemarks = responseRemarks;
		}
		public String getTypeOfSettlement() {
			return typeOfSettlement;
		}
		public void setTypeOfSettlement(String typeOfSettlement) {
			this.typeOfSettlement = typeOfSettlement;
		}
		public Double getTotalAmount() {
			return totalAmount;
		}
		public void setTotalAmount(Double totalAmount) {
			this.totalAmount = totalAmount;
		}
		public Double getMerchantAmount() {
			return merchantAmount;
		}
		public void setMerchantAmount(Double merchantAmount) {
			this.merchantAmount = merchantAmount;
		}
		public String getAccountNumber() {
			return accountNumber;
		}
		public void setAccountNumber(String accountNumber) {
			this.accountNumber = accountNumber;
		}
		public String getIfscCode() {
			return ifscCode;
		}
		public void setIfscCode(String ifscCode) {
			this.ifscCode = ifscCode;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getReferrenceNumber() {
			return referrenceNumber;
		}
		public void setReferrenceNumber(String referrenceNumber) {
			this.referrenceNumber = referrenceNumber;
		}
		public String getLoginId() {
			return loginId;
		}
		public void setLoginId(String loginId) {
			this.loginId = loginId;
		}
		public String getFromAccount() {
			return fromAccount;
		}
		public void setFromAccount(String fromAccount) {
			this.fromAccount = fromAccount;
		}
		public Date getStatusUpdatedTimestamp() {
			return statusUpdatedTimestamp;
		}
		public void setStatusUpdatedTimestamp(Date statusUpdatedTimestamp) {
			this.statusUpdatedTimestamp = statusUpdatedTimestamp;
		}
		public String getCmsNumber() {
			return cmsNumber;
		}
		public void setCmsNumber(String cmsNumber) {
			this.cmsNumber = cmsNumber;
		}
		public String getStatusMessage() {
			return statusMessage;
		}
		public void setStatusMessage(String statusMessage) {
			this.statusMessage = statusMessage;
		}
		public String getResponseData() {
			return responseData;
		}
		public void setResponseData(String responseData) {
			this.responseData = responseData;
		}
		public String getResponseUniqueId() {
			return responseUniqueId;
		}
		public void setResponseUniqueId(String responseUniqueId) {
			this.responseUniqueId = responseUniqueId;
		}
		public String getResponseReqId() {
			return responseReqId;
		}
		public void setResponseReqId(String responseReqId) {
			this.responseReqId = responseReqId;
		}
		public String getResponseResponse() {
			return responseResponse;
		}
		public void setResponseResponse(String responseResponse) {
			this.responseResponse = responseResponse;
		}
		public String getResponseMessage() {
			return responseMessage;
		}
		public void setResponseMessage(String responseMessage) {
			this.responseMessage = responseMessage;
		}
		public Integer getRetryCount() {
			return retryCount;
		}
		public void setRetryCount(Integer retryCount) {
			this.retryCount = retryCount;
		}
		public Integer getReconFlag() {
			return reconFlag;
		}
		public void setReconFlag(Integer reconFlag) {
			this.reconFlag = reconFlag;
		}
		public String getReconFlagDesc() {
			return reconFlagDesc;
		}
		public void setReconFlagDesc(String reconFlagDesc) {
			this.reconFlagDesc = reconFlagDesc;
		}
		public String getFpFromAccount() {
			return fpFromAccount;
		}
		public void setFpFromAccount(String fpFromAccount) {
			this.fpFromAccount = fpFromAccount;
		}
		public Double getSettleAmount() {
			return settleAmount;
		}
		public void setSettleAmount(Double settleAmount) {
			this.settleAmount = settleAmount;
		}
		public Date getTransactionDate() {
			return transactionDate;
		}
		public void setTransactionDate(Date transactionDate) {
			this.transactionDate = transactionDate;
		}
		public String getTransactionInquiryStatus() {
			return transactionInquiryStatus;
		}
		public void setTransactionInquiryStatus(String transactionInquiryStatus) {
			this.transactionInquiryStatus = transactionInquiryStatus;
		}
		public Integer getPrimarykey() {
			return primarykey;
		}
		public void setPrimarykey(Integer primarykey) {
			this.primarykey = primarykey;
		}
		public String getSettleTo() {
			return settleTo;
		}
		public void setSettleTo(String settleTo) {
			this.settleTo = settleTo;
		}
		public String getCorporateName() {
			return corporateName;
		}
		public void setCorporateName(String corporateName) {
			this.corporateName = corporateName;
		}
		
		public Double getAnomalyAmount() {
			return anomalyAmount;
		}
		public void setAnomalyAmount(Double anomalyAmount) {
			this.anomalyAmount = anomalyAmount;
		}
		public Double getHoldAmount() {
			return holdAmount;
		}
		public void setHoldAmount(Double holdAmount) {
			this.holdAmount = holdAmount;
		}
		public Date getCreatedTimestamp() {
			return createdTimestamp;
		}
		public void setCreatedTimestamp(Date createdTimestamp) {
			this.createdTimestamp = createdTimestamp;
		}
		
	    
	    
	    

}
package com.apptmyz.fpcontrolpanel.data;

public class Kyc {
	
	private String userPan;
	private String aadhaarNumber;
	private String gstinNumber;
	private String companyOrShopPan;
	
	public String getCompanyOrShopPan() {
		return companyOrShopPan;
	}
	public void setCompanyOrShopPan(String companyOrShopPan) {
		this.companyOrShopPan = companyOrShopPan;
	}
	public String getUserPan() {
		return userPan;
	}
	public void setUserPan(String userPan) {
		this.userPan = userPan;
	}
	public String getAadhaarNumber() {
		return aadhaarNumber;
	}
	public void setAadhaarNumber(String aadhaarNumber) {
		this.aadhaarNumber = aadhaarNumber;
	}
	public String getGstinNumber() {
		return gstinNumber;
	}
	public void setGstinNumber(String gstinNumber) {
		this.gstinNumber = gstinNumber;
	}
	

}
 package com.apptmyz.fpcontrolpanel.data;

public class MerchantAddress {
	
	private String merchantAddress;
	private String merchantState;
	
	public String getMerchantAddress() {
		return merchantAddress;
	}
	public void setMerchantAddress(String merchantAddress) {
		this.merchantAddress = merchantAddress;
	}
	
	public String getMerchantState() {
		return merchantState;
	}
	public void setMerchantState(String merchantState) {
		this.merchantState = merchantState;
	}
	

}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantBlockModel {

	private Integer merchantId;
	private String merchantName;
	private Integer superMerchantId;
	private String superMerchantName;
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantDemographicsDataModel {
	
	private String merchantName;
	private String loginID;
	private String eEkycDate;
	private String aggregatorName;
	private String firstOnboardingDate;
	private String ekycAddress;
	private String ekycPhoneNumber;
	private String onboardingAddress;
	private String onboardingMobileNumber;
	private String ekycPdf;
	private String dateofICICIAprovaledTID;
	private String approvedTid;
	private String onboardingDeviceIMEI;
	private String ekycAadhaar;
	private String panNumber;
	private String onboardingLatLong;
	private String blocked;
	private String reasonForBlocking;
	private String blockDate;
	private String lastHash;
	private String terminalId;
	
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getLoginID() {
		return loginID;
	}
	public void setLoginID(String loginID) {
		this.loginID = loginID;
	}
	public String geteEkycDate() {
		return eEkycDate;
	}
	public void seteEkycDate(String eEkycDate) {
		this.eEkycDate = eEkycDate;
	}
	public String getAggregatorName() {
		return aggregatorName;
	}
	public void setAggregatorName(String aggregatorName) {
		this.aggregatorName = aggregatorName;
	}
	public String getFirstOnboardingDate() {
		return firstOnboardingDate;
	}
	public void setFirstOnboardingDate(String firstOnboardingDate) {
		this.firstOnboardingDate = firstOnboardingDate;
	}
	public String getEkycAddress() {
		return ekycAddress;
	}
	public void setEkycAddress(String ekycAddress) {
		this.ekycAddress = ekycAddress;
	}
	public String getEkycPhoneNumber() {
		return ekycPhoneNumber;
	}
	public void setEkycPhoneNumber(String ekycPhoneNumber) {
		this.ekycPhoneNumber = ekycPhoneNumber;
	}
	public String getOnboardingAddress() {
		return onboardingAddress;
	}
	public void setOnboardingAddress(String onboardingAddress) {
		this.onboardingAddress = onboardingAddress;
	}
	public String getOnboardingMobileNumber() {
		return onboardingMobileNumber;
	}
	public void setOnboardingMobileNumber(String onboardingMobileNumber) {
		this.onboardingMobileNumber = onboardingMobileNumber;
	}
	public String getEkycPdf() {
		return ekycPdf;
	}
	public void setEkycPdf(String ekycPdf) {
		this.ekycPdf = ekycPdf;
	}
	public String getDateofICICIAprovaledTID() {
		return dateofICICIAprovaledTID;
	}
	public void setDateofICICIAprovaledTID(String dateofICICIAprovaledTID) {
		this.dateofICICIAprovaledTID = dateofICICIAprovaledTID;
	}
	public String getApprovedTid() {
		return approvedTid;
	}
	public void setApprovedTid(String approvedTid) {
		this.approvedTid = approvedTid;
	}
	public String getOnboardingDeviceIMEI() {
		return onboardingDeviceIMEI;
	}
	public void setOnboardingDeviceIMEI(String onboardingDeviceIMEI) {
		this.onboardingDeviceIMEI = onboardingDeviceIMEI;
	}
	public String getEkycAadhaar() {
		return ekycAadhaar;
	}
	public void setEkycAadhaar(String ekycAadhaar) {
		this.ekycAadhaar = ekycAadhaar;
	}
	public String getPanNumber() {
		return panNumber;
	}
	public void setPanNumber(String panNumber) {
		this.panNumber = panNumber;
	}
	public String getOnboardingLatLong() {
		return onboardingLatLong;
	}
	public void setOnboardingLatLong(String onboardingLatLong) {
		this.onboardingLatLong = onboardingLatLong;
	}
	public String getBlocked() {
		return blocked;
	}
	public void setBlocked(String blocked) {
		this.blocked = blocked;
	}
	public String getReasonForBlocking() {
		return reasonForBlocking;
	}
	public void setReasonForBlocking(String reasonForBlocking) {
		this.reasonForBlocking = reasonForBlocking;
	}
	public String getBlockDate() {
		return blockDate;
	}
	public void setBlockDate(String blockDate) {
		this.blockDate = blockDate;
	}
	public String getLastHash() {
		return lastHash;
	}
	public void setLastHash(String lastHash) {
		this.lastHash = lastHash;
	}
	public String getTerminalId() {
		return terminalId;
	}
	public void setTerminalId(String terminalId) {
		this.terminalId = terminalId;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.List;

public class MerchantDemographicsResDataModel {
	private List<MerchantDemographicsDataModel> merchantDemographics;
	private List<MerchantTransactionDataModel> merchantTransactions;
	public List<MerchantDemographicsDataModel> getMerchantDemographics() {
		return merchantDemographics;
	}
	public void setMerchantDemographics(List<MerchantDemographicsDataModel> merchantDemographics) {
		this.merchantDemographics = merchantDemographics;
	}
	public List<MerchantTransactionDataModel> getMerchantTransactions() {
		return merchantTransactions;
	}
	public void setMerchantTransactions(List<MerchantTransactionDataModel> merchantTransactions) {
		this.merchantTransactions = merchantTransactions;
	}
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class MerchantMasterModal {
	
	private String     merchantName ;
	private String     merchantLoginId ;
	private String     merchantPhoneNumber ;
	private String     merchantAddress ;
	private String     emailId      ;
	private String     userPan      ;
	private String     aadhaarNumber ;
	private String     bankAccountName ;
	private String     userType     ;
	private int        stateId;
	private int        cityId;
	private String     merchantLoginPin ;
	private String     companyBankAccountNumber ;
	private String     companyBankBranchName ;
	private String     companyBankName ;
	private String     companyIfscCode ;
	private String     companyLegalName ;
	private String     companyMarketingName ;
	private String     dateOfIncorporation ;
	private String     noOfTerminals ;
	private String     gstInNumber  ;
	private int        activeFlag;
	private Integer    aadharPayEnable ;
	private Integer    upiEnable    ;
	private Integer    upiQrEnable  ;
	private Integer    upiIntentEnable  ;
	private Integer    cashWithdrawEnable ;
	private Integer    fundTransferEnable ;
	private Integer    cashDepositEnable ;
	private Integer    balanceEnquiryEnable ;
	private Integer    ministatmentEnable ;
	private String     merchantLogo ;
	private String     ekycDocuments ;
	private String     shopAndPanImage ;
	private String     cancelledChequeImages ;
	private int        superMerchantId;
	private Integer        id;
	private Date         timestamp;
	private String       verifiedBy ;
	private int          approvedStatus;
	private String       automaticBankVerificationDetails;
	private String       automaticPanVerificationDetails;
	private String       automaticAadhaarVerification;
	private int          automaticBankVerification;
	private int          automaticPanVerification;
	
	private int       companyTypeId;
	private Integer   selfSettlementFlag;
	private String    superMerchantName;
	private String    remarks;
	private Integer   branchId;
	private Integer   parentId;
	private String    parentMerchantName;
	private String    branchName;
	
	private String   status;
	
	private Integer   superSettlementFlag;
	private Integer   parentSettlementFlag;
	
	private Integer   collectCashEnable;
	private Integer   demandSheetEnable;
	private Integer   dropCashEnable;
	private Date      createdTimestamp;
	private String    createdByUsername;
	private String    editedByUsername;
	private Date      editedTimestamp;
	private Integer   flag;
	private String merchantPinCode;
	private String merchantCityName;
	private String merchantDistrictName;
	
	private Integer pgEnable;
	private Integer mposEnable;
	private Integer matmEnable;
	private Integer twoFaEnable;
	
	 private Integer ekycStatusFlag ;
	 private String terminalId ;
	 private Integer terminalIdFlag ;
	 private String     kycType ;
	 private String     ekycState ;
	 private String     ekycCity ;
	 private String     ekycAddressLine1 ;
	 private String     ekycAddressLine2 ;
	 
	 private Integer switch1 ;
	 private Integer switch2 ;
	 private Integer switch3 ;
	 private Integer cwSwitch ;
	 private Integer apSwitch ;
	 private Integer msSwitch ;
	 
	 private Integer offlineKycStatusFlag ;
	 private String offlineKycTerminalId ;
	 private Integer offlineKycTerminalIdFlag ;
	 
	 private Integer aadharPayEkycStatusFlag ;
	 private String aadharPayTerminalId ;
	 private Integer aadharPayTerminalIdFlag ;
	 private String ekycPanNumber ;
	 private String     drivingLicense ;
	 private String     voterId ;
	 
	 
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public String getMerchantPhoneNumber() {
		return merchantPhoneNumber;
	}
	public void setMerchantPhoneNumber(String merchantPhoneNumber) {
		this.merchantPhoneNumber = merchantPhoneNumber;
	}
	public String getMerchantAddress() {
		return merchantAddress;
	}
	public void setMerchantAddress(String merchantAddress) {
		this.merchantAddress = merchantAddress;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getUserPan() {
		return userPan;
	}
	public void setUserPan(String userPan) {
		this.userPan = userPan;
	}
	public String getAadhaarNumber() {
		return aadhaarNumber;
	}
	public void setAadhaarNumber(String aadhaarNumber) {
		this.aadhaarNumber = aadhaarNumber;
	}
	public String getBankAccountName() {
		return bankAccountName;
	}
	public void setBankAccountName(String bankAccountName) {
		this.bankAccountName = bankAccountName;
	}
	public String getUserType() {
		return userType;
	}
	public void setUserType(String userType) {
		this.userType = userType;
	}
	public int getStateId() {
		return stateId;
	}
	public void setStateId(int stateId) {
		this.stateId = stateId;
	}
	public int getCityId() {
		return cityId;
	}
	public void setCityId(int cityId) {
		this.cityId = cityId;
	}
	public String getMerchantLoginPin() {
		return merchantLoginPin;
	}
	public void setMerchantLoginPin(String merchantLoginPin) {
		this.merchantLoginPin = merchantLoginPin;
	}
	public String getCompanyBankAccountNumber() {
		return companyBankAccountNumber;
	}
	public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
		this.companyBankAccountNumber = companyBankAccountNumber;
	}
	public String getCompanyBankBranchName() {
		return companyBankBranchName;
	}
	public void setCompanyBankBranchName(String companyBankBranchName) {
		this.companyBankBranchName = companyBankBranchName;
	}
	public String getCompanyBankName() {
		return companyBankName;
	}
	public void setCompanyBankName(String companyBankName) {
		this.companyBankName = companyBankName;
	}
	public String getCompanyIfscCode() {
		return companyIfscCode;
	}
	public void setCompanyIfscCode(String companyIfscCode) {
		this.companyIfscCode = companyIfscCode;
	}
	public String getCompanyLegalName() {
		return companyLegalName;
	}
	public void setCompanyLegalName(String companyLegalName) {
		this.companyLegalName = companyLegalName;
	}
	public String getCompanyMarketingName() {
		return companyMarketingName;
	}
	public void setCompanyMarketingName(String companyMarketingName) {
		this.companyMarketingName = companyMarketingName;
	}
	public String getDateOfIncorporation() {
		return dateOfIncorporation;
	}
	public void setDateOfIncorporation(String dateOfIncorporation) {
		this.dateOfIncorporation = dateOfIncorporation;
	}
	public String getNoOfTerminals() {
		return noOfTerminals;
	}
	public void setNoOfTerminals(String noOfTerminals) {
		this.noOfTerminals = noOfTerminals;
	}
	public String getGstInNumber() {
		return gstInNumber;
	}
	public void setGstInNumber(String gstInNumber) {
		this.gstInNumber = gstInNumber;
	}
	public Integer getAadharPayEnable() {
		return aadharPayEnable;
	}
	public void setAadharPayEnable(Integer aadharPayEnable) {
		this.aadharPayEnable = aadharPayEnable;
	}
	public Integer getUpiEnable() {
		return upiEnable;
	}
	public void setUpiEnable(Integer upiEnable) {
		this.upiEnable = upiEnable;
	}
	public Integer getUpiQrEnable() {
		return upiQrEnable;
	}
	public void setUpiQrEnable(Integer upiQrEnable) {
		this.upiQrEnable = upiQrEnable;
	}
	public Integer getCashWithdrawEnable() {
		return cashWithdrawEnable;
	}
	public void setCashWithdrawEnable(Integer cashWithdrawEnable) {
		this.cashWithdrawEnable = cashWithdrawEnable;
	}
	public Integer getFundTransferEnable() {
		return fundTransferEnable;
	}
	public void setFundTransferEnable(Integer fundTransferEnable) {
		this.fundTransferEnable = fundTransferEnable;
	}
	public Integer getCashDepositEnable() {
		return cashDepositEnable;
	}
	public void setCashDepositEnable(Integer cashDepositEnable) {
		this.cashDepositEnable = cashDepositEnable;
	}
	public Integer getBalanceEnquiryEnable() {
		return balanceEnquiryEnable;
	}
	public void setBalanceEnquiryEnable(Integer balanceEnquiryEnable) {
		this.balanceEnquiryEnable = balanceEnquiryEnable;
	}
	public Integer getMinistatmentEnable() {
		return ministatmentEnable;
	}
	public void setMinistatmentEnable(Integer ministatmentEnable) {
		this.ministatmentEnable = ministatmentEnable;
	}
	public String getMerchantLogo() {
		return merchantLogo;
	}
	public void setMerchantLogo(String merchantLogo) {
		this.merchantLogo = merchantLogo;
	}
	public String getEkycDocuments() {
		return ekycDocuments;
	}
	public void setEkycDocuments(String ekycDocuments) {
		this.ekycDocuments = ekycDocuments;
	}
	public String getShopAndPanImage() {
		return shopAndPanImage;
	}
	public void setShopAndPanImage(String shopAndPanImage) {
		this.shopAndPanImage = shopAndPanImage;
	}
	public String getCancelledChequeImages() {
		return cancelledChequeImages;
	}
	public void setCancelledChequeImages(String cancelledChequeImages) {
		this.cancelledChequeImages = cancelledChequeImages;
	}
	public int getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(int superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public Integer getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(int activeFlag) {
		this.activeFlag = activeFlag;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	
	
	public Date getTimestamp() {
		return timestamp;
	}
	public void setTimestamp(Date timestamp) {
		this.timestamp = timestamp;
	}
	public String getVerifiedBy() {
		return verifiedBy;
	}
	public void setVerifiedBy(String verifiedBy) {
		this.verifiedBy = verifiedBy;
	}
	public int getApprovedStatus() {
		return approvedStatus;
	}
	public void setApprovedStatus(int approvedStatus) {
		this.approvedStatus = approvedStatus;
	}
	public String getAutomaticBankVerificationDetails() {
		return automaticBankVerificationDetails;
	}
	public void setAutomaticBankVerificationDetails(String automaticBankVerificationDetails) {
		this.automaticBankVerificationDetails = automaticBankVerificationDetails;
	}
	public String getAutomaticPanVerificationDetails() {
		return automaticPanVerificationDetails;
	}
	public void setAutomaticPanVerificationDetails(String automaticPanVerificationDetails) {
		this.automaticPanVerificationDetails = automaticPanVerificationDetails;
	}
	public String getAutomaticAadhaarVerification() {
		return automaticAadhaarVerification;
	}
	public void setAutomaticAadhaarVerification(String automaticAadhaarVerification) {
		this.automaticAadhaarVerification = automaticAadhaarVerification;
	}
	
	public int getCompanyTypeId() {
		return companyTypeId;
	}
	public void setCompanyTypeId(int companyTypeId) {
		this.companyTypeId = companyTypeId;
	}
	
	public Integer getSelfSettlementFlag() {
		return selfSettlementFlag;
	}
	public void setSelfSettlementFlag(Integer selfSettlementFlag) {
		this.selfSettlementFlag = selfSettlementFlag;
	}
	
	
	
	public String getMerchantCityName() {
		return merchantCityName;
	}
	public void setMerchantCityName(String merchantCityName) {
		this.merchantCityName = merchantCityName;
	}
	public int getAutomaticBankVerification() {
		return automaticBankVerification;
	}
	public void setAutomaticBankVerification(int automaticBankVerification) {
		this.automaticBankVerification = automaticBankVerification;
	}
	public int getAutomaticPanVerification() {
		return automaticPanVerification;
	}
	public void setAutomaticPanVerification(int automaticPanVerification) {
		this.automaticPanVerification = automaticPanVerification;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	
	
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	
	
	public Integer getBranchId() {
		return branchId;
	}
	public void setBranchId(Integer branchId) {
		this.branchId = branchId;
	}
	
	public Integer getParentId() {
		return parentId;
	}
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	public String getParentMerchantName() {
		return parentMerchantName;
	}
	public void setParentMerchantName(String parentMerchantName) {
		this.parentMerchantName = parentMerchantName;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	
	
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	
	public Integer getSuperSettlementFlag() {
		return superSettlementFlag;
	}
	public void setSuperSettlementFlag(Integer superSettlementFlag) {
		this.superSettlementFlag = superSettlementFlag;
	}
	public Integer getParentSettlementFlag() {
		return parentSettlementFlag;
	}
	public void setParentSettlementFlag(Integer parentSettlementFlag) {
		this.parentSettlementFlag = parentSettlementFlag;
	}
	
	public Integer getCollectCashEnable() {
		return collectCashEnable;
	}
	public void setCollectCashEnable(Integer collectCashEnable) {
		this.collectCashEnable = collectCashEnable;
	}
	public Integer getDemandSheetEnable() {
		return demandSheetEnable;
	}
	public void setDemandSheetEnable(Integer demandSheetEnable) {
		this.demandSheetEnable = demandSheetEnable;
	}
	public Integer getDropCashEnable() {
		return dropCashEnable;
	}
	public void setDropCashEnable(Integer dropCashEnable) {
		this.dropCashEnable = dropCashEnable;
	}
	public Date getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(Date createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public String getCreatedByUsername() {
		return createdByUsername;
	}
	public void setCreatedByUsername(String createdByUsername) {
		this.createdByUsername = createdByUsername;
	}
	public String getEditedByUsername() {
		return editedByUsername;
	}
	public void setEditedByUsername(String editedByUsername) {
		this.editedByUsername = editedByUsername;
	}
	public Date getEditedTimestamp() {
		return editedTimestamp;
	}
	public void setEditedTimestamp(Date editedTimestamp) {
		this.editedTimestamp = editedTimestamp;
	}
	
	public String getMerchantPinCode() {
		return merchantPinCode;
	}
	public void setMerchantPinCode(String merchantPinCode) {
		this.merchantPinCode = merchantPinCode;
	}
	public String getMerchantDistrictName() {
		return merchantDistrictName;
	}
	public void setMerchantDistrictName(String merchantDistrictName) {
		this.merchantDistrictName = merchantDistrictName;
	}
	
	
	public Integer getPgEnable() {
		return pgEnable;
	}
	public void setPgEnable(Integer pgEnable) {
		this.pgEnable = pgEnable;
	}
	public Integer getMposEnable() {
		return mposEnable;
	}
	public void setMposEnable(Integer mposEnable) {
		this.mposEnable = mposEnable;
	}
	
	
	public Integer getMatmEnable() {
		return matmEnable;
	}
	public void setMatmEnable(Integer matmEnable) {
		this.matmEnable = matmEnable;
	}
	
	public Integer getTwoFaEnable() {
		return twoFaEnable;
	}
	public void setTwoFaEnable(Integer twoFaEnable) {
		this.twoFaEnable = twoFaEnable;
	}
	
	public Integer getUpiIntentEnable() {
		return upiIntentEnable;
	}
	public void setUpiIntentEnable(Integer upiIntentEnable) {
		this.upiIntentEnable = upiIntentEnable;
	}
	
	
	public Integer getEkycStatusFlag() {
		return ekycStatusFlag;
	}
	public void setEkycStatusFlag(Integer ekycStatusFlag) {
		this.ekycStatusFlag = ekycStatusFlag;
	}
	public String getTerminalId() {
		return terminalId;
	}
	public void setTerminalId(String terminalId) {
		this.terminalId = terminalId;
	}
	public Integer getTerminalIdFlag() {
		return terminalIdFlag;
	}
	public void setTerminalIdFlag(Integer terminalIdFlag) {
		this.terminalIdFlag = terminalIdFlag;
	}
	public String getKycType() {
		return kycType;
	}
	public void setKycType(String kycType) {
		this.kycType = kycType;
	}
	public String getEkycState() {
		return ekycState;
	}
	public void setEkycState(String ekycState) {
		this.ekycState = ekycState;
	}
	public String getEkycCity() {
		return ekycCity;
	}
	public void setEkycCity(String ekycCity) {
		this.ekycCity = ekycCity;
	}
	public String getEkycAddressLine1() {
		return ekycAddressLine1;
	}
	public void setEkycAddressLine1(String ekycAddressLine1) {
		this.ekycAddressLine1 = ekycAddressLine1;
	}
	public String getEkycAddressLine2() {
		return ekycAddressLine2;
	}
	public void setEkycAddressLine2(String ekycAddressLine2) {
		this.ekycAddressLine2 = ekycAddressLine2;
	}
	public Integer getSwitch1() {
		return switch1;
	}
	public void setSwitch1(Integer switch1) {
		this.switch1 = switch1;
	}
	public Integer getSwitch2() {
		return switch2;
	}
	public void setSwitch2(Integer switch2) {
		this.switch2 = switch2;
	}
	public Integer getSwitch3() {
		return switch3;
	}
	public void setSwitch3(Integer switch3) {
		this.switch3 = switch3;
	}
	public Integer getCwSwitch() {
		return cwSwitch;
	}
	public void setCwSwitch(Integer cwSwitch) {
		this.cwSwitch = cwSwitch;
	}
	public Integer getApSwitch() {
		return apSwitch;
	}
	public void setApSwitch(Integer apSwitch) {
		this.apSwitch = apSwitch;
	}
	public Integer getMsSwitch() {
		return msSwitch;
	}
	public void setMsSwitch(Integer msSwitch) {
		this.msSwitch = msSwitch;
	}
	public Integer getOfflineKycStatusFlag() {
		return offlineKycStatusFlag;
	}
	public void setOfflineKycStatusFlag(Integer offlineKycStatusFlag) {
		this.offlineKycStatusFlag = offlineKycStatusFlag;
	}
	public String getOfflineKycTerminalId() {
		return offlineKycTerminalId;
	}
	public void setOfflineKycTerminalId(String offlineKycTerminalId) {
		this.offlineKycTerminalId = offlineKycTerminalId;
	}
	public Integer getOfflineKycTerminalIdFlag() {
		return offlineKycTerminalIdFlag;
	}
	public void setOfflineKycTerminalIdFlag(Integer offlineKycTerminalIdFlag) {
		this.offlineKycTerminalIdFlag = offlineKycTerminalIdFlag;
	}
	public Integer getAadharPayEkycStatusFlag() {
		return aadharPayEkycStatusFlag;
	}
	public void setAadharPayEkycStatusFlag(Integer aadharPayEkycStatusFlag) {
		this.aadharPayEkycStatusFlag = aadharPayEkycStatusFlag;
	}
	public String getAadharPayTerminalId() {
		return aadharPayTerminalId;
	}
	public void setAadharPayTerminalId(String aadharPayTerminalId) {
		this.aadharPayTerminalId = aadharPayTerminalId;
	}
	public Integer getAadharPayTerminalIdFlag() {
		return aadharPayTerminalIdFlag;
	}
	public void setAadharPayTerminalIdFlag(Integer aadharPayTerminalIdFlag) {
		this.aadharPayTerminalIdFlag = aadharPayTerminalIdFlag;
	}
	public String getEkycPanNumber() {
		return ekycPanNumber;
	}
	public void setEkycPanNumber(String ekycPanNumber) {
		this.ekycPanNumber = ekycPanNumber;
	}
	public String getDrivingLicense() {
		return drivingLicense;
	}
	public void setDrivingLicense(String drivingLicense) {
		this.drivingLicense = drivingLicense;
	}
	public String getVoterId() {
		return voterId;
	}
	public void setVoterId(String voterId) {
		this.voterId = voterId;
	}
	@Override
	public String toString() {
		return "MerchantMasterModal [merchantName=" + merchantName + ", merchantLoginId=" + merchantLoginId
				+ ", merchantPhoneNumber=" + merchantPhoneNumber + ", merchantAddress=" + merchantAddress + ", emailId="
				+ emailId + ", userPan=" + userPan + ", aadhaarNumber=" + aadhaarNumber + ", bankAccountName="
				+ bankAccountName + ", userType=" + userType + ", stateId=" + stateId + ", cityId=" + cityId
				+ ", merchantLoginPin=" + merchantLoginPin + ", companyBankAccountNumber=" + companyBankAccountNumber
				+ ", companyBankBranchName=" + companyBankBranchName + ", companyBankName=" + companyBankName
				+ ", companyIfscCode=" + companyIfscCode + ", companyLegalName=" + companyLegalName
				+ ", companyMarketingName=" + companyMarketingName + ", dateOfIncorporation=" + dateOfIncorporation
				+ ", noOfTerminals=" + noOfTerminals + ", gstInNumber=" + gstInNumber + ", aadharPayEnable="
				+ aadharPayEnable + ", upiEnable=" + upiEnable + ", upiQrEnable=" + upiQrEnable
				+ ", cashWithdrawEnable=" + cashWithdrawEnable + ", fundTransferEnable=" + fundTransferEnable
				+ ", cashDepositEnable=" + cashDepositEnable + ", balanceEnquiryEnable=" + balanceEnquiryEnable
				+ ", ministatmentEnable=" + ministatmentEnable + ", merchantLogo=" + merchantLogo + ", ekycDocuments="
				+ ekycDocuments + ", shopAndPanImage=" + shopAndPanImage + ", cancelledChequeImages="
				+ cancelledChequeImages + ", superMerchantId=" + superMerchantId + ", id=" + id + ", getMerchantName()="
				+ getMerchantName() + ", getMerchantLoginId()=" + getMerchantLoginId() + ", getMerchantPhoneNumber()="
				+ getMerchantPhoneNumber() + ", getMerchantAddress()=" + getMerchantAddress() + ", getEmailId()="
				+ getEmailId() + ", getUserPan()=" + getUserPan() + ", getAadhaarNumber()=" + getAadhaarNumber()
				+ ", getBankAccountName()=" + getBankAccountName() + ", getUserType()=" + getUserType()
				+ ", getStateId()=" + getStateId() + ", getCityId()=" + getCityId() + ", getMerchantLoginPin()="
				+ getMerchantLoginPin() + ", getCompanyBankAccountNumber()=" + getCompanyBankAccountNumber()
				+ ", getCompanyBankBranchName()=" + getCompanyBankBranchName() + ", getCompanyBankName()="
				+ getCompanyBankName() + ", getCompanyIfscCode()=" + getCompanyIfscCode() + ", getCompanyLegalName()="
				+ getCompanyLegalName() + ", getCompanyMarketingName()=" + getCompanyMarketingName()
				+ ", getDateOfIncorporation()=" + getDateOfIncorporation() + ", getNoOfTerminals()="
				+ getNoOfTerminals() + ", getGstInNumber()=" + getGstInNumber() + ", getAadharPayEnable()="
				+ getAadharPayEnable() + ", getUpiEnable()=" + getUpiEnable() + ", getUpiQrEnable()=" + getUpiQrEnable()
				+ ", getCashWithdrawEnable()=" + getCashWithdrawEnable() + ", getFundTransferEnable()="
				+ getFundTransferEnable() + ", getCashDepositEnable()=" + getCashDepositEnable()
				+ ", getBalanceEnquiryEnable()=" + getBalanceEnquiryEnable() + ", getMinistatmentEnable()="
				+ getMinistatmentEnable() + ", getMerchantLogo()=" + getMerchantLogo() + ", getEkycDocuments()="
				+ getEkycDocuments() + ", getShopAndPanImage()=" + getShopAndPanImage()
				+ ", getCancelledChequeImages()=" + getCancelledChequeImages() + ", getSuperMerchantId()="
				+ getSuperMerchantId() + ", getId()=" + getId() + ", getClass()=" + getClass() + ", hashCode()="
				+ hashCode() + ", toString()=" + super.toString() + "]";
	}
	
	
	
	
	
	
	
	
	   // private Integer    id           ;
	   // private Date       timestamp    ;
	   // private Integer    activeFlag   ;
//	    private String     certificateOfIncorporationImage ;
//	    private String     letterOfDeclarationAuthorizedSignatory ;
	    //private String     termsConditionCheck ;
	   // private String     confirmationCheck ;
	   // private String     ekycStatus   ;
	    //private String     otp          ;
	   // private String     otpValidation ;
	    //private String     companyOrShopPan ;
	    //private String     remarks      ;
	    //private String     referenceNumber ;
	   // private String     verifiedBy   ;
	    //private Date       submitedTimestamp ;
	    //private Date       varificationTimesatmp ;
	    //private Integer    approvedStatus ;
	    //private Date       serverTimesatmp ;
	    //private Date       activationTimestamp ;
	    //private String     additionalDocuments ;
	    //private Date       additionalDocumentsAddedTimestamp ;
	    //private String     additionalDocumentsRemarks ;
	    //private Integer    automaticBankVerification ;
	    //private String     automaticBankVerificationDetails ;
	    //private Integer    automaticPanVerification ;
	    //private String     automaticPanVerificationDetails ;
	   // private Integer    automaticAadhaarVerification ;
	    //private String     automaticAadhaarVerificationDetails ;
//	    private Integer    parentId     ;
//        private CityMaster cityMaster  ;
//        private SuperMerchantMaster superMerchantMaster;
//	    private CompanyTypeMasterData companyTypeMasterData;
//	    //private List<MerchantTransactionLimitData> listOfMerchantTransactionLimitData;
//	    private StateMaster stateMaster ;
	    
	    

}
package com.apptmyz.fpcontrolpanel.data;



public class MerchantModel {
	
	private String     merchantLoginId ;
    private String     merchantLoginPin ;
    private String     merchantName ;
    private MerchantAddress     merchantAddress ;
    private String merchantBranch;
    private String     merchantPhoneNumber ;
    private String     companyLegalName ;
    private String     companyMarketingName ;
    private Kyc kyc;
    private Settlement settlement;
    private String emailId;
    private String shopAndPanImage;
    private String cancellationCheckImages;
    private String ekycDocuments;
    private String merchantPinCode;
    private String tan;
    private int supermerchantId;
    private int activeFlag;
    private String status;
    private String remarks;
    private Integer flag;
    private int merchantId;
    private String merchantCityName;
    private String merchantDistrictName;
    public int getMerchantId() {
 		return merchantId;
 	}

 	public void setMerchantId(int merchantId) {
 		this.merchantId = merchantId;
 	}
	public String getMerchantPinCode() {
		return merchantPinCode;
	}

	public void setMerchantPinCode(String merchantPinCode) {
		this.merchantPinCode = merchantPinCode;
	}

	public String getTan() {
		return tan;
	}

	public void setTan(String tan) {
		this.tan = tan;
	}

	public String getRemarks() {
		return remarks;
	}

	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}

	public String getStatus() {
		return status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	public int getActiveFlag() {
		return activeFlag;
	}

	public void setActiveFlag(int activeFlag) {
		this.activeFlag = activeFlag;
	}

	public int getSupermerchantId() {
		return supermerchantId;
	}

	public MerchantAddress getMerchantAddress() {
		return merchantAddress;
	}

	public void setMerchantAddress(MerchantAddress merchantAddress) {
		this.merchantAddress = merchantAddress;
	}

	public String getCompanyLegalName() {
		return companyLegalName;
	}

	public void setCompanyLegalName(String companyLegalName) {
		this.companyLegalName = companyLegalName;
	}

	public String getCompanyMarketingName() {
		return companyMarketingName;
	}

	public void setCompanyMarketingName(String companyMarketingName) {
		this.companyMarketingName = companyMarketingName;
	}

	public Kyc getKyc() {
		return kyc;
	}

	public void setKyc(Kyc kyc) {
		this.kyc = kyc;
	}

	public Settlement getSettlement() {
		return settlement;
	}

	public void setSettlement(Settlement settlement) {
		this.settlement = settlement;
	}

	public void setSupermerchantId(int supermerchantId) {
		this.supermerchantId = supermerchantId;
	}

	public String getMerchantLoginId() {
		return merchantLoginId;
	}

	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}

	public String getMerchantLoginPin() {
		return merchantLoginPin;
	}

	public void setMerchantLoginPin(String merchantLoginPin) {
		this.merchantLoginPin = merchantLoginPin;
	}

	public String getMerchantName() {
		return merchantName;
	}

	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}

	
	public String getMerchantPhoneNumber() {
		return merchantPhoneNumber;
	}

	public void setMerchantPhoneNumber(String merchantPhoneNumber) {
		this.merchantPhoneNumber = merchantPhoneNumber;
	}

	public String getMerchantBranch() {
		return merchantBranch;
	}

	public void setMerchantBranch(String merchantBranch) {
		this.merchantBranch = merchantBranch;
	}

	public String getEmailId() {
		return emailId;
	}

	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}

	public String getShopAndPanImage() {
		return shopAndPanImage;
	}

	public void setShopAndPanImage(String shopAndPanImage) {
		this.shopAndPanImage = shopAndPanImage;
	}

	public String getCancellationCheckImages() {
		return cancellationCheckImages;
	}

	public void setCancellationCheckImages(String cancellationCheckImages) {
		this.cancellationCheckImages = cancellationCheckImages;
	}

	public String getEkycDocuments() {
		return ekycDocuments;
	}

	public void setEkycDocuments(String ekycDocuments) {
		this.ekycDocuments = ekycDocuments;
	}

	public Integer getFlag() {
		return flag;
	}

	public void setFlag(Integer flag) {
		this.flag = flag;
	}

	public String getMerchantCityName() {
		return merchantCityName;
	}

	public void setMerchantCityName(String merchantCityName) {
		this.merchantCityName = merchantCityName;
	}

	public String getMerchantDistrictName() {
		return merchantDistrictName;
	}

	public void setMerchantDistrictName(String merchantDistrictName) {
		this.merchantDistrictName = merchantDistrictName;
	}


}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantOnboardingExcel {
	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
	
	
	

	
}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantOnBoardingResponseModel {

	private String branchLoginId;
	private String branchLoginPassword;
	private String branchName;
	private String branchAddress;
	private String branchPhoneNumber;
	private String emailId;
	private String groupNumber;
	private String merchantLoginId;
	private String merchantLoginPassword;
	private String merchantName;
	private String merchantAddress;
	private String merchantPhoneNumber;
	private String merchantPan;
	private String merchantAadhaarNumber;
	private String superMerchantId;
	private String remarks;
	private String status;
	private String aadharPayEnable;
	private String upiEnable;
	private String upiQrEnable;
	private String cashwithdrawalEnable;
	private String cashdepositEnable;
	private String fundTransferEnable;
	private String balanceInquiryEnable;
	private String ministatementEnable;
	private String collectCashEnable;
	private String demandSheetEnable;
	private String dropCashEnable;
	private String pgEnable;
	private String mposEnable;
	public String getBranchLoginId() {
		return branchLoginId;
	}
	public void setBranchLoginId(String branchLoginId) {
		this.branchLoginId = branchLoginId;
	}
	public String getBranchLoginPassword() {
		return branchLoginPassword;
	}
	public void setBranchLoginPassword(String branchLoginPassword) {
		this.branchLoginPassword = branchLoginPassword;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	public String getBranchAddress() {
		return branchAddress;
	}
	public void setBranchAddress(String branchAddress) {
		this.branchAddress = branchAddress;
	}
	
	public String getBranchPhoneNumber() {
		return branchPhoneNumber;
	}
	public void setBranchPhoneNumber(String branchPhoneNumber) {
		this.branchPhoneNumber = branchPhoneNumber;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getGroupNumber() {
		return groupNumber;
	}
	public void setGroupNumber(String groupNumber) {
		this.groupNumber = groupNumber;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public String getMerchantLoginPassword() {
		return merchantLoginPassword;
	}
	public void setMerchantLoginPassword(String merchantLoginPassword) {
		this.merchantLoginPassword = merchantLoginPassword;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getMerchantAddress() {
		return merchantAddress;
	}
	public void setMerchantAddress(String merchantAddress) {
		this.merchantAddress = merchantAddress;
	}
	public String getMerchantPhoneNumber() {
		return merchantPhoneNumber;
	}
	public void setMerchantPhoneNumber(String merchantPhoneNumber) {
		this.merchantPhoneNumber = merchantPhoneNumber;
	}
	public String getMerchantPan() {
		return merchantPan;
	}
	public void setMerchantPan(String merchantPan) {
		this.merchantPan = merchantPan;
	}
	public String getMerchantAadhaarNumber() {
		return merchantAadhaarNumber;
	}
	public void setMerchantAadhaarNumber(String merchantAadhaarNumber) {
		this.merchantAadhaarNumber = merchantAadhaarNumber;
	}
	public String getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(String superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getAadharPayEnable() {
		return aadharPayEnable;
	}
	public void setAadharPayEnable(String aadharPayEnable) {
		this.aadharPayEnable = aadharPayEnable;
	}
	public String getUpiEnable() {
		return upiEnable;
	}
	public void setUpiEnable(String upiEnable) {
		this.upiEnable = upiEnable;
	}
	public String getUpiQrEnable() {
		return upiQrEnable;
	}
	public void setUpiQrEnable(String upiQrEnable) {
		this.upiQrEnable = upiQrEnable;
	}
	public String getCashwithdrawalEnable() {
		return cashwithdrawalEnable;
	}
	public void setCashwithdrawalEnable(String cashwithdrawalEnable) {
		this.cashwithdrawalEnable = cashwithdrawalEnable;
	}
	public String getCashdepositEnable() {
		return cashdepositEnable;
	}
	public void setCashdepositEnable(String cashdepositEnable) {
		this.cashdepositEnable = cashdepositEnable;
	}
	public String getFundTransferEnable() {
		return fundTransferEnable;
	}
	public void setFundTransferEnable(String fundTransferEnable) {
		this.fundTransferEnable = fundTransferEnable;
	}
	public String getBalanceInquiryEnable() {
		return balanceInquiryEnable;
	}
	public void setBalanceInquiryEnable(String balanceInquiryEnable) {
		this.balanceInquiryEnable = balanceInquiryEnable;
	}
	public String getMinistatementEnable() {
		return ministatementEnable;
	}
	public void setMinistatementEnable(String ministatementEnable) {
		this.ministatementEnable = ministatementEnable;
	}
	public String getCollectCashEnable() {
		return collectCashEnable;
	}
	public void setCollectCashEnable(String collectCashEnable) {
		this.collectCashEnable = collectCashEnable;
	}
	public String getDemandSheetEnable() {
		return demandSheetEnable;
	}
	public void setDemandSheetEnable(String demandSheetEnable) {
		this.demandSheetEnable = demandSheetEnable;
	}
	public String getDropCashEnable() {
		return dropCashEnable;
	}
	public void setDropCashEnable(String dropCashEnable) {
		this.dropCashEnable = dropCashEnable;
	}
	public String getPgEnable() {
		return pgEnable;
	}
	public void setPgEnable(String pgEnable) {
		this.pgEnable = pgEnable;
	}
	public String getMposEnable() {
		return mposEnable;
	}
	public void setMposEnable(String mposEnable) {
		this.mposEnable = mposEnable;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantReportDataModel 
{
	
	private String merchantName;
	private String merchantState;
	private String merchantPhoneNumber;
	private String merchantUserPan;
	private String merchantPinCode;
	private String merchantAddress;
	
	private String accountNumber;
	private String gstInNumber;
	private String merchantFranchiseId;
	private String mappedTo;
	private String emailId;
	private String purpose;
	private String dailyTransactionLimit;
	private String mcc;
	private String currentSavingsAccNumber;
	private String ifsc;
	private String vendorCode;
	private String mdr;
	private String remarks;

	private String superMerchantName;
	private Integer merchantId;
	private String merchantLoginId;
	
	private String status;
	private String tan;
	
	
	
	
	
	
	
	public String getTan() {
		return tan;
	}
	public void setTan(String tan) {
		this.tan = tan;
	}
	public String getVendorCode() {
		return vendorCode;
	}
	public void setVendorCode(String vendorCode) {
		this.vendorCode = vendorCode;
	}
	public String getMdr() {
		return mdr;
	}
	public void setMdr(String mdr) {
		this.mdr = mdr;
	}
	public String getGstInNumber() {
		return gstInNumber;
	}
	public void setGstInNumber(String gstInNumber) {
		this.gstInNumber = gstInNumber;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getMerchantState() {
		return merchantState;
	}
	public void setMerchantState(String merchantState) {
		this.merchantState = merchantState;
	}
	public String getMerchantPhoneNumber() {
		return merchantPhoneNumber;
	}
	public void setMerchantPhoneNumber(String merchantPhoneNumber) {
		this.merchantPhoneNumber = merchantPhoneNumber;
	}
	public String getMerchantUserPan() {
		return merchantUserPan;
	}
	public void setMerchantUserPan(String merchantUserPan) {
		this.merchantUserPan = merchantUserPan;
	}
	public String getMerchantPinCode() {
		return merchantPinCode;
	}
	public void setMerchantPinCode(String merchantPinCode) {
		this.merchantPinCode = merchantPinCode;
	}
	public String getMerchantAddress() {
		return merchantAddress;
	}
	public void setMerchantAddress(String merchantAddress) {
		this.merchantAddress = merchantAddress;
	}
	public String getAccountNumber() {
		return accountNumber;
	}
	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}
	public String getMerchantFranchiseId() {
		return merchantFranchiseId;
	}
	public void setMerchantFranchiseId(String merchantFranchiseId) {
		this.merchantFranchiseId = merchantFranchiseId;
	}
	
	public String getMappedTo() {
		return mappedTo;
	}
	public void setMappedTo(String mappedTo) {
		this.mappedTo = mappedTo;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getPurpose() {
		return purpose;
	}
	public void setPurpose(String purpose) {
		this.purpose = purpose;
	}
	public String getDailyTransactionLimit() {
		return dailyTransactionLimit;
	}
	public void setDailyTransactionLimit(String dailyTransactionLimit) {
		this.dailyTransactionLimit = dailyTransactionLimit;
	}
	public String getMcc() {
		return mcc;
	}
	public void setMcc(String mcc) {
		this.mcc = mcc;
	}
	public String getCurrentSavingsAccNumber() {
		return currentSavingsAccNumber;
	}
	public void setCurrentSavingsAccNumber(String currentSavingsAccNumber) {
		this.currentSavingsAccNumber = currentSavingsAccNumber;
	}
	public String getIfsc() {
		return ifsc;
	}
	public void setIfsc(String ifsc) {
		this.ifsc = ifsc;
	}
	
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantSettlEnableLimits {
	private Integer merchantId;
	private String merchantLoginId;
	private Integer superMerchantId;
	private Integer parentId;
	private Integer neftFlag;
	private Integer impsFlag;
	private Integer rtgsFlag;
	private Double perTxnLimit;
	private Double perDayLimit;
	private String remarks;
	private Integer flag;
	
	public Double getPerTxnLimit() {
		return perTxnLimit;
	}
	public void setPerTxnLimit(Double perTxnLimit) {
		this.perTxnLimit = perTxnLimit;
	}
	public Double getPerDayLimit() {
		return perDayLimit;
	}
	public void setPerDayLimit(Double perDayLimit) {
		this.perDayLimit = perDayLimit;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public Integer getParentId() {
		return parentId;
	}
	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}
	public Integer getNeftFlag() {
		return neftFlag;
	}
	public void setNeftFlag(Integer neftFlag) {
		this.neftFlag = neftFlag;
	}
	public Integer getImpsFlag() {
		return impsFlag;
	}
	public void setImpsFlag(Integer impsFlag) {
		this.impsFlag = impsFlag;
	}
	public Integer getRtgsFlag() {
		return rtgsFlag;
	}
	public void setRtgsFlag(Integer rtgsFlag) {
		this.rtgsFlag = rtgsFlag;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	
	


}
package com.apptmyz.fpcontrolpanel.data;

public class MerchantTransactionDataModel {
	
	private String merchantId;
	private String merchantName;
	private String merchantLoginId;
	private String product;
	private String responseRRN;
	private String bankSwitch;
	private String requestedTimestamp;
	private String transactionAmount; 
	private String statusCode;
	private String aggregatorName;
	private String merchantTxnId;
	private String IMEI; 
	private String latLong;
	private String aadhaarCustomer; 
	private String issuingBank;
	private String errorMsg;
	private String tid;
	public String getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(String merchantId) {
		this.merchantId = merchantId;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public String getProduct() {
		return product;
	}
	public void setProduct(String product) {
		this.product = product;
	}
	public String getResponseRRN() {
		return responseRRN;
	}
	public void setResponseRRN(String responseRRN) {
		this.responseRRN = responseRRN;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getRequestedTimestamp() {
		return requestedTimestamp;
	}
	public void setRequestedTimestamp(String requestedTimestamp) {
		this.requestedTimestamp = requestedTimestamp;
	}
	public String getTransactionAmount() {
		return transactionAmount;
	}
	public void setTransactionAmount(String transactionAmount) {
		this.transactionAmount = transactionAmount;
	}
	public String getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(String statusCode) {
		this.statusCode = statusCode;
	}
	public String getAggregatorName() {
		return aggregatorName;
	}
	public void setAggregatorName(String aggregatorName) {
		this.aggregatorName = aggregatorName;
	}
	public String getMerchantTxnId() {
		return merchantTxnId;
	}
	public void setMerchantTxnId(String merchantTxnId) {
		this.merchantTxnId = merchantTxnId;
	}
	public String getIMEI() {
		return IMEI;
	}
	public void setIMEI(String iMEI) {
		IMEI = iMEI;
	}
	public String getLatLong() {
		return latLong;
	}
	public void setLatLong(String latLong) {
		this.latLong = latLong;
	}
	public String getAadhaarCustomer() {
		return aadhaarCustomer;
	}
	public void setAadhaarCustomer(String aadhaarCustomer) {
		this.aadhaarCustomer = aadhaarCustomer;
	}
	public String getIssuingBank() {
		return issuingBank;
	}
	public void setIssuingBank(String issuingBank) {
		this.issuingBank = issuingBank;
	}
	public String getErrorMsg() {
		return errorMsg;
	}
	public void setErrorMsg(String errorMsg) {
		this.errorMsg = errorMsg;
	}
	public String getTid() {
		return tid;
	}
	public void setTid(String tid) {
		this.tid = tid;
	}
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;



public class OneOffSettlementInfoDataModel {
	private Integer    id           ;
    private String     settlementTo ;
    private String     companyBankAccountName ;
    private String     companyIfscCode ;
    private String     companyBankAccountNumber ;
    private Integer    primaryKeyId ;
    private Date       requestedTimestamp ;
    private String     requestedByUsername ;
    private Double     amount       ;
    private String     requestedByIpaddress ;
    private Integer    requestFlag  ;
    private String     imagePath    ;
    private String     typeOfTransaction ;
    private String     approvedByUsername ;
    private Date       approvedTimestamp ;
    private String     approvedByIpaddress ;
    private Integer    advanceSettlementFlag ;
    private Double     advanceSettlementAmount ;
    private Integer    approvedFlag ;
    private Integer    rejectedFlag;
    private String     rejectedByUsername ;
    private Date       rejectedTimestamp ;
    private String     remarks;
    private String     fileName;
    private String     filePath;
    private String     fileReferenceNumber;
    private String     emailId;
    private String     mobileNumber;
    private String     narration;
    private String  accountNumber;
    private String  serviceType;
	private String     status;
    private String     statusMessage;
    private Date       statusUpdatedTimestamp;
    private String     cmsNumber;
    private String beneCode;
    private String settlementType;
    
    public String getFileReferenceNumber() {
		return fileReferenceNumber;
	}
	public void setFileReferenceNumber(String fileReferenceNumber) {
		this.fileReferenceNumber = fileReferenceNumber;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getMobileNumber() {
		return mobileNumber;
	}
	public void setMobileNumber(String mobileNumber) {
		this.mobileNumber = mobileNumber;
	}
	public String getNarration() {
		return narration;
	}
	public void setNarration(String narration) {
		this.narration = narration;
	}
	public String getFileName() {
		return fileName;
	}
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}
	public String getFilePath() {
		return filePath;
	}
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getSettlementTo() {
		return settlementTo;
	}
	public void setSettlementTo(String settlementTo) {
		this.settlementTo = settlementTo;
	}
	public String getCompanyBankAccountName() {
		return companyBankAccountName;
	}
	public void setCompanyBankAccountName(String companyBankAccountName) {
		this.companyBankAccountName = companyBankAccountName;
	}
	public String getCompanyIfscCode() {
		return companyIfscCode;
	}
	public void setCompanyIfscCode(String companyIfscCode) {
		this.companyIfscCode = companyIfscCode;
	}
	public String getCompanyBankAccountNumber() {
		return companyBankAccountNumber;
	}
	public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
		this.companyBankAccountNumber = companyBankAccountNumber;
	}
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public Date getRequestedTimestamp() {
		return requestedTimestamp;
	}
	public void setRequestedTimestamp(Date requestedTimestamp) {
		this.requestedTimestamp = requestedTimestamp;
	}
	public String getRequestedByUsername() {
		return requestedByUsername;
	}
	public void setRequestedByUsername(String requestedByUsername) {
		this.requestedByUsername = requestedByUsername;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public String getRequestedByIpaddress() {
		return requestedByIpaddress;
	}
	public void setRequestedByIpaddress(String requestedByIpaddress) {
		this.requestedByIpaddress = requestedByIpaddress;
	}
	public Integer getRequestFlag() {
		return requestFlag;
	}
	public void setRequestFlag(Integer requestFlag) {
		this.requestFlag = requestFlag;
	}
	public String getImagePath() {
		return imagePath;
	}
	public void setImagePath(String imagePath) {
		this.imagePath = imagePath;
	}
	public String getTypeOfTransaction() {
		return typeOfTransaction;
	}
	public void setTypeOfTransaction(String typeOfTransaction) {
		this.typeOfTransaction = typeOfTransaction;
	}
	public String getApprovedByUsername() {
		return approvedByUsername;
	}
	public void setApprovedByUsername(String approvedByUsername) {
		this.approvedByUsername = approvedByUsername;
	}
	public Date getApprovedTimestamp() {
		return approvedTimestamp;
	}
	public void setApprovedTimestamp(Date approvedTimestamp) {
		this.approvedTimestamp = approvedTimestamp;
	}
	public String getApprovedByIpaddress() {
		return approvedByIpaddress;
	}
	public void setApprovedByIpaddress(String approvedByIpaddress) {
		this.approvedByIpaddress = approvedByIpaddress;
	}
	public Integer getAdvanceSettlementFlag() {
		return advanceSettlementFlag;
	}
	public void setAdvanceSettlementFlag(Integer advanceSettlementFlag) {
		this.advanceSettlementFlag = advanceSettlementFlag;
	}
	public Double getAdvanceSettlementAmount() {
		return advanceSettlementAmount;
	}
	public void setAdvanceSettlementAmount(Double advanceSettlementAmount) {
		this.advanceSettlementAmount = advanceSettlementAmount;
	}
	public Integer getApprovedFlag() {
		return approvedFlag;
	}
	public void setApprovedFlag(Integer approvedFlag) {
		this.approvedFlag = approvedFlag;
	}
	public Integer getRejectedFlag() {
		return rejectedFlag;
	}
	public void setRejectedFlag(Integer rejectedFlag) {
		this.rejectedFlag = rejectedFlag;
	}
	public String getRejectedByUsername() {
		return rejectedByUsername;
	}
	public void setRejectedByUsername(String rejectedByUsername) {
		this.rejectedByUsername = rejectedByUsername;
	}
	public Date getRejectedTimestamp() {
		return rejectedTimestamp;
	}
	public void setRejectedTimestamp(Date rejectedTimestamp) {
		this.rejectedTimestamp = rejectedTimestamp;
	}
	public String getAccountNumber() {
		return accountNumber;
	}
	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getStatusMessage() {
		return statusMessage;
	}
	public void setStatusMessage(String statusMessage) {
		this.statusMessage = statusMessage;
	}
	public Date getStatusUpdatedTimestamp() {
		return statusUpdatedTimestamp;
	}
	public void setStatusUpdatedTimestamp(Date statusUpdatedTimestamp) {
		this.statusUpdatedTimestamp = statusUpdatedTimestamp;
	}
	public String getCmsNumber() {
		return cmsNumber;
	}
	public void setCmsNumber(String cmsNumber) {
		this.cmsNumber = cmsNumber;
	}
	public String getBeneCode() {
		return beneCode;
	}
	public void setBeneCode(String beneCode) {
		this.beneCode = beneCode;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public String getSettlementType() {
		return settlementType;
	}
	public void setSettlementType(String settlementType) {
		this.settlementType = settlementType;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ParentMerchantCommConditionModel {
	private Integer parentMerchantId;
	private String parentMerchantName;
	private double minAmount;
	private double merchantPercentage;
	private String merchantType;
	private Integer id;
	
	
	public Integer getParentMerchantId() {
		return parentMerchantId;
	}
	public void setParentMerchantId(Integer parentMerchantId) {
		this.parentMerchantId = parentMerchantId;
	}
	public String getParentMerchantName() {
		return parentMerchantName;
	}
	public void setParentMerchantName(String parentMerchantName) {
		this.parentMerchantName = parentMerchantName;
	}
	public double getMinAmount() {
		return minAmount;
	}
	public void setMinAmount(double minAmount) {
		this.minAmount = minAmount;
	}
	public double getMerchantPercentage() {
		return merchantPercentage;
	}
	public void setMerchantPercentage(double merchantPercentage) {
		this.merchantPercentage = merchantPercentage;
	}
	public String getMerchantType() {
		return merchantType;
	}
	public void setMerchantType(String merchantType) {
		this.merchantType = merchantType;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class ParentSuperMerchantModel {

	private String id;
	private String organization;
	private String name;
	private String selfSettleFlag;
	private String instantSettleFlag;
	private String unqIdOrganization;
	
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getOrganization() {
		return organization;
	}
	public void setOrganization(String organization) {
		this.organization = organization;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getSelfSettleFlag() {
		return selfSettleFlag;
	}
	public void setSelfSettleFlag(String selfSettleFlag) {
		this.selfSettleFlag = selfSettleFlag;
	}
	public String getInstantSettleFlag() {
		return instantSettleFlag;
	}
	public void setInstantSettleFlag(String instantSettleFlag) {
		this.instantSettleFlag = instantSettleFlag;
	}
	public String getUnqIdOrganization() {
		return unqIdOrganization;
	}
	public void setUnqIdOrganization(String unqIdOrganization) {
		this.unqIdOrganization = unqIdOrganization;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class PaytmFundTransferControlPanelData {

	private String amount;
	private String accountNumber;
	private String narration;
	
	public String getAmount() {
		return amount;
	}
	public void setAmount(String amount) {
		this.amount = amount;
	}
	public String getAccountNumber() {
		return accountNumber;
	}
	public void setAccountNumber(String accountNumber) {
		this.accountNumber = accountNumber;
	}
	public String getNarration() {
		return narration;
	}
	public void setNarration(String narration) {
		this.narration = narration;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ProxyRequestModel {
	
		private int id;
		private String requestType;
		private String uri;
		private String baseUrlUat;
		private String baseUrlProd;
		private int env;
		
		public int getId() {
			return id;
		}
		public void setId(int id) {
			this.id = id;
		}
		public String getRequestType() {
			return requestType;
		}
		public void setRequestType(String requestType) {
			this.requestType = requestType;
		}
		public String getUri() {
			return uri;
		}
		public void setUri(String uri) {
			this.uri = uri;
		}
		public String getBaseUrlUat() {
			return baseUrlUat;
		}
		public void setBaseUrlUat(String baseUrlUat) {
			this.baseUrlUat = baseUrlUat;
		}
		public String getBaseUrlProd() {
			return baseUrlProd;
		}
		public void setBaseUrlProd(String baseUrlProd) {
			this.baseUrlProd = baseUrlProd;
		}
		public int getEnv() {
			return env;
		}
		public void setEnv(int env) {
			this.env = env;
		}
		
		@Override
		public String toString() {
			return "ProxyRequestModel [id=" + id + ", requestType=" + requestType + ", uri=" + uri + ", baseUrlUat="
					+ baseUrlUat + ", baseUrlProd=" + baseUrlProd + ", env=" + env + "]";
		}
		
}
package com.apptmyz.fpcontrolpanel.data;

public class RequestOtpDetails {
	private String fingpayTxnId;
	private String productName;
	private String customerName;
	private String phoneNumber;
	private String emailId;
	private String remarks;
	private Integer serviceType;
	private Integer channelType;
	private String merchantId;
	private String superMerchantId;
	private String parentId;
	
	public String getFingpayTxnId() {
		return fingpayTxnId;
	}
	public void setFingpayTxnId(String fingpayTxnId) {
		this.fingpayTxnId = fingpayTxnId;
	}
	public String getProductName() {
		return productName;
	}
	public void setProductName(String productName) {
		this.productName = productName;
	}
	public String getCustomerName() {
		return customerName;
	}
	public void setCustomerName(String customerName) {
		this.customerName = customerName;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Integer getServiceType() {
		return serviceType;
	}
	public void setServiceType(Integer serviceType) {
		this.serviceType = serviceType;
	}
	public Integer getChannelType() {
		return channelType;
	}
	public void setChannelType(Integer channelType) {
		this.channelType = channelType;
	}
	public String getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(String merchantId) {
		this.merchantId = merchantId;
	}
	public String getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(String superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getParentId() {
		return parentId;
	}
	public void setParentId(String parentId) {
		this.parentId = parentId;
	}
	


}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class RrnResponseCodeTerminalId {
	
	public String     product;
    public String     bankSwitch ;
    public String     superMerchantName ;
    public String     parentMerchantName;
    public Date  requestedTimestamp ;
    public Double     transactionAmount ;
    public String     responseCode ;
    public String     responseRrn  ;
    public String     stan         ;
    public String     bankName;
    public String     fingpayTransactionId ;
    public String     cardAcceptorTerminalIdentification ;
    public String     merchantTransactionId ;
    public Date  resposeTimestamp ;
    public Integer    merchantId   ;
    public String     adhaarNumber ;
    public String     deviceImei   ;
    public String     merchant_name;
    public String     merchant_login_id;
    public Double     latitude;
    public Double     longitude;
    public String     lastUsedHash;

    public String getProduct() {
        return product;
    }

    public void setProduct(String product) {
        this.product = product;
    }

    public String getBankSwitch() {
        return bankSwitch;
    }

    public void setBankSwitch(String bankSwitch) {
        this.bankSwitch = bankSwitch;
    }

    public String getSuperMerchantName() {
        return superMerchantName;
    }

    public void setSuperMerchantName(String superMerchantName) {
        this.superMerchantName = superMerchantName;
    }

    public String getParentMerchantName() {
        return parentMerchantName;
    }

    public void setParentMerchantName(String parentMerchantName) {
        this.parentMerchantName = parentMerchantName;
    }

	public Date getRequestedTimestamp() {
		return requestedTimestamp;
	}

	public void setRequestedTimestamp(Date requestedTimestamp) {
		this.requestedTimestamp = requestedTimestamp;
	}

	public Date getResposeTimestamp() {
		return resposeTimestamp;
	}

	public void setResposeTimestamp(Date resposeTimestamp) {
		this.resposeTimestamp = resposeTimestamp;
	}

	public Double getTransactionAmount() {
        return transactionAmount;
    }

    public void setTransactionAmount(Double transactionAmount) {
        this.transactionAmount = transactionAmount;
    }

    public String getResponseCode() {
        return responseCode;
    }

    public void setResponseCode(String responseCode) {
        this.responseCode = responseCode;
    }

    public String getResponseRrn() {
        return responseRrn;
    }

    public void setResponseRrn(String responseRrn) {
        this.responseRrn = responseRrn;
    }

    public String getStan() {
        return stan;
    }

    public void setStan(String stan) {
        this.stan = stan;
    }

    public String getBankName() {
        return bankName;
    }

    public void setBankName(String bankName) {
        this.bankName = bankName;
    }

    public String getFingpayTransactionId() {
        return fingpayTransactionId;
    }

    public void setFingpayTransactionId(String fingpayTransactionId) {
        this.fingpayTransactionId = fingpayTransactionId;
    }

    public String getCardAcceptorTerminalIdentification() {
        return cardAcceptorTerminalIdentification;
    }

    public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
        this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
    }

    public String getMerchantTransactionId() {
        return merchantTransactionId;
    }

    public void setMerchantTransactionId(String merchantTransactionId) {
        this.merchantTransactionId = merchantTransactionId;
    }

   

    public Integer getMerchantId() {
        return merchantId;
    }

    public void setMerchantId(Integer merchantId) {
        this.merchantId = merchantId;
    }

    public String getAdhaarNumber() {
        return adhaarNumber;
    }

    public void setAdhaarNumber(String adhaarNumber) {
        this.adhaarNumber = adhaarNumber;
    }

    public String getDeviceImei() {
        return deviceImei;
    }

    public void setDeviceImei(String deviceImei) {
        this.deviceImei = deviceImei;
    }

    public String getMerchant_name() {
        return merchant_name;
    }

    public void setMerchant_name(String merchant_name) {
        this.merchant_name = merchant_name;
    }

    public String getMerchant_login_id() {
        return merchant_login_id;
    }

    public void setMerchant_login_id(String merchant_login_id) {
        this.merchant_login_id = merchant_login_id;
    }
    
    

    public Double getLatitude() {
		return latitude;
	}

	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}

	public Double getLongitude() {
		return longitude;
	}

	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}

	public String getLastUsedHash() {
		return lastUsedHash;
	}

	public void setLastUsedHash(String lastUsedHash) {
		this.lastUsedHash = lastUsedHash;
	}

	@Override
    public String toString() {
        return "TransactionSearchByRRNResult{" +
                "bankSwitch='" + bankSwitch + '\'' +
                ", superMerchantName='" + superMerchantName + '\'' +
                ", parentMerchantName='" + parentMerchantName + '\'' +
                ", requestedTimestamp=" + requestedTimestamp +
                ", transactionAmount=" + transactionAmount +
                ", responseCode='" + responseCode + '\'' +
                ", responseRrn='" + responseRrn + '\'' +
                ", stan='" + stan + '\'' +
                ", bankName='" + bankName + '\'' +
                ", fingpayTransactionId='" + fingpayTransactionId + '\'' +
                ", cardAcceptorTerminalIdentification='" + cardAcceptorTerminalIdentification + '\'' +
                ", merchantTransactionId='" + merchantTransactionId + '\'' +
                ", resposeTimestamp=" + resposeTimestamp +
                ", merchantId=" + merchantId +
                ", adhaarNumber='" + adhaarNumber + '\'' +
                ", deviceImei='" + deviceImei + '\'' +
                ", merchant_name='" + merchant_name + '\'' +
                ", latitude='" + latitude + '\'' +
                 ", longitude='" + longitude + '\'' +
                  ", lastUsedHash='" + lastUsedHash + '\'' +
                '}';
    }
	
}
package com.apptmyz.fpcontrolpanel.data;

public class RRNSearchRequestModel {

	private String rrn;
	private String bankSwitch;
	
	public String getRrn() {
		return rrn;
	}
	public void setRrn(String rrn) {
		this.rrn = rrn;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class ServiceConfigDataModel {

    private String     serviceCode  ;
    private Integer    activeFlag   ;
    private Date       createdTimestamp ;
    private String     remarks      ;
    private String     serviceName  ;
    private Date       updatedTimestamp ;
    private String     updatedByUsername ;
    
	public String getServiceCode() {
		return serviceCode;
	}
	public void setServiceCode(String serviceCode) {
		this.serviceCode = serviceCode;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public Date getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(Date createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getServiceName() {
		return serviceName;
	}
	public void setServiceName(String serviceName) {
		this.serviceName = serviceName;
	}
	public Date getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(Date updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	public String getUpdatedByUsername() {
		return updatedByUsername;
	}
	public void setUpdatedByUsername(String updatedByUsername) {
		this.updatedByUsername = updatedByUsername;
	}
    
}
package com.apptmyz.fpcontrolpanel.data;

public class SessionData {
	private String sessionId;
	private int id;
	private int activeFlag;
	private String merchantAddress;
	private String merchantLogo;
	private String merchantName;
	private int merchantPin;
	private String merchantId;
	private Integer superMerchantId;
	private Integer microAtmEnable;
	private Integer parentId;
	private String username;
	
	public String getSessionId() {
		return sessionId;
	}

	public void setSessionId(String sessionId) {
		this.sessionId = sessionId;
	}

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public int getActiveFlag() {
		return activeFlag;
	}

	public void setActiveFlag(int activeFlag) {
		this.activeFlag = activeFlag;
	}

	public String getMerchantAddress() {
		return merchantAddress;
	}

	public void setMerchantAddress(String merchantAddress) {
		this.merchantAddress = merchantAddress;
	}

	public String getMerchantLogo() {
		return merchantLogo;
	}

	public void setMerchantLogo(String merchantLogo) {
		this.merchantLogo = merchantLogo;
	}

	public String getMerchantName() {
		return merchantName;
	}

	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}

	public int getMerchantPin() {
		return merchantPin;
	}

	public void setMerchantPin(int merchantPin) {
		this.merchantPin = merchantPin;
	}

	public String getMerchantId() {
		return merchantId;
	}

	public void setMerchantId(String merchantId) {
		this.merchantId = merchantId;
	}

	public Integer getSuperMerchantId() {
		return superMerchantId;
	}

	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}

	public Integer getMicroAtmEnable() {
		return microAtmEnable;
	}

	public void setMicroAtmEnable(Integer microAtmEnable) {
		this.microAtmEnable = microAtmEnable;
	}

	public Integer getParentId() {
		return parentId;
	}

	public void setParentId(Integer parentId) {
		this.parentId = parentId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	@Override
	public String toString() {
		return "SessionData [sessionId=" + sessionId + ", id=" + id + ", activeFlag=" + activeFlag
				+ ", merchantAddress=" + merchantAddress + ", merchantLogo=" + merchantLogo + ", merchantName="
				+ merchantName + ", merchantPin=" + merchantPin + ", merchantId=" + merchantId + ", superMerchantId="
				+ superMerchantId + ", microAtmEnable=" + microAtmEnable + ", parentId=" + parentId + "]";
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

public class SettlChargesModel {

	private Integer id;
	private Integer merchantId;
	private Double minAmt;
	private Double maxAmt;
	private Double neftCharges;
	private Double impsCharges;
	private Double rtgsCharges;
	private String remarks;
	private Integer flag;
	
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	
	public Double getMinAmt() {
		return minAmt;
	}
	public void setMinAmt(Double minAmt) {
		this.minAmt = minAmt;
	}
	public Double getMaxAmt() {
		return maxAmt;
	}
	public void setMaxAmt(Double maxAmt) {
		this.maxAmt = maxAmt;
	}
	public Double getNeftCharges() {
		return neftCharges;
	}
	public void setNeftCharges(Double neftCharges) {
		this.neftCharges = neftCharges;
	}
	public Double getImpsCharges() {
		return impsCharges;
	}
	public void setImpsCharges(Double impsCharges) {
		this.impsCharges = impsCharges;
	}
	public Double getRtgsCharges() {
		return rtgsCharges;
	}
	public void setRtgsCharges(Double rtgsCharges) {
		this.rtgsCharges = rtgsCharges;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class Settlement {
	
	    private String     companyBankAccountNumber ;
	    private String     bankIfscCode ;
	    private String     companyBankName ;
	    private String      bankBranchName ;
	    private String     bankAccountName ;
	    
		public String getCompanyBankAccountNumber() {
			return companyBankAccountNumber;
		}
		public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
			this.companyBankAccountNumber = companyBankAccountNumber;
		}
		
		public String getCompanyBankName() {
			return companyBankName;
		}
		public void setCompanyBankName(String companyBankName) {
			this.companyBankName = companyBankName;
		}
		
		public String getBankIfscCode() {
			return bankIfscCode;
		}
		public void setBankIfscCode(String bankIfscCode) {
			this.bankIfscCode = bankIfscCode;
		}
		public String getBankBranchName() {
			return bankBranchName;
		}
		public void setBankBranchName(String bankBranchName) {
			this.bankBranchName = bankBranchName;
		}
		public String getBankAccountName() {
			return bankAccountName;
		}
		public void setBankAccountName(String bankAccountName) {
			this.bankAccountName = bankAccountName;
		}
	    


}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class SettlementDetailsModel {
	
	private Integer id;
	private Integer type;
	private Integer typeId;
	private String typeName;
	
	private Integer typeActiveFlag;
	private Integer tPlusOneSettlFlag;
	private Integer instantSettlFlag;
	
	private String requestedUserName;
	private Date requestedUserTimestamp;
	private String apprRejUserName;
	private Date apprRejUserTimestamp;
	private String apprRejRemarks;
	private Integer approvalStatus;
	
	public String getRequestedUserName() {
		return requestedUserName;
	}
	public void setRequestedUserName(String requestedUserName) {
		this.requestedUserName = requestedUserName;
	}
	public Date getRequestedUserTimestamp() {
		return requestedUserTimestamp;
	}
	public void setRequestedUserTimestamp(Date requestedUserTimestamp) {
		this.requestedUserTimestamp = requestedUserTimestamp;
	}
	public String getApprRejUserName() {
		return apprRejUserName;
	}
	public void setApprRejUserName(String apprRejUserName) {
		this.apprRejUserName = apprRejUserName;
	}
	public Date getApprRejUserTimestamp() {
		return apprRejUserTimestamp;
	}
	public void setApprRejUserTimestamp(Date apprRejUserTimestamp) {
		this.apprRejUserTimestamp = apprRejUserTimestamp;
	}
	public String getApprRejRemarks() {
		return apprRejRemarks;
	}
	public void setApprRejRemarks(String apprRejRemarks) {
		this.apprRejRemarks = apprRejRemarks;
	}
	public Integer getApprovalStatus() {
		return approvalStatus;
	}
	public void setApprovalStatus(Integer approvalStatus) {
		this.approvalStatus = approvalStatus;
	}
	
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Integer getType() {
		return type;
	}
	public void setType(Integer type) {
		this.type = type;
	}
	public Integer getTypeId() {
		return typeId;
	}
	public void setTypeId(Integer typeId) {
		this.typeId = typeId;
	}
	public String getTypeName() {
		return typeName;
	}
	public void setTypeName(String typeName) {
		this.typeName = typeName;
	}
	public Integer getTypeActiveFlag() {
		return typeActiveFlag;
	}
	public void setTypeActiveFlag(Integer typeActiveFlag) {
		this.typeActiveFlag = typeActiveFlag;
	}
	public Integer gettPlusOneSettlFlag() {
		return tPlusOneSettlFlag;
	}
	public void settPlusOneSettlFlag(Integer tPlusOneSettlFlag) {
		this.tPlusOneSettlFlag = tPlusOneSettlFlag;
	}
	public Integer getInstantSettlFlag() {
		return instantSettlFlag;
	}
	public void setInstantSettlFlag(Integer instantSettlFlag) {
		this.instantSettlFlag = instantSettlFlag;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
// @JsonInclude(Include.NON_NULL)
public class SettlementHoldDataObject {

	private String SettlementHoldId;
	private String aggregatorId;
	private String distributerId;
	private String startDate;
	private String amountToHold;
	private String maxAmountPerSettleToHold;
	private String maxAmountPerDayToHold;
	private String activityFlag;
	private String validatedBy;
	private String validatorFlag;
	private String validatorReqTimestamp;
	private String approvedBy;
	private String approvedFlag;
	private String approvedReqTimestamp;
	private String valRemarks;
	private String appRemarks;
	
	public String getAppRemarks() {
		return appRemarks;
	}
	public void setAppRemarks(String appRemarks) {
		this.appRemarks = appRemarks;
	}
	private String serviceType;
	
	public String getSettlementHoldId() {
		return SettlementHoldId;
	}
	public void setSettlementHoldId(String settlementHoldId) {
		SettlementHoldId = settlementHoldId;
	}
	public String getAggregatorId() {
		return aggregatorId;
	}
	public void setAggregatorId(String aggregatorId) {
		this.aggregatorId = aggregatorId;
	}
	public String getDistributerId() {
		return distributerId;
	}
	public void setDistributerId(String distributerId) {
		this.distributerId = distributerId;
	}
	public String getStartDate() {
		return startDate;
	}
	public void setStartDate(String startDate) {
		this.startDate = startDate;
	}
	public String getAmountToHold() {
		return amountToHold;
	}
	public void setAmountToHold(String amountToHold) {
		this.amountToHold = amountToHold;
	}
	public String getMaxAmountPerSettleToHold() {
		return maxAmountPerSettleToHold;
	}
	public void setMaxAmountPerSettleToHold(String maxAmountPerSettleToHold) {
		this.maxAmountPerSettleToHold = maxAmountPerSettleToHold;
	}
	public String getMaxAmountPerDayToHold() {
		return maxAmountPerDayToHold;
	}
	public void setMaxAmountPerDayToHold(String maxAmountPerDayToHold) {
		this.maxAmountPerDayToHold = maxAmountPerDayToHold;
	}
	public String getActivityFlag() {
		return activityFlag;
	}
	public void setActivityFlag(String activityFlag) {
		this.activityFlag = activityFlag;
	}
	public String getValidatedBy() {
		return validatedBy;
	}
	public void setValidatedBy(String validatedBy) {
		this.validatedBy = validatedBy;
	}
	public String getValidatorReqTimestamp() {
		return validatorReqTimestamp;
	}
	public void setValidatorReqTimestamp(String validatorReqTimestamp) {
		this.validatorReqTimestamp = validatorReqTimestamp;
	}
	public String getApprovedBy() {
		return approvedBy;
	}
	public void setApprovedBy(String approvedBy) {
		this.approvedBy = approvedBy;
	}
	public String getApprovedReqTimestamp() {
		return approvedReqTimestamp;
	}
	public void setApprovedReqTimestamp(String approvedReqTimestamp) {
		this.approvedReqTimestamp = approvedReqTimestamp;
	}
	public String getValidatorFlag() {
		return validatorFlag;
	}
	public void setValidatorFlag(String validatorFlag) {
		this.validatorFlag = validatorFlag;
	}
	public String getApprovedFlag() {
		return approvedFlag;
	}
	public void setApprovedFlag(String approvedFlag) {
		this.approvedFlag = approvedFlag;
	}
	public String getValRemarks() {
		return valRemarks;
	}
	public void setValRemarks(String valRemarks) {
		this.valRemarks = valRemarks;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class SettlementHoldReportsDataModel {

	private String settlementHoldid;
	private String aggrOrDistributor;
	private String holdAmount;
	private String reason;
	private String startDate;
	private String recoverdAmount;
	private String balanceDue;


	public String getSettlementHoldid() {
		return settlementHoldid;
	}
	public void setSettlementHoldid(String settlementHoldid) {
		this.settlementHoldid = settlementHoldid;
	}
	public String getAggrOrDistributor() {
		return aggrOrDistributor;
	}
	public void setAggrOrDistributor(String aggrOrDistributor) {
		this.aggrOrDistributor = aggrOrDistributor;
	}
	public String getHoldAmount() {
		return holdAmount;
	}
	public void setHoldAmount(String holdAmount) {
		this.holdAmount = holdAmount;
	}
	public String getReason() {
		return reason;
	}
	public void setReason(String reason) {
		this.reason = reason;
	}
	public String getStartDate() {
		return startDate;
	}
	public void setStartDate(String initialDate) {
		this.startDate = initialDate;
	}
	public String getRecoverdAmount() {
		return recoverdAmount;
	}
	public void setRecoverdAmount(String recoverdAmount) {
		this.recoverdAmount = recoverdAmount;
	}
	public String getBalanceDue() {
		return balanceDue;
	}
	public void setBalanceDue(String balanceDue) {
		this.balanceDue = balanceDue;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonInclude.Include;

@JsonIgnoreProperties(ignoreUnknown = true)
@JsonInclude(Include.NON_NULL)
public class SettlementHoldReportTxnDetailModel {
	private String requestedDate;
	private String transactionAmount;
	private String holdAmount;
	private String settleAmount;
	private String referenceNumber;
	
	public String getRequestedDate() {
		return requestedDate;
	}
	public void setRequestedDate(String requestedDate) {
		this.requestedDate = requestedDate;
	}
	public String getTransactionAmount() {
		return transactionAmount;
	}
	public void setTransactionAmount(String transactionAmount) {
		this.transactionAmount = transactionAmount;
	}
	public String getHoldAmount() {
		return holdAmount;
	}
	public void setHoldAmount(String holdAmount) {
		this.holdAmount = holdAmount;
	}
	public String getSettleAmount() {
		return settleAmount;
	}
	public void setSettleAmount(String settleAmount) {
		this.settleAmount = settleAmount;
	}
	public String getReferenceNumber() {
		return referenceNumber;
	}
	public void setReferenceNumber(String referenceNumber) {
		this.referenceNumber = referenceNumber;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class SettlementInfoDataModel {

	private Integer id ;
	private Integer userId ;
	private Double amount ;
	private Integer noOfTransactions ;
	private String transactionDate ;
	private String name ;
	private String companyBankAccountName ;
	private Integer validateFlag ;
	private Integer settleFlag ;
	private String companyBankAccountNumber ;
	private String companyIfscCode ;
	private String     companyBeneCode ;
	private Integer primaryKeyId ;
	private String typeOfSettlement ;
	private String serviceType ;
	private String beneCode;
	private Double settleAmount;
	private String bankSwitch;
	private String remarks ;
	private Integer approvedFlag ;
	private Integer rejectedFlag;
	private String narration;
	private String typeOfTransaction;
	private String fileReferenceNumber;
	private String settlementreferenceNumber;
	private String cmsNumber;
	private String settlementTo;
	private String settlementSelfOrInst ;
	public Double mdrCharges;
	public Double mdrAmount;
	private Integer isVirtualAccount;
	
	
	public String getSettlementSelfOrInst() {
		return settlementSelfOrInst;
	}
	public void setSettlementSelfOrInst(String settlementSelfOrInst) {
		this.settlementSelfOrInst = settlementSelfOrInst;
	}
	public String getNarration() {
		return narration;
	}
	public void setNarration(String narration) {
		this.narration = narration;
	}
	public String getTypeOfTransaction() {
		return typeOfTransaction;
	}
	public void setTypeOfTransaction(String typeOfTransaction) {
		this.typeOfTransaction = typeOfTransaction;
	}
	public String getFileReferenceNumber() {
		return fileReferenceNumber;
	}
	public void setFileReferenceNumber(String fileReferenceNumber) {
		this.fileReferenceNumber = fileReferenceNumber;
	}
	public String getSettlementreferenceNumber() {
		return settlementreferenceNumber;
	}
	public void setSettlementreferenceNumber(String settlementreferenceNumber) {
		this.settlementreferenceNumber = settlementreferenceNumber;
	}
	public String getCmsNumber() {
		return cmsNumber;
	}
	public void setCmsNumber(String cmsNumber) {
		this.cmsNumber = cmsNumber;
	}
	public String getSettlementTo() {
		return settlementTo;
	}
	public void setSettlementTo(String settlementTo) {
		this.settlementTo = settlementTo;
	}
	public Integer getApprovedFlag() {
		return approvedFlag;
	}
	public void setApprovedFlag(Integer approvedFlag) {
		this.approvedFlag = approvedFlag;
	}
	public Integer getRejectedFlag() {
		return rejectedFlag;
	}
	public void setRejectedFlag(Integer rejectedFlag) {
		this.rejectedFlag = rejectedFlag;
	}
	public Integer getUserId() {
		return userId;
	}
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public Double getAmount() {
		return amount;
	}
	public void setAmount(Double amount) {
		this.amount = amount;
	}
	public Integer getNoOfTransactions() {
		return noOfTransactions;
	}
	public void setNoOfTransactions(Integer noOfTransactions) {
		this.noOfTransactions = noOfTransactions;
	}
	public String getTransactionDate() {
		return transactionDate;
	}
	public void setTransactionDate(String transactionDate) {
		this.transactionDate = transactionDate;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getCompanyBankAccountName() {
		return companyBankAccountName;
	}
	public void setCompanyBankAccountName(String companyBankAccountName) {
		this.companyBankAccountName = companyBankAccountName;
	}
	public Integer getValidateFlag() {
		return validateFlag;
	}
	public void setValidateFlag(Integer validateFlag) {
		this.validateFlag = validateFlag;
	}
	public Integer getSettleFlag() {
		return settleFlag;
	}
	public void setSettleFlag(Integer settleFlag) {
		this.settleFlag = settleFlag;
	}
	public String getCompanyBankAccountNumber() {
		return companyBankAccountNumber;
	}
	public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
		this.companyBankAccountNumber = companyBankAccountNumber;
	}
	public String getCompanyIfscCode() {
		return companyIfscCode;
	}
	public void setCompanyIfscCode(String companyIfscCode) {
		this.companyIfscCode = companyIfscCode;
	}
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public String getTypeOfSettlement() {
		return typeOfSettlement;
	}
	public void setTypeOfSettlement(String typeOfSettlement) {
		this.typeOfSettlement = typeOfSettlement;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public String getBeneCode() {
		return beneCode;
	}
	public void setBeneCode(String beneCode) {
		this.beneCode = beneCode;
	}
	public Double getSettleAmount() {
		return settleAmount;
	}
	public void setSettleAmount(Double settleAmount) {
		this.settleAmount = settleAmount;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public String getCompanyBeneCode() {
		return companyBeneCode;
	}
	public void setCompanyBeneCode(String companyBeneCode) {
		this.companyBeneCode = companyBeneCode;
	}
	public Double getMdrCharges() {
		return mdrCharges;
	}
	public void setMdrCharges(Double mdrCharges) {
		this.mdrCharges = mdrCharges;
	}
	public Double getMdrAmount() {
		return mdrAmount;
	}
	public void setMdrAmount(Double mdrAmount) {
		this.mdrAmount = mdrAmount;
	}
	public Integer getIsVirtualAccount() {
		return isVirtualAccount;
	}
	public void setIsVirtualAccount(Integer isVirtualAccount) {
		this.isVirtualAccount = isVirtualAccount;
	}
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class SettlementInfoDataReportModel {
	
	 private Integer    id           ;
	    private String     serviceType  ;
	    private String     typeOfSettlement ;
	    private Date       transactionDate ;
	    private String     remarks      ;
	    private String     name         ;
	    private String     companyBankAccountNumber ;
	    private String     companyIfscCode ;
	    private Double     amount       ;
	    private Integer    settlementEnable ;
	    private String     companyBankAccountName ;
	    private String     filePath     ;
	    private Integer    validateFlag ;
	    private Date       validateTimestamp ;
	    private Integer    settleFlag   ;
	    private Date       settleTimestamp ;
	    private String     validatedByUsername ;
	    private String     correctedByUsername ;
	    private String     settledByUsername ;
	    private String     loginId      ;
	    private String     fileGenerationRemarks ;
	    private String     responseMessage ;
	    private Integer    primaryKeyId ;
	    private String     fileName     ;
	    private Integer    noOfTransactions ;
	    private String     mismatchRemarks     ;
	    private Integer    mismatchTransactionCount ;
	    private Double     mismatchTransactionAmount ;
	    private String     mismatchByUsername;
	    private Date       mismatchTimestamp;
	    private Date       fileGenerationTimestamp;
	    private String     fileReferenceNumber;
	    private String     emailId;
	    private String     mobileNumber;
	    private Date       migratedTimestamp;
	    private String     status;
	    private String     statusMessage;
	    private Date       statusUpdatedTimestamp;
	    private String     cmsNumber;
	    private String     beneCode;
	    private Double settleAmount;
	    
	    private Double anomalyAmount;
	    private Double holdAmount;
	    
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getServiceType() {
			return serviceType;
		}
		public void setServiceType(String serviceType) {
			this.serviceType = serviceType;
		}
		public String getTypeOfSettlement() {
			return typeOfSettlement;
		}
		public void setTypeOfSettlement(String typeOfSettlement) {
			this.typeOfSettlement = typeOfSettlement;
		}
		public Date getTransactionDate() {
			return transactionDate;
		}
		public void setTransactionDate(Date transactionDate) {
			this.transactionDate = transactionDate;
		}
		public String getRemarks() {
			return remarks;
		}
		public void setRemarks(String remarks) {
			this.remarks = remarks;
		}
		public String getName() {
			return name;
		}
		public void setName(String name) {
			this.name = name;
		}
		public String getCompanyBankAccountNumber() {
			return companyBankAccountNumber;
		}
		public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
			this.companyBankAccountNumber = companyBankAccountNumber;
		}
		public String getCompanyIfscCode() {
			return companyIfscCode;
		}
		public void setCompanyIfscCode(String companyIfscCode) {
			this.companyIfscCode = companyIfscCode;
		}
		public Double getAmount() {
			return amount;
		}
		public void setAmount(Double amount) {
			this.amount = amount;
		}
		public Integer getSettlementEnable() {
			return settlementEnable;
		}
		public void setSettlementEnable(Integer settlementEnable) {
			this.settlementEnable = settlementEnable;
		}
		public String getCompanyBankAccountName() {
			return companyBankAccountName;
		}
		public void setCompanyBankAccountName(String companyBankAccountName) {
			this.companyBankAccountName = companyBankAccountName;
		}
		public String getFilePath() {
			return filePath;
		}
		public void setFilePath(String filePath) {
			this.filePath = filePath;
		}
		public Integer getValidateFlag() {
			return validateFlag;
		}
		public void setValidateFlag(Integer validateFlag) {
			this.validateFlag = validateFlag;
		}
		public Date getValidateTimestamp() {
			return validateTimestamp;
		}
		public void setValidateTimestamp(Date validateTimestamp) {
			this.validateTimestamp = validateTimestamp;
		}
		public Integer getSettleFlag() {
			return settleFlag;
		}
		public void setSettleFlag(Integer settleFlag) {
			this.settleFlag = settleFlag;
		}
		public Date getSettleTimestamp() {
			return settleTimestamp;
		}
		public void setSettleTimestamp(Date settleTimestamp) {
			this.settleTimestamp = settleTimestamp;
		}
		public String getValidatedByUsername() {
			return validatedByUsername;
		}
		public void setValidatedByUsername(String validatedByUsername) {
			this.validatedByUsername = validatedByUsername;
		}
		public String getCorrectedByUsername() {
			return correctedByUsername;
		}
		public void setCorrectedByUsername(String correctedByUsername) {
			this.correctedByUsername = correctedByUsername;
		}
		public String getSettledByUsername() {
			return settledByUsername;
		}
		public void setSettledByUsername(String settledByUsername) {
			this.settledByUsername = settledByUsername;
		}
		public String getLoginId() {
			return loginId;
		}
		public void setLoginId(String loginId) {
			this.loginId = loginId;
		}
		public String getFileGenerationRemarks() {
			return fileGenerationRemarks;
		}
		public void setFileGenerationRemarks(String fileGenerationRemarks) {
			this.fileGenerationRemarks = fileGenerationRemarks;
		}
		public String getResponseMessage() {
			return responseMessage;
		}
		public void setResponseMessage(String responseMessage) {
			this.responseMessage = responseMessage;
		}
		public Integer getPrimaryKeyId() {
			return primaryKeyId;
		}
		public void setPrimaryKeyId(Integer primaryKeyId) {
			this.primaryKeyId = primaryKeyId;
		}
		public String getFileName() {
			return fileName;
		}
		public void setFileName(String fileName) {
			this.fileName = fileName;
		}
		public Integer getNoOfTransactions() {
			return noOfTransactions;
		}
		public void setNoOfTransactions(Integer noOfTransactions) {
			this.noOfTransactions = noOfTransactions;
		}
		public String getMismatchRemarks() {
			return mismatchRemarks;
		}
		public void setMismatchRemarks(String mismatchRemarks) {
			this.mismatchRemarks = mismatchRemarks;
		}
		public Integer getMismatchTransactionCount() {
			return mismatchTransactionCount;
		}
		public void setMismatchTransactionCount(Integer mismatchTransactionCount) {
			this.mismatchTransactionCount = mismatchTransactionCount;
		}
		public Double getMismatchTransactionAmount() {
			return mismatchTransactionAmount;
		}
		public void setMismatchTransactionAmount(Double mismatchTransactionAmount) {
			this.mismatchTransactionAmount = mismatchTransactionAmount;
		}
		public String getMismatchByUsername() {
			return mismatchByUsername;
		}
		public void setMismatchByUsername(String mismatchByUsername) {
			this.mismatchByUsername = mismatchByUsername;
		}
		public Date getMismatchTimestamp() {
			return mismatchTimestamp;
		}
		public void setMismatchTimestamp(Date mismatchTimestamp) {
			this.mismatchTimestamp = mismatchTimestamp;
		}
		public Date getFileGenerationTimestamp() {
			return fileGenerationTimestamp;
		}
		public void setFileGenerationTimestamp(Date fileGenerationTimestamp) {
			this.fileGenerationTimestamp = fileGenerationTimestamp;
		}
		public String getFileReferenceNumber() {
			return fileReferenceNumber;
		}
		public void setFileReferenceNumber(String fileReferenceNumber) {
			this.fileReferenceNumber = fileReferenceNumber;
		}
		public String getEmailId() {
			return emailId;
		}
		public void setEmailId(String emailId) {
			this.emailId = emailId;
		}
		public String getMobileNumber() {
			return mobileNumber;
		}
		public void setMobileNumber(String mobileNumber) {
			this.mobileNumber = mobileNumber;
		}
		public Date getMigratedTimestamp() {
			return migratedTimestamp;
		}
		public void setMigratedTimestamp(Date migratedTimestamp) {
			this.migratedTimestamp = migratedTimestamp;
		}
		public String getStatus() {
			return status;
		}
		public void setStatus(String status) {
			this.status = status;
		}
		public String getStatusMessage() {
			return statusMessage;
		}
		public void setStatusMessage(String statusMessage) {
			this.statusMessage = statusMessage;
		}
		public Date getStatusUpdatedTimestamp() {
			return statusUpdatedTimestamp;
		}
		public void setStatusUpdatedTimestamp(Date statusUpdatedTimestamp) {
			this.statusUpdatedTimestamp = statusUpdatedTimestamp;
		}
		public String getCmsNumber() {
			return cmsNumber;
		}
		public void setCmsNumber(String cmsNumber) {
			this.cmsNumber = cmsNumber;
		}
		public String getBeneCode() {
			return beneCode;
		}
		public void setBeneCode(String beneCode) {
			this.beneCode = beneCode;
		}
		public Double getSettleAmount() {
			return settleAmount;
		}
		public void setSettleAmount(Double settleAmount) {
			this.settleAmount = settleAmount;
		}
		
		public Double getAnomalyAmount() {
			return anomalyAmount;
		}
		public void setAnomalyAmount(Double anomalyAmount) {
			this.anomalyAmount = anomalyAmount;
		}
		public Double getHoldAmount() {
			return holdAmount;
		}
		public void setHoldAmount(Double holdAmount) {
			this.holdAmount = holdAmount;
		}
		
		
	    
	    

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.ArrayList;
import java.util.List;

public class SidenavModel {

	private Integer id;
	private String name;
	private String url;
	private String icon;
	private Boolean show;
	private Boolean clickArrowM;
	private Boolean clickArrow;
	private ArrayList<SidenavModel> dropDownMenu;
	private ArrayList<SidenavModel> subMenu;

	
	public Boolean getClickArrow() {
		return clickArrow;
	}
	public void setClickArrow(Boolean clickArrow) {
		this.clickArrow = clickArrow;
	}
	public String getIcon() {
		return icon;
	}
	public void setIcon(String icon) {
		this.icon = icon;
	}
	public ArrayList<SidenavModel> getSubMenu() {
		return subMenu;
	}
	public void setSubMenu(ArrayList<SidenavModel> subMenu) {
		this.subMenu = subMenu;
	}
	@Override
	public String toString() {
		return "SidenavModel [id=" + id + ", name=" + name + ", url=" + url + ", show=" + show + ", clickArrowM="
				+ clickArrowM + ", dropDownMenu=" + dropDownMenu + "]";
	}
	public ArrayList<SidenavModel> getDropDownMenu() {
		return dropDownMenu;
	}
	public void setDropDownMenu(ArrayList<SidenavModel> dropDownMenu) {
		this.dropDownMenu = dropDownMenu;
	}
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
	public Boolean getShow() {
		return show;
	}
	public void setShow(Boolean show) {
		this.show = show;
	}
	public Boolean getClickArrowM() {
		return clickArrowM;
	}
	public void setClickArrowM(Boolean clickArrowM) {
		this.clickArrowM = clickArrowM;
	}
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

public class SpecificParentSuperMSettleModel {

	private String settleto;
	private Integer userId;
	
	public String getSettleto() {
		return settleto;
	}
	public void setSettleto(String settleto) {
		this.settleto = settleto;
	}
	public Integer getUserId() {
		return userId;
	}
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class SuperMerchantMasterModal {
	
	    private Integer    id           ;
	    private String     loginId      ;
	    private String     loginPassword ;
	    private String     superMerchantName ;
	    private String     typeOfBusiness ;
	    private String     hoAddress    ;
	    private String     hoPhoneNumber ;
	    private String     logo         ;
	    private String     remarks      ;
	    private Date       timesatmp    ;
	    private Date       updatedTimestamp ;
	    private Integer    activeFlag   ;
	    private String     companyLegalName ;
	    private String     companyMarketingName ;
	    private String     dateOfIncorporation ;
	    private String     officialContactNo ;
	    private String     emailId      ;
	    private String     pincode      ;
	    private String     shopAndPanImage ;
	    private String     certificateOfIncorporationImage ;
	    private Integer     userType     ;
	    private String     userPan      ;
	    private String     letterOfDeclarationAuthorizedSignatory ;
	    private String     companyBankAccountNumber ;
	    private String     companyIfscCode ;
	    private String     companyBankName ;
	    private String     companyBankBranchName ;
	    private Integer    termsConditionCheck ;
	    private Integer    confirmationCheck ;
	    private Integer    noOfTerminals ;
	    private Integer    ekycStatus   ;
	    private String     otp          ;
	    private Integer    otpValidation ;
	    private String     bankAccountName ;
	    private String     cancelledChequeImages ;
	    private String     ekycDocuments ;
	    private String     gstInNumber  ;
	    private String     companyOrShopPan ;
	    private Integer    parentId     ;
	    private Integer    collectKycDoc ;
	    private Integer    selfSettlement ;
	    private String     aadhaarNumber ;
	    private Integer    automaticBankVerification ;
	    private String     automaticBankVerificationDetails ;
	    private Integer    automaticPanVerification ;
	    private String     automaticPanVerificationDetails ;
	    private Integer    automaticAadhaarVerification ;
	    private String     automaticAadhaarVerificationDetails ;
	    private String     smsMessage   ;
	    private String     smsUrl       ;
	    private String     callBackUrl  ;
	    private int        stateId;
	    private int        cityId;
	    private int        companyTypeId;
	    private String     organisation;
	    private Integer    instantSettlement;
	    
	    private String onboardingformdata;
	    private String gstformdata;
	    private String aoaformdata;
	    private String kycformdata;
	    
	    private Integer panVerifications;
	    private Integer bankVerifications;
	    private Integer voterIdVerifications;
	    
//	    private List<MerchantMaster> listOfMerchantMaster;
//	    private StateMaster stateMaster ;
	//    private CityMaster cityMaster  ;
	  //  private CompanyTypeMasterData companyTypeMasterData;
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getLoginId() {
			return loginId;
		}
		public void setLoginId(String loginId) {
			this.loginId = loginId;
		}
		public String getLoginPassword() {
			return loginPassword;
		}
		public void setLoginPassword(String loginPassword) {
			this.loginPassword = loginPassword;
		}
		public String getSuperMerchantName() {
			return superMerchantName;
		}
		public void setSuperMerchantName(String superMerchantName) {
			this.superMerchantName = superMerchantName;
		}
		public String getTypeOfBusiness() {
			return typeOfBusiness;
		}
		public void setTypeOfBusiness(String typeOfBusiness) {
			this.typeOfBusiness = typeOfBusiness;
		}
		public String getHoAddress() {
			return hoAddress;
		}
		public void setHoAddress(String hoAddress) {
			this.hoAddress = hoAddress;
		}
		public String getHoPhoneNumber() {
			return hoPhoneNumber;
		}
		public void setHoPhoneNumber(String hoPhoneNumber) {
			this.hoPhoneNumber = hoPhoneNumber;
		}
		public String getLogo() {
			return logo;
		}
		public void setLogo(String logo) {
			this.logo = logo;
		}
		public String getRemarks() {
			return remarks;
		}
		public void setRemarks(String remarks) {
			this.remarks = remarks;
		}
		public Date getTimesatmp() {
			return timesatmp;
		}
		public void setTimesatmp(Date timesatmp) {
			this.timesatmp = timesatmp;
		}
		public Date getUpdatedTimestamp() {
			return updatedTimestamp;
		}
		public void setUpdatedTimestamp(Date updatedTimestamp) {
			this.updatedTimestamp = updatedTimestamp;
		}
		public Integer getActiveFlag() {
			return activeFlag;
		}
		public void setActiveFlag(Integer activeFlag) {
			this.activeFlag = activeFlag;
		}
		public String getCompanyLegalName() {
			return companyLegalName;
		}
		public void setCompanyLegalName(String companyLegalName) {
			this.companyLegalName = companyLegalName;
		}
		public String getCompanyMarketingName() {
			return companyMarketingName;
		}
		public void setCompanyMarketingName(String companyMarketingName) {
			this.companyMarketingName = companyMarketingName;
		}
		public String getDateOfIncorporation() {
			return dateOfIncorporation;
		}
		public void setDateOfIncorporation(String dateOfIncorporation) {
			this.dateOfIncorporation = dateOfIncorporation;
		}
		public String getOfficialContactNo() {
			return officialContactNo;
		}
		public void setOfficialContactNo(String officialContactNo) {
			this.officialContactNo = officialContactNo;
		}
		public String getEmailId() {
			return emailId;
		}
		public void setEmailId(String emailId) {
			this.emailId = emailId;
		}
		public String getPincode() {
			return pincode;
		}
		public void setPincode(String pincode) {
			this.pincode = pincode;
		}
		public String getShopAndPanImage() {
			return shopAndPanImage;
		}
		public void setShopAndPanImage(String shopAndPanImage) {
			this.shopAndPanImage = shopAndPanImage;
		}
		public String getCertificateOfIncorporationImage() {
			return certificateOfIncorporationImage;
		}
		public void setCertificateOfIncorporationImage(String certificateOfIncorporationImage) {
			this.certificateOfIncorporationImage = certificateOfIncorporationImage;
		}
		public Integer getUserType() {
			return userType;
		}
		public void setUserType(Integer userType) {
			this.userType = userType;
		}
		public String getUserPan() {
			return userPan;
		}
		public void setUserPan(String userPan) {
			this.userPan = userPan;
		}
		public String getLetterOfDeclarationAuthorizedSignatory() {
			return letterOfDeclarationAuthorizedSignatory;
		}
		public void setLetterOfDeclarationAuthorizedSignatory(String letterOfDeclarationAuthorizedSignatory) {
			this.letterOfDeclarationAuthorizedSignatory = letterOfDeclarationAuthorizedSignatory;
		}
		public String getCompanyBankAccountNumber() {
			return companyBankAccountNumber;
		}
		public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
			this.companyBankAccountNumber = companyBankAccountNumber;
		}
		public String getCompanyIfscCode() {
			return companyIfscCode;
		}
		public void setCompanyIfscCode(String companyIfscCode) {
			this.companyIfscCode = companyIfscCode;
		}
		public String getCompanyBankName() {
			return companyBankName;
		}
		public void setCompanyBankName(String companyBankName) {
			this.companyBankName = companyBankName;
		}
		public String getCompanyBankBranchName() {
			return companyBankBranchName;
		}
		public void setCompanyBankBranchName(String companyBankBranchName) {
			this.companyBankBranchName = companyBankBranchName;
		}
		public Integer getTermsConditionCheck() {
			return termsConditionCheck;
		}
		public void setTermsConditionCheck(Integer termsConditionCheck) {
			this.termsConditionCheck = termsConditionCheck;
		}
		public Integer getConfirmationCheck() {
			return confirmationCheck;
		}
		public void setConfirmationCheck(Integer confirmationCheck) {
			this.confirmationCheck = confirmationCheck;
		}
		public Integer getNoOfTerminals() {
			return noOfTerminals;
		}
		public void setNoOfTerminals(Integer noOfTerminals) {
			this.noOfTerminals = noOfTerminals;
		}
		public Integer getEkycStatus() {
			return ekycStatus;
		}
		public void setEkycStatus(Integer ekycStatus) {
			this.ekycStatus = ekycStatus;
		}
		public String getOtp() {
			return otp;
		}
		public void setOtp(String otp) {
			this.otp = otp;
		}
		public Integer getOtpValidation() {
			return otpValidation;
		}
		public void setOtpValidation(Integer otpValidation) {
			this.otpValidation = otpValidation;
		}
		public String getBankAccountName() {
			return bankAccountName;
		}
		public void setBankAccountName(String bankAccountName) {
			this.bankAccountName = bankAccountName;
		}
		public String getCancelledChequeImages() {
			return cancelledChequeImages;
		}
		public void setCancelledChequeImages(String cancelledChequeImages) {
			this.cancelledChequeImages = cancelledChequeImages;
		}
		public String getEkycDocuments() {
			return ekycDocuments;
		}
		public void setEkycDocuments(String ekycDocuments) {
			this.ekycDocuments = ekycDocuments;
		}
		public String getGstInNumber() {
			return gstInNumber;
		}
		public void setGstInNumber(String gstInNumber) {
			this.gstInNumber = gstInNumber;
		}
		public String getCompanyOrShopPan() {
			return companyOrShopPan;
		}
		public void setCompanyOrShopPan(String companyOrShopPan) {
			this.companyOrShopPan = companyOrShopPan;
		}
		public Integer getParentId() {
			return parentId;
		}
		public void setParentId(Integer parentId) {
			this.parentId = parentId;
		}
		public Integer getCollectKycDoc() {
			return collectKycDoc;
		}
		public void setCollectKycDoc(Integer collectKycDoc) {
			this.collectKycDoc = collectKycDoc;
		}
		public Integer getSelfSettlement() {
			return selfSettlement;
		}
		public void setSelfSettlement(Integer selfSettlement) {
			this.selfSettlement = selfSettlement;
		}
		public String getAadhaarNumber() {
			return aadhaarNumber;
		}
		public void setAadhaarNumber(String aadhaarNumber) {
			this.aadhaarNumber = aadhaarNumber;
		}
		public Integer getAutomaticBankVerification() {
			return automaticBankVerification;
		}
		public void setAutomaticBankVerification(Integer automaticBankVerification) {
			this.automaticBankVerification = automaticBankVerification;
		}
		public String getAutomaticBankVerificationDetails() {
			return automaticBankVerificationDetails;
		}
		public void setAutomaticBankVerificationDetails(String automaticBankVerificationDetails) {
			this.automaticBankVerificationDetails = automaticBankVerificationDetails;
		}
		public Integer getAutomaticPanVerification() {
			return automaticPanVerification;
		}
		public void setAutomaticPanVerification(Integer automaticPanVerification) {
			this.automaticPanVerification = automaticPanVerification;
		}
		public String getAutomaticPanVerificationDetails() {
			return automaticPanVerificationDetails;
		}
		public void setAutomaticPanVerificationDetails(String automaticPanVerificationDetails) {
			this.automaticPanVerificationDetails = automaticPanVerificationDetails;
		}
		public Integer getAutomaticAadhaarVerification() {
			return automaticAadhaarVerification;
		}
		public void setAutomaticAadhaarVerification(Integer automaticAadhaarVerification) {
			this.automaticAadhaarVerification = automaticAadhaarVerification;
		}
		public String getAutomaticAadhaarVerificationDetails() {
			return automaticAadhaarVerificationDetails;
		}
		public void setAutomaticAadhaarVerificationDetails(String automaticAadhaarVerificationDetails) {
			this.automaticAadhaarVerificationDetails = automaticAadhaarVerificationDetails;
		}
		public String getSmsMessage() {
			return smsMessage;
		}
		public void setSmsMessage(String smsMessage) {
			this.smsMessage = smsMessage;
		}
		public String getSmsUrl() {
			return smsUrl;
		}
		public void setSmsUrl(String smsUrl) {
			this.smsUrl = smsUrl;
		}
		public String getCallBackUrl() {
			return callBackUrl;
		}
		public void setCallBackUrl(String callBackUrl) {
			this.callBackUrl = callBackUrl;
		}
		public int getStateId() {
			return stateId;
		}
		public void setStateId(int stateId) {
			this.stateId = stateId;
		}
		public int getCityId() {
			return cityId;
		}
		public void setCityId(int cityId) {
			this.cityId = cityId;
		}
		public int getCompanyTypeId() {
			return companyTypeId;
		}
		public void setCompanyTypeId(int companyTypeId) {
			this.companyTypeId = companyTypeId;
		}
		public String getOrganisation() {
			return organisation;
		}
		public void setOrganisation(String organisation) {
			this.organisation = organisation;
		}
		public Integer getInstantSettlement() {
			return instantSettlement;
		}
		public void setInstantSettlement(Integer instantSettlement) {
			this.instantSettlement = instantSettlement;
		}
		public String getOnboardingformdata() {
			return onboardingformdata;
		}
		public void setOnboardingformdata(String onboardingformdata) {
			this.onboardingformdata = onboardingformdata;
		}
		public String getGstformdata() {
			return gstformdata;
		}
		public void setGstformdata(String gstformdata) {
			this.gstformdata = gstformdata;
		}
		public String getAoaformdata() {
			return aoaformdata;
		}
		public void setAoaformdata(String aoaformdata) {
			this.aoaformdata = aoaformdata;
		}
		public String getKycformdata() {
			return kycformdata;
		}
		public void setKycformdata(String kycformdata) {
			this.kycformdata = kycformdata;
		}
		public Integer getPanVerifications() {
			return panVerifications;
		}
		public void setPanVerifications(Integer panVerifications) {
			this.panVerifications = panVerifications;
		}
		public Integer getBankVerifications() {
			return bankVerifications;
		}
		public void setBankVerifications(Integer bankVerifications) {
			this.bankVerifications = bankVerifications;
		}
		public Integer getVoterIdVerifications() {
			return voterIdVerifications;
		}
		public void setVoterIdVerifications(Integer voterIdVerifications) {
			this.voterIdVerifications = voterIdVerifications;
		}
		
        

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnore;

public class SuperMerchantModel {

	
	
	    private Integer    id           ;
	    private String     loginId      ;
	    private String     loginPassword ;
	    private String     superMerchantName ;
	    private String     typeOfBusiness ;
	    private String     hoAddress    ;
	    private String     hoPhoneNumber ;
	    private String     logo         ;
	    private String     remarks      ;
	    private Long       timesatmp    ;
	    private Long       updatedTimestamp ;
	    private Integer    activeFlag   ;
	    private String     companyLegalName ;
	    private String     companyMarketingName ;
	    private String     dateOfIncorporation ;
	    private String     officialContactNo ;
	    private String     emailId      ;
	    private String     pincode      ;
	    private String     shopAndPanImage ;
	    private String     certificateOfIncorporationImage ;
	    private String     userType     ;
	    private String     userPan      ;
	    private String     letterOfDeclarationAuthorizedSignatory ;
	    private String     companyBankAccountNumber ;
	    private String     companyIfscCode ;
	    private String     companyBankName ;
	    private String     companyBankBranchName ;
	    private Integer    termsConditionCheck ;
	    private Integer    confirmationCheck ;
	    private Integer    noOfTerminals ;
	    private Integer    ekycStatus   ;
	    private String     otp          ;
	    private Integer    otpValidation ;
	    private String     bankAccountName ;
	    private String     cancelledChequeImages ;
	    private String     ekycDocuments ;
	    private String     gstInNumber  ;
	    private String     companyOrShopPan ;
	    private Integer    parentId     ;
	    private Integer    collectKycDoc ;
	    private Integer    selfSettlement ;
	    private String     aadhaarNumber ;
	    private Integer    automaticBankVerification ;
	    private Integer    automaticPanVerification ;
	    private String     automaticPanVerificationDetails ;
	    private Integer    automaticAadhaarVerification ;
	    private String     automaticAadhaarVerificationDetails ;
	    private String     smsUrl       ;
	    private String     callBackUrl  ;
	    private String     createdByUsername ;
	    private Date       createdTimestamp ;
	    private String     createdIpAddress ;
	    private String     editedByUsername ;
	    private Date       editedTimestamp ;
	    private String     editedIpAddress ;
	    private Integer    instantSettlementEnable   ;
//	    private CorporateUser corporateUser;
	    private String     organisation ;
	    private String     editedUsername ;
	    private String     editedIp     ;
	    private String     fcmAuthKey  ;
	    private Integer dropCashEnable ;
	    private Integer    switchFlag ;
	    private Integer     smsCwFlag  ;
	    private Integer     smsApFlag  ;
	    private Integer     smsDropCashFlag  ;
	    private Integer     smsCashDepositFlag  ;
	    private String     hoMailId  ;
	    private String     upiMerchantId  ;
	    private String     beneCode  ;
	    private String     secretKey  ;
	    private Date       pwdLastChangedTimestamp ;
	    private String     analyticsPortalPassword       ;
	    private Integer     panVerificationActiveFlag  ;
	    private Integer     bankVerificationActiveFlag  ;
	    private Integer     voterIdVerificationActiveFlag  ;
	    private String     automaticBankVerificationDetails ;
		public Integer getId() {
			return id;
		}
		public void setId(Integer id) {
			this.id = id;
		}
		public String getLoginId() {
			return loginId;
		}
		public void setLoginId(String loginId) {
			this.loginId = loginId;
		}
		public String getLoginPassword() {
			return loginPassword;
		}
		public void setLoginPassword(String loginPassword) {
			this.loginPassword = loginPassword;
		}
		public String getSuperMerchantName() {
			return superMerchantName;
		}
		public void setSuperMerchantName(String superMerchantName) {
			this.superMerchantName = superMerchantName;
		}
		public String getTypeOfBusiness() {
			return typeOfBusiness;
		}
		public void setTypeOfBusiness(String typeOfBusiness) {
			this.typeOfBusiness = typeOfBusiness;
		}
		public String getHoAddress() {
			return hoAddress;
		}
		public void setHoAddress(String hoAddress) {
			this.hoAddress = hoAddress;
		}
		public String getHoPhoneNumber() {
			return hoPhoneNumber;
		}
		public void setHoPhoneNumber(String hoPhoneNumber) {
			this.hoPhoneNumber = hoPhoneNumber;
		}
		public String getLogo() {
			return logo;
		}
		public void setLogo(String logo) {
			this.logo = logo;
		}
		public String getRemarks() {
			return remarks;
		}
		public void setRemarks(String remarks) {
			this.remarks = remarks;
		}
		
		public Long getTimesatmp() {
			return timesatmp;
		}
		public void setTimesatmp(Long timesatmp) {
			this.timesatmp = timesatmp;
		}
		public Long getUpdatedTimestamp() {
			return updatedTimestamp;
		}
		public void setUpdatedTimestamp(Long updatedTimestamp) {
			this.updatedTimestamp = updatedTimestamp;
		}
		public Integer getActiveFlag() {
			return activeFlag;
		}
		public void setActiveFlag(Integer activeFlag) {
			this.activeFlag = activeFlag;
		}
		public String getCompanyLegalName() {
			return companyLegalName;
		}
		public void setCompanyLegalName(String companyLegalName) {
			this.companyLegalName = companyLegalName;
		}
		public String getCompanyMarketingName() {
			return companyMarketingName;
		}
		public void setCompanyMarketingName(String companyMarketingName) {
			this.companyMarketingName = companyMarketingName;
		}
		public String getDateOfIncorporation() {
			return dateOfIncorporation;
		}
		public void setDateOfIncorporation(String dateOfIncorporation) {
			this.dateOfIncorporation = dateOfIncorporation;
		}
		public String getOfficialContactNo() {
			return officialContactNo;
		}
		public void setOfficialContactNo(String officialContactNo) {
			this.officialContactNo = officialContactNo;
		}
		public String getEmailId() {
			return emailId;
		}
		public void setEmailId(String emailId) {
			this.emailId = emailId;
		}
		public String getPincode() {
			return pincode;
		}
		public void setPincode(String pincode) {
			this.pincode = pincode;
		}
		public String getShopAndPanImage() {
			return shopAndPanImage;
		}
		public void setShopAndPanImage(String shopAndPanImage) {
			this.shopAndPanImage = shopAndPanImage;
		}
		public String getCertificateOfIncorporationImage() {
			return certificateOfIncorporationImage;
		}
		public void setCertificateOfIncorporationImage(String certificateOfIncorporationImage) {
			this.certificateOfIncorporationImage = certificateOfIncorporationImage;
		}
		public String getUserType() {
			return userType;
		}
		public void setUserType(String userType) {
			this.userType = userType;
		}
		public String getUserPan() {
			return userPan;
		}
		public void setUserPan(String userPan) {
			this.userPan = userPan;
		}
		public String getLetterOfDeclarationAuthorizedSignatory() {
			return letterOfDeclarationAuthorizedSignatory;
		}
		public void setLetterOfDeclarationAuthorizedSignatory(String letterOfDeclarationAuthorizedSignatory) {
			this.letterOfDeclarationAuthorizedSignatory = letterOfDeclarationAuthorizedSignatory;
		}
		public String getCompanyBankAccountNumber() {
			return companyBankAccountNumber;
		}
		public void setCompanyBankAccountNumber(String companyBankAccountNumber) {
			this.companyBankAccountNumber = companyBankAccountNumber;
		}
		public String getCompanyIfscCode() {
			return companyIfscCode;
		}
		public void setCompanyIfscCode(String companyIfscCode) {
			this.companyIfscCode = companyIfscCode;
		}
		public String getCompanyBankName() {
			return companyBankName;
		}
		public void setCompanyBankName(String companyBankName) {
			this.companyBankName = companyBankName;
		}
		public String getCompanyBankBranchName() {
			return companyBankBranchName;
		}
		public void setCompanyBankBranchName(String companyBankBranchName) {
			this.companyBankBranchName = companyBankBranchName;
		}
		public Integer getTermsConditionCheck() {
			return termsConditionCheck;
		}
		public void setTermsConditionCheck(Integer termsConditionCheck) {
			this.termsConditionCheck = termsConditionCheck;
		}
		public Integer getConfirmationCheck() {
			return confirmationCheck;
		}
		public void setConfirmationCheck(Integer confirmationCheck) {
			this.confirmationCheck = confirmationCheck;
		}
		public Integer getNoOfTerminals() {
			return noOfTerminals;
		}
		public void setNoOfTerminals(Integer noOfTerminals) {
			this.noOfTerminals = noOfTerminals;
		}
		public Integer getEkycStatus() {
			return ekycStatus;
		}
		public void setEkycStatus(Integer ekycStatus) {
			this.ekycStatus = ekycStatus;
		}
		public String getOtp() {
			return otp;
		}
		public void setOtp(String otp) {
			this.otp = otp;
		}
		public Integer getOtpValidation() {
			return otpValidation;
		}
		public void setOtpValidation(Integer otpValidation) {
			this.otpValidation = otpValidation;
		}
		public String getBankAccountName() {
			return bankAccountName;
		}
		public void setBankAccountName(String bankAccountName) {
			this.bankAccountName = bankAccountName;
		}
		public String getCancelledChequeImages() {
			return cancelledChequeImages;
		}
		public void setCancelledChequeImages(String cancelledChequeImages) {
			this.cancelledChequeImages = cancelledChequeImages;
		}
		public String getEkycDocuments() {
			return ekycDocuments;
		}
		public void setEkycDocuments(String ekycDocuments) {
			this.ekycDocuments = ekycDocuments;
		}
		public String getGstInNumber() {
			return gstInNumber;
		}
		public void setGstInNumber(String gstInNumber) {
			this.gstInNumber = gstInNumber;
		}
		public String getCompanyOrShopPan() {
			return companyOrShopPan;
		}
		public void setCompanyOrShopPan(String companyOrShopPan) {
			this.companyOrShopPan = companyOrShopPan;
		}
		public Integer getParentId() {
			return parentId;
		}
		public void setParentId(Integer parentId) {
			this.parentId = parentId;
		}
		public Integer getCollectKycDoc() {
			return collectKycDoc;
		}
		public void setCollectKycDoc(Integer collectKycDoc) {
			this.collectKycDoc = collectKycDoc;
		}
		public Integer getSelfSettlement() {
			return selfSettlement;
		}
		public void setSelfSettlement(Integer selfSettlement) {
			this.selfSettlement = selfSettlement;
		}
		public String getAadhaarNumber() {
			return aadhaarNumber;
		}
		public void setAadhaarNumber(String aadhaarNumber) {
			this.aadhaarNumber = aadhaarNumber;
		}
		public Integer getAutomaticBankVerification() {
			return automaticBankVerification;
		}
		public void setAutomaticBankVerification(Integer automaticBankVerification) {
			this.automaticBankVerification = automaticBankVerification;
		}
		public Integer getAutomaticPanVerification() {
			return automaticPanVerification;
		}
		public void setAutomaticPanVerification(Integer automaticPanVerification) {
			this.automaticPanVerification = automaticPanVerification;
		}
		public String getAutomaticPanVerificationDetails() {
			return automaticPanVerificationDetails;
		}
		public void setAutomaticPanVerificationDetails(String automaticPanVerificationDetails) {
			this.automaticPanVerificationDetails = automaticPanVerificationDetails;
		}
		public Integer getAutomaticAadhaarVerification() {
			return automaticAadhaarVerification;
		}
		public void setAutomaticAadhaarVerification(Integer automaticAadhaarVerification) {
			this.automaticAadhaarVerification = automaticAadhaarVerification;
		}
		public String getAutomaticAadhaarVerificationDetails() {
			return automaticAadhaarVerificationDetails;
		}
		public void setAutomaticAadhaarVerificationDetails(String automaticAadhaarVerificationDetails) {
			this.automaticAadhaarVerificationDetails = automaticAadhaarVerificationDetails;
		}
		public String getSmsUrl() {
			return smsUrl;
		}
		public void setSmsUrl(String smsUrl) {
			this.smsUrl = smsUrl;
		}
		public String getCallBackUrl() {
			return callBackUrl;
		}
		public void setCallBackUrl(String callBackUrl) {
			this.callBackUrl = callBackUrl;
		}
		public String getCreatedByUsername() {
			return createdByUsername;
		}
		public void setCreatedByUsername(String createdByUsername) {
			this.createdByUsername = createdByUsername;
		}
		public Date getCreatedTimestamp() {
			return createdTimestamp;
		}
		public void setCreatedTimestamp(Date createdTimestamp) {
			this.createdTimestamp = createdTimestamp;
		}
		public String getCreatedIpAddress() {
			return createdIpAddress;
		}
		public void setCreatedIpAddress(String createdIpAddress) {
			this.createdIpAddress = createdIpAddress;
		}
		public String getEditedByUsername() {
			return editedByUsername;
		}
		public void setEditedByUsername(String editedByUsername) {
			this.editedByUsername = editedByUsername;
		}
		public Date getEditedTimestamp() {
			return editedTimestamp;
		}
		public void setEditedTimestamp(Date editedTimestamp) {
			this.editedTimestamp = editedTimestamp;
		}
		public String getEditedIpAddress() {
			return editedIpAddress;
		}
		public void setEditedIpAddress(String editedIpAddress) {
			this.editedIpAddress = editedIpAddress;
		}
		public Integer getInstantSettlementEnable() {
			return instantSettlementEnable;
		}
		public void setInstantSettlementEnable(Integer instantSettlementEnable) {
			this.instantSettlementEnable = instantSettlementEnable;
		}
		
		public String getOrganisation() {
			return organisation;
		}
		public void setOrganisation(String organisation) {
			this.organisation = organisation;
		}
		public String getEditedUsername() {
			return editedUsername;
		}
		public void setEditedUsername(String editedUsername) {
			this.editedUsername = editedUsername;
		}
		public String getEditedIp() {
			return editedIp;
		}
		public void setEditedIp(String editedIp) {
			this.editedIp = editedIp;
		}
		public String getFcmAuthKey() {
			return fcmAuthKey;
		}
		public void setFcmAuthKey(String fcmAuthKey) {
			this.fcmAuthKey = fcmAuthKey;
		}
		public Integer getDropCashEnable() {
			return dropCashEnable;
		}
		public void setDropCashEnable(Integer dropCashEnable) {
			this.dropCashEnable = dropCashEnable;
		}
		public Integer getSwitchFlag() {
			return switchFlag;
		}
		public void setSwitchFlag(Integer switchFlag) {
			this.switchFlag = switchFlag;
		}
		public Integer getSmsCwFlag() {
			return smsCwFlag;
		}
		public void setSmsCwFlag(Integer smsCwFlag) {
			this.smsCwFlag = smsCwFlag;
		}
		public Integer getSmsApFlag() {
			return smsApFlag;
		}
		public void setSmsApFlag(Integer smsApFlag) {
			this.smsApFlag = smsApFlag;
		}
		public Integer getSmsDropCashFlag() {
			return smsDropCashFlag;
		}
		public void setSmsDropCashFlag(Integer smsDropCashFlag) {
			this.smsDropCashFlag = smsDropCashFlag;
		}
		public Integer getSmsCashDepositFlag() {
			return smsCashDepositFlag;
		}
		public void setSmsCashDepositFlag(Integer smsCashDepositFlag) {
			this.smsCashDepositFlag = smsCashDepositFlag;
		}
		public String getHoMailId() {
			return hoMailId;
		}
		public void setHoMailId(String hoMailId) {
			this.hoMailId = hoMailId;
		}
		public String getUpiMerchantId() {
			return upiMerchantId;
		}
		public void setUpiMerchantId(String upiMerchantId) {
			this.upiMerchantId = upiMerchantId;
		}
		public String getBeneCode() {
			return beneCode;
		}
		public void setBeneCode(String beneCode) {
			this.beneCode = beneCode;
		}
		public String getSecretKey() {
			return secretKey;
		}
		public void setSecretKey(String secretKey) {
			this.secretKey = secretKey;
		}
		public Date getPwdLastChangedTimestamp() {
			return pwdLastChangedTimestamp;
		}
		public void setPwdLastChangedTimestamp(Date pwdLastChangedTimestamp) {
			this.pwdLastChangedTimestamp = pwdLastChangedTimestamp;
		}
		public String getAnalyticsPortalPassword() {
			return analyticsPortalPassword;
		}
		public void setAnalyticsPortalPassword(String analyticsPortalPassword) {
			this.analyticsPortalPassword = analyticsPortalPassword;
		}
		public Integer getPanVerificationActiveFlag() {
			return panVerificationActiveFlag;
		}
		public void setPanVerificationActiveFlag(Integer panVerificationActiveFlag) {
			this.panVerificationActiveFlag = panVerificationActiveFlag;
		}
		public Integer getBankVerificationActiveFlag() {
			return bankVerificationActiveFlag;
		}
		public void setBankVerificationActiveFlag(Integer bankVerificationActiveFlag) {
			this.bankVerificationActiveFlag = bankVerificationActiveFlag;
		}
		public Integer getVoterIdVerificationActiveFlag() {
			return voterIdVerificationActiveFlag;
		}
		public void setVoterIdVerificationActiveFlag(Integer voterIdVerificationActiveFlag) {
			this.voterIdVerificationActiveFlag = voterIdVerificationActiveFlag;
		}
		
		
		public String getAutomaticBankVerificationDetails() {
			return automaticBankVerificationDetails;
		}
		public void setAutomaticBankVerificationDetails(String automaticBankVerificationDetails) {
			this.automaticBankVerificationDetails = automaticBankVerificationDetails;
		}
		@Override
		public String toString() {
			return "SuperMerchantModel [id=" + id + ", loginId=" + loginId + ", loginPassword=" + loginPassword
					+ ", superMerchantName=" + superMerchantName + ", typeOfBusiness=" + typeOfBusiness + ", hoAddress="
					+ hoAddress + ", hoPhoneNumber=" + hoPhoneNumber + ", logo=" + logo + ", remarks=" + remarks
					+ ", timesatmp=" + timesatmp + ", updatedTimestamp=" + updatedTimestamp + ", activeFlag="
					+ activeFlag + ", companyLegalName=" + companyLegalName + ", companyMarketingName="
					+ companyMarketingName + ", dateOfIncorporation=" + dateOfIncorporation + ", officialContactNo="
					+ officialContactNo + ", emailId=" + emailId + ", pincode=" + pincode + ", shopAndPanImage="
					+ shopAndPanImage + ", certificateOfIncorporationImage=" + certificateOfIncorporationImage
					+ ", userType=" + userType + ", userPan=" + userPan + ", letterOfDeclarationAuthorizedSignatory="
					+ letterOfDeclarationAuthorizedSignatory + ", companyBankAccountNumber=" + companyBankAccountNumber
					+ ", companyIfscCode=" + companyIfscCode + ", companyBankName=" + companyBankName
					+ ", companyBankBranchName=" + companyBankBranchName + ", termsConditionCheck="
					+ termsConditionCheck + ", confirmationCheck=" + confirmationCheck + ", noOfTerminals="
					+ noOfTerminals + ", ekycStatus=" + ekycStatus + ", otp=" + otp + ", otpValidation=" + otpValidation
					+ ", bankAccountName=" + bankAccountName + ", cancelledChequeImages=" + cancelledChequeImages
					+ ", ekycDocuments=" + ekycDocuments + ", gstInNumber=" + gstInNumber + ", companyOrShopPan="
					+ companyOrShopPan + ", parentId=" + parentId + ", collectKycDoc=" + collectKycDoc
					+ ", selfSettlement=" + selfSettlement + ", aadhaarNumber=" + aadhaarNumber
					+ ", automaticBankVerification=" + automaticBankVerification + ", automaticPanVerification="
					+ automaticPanVerification + ", automaticPanVerificationDetails=" + automaticPanVerificationDetails
					+ ", automaticAadhaarVerification=" + automaticAadhaarVerification
					+ ", automaticAadhaarVerificationDetails=" + automaticAadhaarVerificationDetails + ", smsUrl="
					+ smsUrl + ", callBackUrl=" + callBackUrl + ", createdByUsername=" + createdByUsername
					+ ", createdTimestamp=" + createdTimestamp + ", createdIpAddress=" + createdIpAddress
					+ ", editedByUsername=" + editedByUsername + ", editedTimestamp=" + editedTimestamp
					+ ", editedIpAddress=" + editedIpAddress + ", instantSettlementEnable=" + instantSettlementEnable
					+ ", organisation=" + organisation + ", editedUsername="
					+ editedUsername + ", editedIp=" + editedIp + ", fcmAuthKey=" + fcmAuthKey + ", dropCashEnable="
					+ dropCashEnable + ", switchFlag=" + switchFlag + ", smsCwFlag=" + smsCwFlag + ", smsApFlag="
					+ smsApFlag + ", smsDropCashFlag=" + smsDropCashFlag + ", smsCashDepositFlag=" + smsCashDepositFlag
					+ ", hoMailId=" + hoMailId + ", upiMerchantId=" + upiMerchantId + ", beneCode=" + beneCode
					+ ", secretKey=" + secretKey + ", pwdLastChangedTimestamp=" + pwdLastChangedTimestamp
					+ ", analyticsPortalPassword=" + analyticsPortalPassword + ", panVerificationActiveFlag="
					+ panVerificationActiveFlag + ", bankVerificationActiveFlag=" + bankVerificationActiveFlag
					+ ", voterIdVerificationActiveFlag=" + voterIdVerificationActiveFlag + "]";
		}
	    
		
		
	    
	    

}
package com.apptmyz.fpcontrolpanel.data;

public class Threewayfilemodel {

	
	private String file;

	public String getFile() {
		return file;
	}

	public void setFile(String file) {
		this.file = file;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ThreeWayModel {
	
	private String merchantTransactionId;
	private String responseCode;
	private String serviceType;
	private String TransactionDate;
	private Integer superMerchantId;
	private String fingpayTransactionId;
	private String responseRrn;
	private String remarks;
	private Integer flag;
	private String status;
	
	
	
	public String getMerchantTransactionId() {
		return merchantTransactionId;
	}
	public void setMerchantTransactionId(String merchantTransactionId) {
		this.merchantTransactionId = merchantTransactionId;
	}
	public String getResponseCode() {
		return responseCode;
	}
	public void setResponseCode(String responseCode) {
		this.responseCode = responseCode;
	}
	public String getServiceType() {
		return serviceType;
	}
	public void setServiceType(String serviceType) {
		this.serviceType = serviceType;
	}
	public String getTransactionDate() {
		return TransactionDate;
	}
	public void setTransactionDate(String transactionDate) {
		TransactionDate = transactionDate;
	}
	
	
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getResponseRrn() {
		return responseRrn;
	}
	public void setResponseRrn(String responseRrn) {
		this.responseRrn = responseRrn;
	}
	public String getRemarks() {
		return remarks;
	}
	public void setRemarks(String remarks) {
		this.remarks = remarks;
	}
	public Integer getFlag() {
		return flag;
	}
	public void setFlag(Integer flag) {
		this.flag = flag;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getFingpayTransactionId() {
		return fingpayTransactionId;
	}
	public void setFingpayTransactionId(String fingpayTransactionId) {
		this.fingpayTransactionId = fingpayTransactionId;
	}
	
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.time.format.FormatStyle;
import java.time.temporal.TemporalAccessor;
import java.time.ZoneId;
import com.google.gson.Gson;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;


import java.lang.reflect.Type; 
import java.text.DateFormat; 
import java.text.ParseException; 
import java.text.SimpleDateFormat; 
   
import com.google.gson.JsonDeserializationContext; 
import com.google.gson.JsonDeserializer; 
import com.google.gson.JsonElement; 
import com.google.gson.JsonParseException; 
import com.google.gson.JsonPrimitive; 
import com.google.gson.JsonSerializationContext; 
import com.google.gson.JsonSerializer; 
import static java.time.format.DateTimeFormatter.ISO_INSTANT;

//public class TimestampAdapter extends TypeAdapter<Timestamp> {
//
//
//    public Timestamp read(JsonReader in) throws IOException {
//        return new Timestamp(in.nextLong() * 1000);  // convert seconds to milliseconds
//    }
//
//    public void write(JsonWriter out, Timestamp timestamp) throws IOException {
//        out.value(timestamp.getTime() / 1000);  // convert milliseconds to seconds
//    }
//    
//}     
    public class TimestampAdapter implements JsonSerializer<Timestamp>, JsonDeserializer<Timestamp>{ 
        private final DateFormat format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
        public JsonElement serialize(Timestamp src, Type arg1, JsonSerializationContext arg2) { 
            String dateFormatAsString = format.format(new Date(src.getTime())); 
            return new JsonPrimitive(dateFormatAsString); 
        } 
       
        public Timestamp deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException { 
            if (!(json instanceof JsonPrimitive)) { 
                throw new JsonParseException("The date should be a string value"); 
            } 
       
            try { 
                Date date = (Date) format.parse(json.getAsString()); 
                return new Timestamp(date.getTime()); 
            } catch (ParseException e) { 
                throw new JsonParseException(e); 
            } 
        } 
       
    } 
    

package com.apptmyz.fpcontrolpanel.data;

public class ToApproveCommissionDetailsModel {

	private Integer primaryKeyId;
	private String name;
	private String userType;
	private String createdBy;
	private String createdTimeStamp;
	
	public Integer getPrimaryKeyId() {
		return primaryKeyId;
	}
	public void setPrimaryKeyId(Integer primaryKeyId) {
		this.primaryKeyId = primaryKeyId;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getUserType() {
		return userType;
	}
	public void setUserType(String userType) {
		this.userType = userType;
	}
	public String getCreatedBy() {
		return createdBy;
	}
	public void setCreatedBy(String createdBy) {
		this.createdBy = createdBy;
	}
	public String getCreatedTimeStamp() {
		return createdTimeStamp;
	}
	public void setCreatedTimeStamp(String createdTimeStamp) {
		this.createdTimeStamp = createdTimeStamp;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.sql.Timestamp;

public class TransactionSearchByRRNResult {

	private String     product;
	private String     bankSwitch ;
    private String     superMerchantName ;
    private String     parentMerchantName;
    private long  requestedTimestamp ;
    private Double     transactionAmount ;
    private String     responseCode ;
    private String     responseRrn  ;
    private String     stan         ;
    private String     bankName;
    private String     fingpayTransactionId ;
    private String     cardAcceptorTerminalIdentification ;
    private String     merchantTransactionId ;
    private long  resposeTimestamp ;
    private Integer    merchantId   ;
    private String     adhaarNumber ;
    private String     deviceImei   ;
    private String     merchant_name;
    private String     merchant_login_id;
    private Double     latitude;
    private Double     longitude;
    private String     lastUsedHash;
    private Integer ekycStatusFlag;
    private Integer superMerchantId;
    private Integer parentId;
	    
	    public String getProduct() {
	        return product;
	    }

	    public void setProduct(String product) {
	        this.product = product;
	    }

	    public String getBankSwitch() {
	        return bankSwitch;
	    }

	    public void setBankSwitch(String bankSwitch) {
	        this.bankSwitch = bankSwitch;
	    }

	    public String getSuperMerchantName() {
	        return superMerchantName;
	    }

	    public void setSuperMerchantName(String superMerchantName) {
	        this.superMerchantName = superMerchantName;
	    }

	    public String getParentMerchantName() {
	        return parentMerchantName;
	    }

	    public void setParentMerchantName(String parentMerchantName) {
	        this.parentMerchantName = parentMerchantName;
	    }


	    public long getRequestedTimestamp() {
			return requestedTimestamp;
		}

		public void setRequestedTimestamp(long requestedTimestamp) {
			this.requestedTimestamp = requestedTimestamp;
		}

		public long getResposeTimestamp() {
			return resposeTimestamp;
		}

		public void setResposeTimestamp(long resposeTimestamp) {
			this.resposeTimestamp = resposeTimestamp;
		}

		public Double getTransactionAmount() {
	        return transactionAmount;
	    }

	    public void setTransactionAmount(Double transactionAmount) {
	        this.transactionAmount = transactionAmount;
	    }

	    public String getResponseCode() {
	        return responseCode;
	    }

	    public void setResponseCode(String responseCode) {
	        this.responseCode = responseCode;
	    }

	    public String getResponseRrn() {
	        return responseRrn;
	    }

	    public void setResponseRrn(String responseRrn) {
	        this.responseRrn = responseRrn;
	    }

	    public String getStan() {
	        return stan;
	    }

	    public void setStan(String stan) {
	        this.stan = stan;
	    }

	    public String getBankName() {
	        return bankName;
	    }

	    public void setBankName(String bankName) {
	        this.bankName = bankName;
	    }

	    public String getFingpayTransactionId() {
	        return fingpayTransactionId;
	    }

	    public void setFingpayTransactionId(String fingpayTransactionId) {
	        this.fingpayTransactionId = fingpayTransactionId;
	    }

	    public String getCardAcceptorTerminalIdentification() {
	        return cardAcceptorTerminalIdentification;
	    }

	    public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
	        this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
	    }

	    public String getMerchantTransactionId() {
	        return merchantTransactionId;
	    }

	    public void setMerchantTransactionId(String merchantTransactionId) {
	        this.merchantTransactionId = merchantTransactionId;
	    }

	   

	    public Integer getMerchantId() {
	        return merchantId;
	    }

	    public void setMerchantId(Integer merchantId) {
	        this.merchantId = merchantId;
	    }

	    public String getAdhaarNumber() {
	        return adhaarNumber;
	    }

	    public void setAdhaarNumber(String adhaarNumber) {
	        this.adhaarNumber = adhaarNumber;
	    }

	    public String getDeviceImei() {
	        return deviceImei;
	    }

	    public void setDeviceImei(String deviceImei) {
	        this.deviceImei = deviceImei;
	    }

	    public String getMerchant_name() {
	        return merchant_name;
	    }

	    public void setMerchant_name(String merchant_name) {
	        this.merchant_name = merchant_name;
	    }

	    public String getMerchant_login_id() {
	        return merchant_login_id;
	    }

	    public void setMerchant_login_id(String merchant_login_id) {
	        this.merchant_login_id = merchant_login_id;
	    }
	    
	    

	    public Double getLatitude() {
			return latitude;
		}

		public void setLatitude(Double latitude) {
			this.latitude = latitude;
		}

		public Double getLongitude() {
			return longitude;
		}

		public void setLongitude(Double longitude) {
			this.longitude = longitude;
		}

		public String getLastUsedHash() {
			return lastUsedHash;
		}

		public void setLastUsedHash(String lastUsedHash) {
			this.lastUsedHash = lastUsedHash;
		}

		@Override
	    public String toString() {
	        return "TransactionSearchByRRNResult{" +
	                "bankSwitch='" + bankSwitch + '\'' +
	                ", superMerchantName='" + superMerchantName + '\'' +
	                ", parentMerchantName='" + parentMerchantName + '\'' +
	                ", requestedTimestamp=" + requestedTimestamp +
	                ", transactionAmount=" + transactionAmount +
	                ", responseCode='" + responseCode + '\'' +
	                ", responseRrn='" + responseRrn + '\'' +
	                ", stan='" + stan + '\'' +
	                ", bankName='" + bankName + '\'' +
	                ", fingpayTransactionId='" + fingpayTransactionId + '\'' +
	                ", cardAcceptorTerminalIdentification='" + cardAcceptorTerminalIdentification + '\'' +
	                ", merchantTransactionId='" + merchantTransactionId + '\'' +
	                ", resposeTimestamp=" + resposeTimestamp +
	                ", merchantId=" + merchantId +
	                ", adhaarNumber='" + adhaarNumber + '\'' +
	                ", deviceImei='" + deviceImei + '\'' +
	                ", merchant_name='" + merchant_name + '\'' +
	                ", latitude='" + latitude + '\'' +
	                 ", longitude='" + longitude + '\'' +
	                  ", lastUsedHash='" + lastUsedHash + '\'' +
	                '}';
	    }

		public Integer getEkycStatusFlag() {
			return ekycStatusFlag;
		}

		public void setEkycStatusFlag(Integer ekycStatusFlag) {
			this.ekycStatusFlag = ekycStatusFlag;
		}

		public Integer getSuperMerchantId() {
			return superMerchantId;
		}

		public void setSuperMerchantId(Integer superMerchantId) {
			this.superMerchantId = superMerchantId;
		}

		public Integer getParentId() {
			return parentId;
		}

		public void setParentId(Integer parentId) {
			this.parentId = parentId;
		}

}
package com.apptmyz.fpcontrolpanel.data;

public class UpdateFeaturePermissionsModel 
{
	private String id;
	private String userName;
	private String featureGrpCode;
	private String featureCode;
	private String permCreate;
	private String permRead;
	private String permUpdate;
	private String permDelete;
	private String permApprove;
	private String activeFlag;
	public String getId() {
		return id;
	}
	public void setId(String id) {
		this.id = id;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getFeatureGrpCode() {
		return featureGrpCode;
	}
	public void setFeatureGrpCode(String featureGrpCode) {
		this.featureGrpCode = featureGrpCode;
	}
	public String getFeatureCode() {
		return featureCode;
	}
	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}
	public String getPermCreate() {
		return permCreate;
	}
	public void setPermCreate(String permCreate) {
		this.permCreate = permCreate;
	}
	public String getPermRead() {
		return permRead;
	}
	public void setPermRead(String permRead) {
		this.permRead = permRead;
	}
	public String getPermUpdate() {
		return permUpdate;
	}
	public void setPermUpdate(String permUpdate) {
		this.permUpdate = permUpdate;
	}
	public String getPermDelete() {
		return permDelete;
	}
	public void setPermDelete(String permDelete) {
		this.permDelete = permDelete;
	}
	public String getPermApprove() {
		return permApprove;
	}
	public void setPermApprove(String permApprove) {
		this.permApprove = permApprove;
	}
	public String getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(String activeFlag) {
		this.activeFlag = activeFlag;
	}
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

public class upiresponseModel {
	
	private String statusCode;
	private String statusMessage;
	private String merchantTranId;
	private Long refundResponseTimestamp;
	private String responseBankRrn;
	
	
	public String getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(String statusCode) {
		this.statusCode = statusCode;
	}
	public String getStatusMessage() {
		return statusMessage;
	}
	public void setStatusMessage(String statusMessage) {
		this.statusMessage = statusMessage;
	}
	public String getMerchantTranId() {
		return merchantTranId;
	}
	public void setMerchantTranId(String merchantTranId) {
		this.merchantTranId = merchantTranId;
	}
	public Long getRefundResponseTimestamp() {
		return refundResponseTimestamp;
	}
	public void setRefundResponseTimestamp(Long refundResponseTimestamp) {
		this.refundResponseTimestamp = refundResponseTimestamp;
	}
	public String getResponseBankRrn() {
		return responseBankRrn;
	}
	public void setResponseBankRrn(String responseBankRrn) {
		this.responseBankRrn = responseBankRrn;
	}
	
	
	
	

}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Date;

public class UserDataLogin {
	
	
	private String user_name;
	private String password;
	
	
	public String getUser_name() {
		return user_name;
	}
	public void setUser_name(String user_name) {
		this.user_name = user_name;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
		
	
}
package com.apptmyz.fpcontrolpanel.data;

import java.util.Collection;
import java.util.List;
import java.util.Map;

public class UserPermissionsModel {
	private Integer id;
	private String userName;
	private String featureGrpCode;
	private String featureCode;
	private Integer permCreate;
	private Integer permRead;
	private Integer permUpdate;
	private Integer permDelete;
	private Integer permApprove;
	private Integer activeFlag;
	private Integer createdTimestamp;
	private Integer updatedTimestamp;
	private Collection<List<SidenavModel>> sidenav;
	
	public Collection<List<SidenavModel>> getSidenav() {
		return sidenav;
	}
	public void setSidenav(Collection<List<SidenavModel>> collection) {
		this.sidenav = collection;
	}
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getFeatureGrpCode() {
		return featureGrpCode;
	}
	public void setFeatureGrpCode(String featureGrpCode) {
		this.featureGrpCode = featureGrpCode;
	}
	
	public String getFeatureCode() {
		return featureCode;
	}
	public void setFeatureCode(String featureCode) {
		this.featureCode = featureCode;
	}
	
	public Integer getPermCreate() {
		return permCreate;
	}
	public void setPermCreate(Integer permCreate) {
		this.permCreate = permCreate;
	}
	public Integer getPermRead() {
		return permRead;
	}
	public void setPermRead(Integer permRead) {
		this.permRead = permRead;
	}
	public Integer getPermUpdate() {
		return permUpdate;
	}
	public void setPermUpdate(Integer permUpdate) {
		this.permUpdate = permUpdate;
	}
	public Integer getPermDelete() {
		return permDelete;
	}
	public void setPermDelete(Integer permDelete) {
		this.permDelete = permDelete;
	}
	public Integer getPermApprove() {
		return permApprove;
	}
	public void setPermApprove(Integer permApprove) {
		this.permApprove = permApprove;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public Integer getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(Integer createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public Integer getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(Integer updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	@Override
	public String toString() {
		return "UserPermissionsModel [id=" + id + ", userName=" + userName + ", featureGrpCode=" + featureGrpCode
				+ ", permCreate=" + permCreate + ", permRead=" + permRead + ", permUpdate=" + permUpdate
				+ ", permDelete=" + permDelete + ", permApprove=" + permApprove + ", activeFlag=" + activeFlag
				+ ", createdTimestamp=" + createdTimestamp + ", updatedTimestamp=" + updatedTimestamp + ", sidenav="
				+ sidenav + "]";
	}

	
	
}
package com.apptmyz.fpcontrolpanel.data;

public class ValidateMandatoryFieldsResponseDataModel {
	 
	private boolean valid;
	private String message;
	public ValidateMandatoryFieldsResponseDataModel() {}
	public ValidateMandatoryFieldsResponseDataModel(boolean valid, String message) {
		super();
		this.valid = valid;
		this.message = message;
	}
	
	public boolean isValid() {
		return valid;
	}
	public void setValid(boolean valid) {
		this.valid = valid;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	@Override
	public String toString() {
		return "ValidateMandatoryFieldsResponseDataModel [valid=" + valid + ", message=" + message + "]";
	} 
	
	
	
	
	
}
package com.apptmyz.fpcontrolpanel;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.boot.builder.SpringApplicationBuilder;
import org.springframework.boot.web.support.SpringBootServletInitializer;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.context.annotation.Bean;
//import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
//import org.springframework.data.authentication.UserCredentials;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.web.client.RestTemplate;
//import org.springframework.data.mongodb.MongoDbFactory;
//import org.springframework.data.mongodb.core.MongoTemplate;
//import org.springframework.data.mongodb.core.SimpleMongoDbFactory;
//import org.springframework.data.mongodb.repository.config.EnableMongoRepositories;
import org.springframework.web.servlet.config.annotation.EnableWebMvc;

//import com.mongodb.MongoClient;

@EnableJpaRepositories(basePackages = { "com.apptmyz.fpcontrolpaneldb.repository","com.apptmyz.fpaepsdb.repository","com.apptmyz.fpsettlementdb.repository","com.apptmyz.fpcarddb.repository","com.fingpay.fpekycdatadb.repository"})
@EntityScan(basePackages = { "com.apptmyz.fpcontrolpaneldb.entity","com.apptmyz.fpaepsdb.entity","com.apptmyz.fpsettlementdb.entity","com.apptmyz.fpcarddb.entity", "com.fingpay.fpekycdatadb.entity"})
@ComponentScan(basePackages = {"com.apptmyz.fpcontrolpanel.utils", "com.apptmyz.fpcontrolpanel.services","com.apptmyz.fpcontrolpanel.controller","com.apptmyz.fpcontrolpanel.data"})
@Configuration
@EnableWebMvc
@SpringBootApplication
@EnableCaching
public class FpControlPanelApplication extends SpringBootServletInitializer {
	  
	@Override
	protected SpringApplicationBuilder configure(SpringApplicationBuilder application) {
		return application.sources(FpControlPanelApplication.class);
	}
	@Bean
	   public RestTemplate getRestTemplate() {
	      return new RestTemplate();
	   }
	public static void main(String[] args) {
		SpringApplication.run(FpControlPanelApplication.class, args);
	}
	
	
}
package com.apptmyz.fpcontrolpanel.response;

public class AnalyticsAuthenticateUserResponse {
	
	private Integer userId;
	private String username;
	private Integer userType;
	private Integer activeFlag;
	private Integer adminRadioButton;
	private Integer distributorRadioButton;
	private Integer aggregatorRadioButton;
	private Integer merchantRadioButton;
	private Integer managementRadioButton;
	private Integer branchRadioButton;
	private Integer branchRoleId;
	private String organisation;
	private Integer superUserId;
	private String branchName;
	private Integer role;
	
	
	public Integer getUserId() {
		return userId;
	}
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public Integer getUserType() {
		return userType;
	}
	public void setUserType(Integer userType) {
		this.userType = userType;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public Integer getAdminRadioButton() {
		return adminRadioButton;
	}
	public void setAdminRadioButton(Integer adminRadioButton) {
		this.adminRadioButton = adminRadioButton;
	}
	public Integer getDistributorRadioButton() {
		return distributorRadioButton;
	}
	public void setDistributorRadioButton(Integer distributorRadioButton) {
		this.distributorRadioButton = distributorRadioButton;
	}
	public Integer getAggregatorRadioButton() {
		return aggregatorRadioButton;
	}
	public void setAggregatorRadioButton(Integer aggregatorRadioButton) {
		this.aggregatorRadioButton = aggregatorRadioButton;
	}
	public Integer getMerchantRadioButton() {
		return merchantRadioButton;
	}
	public void setMerchantRadioButton(Integer merchantRadioButton) {
		this.merchantRadioButton = merchantRadioButton;
	}
	public Integer getManagementRadioButton() {
		return managementRadioButton;
	}
	public void setManagementRadioButton(Integer managementRadioButton) {
		this.managementRadioButton = managementRadioButton;
	}
	public Integer getBranchRadioButton() {
		return branchRadioButton;
	}
	public void setBranchRadioButton(Integer branchRadioButton) {
		this.branchRadioButton = branchRadioButton;
	}
	public Integer getBranchRoleId() {
		return branchRoleId;
	}
	public void setBranchRoleId(Integer branchRoleId) {
		this.branchRoleId = branchRoleId;
	}
	public String getOrganisation() {
		return organisation;
	}
	public void setOrganisation(String organisation) {
		this.organisation = organisation;
	}
	public Integer getSuperUserId() {
		return superUserId;
	}
	public void setSuperUserId(Integer superUserId) {
		this.superUserId = superUserId;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	public Integer getRole() {
		return role;
	}
	public void setRole(Integer role) {
		this.role = role;
	}
	
	

}
package com.apptmyz.fpcontrolpanel.response;

import java.util.Date;

public class APRrnResponseModel {

	private Integer    id           ;
    private String     fingpayTransactionId ;
    private String     adhaarNumber ;
    private String     phoneNumber  ;
    private String     pan          ;
    private String     stan         ;
    private String     iin          ;
    private Double     transactionAmount ;
    private String     track3Data   ;
    private String     cardAcceptorTerminalIdentification ;
    private String     bcIdentificationCode ;
    private String     transactionIdentifier ;
    private Date       requestedTimestamp ;
    private String     requestedRemarks ;
    private String     webStatus    ;
    private Double     latitude     ;
    private Double     longitude    ;
    private String     deviceImei   ;
    private Integer    merchantId   ;
    private String     lastUsedHash ;
    private String     responsePan  ;
    private String     responseTime ;
    private String     responseDate ;
    private String     responseRrn  ;
    private String     responseAuthorizationIdentificationResponse ;
    private String     responseCode ;
    private String     responseCardAcceptorTerminalIdentification ;
    private String     responceCardAcceptorNameOrLocation ;
    private String     responseAdditionalAmounts ;
    private String     responseAddtionalData ;
    private String     responseAuthenticationCode ;
    private String     responseRemarks ;
    private String     merchantTransactionId ;
    private String     responseAccountIdentification1 ;
    private Date       resposeTimestamp ;
    private String     merchantName;
    private String     superMerchantName;
    private String     branchName;
    private String   bankName;
    private String   parentName;
    private String   errorMessage;
    private String     parentMerchantName;
    private String     branchLoginId;
    private String     merchantLoginId;
    private String     state;
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getFingpayTransactionId() {
		return fingpayTransactionId;
	}
	public void setFingpayTransactionId(String fingpayTransactionId) {
		this.fingpayTransactionId = fingpayTransactionId;
	}
	public String getAdhaarNumber() {
		return adhaarNumber;
	}
	public void setAdhaarNumber(String adhaarNumber) {
		this.adhaarNumber = adhaarNumber;
	}
	public String getPhoneNumber() {
		return phoneNumber;
	}
	public void setPhoneNumber(String phoneNumber) {
		this.phoneNumber = phoneNumber;
	}
	public String getPan() {
		return pan;
	}
	public void setPan(String pan) {
		this.pan = pan;
	}
	public String getStan() {
		return stan;
	}
	public void setStan(String stan) {
		this.stan = stan;
	}
	public String getIin() {
		return iin;
	}
	public void setIin(String iin) {
		this.iin = iin;
	}
	public Double getTransactionAmount() {
		return transactionAmount;
	}
	public void setTransactionAmount(Double transactionAmount) {
		this.transactionAmount = transactionAmount;
	}
	public String getTrack3Data() {
		return track3Data;
	}
	public void setTrack3Data(String track3Data) {
		this.track3Data = track3Data;
	}
	public String getCardAcceptorTerminalIdentification() {
		return cardAcceptorTerminalIdentification;
	}
	public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
		this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
	}
	public String getBcIdentificationCode() {
		return bcIdentificationCode;
	}
	public void setBcIdentificationCode(String bcIdentificationCode) {
		this.bcIdentificationCode = bcIdentificationCode;
	}
	public String getTransactionIdentifier() {
		return transactionIdentifier;
	}
	public void setTransactionIdentifier(String transactionIdentifier) {
		this.transactionIdentifier = transactionIdentifier;
	}
	public Date getRequestedTimestamp() {
		return requestedTimestamp;
	}
	public void setRequestedTimestamp(Date requestedTimestamp) {
		this.requestedTimestamp = requestedTimestamp;
	}
	public String getRequestedRemarks() {
		return requestedRemarks;
	}
	public void setRequestedRemarks(String requestedRemarks) {
		this.requestedRemarks = requestedRemarks;
	}
	public String getWebStatus() {
		return webStatus;
	}
	public void setWebStatus(String webStatus) {
		this.webStatus = webStatus;
	}
	public Double getLatitude() {
		return latitude;
	}
	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}
	public Double getLongitude() {
		return longitude;
	}
	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}
	public String getDeviceImei() {
		return deviceImei;
	}
	public void setDeviceImei(String deviceImei) {
		this.deviceImei = deviceImei;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getLastUsedHash() {
		return lastUsedHash;
	}
	public void setLastUsedHash(String lastUsedHash) {
		this.lastUsedHash = lastUsedHash;
	}
	public String getResponsePan() {
		return responsePan;
	}
	public void setResponsePan(String responsePan) {
		this.responsePan = responsePan;
	}
	public String getResponseTime() {
		return responseTime;
	}
	public void setResponseTime(String responseTime) {
		this.responseTime = responseTime;
	}
	public String getResponseDate() {
		return responseDate;
	}
	public void setResponseDate(String responseDate) {
		this.responseDate = responseDate;
	}
	public String getResponseRrn() {
		return responseRrn;
	}
	public void setResponseRrn(String responseRrn) {
		this.responseRrn = responseRrn;
	}
	public String getResponseAuthorizationIdentificationResponse() {
		return responseAuthorizationIdentificationResponse;
	}
	public void setResponseAuthorizationIdentificationResponse(String responseAuthorizationIdentificationResponse) {
		this.responseAuthorizationIdentificationResponse = responseAuthorizationIdentificationResponse;
	}
	public String getResponseCode() {
		return responseCode;
	}
	public void setResponseCode(String responseCode) {
		this.responseCode = responseCode;
	}
	public String getResponseCardAcceptorTerminalIdentification() {
		return responseCardAcceptorTerminalIdentification;
	}
	public void setResponseCardAcceptorTerminalIdentification(String responseCardAcceptorTerminalIdentification) {
		this.responseCardAcceptorTerminalIdentification = responseCardAcceptorTerminalIdentification;
	}
	public String getResponceCardAcceptorNameOrLocation() {
		return responceCardAcceptorNameOrLocation;
	}
	public void setResponceCardAcceptorNameOrLocation(String responceCardAcceptorNameOrLocation) {
		this.responceCardAcceptorNameOrLocation = responceCardAcceptorNameOrLocation;
	}
	public String getResponseAdditionalAmounts() {
		return responseAdditionalAmounts;
	}
	public void setResponseAdditionalAmounts(String responseAdditionalAmounts) {
		this.responseAdditionalAmounts = responseAdditionalAmounts;
	}
	public String getResponseAddtionalData() {
		return responseAddtionalData;
	}
	public void setResponseAddtionalData(String responseAddtionalData) {
		this.responseAddtionalData = responseAddtionalData;
	}
	public String getResponseAuthenticationCode() {
		return responseAuthenticationCode;
	}
	public void setResponseAuthenticationCode(String responseAuthenticationCode) {
		this.responseAuthenticationCode = responseAuthenticationCode;
	}
	public String getResponseRemarks() {
		return responseRemarks;
	}
	public void setResponseRemarks(String responseRemarks) {
		this.responseRemarks = responseRemarks;
	}
	public String getMerchantTransactionId() {
		return merchantTransactionId;
	}
	public void setMerchantTransactionId(String merchantTransactionId) {
		this.merchantTransactionId = merchantTransactionId;
	}
	public String getResponseAccountIdentification1() {
		return responseAccountIdentification1;
	}
	public void setResponseAccountIdentification1(String responseAccountIdentification1) {
		this.responseAccountIdentification1 = responseAccountIdentification1;
	}
	public Date getResposeTimestamp() {
		return resposeTimestamp;
	}
	public void setResposeTimestamp(Date resposeTimestamp) {
		this.resposeTimestamp = resposeTimestamp;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	public String getBranchName() {
		return branchName;
	}
	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}
	public String getBankName() {
		return bankName;
	}
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}
	public String getParentName() {
		return parentName;
	}
	public void setParentName(String parentName) {
		this.parentName = parentName;
	}
	public String getErrorMessage() {
		return errorMessage;
	}
	public void setErrorMessage(String errorMessage) {
		this.errorMessage = errorMessage;
	}
	public String getParentMerchantName() {
		return parentMerchantName;
	}
	public void setParentMerchantName(String parentMerchantName) {
		this.parentMerchantName = parentMerchantName;
	}
	public String getBranchLoginId() {
		return branchLoginId;
	}
	public void setBranchLoginId(String branchLoginId) {
		this.branchLoginId = branchLoginId;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public String getState() {
		return state;
	}
	public void setState(String state) {
		this.state = state;
	}
}
package com.apptmyz.fpcontrolpanel.response;

import java.util.Date;
import java.util.List;

import com.apptmyz.fpcontrolpanel.data.UserPermissionsModel;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpUserPermissions;

public class AuthenticateUserResponse {

	private Integer id;
	private String userName;
	private String password;
	private String userRole;
	private Integer activeFlag;
	private String userTeam;
	private Date createdTimestamp;
	private Date updatedTimestamp;
	private String contactNo;
	private String emailId;
	private String txnPin;
	private List<UserPermissionsModel> fpUserPermissions;
	
	public String getTxnPin() {
		return txnPin;
	}
	public void setTxnPin(String txnPin) {
		this.txnPin = txnPin;
	}
	public List<UserPermissionsModel> getFpUserPermissions() {
		return fpUserPermissions;
	}
	public void setFpUserPermissions(List<UserPermissionsModel> fpUserPermissions) {
		this.fpUserPermissions = fpUserPermissions;
	}
	public String getContactNo() {
		return contactNo;
	}
	public void setContactNo(String contactNo) {
		this.contactNo = contactNo;
	}
	public String getEmailId() {
		return emailId;
	}
	public void setEmailId(String emailId) {
		this.emailId = emailId;
	}
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUserRole() {
		return userRole;
	}
	public void setUserRole(String userRole) {
		this.userRole = userRole;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public Date getCreatedTimestamp() {
		return createdTimestamp;
	}
	public void setCreatedTimestamp(Date createdTimestamp) {
		this.createdTimestamp = createdTimestamp;
	}
	public Date getUpdatedTimestamp() {
		return updatedTimestamp;
	}
	public void setUpdatedTimestamp(Date updatedTimestamp) {
		this.updatedTimestamp = updatedTimestamp;
	}
	public String getUserTeam() {
		return userTeam;
	}
	public void setUserTeam(String userTeam) {
		this.userTeam = userTeam;
	}
	
}
package com.apptmyz.fpcontrolpanel.response;

public class AuthenticateUserResponseAP {

	private Integer userId;
	private String username;
	private Integer userType;
	private Integer activeFlag;
	private Integer adminRadioButton;
	private Integer distributorRadioButton;
	private Integer aggregatorRadioButton;
	private Integer merchantRadioButton;
	private Integer branchRadioButton;
	private Integer branchRoleId;
	private Integer superUserId;
	private Integer cbmRadioButton;
	private Integer role;
	public Integer getUserId() {
		return userId;
	}
	public void setUserId(Integer userId) {
		this.userId = userId;
	}
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	public Integer getUserType() {
		return userType;
	}
	public void setUserType(Integer userType) {
		this.userType = userType;
	}
	public Integer getActiveFlag() {
		return activeFlag;
	}
	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}
	public Integer getAdminRadioButton() {
		return adminRadioButton;
	}
	public void setAdminRadioButton(Integer adminRadioButton) {
		this.adminRadioButton = adminRadioButton;
	}
	public Integer getDistributorRadioButton() {
		return distributorRadioButton;
	}
	public void setDistributorRadioButton(Integer distributorRadioButton) {
		this.distributorRadioButton = distributorRadioButton;
	}
	public Integer getAggregatorRadioButton() {
		return aggregatorRadioButton;
	}
	public void setAggregatorRadioButton(Integer aggregatorRadioButton) {
		this.aggregatorRadioButton = aggregatorRadioButton;
	}
	public Integer getMerchantRadioButton() {
		return merchantRadioButton;
	}
	public void setMerchantRadioButton(Integer merchantRadioButton) {
		this.merchantRadioButton = merchantRadioButton;
	}
	public Integer getBranchRadioButton() {
		return branchRadioButton;
	}
	public void setBranchRadioButton(Integer branchRadioButton) {
		this.branchRadioButton = branchRadioButton;
	}
	public Integer getBranchRoleId() {
		return branchRoleId;
	}
	public void setBranchRoleId(Integer branchRoleId) {
		this.branchRoleId = branchRoleId;
	}
	public Integer getSuperUserId() {
		return superUserId;
	}
	public void setSuperUserId(Integer superUserId) {
		this.superUserId = superUserId;
	}
	public Integer getCbmRadioButton() {
		return cbmRadioButton;
	}
	public void setCbmRadioButton(Integer cbmRadioButton) {
		this.cbmRadioButton = cbmRadioButton;
	}
	public Integer getRole() {
		return role;
	}
	public void setRole(Integer role) {
		this.role = role;
	}
	
	
}
package com.apptmyz.fpcontrolpanel.response;

public class AuthenticateUserResponseRRN {

	private Integer userId;
	private String username;
	private Integer userType;
	private Integer activeFlag;
	private Integer adminRadioButton;
	private Integer distributorRadioButton;
	private Integer aggregatorRadioButton;
	private Integer merchantRadioButton;
	private Integer managementRadioButton;
	private Integer branchRadioButton;
	private Integer branchRoleId;
	private String organisation;
	private Integer superUserId;
	private String branchName;
	private Integer role;
	private boolean forcePwdChange;
	
	
	public Integer getRole() {
		return role;
	}

	public void setRole(Integer role) {
		this.role = role;
	}

	public String getBranchName() {
		return branchName;
	}

	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}

	public Integer getSuperUserId() {
		return superUserId;
	}

	public void setSuperUserId(Integer superUserId) {
		this.superUserId = superUserId;
	}

	public Integer getUserId() {
		return userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public Integer getUserType() {
		return userType;
	}

	public void setUserType(Integer userType) {
		this.userType = userType;
	}

	public Integer getActiveFlag() {
		return activeFlag;
	}

	public void setActiveFlag(Integer activeFlag) {
		this.activeFlag = activeFlag;
	}

	public Integer getAdminRadioButton() {
		return adminRadioButton;
	}

	public void setAdminRadioButton(Integer adminRadioButton) {
		this.adminRadioButton = adminRadioButton;
	}

	public Integer getDistributorRadioButton() {
		return distributorRadioButton;
	}

	public void setDistributorRadioButton(Integer distributorRadioButton) {
		this.distributorRadioButton = distributorRadioButton;
	}

	public Integer getAggregatorRadioButton() {
		return aggregatorRadioButton;
	}

	public void setAggregatorRadioButton(Integer aggregatorRadioButton) {
		this.aggregatorRadioButton = aggregatorRadioButton;
	}

	public Integer getMerchantRadioButton() {
		return merchantRadioButton;
	}

	public void setMerchantRadioButton(Integer merchantRadioButton) {
		this.merchantRadioButton = merchantRadioButton;
	}

	public Integer getBranchRadioButton() {
		return branchRadioButton;
	}

	public void setBranchRadioButton(Integer branchRadioButton) {
		this.branchRadioButton = branchRadioButton;
	}

	public Integer getBranchRoleId() {
		return branchRoleId;
	}

	public void setBranchRoleId(Integer branchRoleId) {
		this.branchRoleId = branchRoleId;
	}

	public Integer getManagementRadioButton() {
		return managementRadioButton;
	}

	public void setManagementRadioButton(Integer managementRadioButton) {
		this.managementRadioButton = managementRadioButton;
	}

	public String getOrganisation() {
		return organisation;
	}

	public void setOrganisation(String organisation) {
		this.organisation = organisation;
	}

	public boolean isForcePwdChange() {
		return forcePwdChange;
	}

	public void setForcePwdChange(boolean forcePwdChange) {
		this.forcePwdChange = forcePwdChange;
	}
	
}
package com.apptmyz.fpcontrolpanel.response;

public class CwAndMATMRrnResponseModel {

	 public String     superMerchantName ;
	    public String     parentMerchantName;
	    public long  requestedTimestamp ;
	    public Double     transactionAmount ;
	    public String     responseCode ;
	    public String     responseRrn  ;
	    public String     stan         ;
	    public String     bankName;
	    public String     fingpayTransactionId ;
	    public String     cardAcceptorTerminalIdentification ;
	    public String     merchantTransactionId ;
	    public long  resposeTimestamp ;
	    public Integer    merchantId   ;
	    public String     adhaarNumber ;
	    public String     deviceImei   ;
	    public String     merchant_name;
	    public String     merchant_login_id;
	    public String 	  bin;
	    private String    rqstTimestamp ;
		public String getSuperMerchantName() {
			return superMerchantName;
		}
		public void setSuperMerchantName(String superMerchantName) {
			this.superMerchantName = superMerchantName;
		}
		public String getParentMerchantName() {
			return parentMerchantName;
		}
		public void setParentMerchantName(String parentMerchantName) {
			this.parentMerchantName = parentMerchantName;
		}
		public long getRequestedTimestamp() {
			return requestedTimestamp;
		}
		public void setRequestedTimestamp(long requestedTimestamp) {
			this.requestedTimestamp = requestedTimestamp;
		}
		public Double getTransactionAmount() {
			return transactionAmount;
		}
		public void setTransactionAmount(Double transactionAmount) {
			this.transactionAmount = transactionAmount;
		}
		public String getResponseCode() {
			return responseCode;
		}
		public void setResponseCode(String responseCode) {
			this.responseCode = responseCode;
		}
		public String getResponseRrn() {
			return responseRrn;
		}
		public void setResponseRrn(String responseRrn) {
			this.responseRrn = responseRrn;
		}
		public String getStan() {
			return stan;
		}
		public void setStan(String stan) {
			this.stan = stan;
		}
		public String getBankName() {
			return bankName;
		}
		public void setBankName(String bankName) {
			this.bankName = bankName;
		}
		public String getFingpayTransactionId() {
			return fingpayTransactionId;
		}
		public void setFingpayTransactionId(String fingpayTransactionId) {
			this.fingpayTransactionId = fingpayTransactionId;
		}
		public String getCardAcceptorTerminalIdentification() {
			return cardAcceptorTerminalIdentification;
		}
		public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
			this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
		}
		public String getMerchantTransactionId() {
			return merchantTransactionId;
		}
		public void setMerchantTransactionId(String merchantTransactionId) {
			this.merchantTransactionId = merchantTransactionId;
		}
		public long getResposeTimestamp() {
			return resposeTimestamp;
		}
		public void setResposeTimestamp(long resposeTimestamp) {
			this.resposeTimestamp = resposeTimestamp;
		}
		public Integer getMerchantId() {
			return merchantId;
		}
		public void setMerchantId(Integer merchantId) {
			this.merchantId = merchantId;
		}
		public String getAdhaarNumber() {
			return adhaarNumber;
		}
		public void setAdhaarNumber(String adhaarNumber) {
			this.adhaarNumber = adhaarNumber;
		}
		public String getDeviceImei() {
			return deviceImei;
		}
		public void setDeviceImei(String deviceImei) {
			this.deviceImei = deviceImei;
		}
		public String getMerchant_name() {
			return merchant_name;
		}
		public void setMerchant_name(String merchant_name) {
			this.merchant_name = merchant_name;
		}
		public String getMerchant_login_id() {
			return merchant_login_id;
		}
		public void setMerchant_login_id(String merchant_login_id) {
			this.merchant_login_id = merchant_login_id;
		}
		public String getBin() {
			return bin;
		}
		public void setBin(String bin) {
			this.bin = bin;
		}
		public String getRqstTimestamp() {
			return rqstTimestamp;
		}
		public void setRqstTimestamp(String rqstTimestamp) {
			this.rqstTimestamp = rqstTimestamp;
		}
	    
	    
}
package com.apptmyz.fpcontrolpanel.response;


public class GeneralResponse {
	private boolean status;
	private String message;
	private Object data;
	private long statusCode;

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}
	
	public long getStatusCode() {
		return statusCode;
	}

	public void setStatusCode(long statusCode) {
		this.statusCode = statusCode;
	}

	public GeneralResponse() {
		super();
		// TODO Auto-generated constructor stub
	}

	public GeneralResponse(boolean status, String message) {
		super();
		this.status = status;
		this.message = message;
	}

	public GeneralResponse(boolean status, String message, Object data) {
		super();
		this.status = status;
		this.message = message;
		this.data = data;
	}

	public GeneralResponse(boolean status, String message, long statusCode, Object data) {
		super();
		this.status = status;
		this.message = message;
		this.data = data;
		this.statusCode = statusCode;
	}

	

	@Override
	public String toString() {
		return "GeneralResponse [status=" + status + ", message=" + message
				+ ", data=" + data + "]";
	}

}
package com.apptmyz.fpcontrolpanel.response;


public class GeneralResponseCPLogin {
	private boolean status;
	private String message;
	private Object data;
	private Object sidenav;
	private long statusCode;

	public boolean isStatus() {
		return status;
	}

	public void setStatus(boolean status) {
		this.status = status;
	}

	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}
	
	public long getStatusCode() {
		return statusCode;
	}

	public void setStatusCode(long statusCode) {
		this.statusCode = statusCode;
	}

	public GeneralResponseCPLogin() {
		super();
		// TODO Auto-generated constructor stub
	}

	public GeneralResponseCPLogin(boolean status, String message) {
		super();
		this.status = status;
		this.message = message;
	}

	public GeneralResponseCPLogin(boolean status, String message, Object data, Object sidenav) {
		super();
		this.status = status;
		this.message = message;
		this.data = data;
		this.sidenav = sidenav;
	}

	public GeneralResponseCPLogin(boolean status, String message, long statusCode, Object data, Object sidenav) {
		super();
		this.status = status;
		this.message = message;
		this.data = data;
		this.statusCode = statusCode;
		this.sidenav = sidenav;
	}
	
	public Object getSidenav() {
		return sidenav;
	}

	public void setSidenav(Object sidenav) {
		this.sidenav = sidenav;
	}

	

	@Override
	public String toString() {
		return "GeneralResponse [status=" + status + ", message=" + message
				+ ", data=" + data + "]";
	}

}
package com.apptmyz.fpcontrolpanel.response;

public class GeneralResponseV2 {
	private boolean apiStatus;
	private String apiStatusMessage;
	private Object data;
	private long apiStatusCode;

	

	public boolean isApiStatus() {
		return apiStatus;
	}

	public void setApiStatus(boolean apiStatus) {
		this.apiStatus = apiStatus;
	}

	public String getApiStatusMessage() {
		return apiStatusMessage;
	}

	public void setApiStatusMessage(String apiStatusMessage) {
		this.apiStatusMessage = apiStatusMessage;
	}

	public Object getData() {
		return data;
	}

	public void setData(Object data) {
		this.data = data;
	}
	
	

	public long getApiStatusCode() {
		return apiStatusCode;
	}

	public void setApiStatusCode(long apiStatusCode) {
		this.apiStatusCode = apiStatusCode;
	}

	public GeneralResponseV2() {
		super();
		// TODO Auto-generated constructor stub
	}

	public GeneralResponseV2(boolean status, String message) {
		super();
		this.apiStatus = status;
		this.apiStatusMessage = message;
	}

	public GeneralResponseV2(boolean status, String message, Object data) {
		super();
		this.apiStatus = status;
		this.apiStatusMessage = message;
		this.data = data;
	}

	public GeneralResponseV2(boolean status, String message, long statusCode, Object data) {
		super();
		this.apiStatus = status;
		this.apiStatusMessage= message;
		this.data = data;
		this.apiStatusCode = statusCode;
	}

	@Override
	public String toString() {
		return "GeneralResponse [status=" + apiStatus + ", message=" + apiStatusMessage
				+ ", data=" + data + "]";
	}

}
package com.apptmyz.fpcontrolpanel.response;

public class IMPSResponseModel {
	private String ActCode;
	private String Response;
	private String BeneName;
	private String TranRefNo;
	private String BankRRN;
	

	@Override
	public String toString() {
		return "IMPSResponseModel [ActCode=" + ActCode + ", Response=" + Response + ", BeneName=" + BeneName
				+ ", TranRefNo=" + TranRefNo + ", BankRRN=" + BankRRN + "]";
	}

	public String getActCode() {
		return ActCode;
	}

	public void setActCode(String actCode) {
		ActCode = actCode;
	}

	public String getResponse() {
		return Response;
	}

	public void setResponse(String response) {
		Response = response;
	}

	public String getBeneName() {
		return BeneName;
	}

	public void setBeneName(String beneName) {
		BeneName = beneName;
	}

	public String getTranRefNo() {
		return TranRefNo;
	}

	public void setTranRefNo(String tranRefNo) {
		TranRefNo = tranRefNo;
	}

	public String getBankRRN() {
		return BankRRN;
	}

	public void setBankRRN(String bankRRN) {
		BankRRN = bankRRN;
	}
}
package com.apptmyz.fpcontrolpanel.response;

import java.io.Serializable;
import java.util.Date;

public class RRNSearchResponseModel implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = 5386680776532375948L;
	
	public String product;
	public String bankSwitch ;
	public String superMerchantName ;
	public String parentMerchantName;
	public Date  requestedTimestamp ;
	public Double transactionAmount ;
	public String responseCode ;
	public String responseRrn  ;
	public String stan     ;
	public String bankName;
	public String fingpayTransactionId ;
	public String cardAcceptorTerminalIdentification ;
	public String merchantTransactionId ;
	public Date  resposeTimestamp ;
	public Integer    merchantId   ;
	public String adhaarNumber ;
	public String deviceImei   ;
	public String merchant_name;
	public String merchant_login_id;
	public Double latitude;
	public Double longitude;
	public String lastUsedHash;
	private Integer superMerchantId;
	private Integer ParentId;
	
	private Integer ekycStatusFlag;
	private String terminalId;
	private Integer terminalIdFalg;
	
	private Integer aadharPayStatusFalg;
	private String aadharPayTerminalId;
	private Integer aadharPayTerminalIdFlag;
	
	private String ekycPanNumber;
	
	public String getProduct() {
		return product;
	}
	public void setProduct(String product) {
		this.product = product;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	public String getParentMerchantName() {
		return parentMerchantName;
	}
	public void setParentMerchantName(String parentMerchantName) {
		this.parentMerchantName = parentMerchantName;
	}
	public Date getRequestedTimestamp() {
		return requestedTimestamp;
	}
	public void setRequestedTimestamp(Date requestedTimestamp) {
		this.requestedTimestamp = requestedTimestamp;
	}
	public Double getTransactionAmount() {
		return transactionAmount;
	}
	public void setTransactionAmount(Double transactionAmount) {
		this.transactionAmount = transactionAmount;
	}
	public String getResponseCode() {
		return responseCode;
	}
	public void setResponseCode(String responseCode) {
		this.responseCode = responseCode;
	}
	public String getResponseRrn() {
		return responseRrn;
	}
	public void setResponseRrn(String responseRrn) {
		this.responseRrn = responseRrn;
	}
	public String getStan() {
		return stan;
	}
	public void setStan(String stan) {
		this.stan = stan;
	}
	public String getBankName() {
		return bankName;
	}
	public void setBankName(String bankName) {
		this.bankName = bankName;
	}
	public String getFingpayTransactionId() {
		return fingpayTransactionId;
	}
	public void setFingpayTransactionId(String fingpayTransactionId) {
		this.fingpayTransactionId = fingpayTransactionId;
	}
	public String getCardAcceptorTerminalIdentification() {
		return cardAcceptorTerminalIdentification;
	}
	public void setCardAcceptorTerminalIdentification(String cardAcceptorTerminalIdentification) {
		this.cardAcceptorTerminalIdentification = cardAcceptorTerminalIdentification;
	}
	public String getMerchantTransactionId() {
		return merchantTransactionId;
	}
	public void setMerchantTransactionId(String merchantTransactionId) {
		this.merchantTransactionId = merchantTransactionId;
	}
	public Date getResposeTimestamp() {
		return resposeTimestamp;
	}
	public void setResposeTimestamp(Date resposeTimestamp) {
		this.resposeTimestamp = resposeTimestamp;
	}
	public Integer getMerchantId() {
		return merchantId;
	}
	public void setMerchantId(Integer merchantId) {
		this.merchantId = merchantId;
	}
	public String getAdhaarNumber() {
		return adhaarNumber;
	}
	public void setAdhaarNumber(String adhaarNumber) {
		this.adhaarNumber = adhaarNumber;
	}
	public String getDeviceImei() {
		return deviceImei;
	}
	public void setDeviceImei(String deviceImei) {
		this.deviceImei = deviceImei;
	}
	public String getMerchant_name() {
		return merchant_name;
	}
	public void setMerchant_name(String merchant_name) {
		this.merchant_name = merchant_name;
	}
	public String getMerchant_login_id() {
		return merchant_login_id;
	}
	public void setMerchant_login_id(String merchant_login_id) {
		this.merchant_login_id = merchant_login_id;
	}
	public Double getLatitude() {
		return latitude;
	}
	public void setLatitude(Double latitude) {
		this.latitude = latitude;
	}
	public Double getLongitude() {
		return longitude;
	}
	public void setLongitude(Double longitude) {
		this.longitude = longitude;
	}
	public String getLastUsedHash() {
		return lastUsedHash;
	}
	public void setLastUsedHash(String lastUsedHash) {
		this.lastUsedHash = lastUsedHash;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public Integer getParentId() {
		return ParentId;
	}
	public void setParentId(Integer parentId) {
		ParentId = parentId;
	}
	
	
	public Integer getEkycStatusFlag() {
		return ekycStatusFlag;
	}
	public void setEkycStatusFlag(Integer ekycStatusFlag) {
		this.ekycStatusFlag = ekycStatusFlag;
	}
	public String getTerminalId() {
		return terminalId;
	}
	public void setTerminalId(String terminalId) {
		this.terminalId = terminalId;
	}
	public Integer getTerminalIdFalg() {
		return terminalIdFalg;
	}
	public void setTerminalIdFalg(Integer terminalIdFalg) {
		this.terminalIdFalg = terminalIdFalg;
	}
	public Integer getAadharPayStatusFalg() {
		return aadharPayStatusFalg;
	}
	public void setAadharPayStatusFalg(Integer aadharPayStatusFalg) {
		this.aadharPayStatusFalg = aadharPayStatusFalg;
	}
	public String getAadharPayTerminalId() {
		return aadharPayTerminalId;
	}
	public void setAadharPayTerminalId(String aadharPayTerminalId) {
		this.aadharPayTerminalId = aadharPayTerminalId;
	}
	public Integer getAadharPayTerminalIdFlag() {
		return aadharPayTerminalIdFlag;
	}
	public void setAadharPayTerminalIdFlag(Integer aadharPayTerminalIdFlag) {
		this.aadharPayTerminalIdFlag = aadharPayTerminalIdFlag;
	}
	public String getEkycPanNumber() {
		return ekycPanNumber;
	}
	public void setEkycPanNumber(String ekycPanNumber) {
		this.ekycPanNumber = ekycPanNumber;
	}
	@Override
	public String toString() {
		return "RRNSearchResponseModel [product=" + product + ", bankSwitch=" + bankSwitch + ", superMerchantName="
				+ superMerchantName + ", parentMerchantName=" + parentMerchantName + ", requestedTimestamp="
				+ requestedTimestamp + ", transactionAmount=" + transactionAmount + ", responseCode=" + responseCode
				+ ", responseRrn=" + responseRrn + ", stan=" + stan + ", bankName=" + bankName
				+ ", fingpayTransactionId=" + fingpayTransactionId + ", cardAcceptorTerminalIdentification="
				+ cardAcceptorTerminalIdentification + ", merchantTransactionId=" + merchantTransactionId
				+ ", resposeTimestamp=" + resposeTimestamp + ", merchantId=" + merchantId + ", adhaarNumber="
				+ adhaarNumber + ", deviceImei=" + deviceImei + ", merchant_name=" + merchant_name
				+ ", merchant_login_id=" + merchant_login_id + ", latitude=" + latitude + ", longitude=" + longitude
				+ ", lastUsedHash=" + lastUsedHash + ", superMerchantId=" + superMerchantId + ", ParentId=" + ParentId
				+ ", ekycStatusFlag=" + ekycStatusFlag + ", terminalId=" + terminalId + ", terminalIdFalg="
				+ terminalIdFalg + ", aadharPayStatusFalg=" + aadharPayStatusFalg + ", aadharPayTerminalId="
				+ aadharPayTerminalId + ", aadharPayTerminalIdFlag=" + aadharPayTerminalIdFlag + ", ekycPanNumber="
				+ ekycPanNumber + "]";
	}
	
	
}
package com.apptmyz.fpcontrolpanel.response;

import java.util.List;

import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;

public class RRNTxnResponseModel {

	private boolean status;
	private String message;
	private List<TransactionSearchByRRNResult> data;
	private long statusCode;
	public boolean isStatus() {
		return status;
	}
	public void setStatus(boolean status) {
		this.status = status;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public List<TransactionSearchByRRNResult> getData() {
		return data;
	}
	public void setData(List<TransactionSearchByRRNResult> data) {
		this.data = data;
	}
	public long getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(long statusCode) {
		this.statusCode = statusCode;
	}
	
}
package com.apptmyz.fpcontrolpanel.services;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.log4j.Logger;
import org.apache.poi.hssf.usermodel.HSSFDateUtil;
import org.apache.poi.ss.usermodel.Cell;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import com.apptmyz.fpcontrolpanel.data.Anomalymodel;
import com.apptmyz.fpcontrolpanel.data.SessionData;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.JwtUtil;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Service
public class BaseService
{
	public static final Logger logger = Logger.getLogger("BaseService");

	@Autowired
	RestTemplate resttemplate;

	@Autowired
	JwtUtil jwtUtil;

	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;
	

	public void sendCBNotesEmailNotification(String oldStaus, String newStatus, ChargeBackManagement cb)
	{

	}

	public String panVerification( HttpServletRequest request,String panNumber)
	{
		String panVerifiedName = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try {
			Enumeration<String> headerNames = request.getHeaderNames();
			HttpHeaders headers = new HttpHeaders();
			SessionData sessionData = new SessionData();
			sessionData.setUsername("onboard");
			String token1 = jwtUtil.createJWTToken(gson.toJson(sessionData), 60);
			if (headerNames != null) {
				while (headerNames.hasMoreElements()) {
					String key = headerNames.nextElement();
					System.out.println("HEADER KEY: "+ key +" = Value : "+ request.getHeader(key));
					headers.set(key,  request.getHeader(key));  
				}
				headers.set("token",  token1);
			}

			String invalidRespBody = "";
			resttemplate.setRequestFactory(new HttpComponentsClientHttpRequestFactory());
			final HttpEntity<String> entity = new HttpEntity<String>(invalidRespBody,headers);
			try{
				ResponseEntity<GeneralResponse> resp = resttemplate.exchange("https://fpanalytics.tapits.in/fpaepsanalytics/api/analytics/validatingPanDetails/"+panNumber+"/onboard", HttpMethod.POST, entity, GeneralResponse.class);
				logger.info("PAN DETAILS SUCCESSFULLY POSTED");
				if(resp != null){
					logger.info("RESP ");
					if(resp.getBody().isStatus()){
						logger.info("RESP STATUS DATA"+ (String)resp.getBody().getData());
						panVerifiedName = (String)resp.getBody().getData();							
					}
					else{
						return null;
					}
				}
				else{
					logger.info("RESP FALSE ERRONULL ");
					return null;
				}
			}catch(Exception e){
				logger.error("PAN VERIFICATION GETTING WRONG ", e);
				e.printStackTrace();
				return null;
			}
		}
		catch(Exception e)
		{
			logger.error("PAN VERIFICATION GETTING WRONG ", e);
		}
		return panVerifiedName;
	}

	public String getCellValueAccordingToCellType(Cell cell) {
		String cellValue = "";
		String value = "";
		if (cell != null) {
			switch (cell.getCellType()) {
			case Cell.CELL_TYPE_STRING:
				value = cell.getStringCellValue();
				break;
			case Cell.CELL_TYPE_NUMERIC:
				if (!HSSFDateUtil.isCellDateFormatted(cell)) {
					cell.setCellType(Cell.CELL_TYPE_STRING);
					value = cell.getStringCellValue();
				} else {
					value = null;
				}
				break;
			case Cell.CELL_TYPE_BOOLEAN:
				value = String.valueOf(cell.getBooleanCellValue());
				break;
			case Cell.CELL_TYPE_BLANK:
				value = null;
				break;
			default:
				if (cell.getColumnIndex() == 1 && cell.getCellType() == 2)
					value = cell.toString();
				else
					value = null;
				break;
			}
		} else {
			value = null;
		}
		cellValue = value;

		return cellValue;
	}

	public String getCsvFromList(List<Integer> list) {
		String csv = "[";
		try {
			for (Integer integer : list) {
				csv = csv + integer + ", ";
			}
			csv = csv.substring(0, csv.length() - 2) + "]";
		} catch (Exception e) {
			e.printStackTrace();
		}
		return csv;
	}

	public Map<String, TransactionSearchByRRNResult> getRRNSearchDetails(List<String> rrns, String bankSwitch)
	{
		Map<String, TransactionSearchByRRNResult> map = new HashMap<String, TransactionSearchByRRNResult>();
		try
		{
			TransactionSearchByRRNResult responseModel =null;
			for (String rrn : rrns)
			{
				responseModel = commonTasks.getRRNTxn(rrn,bankSwitch);
				if (responseModel != null)
					map.put(rrn, responseModel);
			}
		}
		catch (Exception e)
		{
			logger.error("Exception in getResponseAndTerminalId()", e);
		}
		return map;
	}

	public Date ChangeDateFormatSpecific(Cell cbDateCellValue)
	{
		Date date = null;
		String cbDate = null;
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		try 
		{   
//			cbDate = getCellValueAccordingToCellType(cbDateCellValue);
			cbDate = String.valueOf(cbDateCellValue);
			date = sdf.parse(cbDate+" 00:00:00");
		} 
		catch (ParseException e)
		{
			try
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yy");
				SimpleDateFormat dateFormat1 = new SimpleDateFormat("dd-MMM-yyyy");
				SimpleDateFormat dateFormatter=new SimpleDateFormat("dd-MM-yyyy");
				if(String.valueOf(cbDate).length()==9)
				{
					Date ex = dateFormat.parse(String.valueOf(cbDate));
					String s=dateFormatter.format(ex);
					date = dateFormatter.parse(s);
				}
				if(String.valueOf(cbDate).length() == 11)
				{
					Date ex=dateFormat1.parse(String.valueOf(cbDate));
					String s = dateFormatter.format(ex);
					date = dateFormatter.parse(s);
				}
			}
			catch(ParseException e1)
			{
				logger.error("Parse exception internal", e1);
				date = null;
			}
		}
		catch(Exception e2)
		{
			logger.error("Parse exception internal", e2);
			date = null;
		}
		return date;
	}

	public String changeTimeFormatSpecific(Cell txnTimeCell)
	{
		String timeStamp = null;
		try
		{
			SimpleDateFormat formatTime = new SimpleDateFormat("HH:mm:ss");
			if(txnTimeCell != null && txnTimeCell.getDateCellValue()!=null){
				timeStamp =formatTime.format(txnTimeCell.getDateCellValue());
			}
		}
		catch (Exception e) {
			logger.error("Parse exception internal", e);
			}
		return timeStamp;
	}
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
	{
		logger.info("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode);		
		GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);
		logger.info("Erros hadled Successfully");
		return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
	}

	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		logger.info("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode);
		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);
		logger.info(" Successfully");
		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}

	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		logger.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

	}
	
	public Map<String,Anomalymodel> getAnomoliesBySuperMerchant(Map<String,Anomalymodel> superMerchantMap,Date fromDate, Date toDate) throws Exception
	{
		logger.info(" getAnomoliesBySuperMerchant Date: "+fromDate +"--TODAE:"+toDate);
		List<Object[]> list = new ArrayList<>();
		Anomalymodel model =null;
		try
		{
			logger.info("THREE WAY ANOMOLIES STARTED");
			list = aggregatorThreewayAnomalyCoreRepository.getAnomaliesGroupBySuperMerchantForReport(fromDate, toDate);	
			
			if(list != null && !list.isEmpty() && list.size() > 0)
			{
				for(Object[] obj : list)
				{
					model= new Anomalymodel();
					if(obj[0]!=null)
					{
						if(!superMerchantMap.containsKey(obj[0]+"-"+obj[3]))
						{
							model.setAnomalyAmount((double)obj[2]);
							model.setServiceType((String)obj[3]);
							superMerchantMap.put(obj[0]+"-"+obj[3], model);
							
						}
					}
				}
			}
			logger.info("aggregatorThreewayAnomalyCoreRepository  END"+list.size() +"_MAP SIZE:"+superMerchantMap.size());	
		}
		catch(Exception e)
		{
			e.printStackTrace();
			throw e;
		}
		logger.info("getAnomoliesBySuperMerchant ENd");
		return superMerchantMap;
	}
	
	public Map<String,Anomalymodel> getAnomoliesByParent(Map<String,Anomalymodel> parentMerchantMap,Date fromDate, Date toDate) throws Exception
	{
		logger.info(" getAnomoliesByParent Date: "+fromDate +"--TODAE:"+toDate);
		List<Object[]> list = new ArrayList<>();
		Anomalymodel model =null;
		try
		{
			logger.info("THREE WAY ANOMOLIES STARTED");
			list = aggregatorThreewayAnomalyCoreRepository.getAnomaliesTransactionsGroupByParentForReport(fromDate, toDate);	
			if(list != null && !list.isEmpty() && list.size() > 0)
			{
				for(Object[] obj : list)
				{
					model= new Anomalymodel();
					if(obj[0]!=null)
					{
						
						
						if(!parentMerchantMap.containsKey(obj[0]+"-"+obj[3])) {
							model.setAnomalyAmount((double)obj[2]);
							model.setServiceType((String)obj[3]);
							
							parentMerchantMap.put(obj[0]+"-"+obj[3], model);
							
						}

					}
				}
			}
			logger.info("aggregatorThreewayAnomalyCoreRepository  END"+list.size() +"_MAP SIZE:"+parentMerchantMap.size());
		}
		catch(Exception e)
		{
			e.printStackTrace();
			throw e;
		}
		logger.info("getAnomoliesByParent ENd");
		return parentMerchantMap;
	}

}
package com.apptmyz.fpcontrolpanel.services;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.hibernate.annotations.Cache;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.CachePut;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;

import com.apptmyz.fpaepsdb.entity.BankSwitchMaster;
import com.apptmyz.fpaepsdb.entity.MerchantMaster;
import com.apptmyz.fpaepsdb.entity.ParentMerchantMaster;
import com.apptmyz.fpaepsdb.entity.SuperMerchantMaster;
import com.apptmyz.fpaepsdb.repository.BankSwitchMasterRepository;
import com.apptmyz.fpaepsdb.repository.MerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpsettlementdb.entity.ChargeBackTypeManagement;
import com.apptmyz.fpsettlementdb.repository.ChargeBackTypeManagementRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Service
public class ChargebackManagementCacheData {

//	@Autowired
//	MerchantMasterRepository merchantMasterRepository;
	
	@Autowired
	SuperMerchantMasterRepository superMerchantMasterRepository;
	
	@Autowired
	ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private ChargeBackTypeManagementRepository chargeBackTypeManagementRepository;
	
	@Autowired
	private BankSwitchMasterRepository bankSwitchMasterRepository;
	
	public Iterable<ChargeBackTypeManagement> cbtypecache;
	
	public Iterable<BankSwitchMaster> bankSwitchMaster;
	
//	 @Cacheable("chargebackfraud_merchant_cache")
//	    public Map<Integer, String> getMerchantDetails() 
//	    {
//	        System.out.println("From backend call. merchant");
//	        Map<Integer, String> merchantData = new HashMap<>();
//	        Iterable<MerchantMaster> m=merchantMasterRepository.findAll();
//	        for(MerchantMaster merchantMaster:m)
//	        {
//	        	merchantData.put(merchantMaster.getId(),merchantMaster.getMerchantName());
//	        }
//	        return merchantData;
//	    }
	 
	
	 @Cacheable(value="chargebackfraud_supermerchant_cache")
	    public Map<Integer, String> getSuperMerchantDetails() 
	    {
	        System.out.println("From backend call.super merchant");
	        
	        Map<Integer, String> supermerchantData = new HashMap<>();
	        Iterable<SuperMerchantMaster> m=superMerchantMasterRepository.findAll();
	        for(SuperMerchantMaster supermerchantMaster:m)
	        {
	        	supermerchantData.put(supermerchantMaster.getId(),supermerchantMaster.getSuperMerchantName());
	        }
	        return supermerchantData;
	    }
	 
	 @Cacheable(value="chargebackfraud_parentmerchant_cache")
	    public Map<Integer, String> getParentMerchantDetails() 
	    {
	        System.out.println("From backend call.parent merchant");
	        
	        Map<Integer, String> parentMerchantData = new HashMap<>();
	        Iterable<ParentMerchantMaster> m=parentMerchantMasterRepository.findAll();
	        for(ParentMerchantMaster parentMerchantMaster:m)
	        {
	        	parentMerchantData.put(parentMerchantMaster.getId(),parentMerchantMaster.getParentMerchantName());
	        }
	        return parentMerchantData;
	    }
	 

	 @Cacheable(value="chargebackfraud_cbtype_cache")
	    public Map<Integer, String> getCBtypeDetailsMap() 
	    {
	        System.out.println("From backend call.cb type map");
	        
	        Map<Integer, String> cbType = new HashMap<>();
	        cbtypecache=chargeBackTypeManagementRepository.findAll();
		      
	        for(ChargeBackTypeManagement cb:cbtypecache)
	        {
	        	cbType.put(cb.getId(),cb.getChargeBackType());
	        }
	        return cbType;
	    }
	 
	 @Cacheable(value="chargebackfraud_bankswitch_cache")
	    public Map<Integer, String> getBankSwitchMap() 
	    {
	        System.out.println("From backend call.bank switch map");
	        bankSwitchMaster=bankSwitchMasterRepository.findAll();
	        Map<Integer, String> bankSwitch = new HashMap<>();
	        for(BankSwitchMaster cb:bankSwitchMaster)
	        {
	        	bankSwitch.put(cb.getId(),cb.getBankSwitch());
	        }
	        return bankSwitch;
	    }
	 
	 @CacheEvict(value="chargebackfraud_cbtype_cache", key="#id")
	 public void evictCBtype(int id) {
		 System.out.println("From backend call.cb type details evict map");
	        
	 }
	 
	 @CacheEvict("chargebackfraud_cbtype_cache")
	 public void evictCBtypecache() {
		 System.out.println("cache cleared");
	        
	 }		 

	@CachePut(value="chargebackfraud_cbtype_cache", key="#id")
	 public ChargeBackTypeManagement putCBtype(int id, String cbtype) {
		 System.out.println("From backend call.cb type details put map");
		 Gson gson = new GsonBuilder().serializeNulls().create();
	        ChargeBackTypeManagement chargeBackTypeManagement=new ChargeBackTypeManagement();
	        chargeBackTypeManagement.setId(id);
	        chargeBackTypeManagement.setChargeBackType(cbtype);
	        System.out.println("cb new model : "+gson.toJson(chargeBackTypeManagement));
	        return chargeBackTypeManagement;
	 }
}
package com.apptmyz.fpcontrolpanel.services;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.CommissionDetailsData;
import com.apptmyz.fpsettlementdb.repository.CommissionDetailsDataRepository;


@Service
public class CommissionService extends BaseService{

	private static final Logger log = Logger.getLogger(CommissionService.class);
	
	@Autowired
	private CommissionDetailsDataRepository commissionDetailsDataRepository;
	
	public ResponseEntity<GeneralResponse> processCWAggrDistCommission(Date fromDate, Date toDate, Date commissionDate)
	{
		log.info("processCWAggrDistCommission.....started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String,CommissionDetailsData> aggrDistCommMap = null;
		try 
		{
			aggrDistCommMap = getCommissionDetailsMapByServiceTypeAndCommDate(Constants.SERVICE_TYPE_CASH_WITHDRAWEL, commissionDate);
			
			if(aggrDistCommMap != null && !aggrDistCommMap.isEmpty())
			{
				
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWAggrDistCommission ", e);
			response = errorResponse(false,"Exception Occured.... Unable to get Data  ",500,null);
		}
		log.info("processCWAggrDistCommission.....end");
		return null;
	}

	public Map<String,CommissionDetailsData> getCommissionDetailsMapByServiceTypeAndCommDate(String serviceType, Date commissionDate)
	{
		log.info(" getCommissionDetailsMapByServiceTypeAndCommDate By Service"+serviceType+ "And Date:"+commissionDate);
		Map<String,CommissionDetailsData> commDtlsMap = null;
		List<CommissionDetailsData> aggDistCommlist = null;
		try
		{
			aggDistCommlist = commissionDetailsDataRepository.findByActiveFlagAndServiceTypeAndCommissionEffectiveDateLessThanEqual(Constants.ACTIVE_FLAG, serviceType, commissionDate);
			
			if(aggDistCommlist != null && !aggDistCommlist.isEmpty() && aggDistCommlist.size() > 0)
			{
				commDtlsMap = new HashMap<>();

				for(CommissionDetailsData commAcct : aggDistCommlist)
				{
					if(commAcct.getMerchantId() != null && commAcct.getMerchantId() > 0)
					{
						String key = Constants.SETTLEMENT_TYPE_MERCHANT+"-"+commAcct.getMerchantId();
						commDtlsMap.put(key, commAcct);
					}
					else if(commAcct.getDistId() != null && commAcct.getDistId() > 0)
					{
						String key = Constants.SETTLEMENT_TYPE_SUPER_MERCHANT+"-"+commAcct.getDistId();
						commDtlsMap.put(key, commAcct);
					}
					else if(commAcct.getAggrId() != null && commAcct.getAggrId() > 0)
					{
						String key = Constants.SETTLEMENT_TYPE_PARENT+"-"+commAcct.getAggrId();
						commDtlsMap.put(key, commAcct);
					}					
				}
			}
		}
		catch(Exception e)
		{
			log.error("Exception occured getCommissionDetailsMapByServiceTypeAndCommDate ", e);
			commDtlsMap = new HashMap<>();
		}
		log.info("getCommissionDetailsMapByServiceTypeAndCommDate........ ENd");
		return commDtlsMap;
	}
}
package com.apptmyz.fpcontrolpanel.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.apptmyz.fpaepsdb.repository.ParentMerchantMasterRepository;
import com.apptmyz.fpaepsdb.repository.SuperMerchantMasterRepository;
import com.apptmyz.fpcontrolpanel.data.ApproveHoldAmountRequestObject;
import com.apptmyz.fpcontrolpanel.data.HoldAmountRequestObject;
import com.apptmyz.fpcontrolpanel.data.ParentSuperMerchantModel;
import com.apptmyz.fpcontrolpanel.data.SettlementHoldDataObject;
import com.apptmyz.fpcontrolpanel.data.SettlementHoldReportTxnDetailModel;
import com.apptmyz.fpcontrolpanel.data.SettlementHoldReportsDataModel;
import com.apptmyz.fpcontrolpanel.data.SpecificParentSuperMSettleModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpaneldb.entity.FpCpAuditLogs;
import com.apptmyz.fpcontrolpaneldb.repository.FpCpAuditLogsRepository;
import com.apptmyz.fpsettlementdb.entity.SettlementHoldData;
import com.apptmyz.fpsettlementdb.entity.SettlementHoldTxnDetail;
import com.apptmyz.fpsettlementdb.repository.SettlementHoldDataRepository;
import com.apptmyz.fpsettlementdb.repository.SettlementHoldTxnDetailRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

@Service
public class HoldAmountService {

//	private static final Logger log = Logger.getLogger(HoldAmountService.class);
	private static final Logger settlAdjustMClog = Logger.getLogger("SettlAdjustMC");

	
	@Autowired
	private SettlementHoldDataRepository settlementHoldDataRepository;
	
	@Autowired
	private FpCpAuditLogsRepository fpCpAuditLogsRepository;
	
	@Autowired
	private ParentMerchantMasterRepository parentMerchantMasterRepository;
	
	@Autowired
	private SuperMerchantMasterRepository superMerchantMasterRepository;
	
	@Autowired
	private SettlementHoldTxnDetailRepository settlementHoldTxnDetailRepository;
	
	public boolean isEmpty(String str)
	{
		if(str != null)
		{
			if(str.length() == 0)
				return true;
			else if(str.trim().length() == 0)
				return true;
			else 
				return false;
		}
		else
			return true;
	}
	public Date setformatDate(String format,String date) throws Exception
	{
		SimpleDateFormat dateFormat = null;
		
		Date fromatedDate = null;
		
		try {
			
			dateFormat = new SimpleDateFormat(format);
			
			fromatedDate = dateFormat.parse(date);
			
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured checkDateIsNullorNot ",null);			
			throw e;
		}
		
		return fromatedDate;
	}
	public void errorResponse(boolean status,String errorMsg, Object data)
	{
		settlAdjustMClog.error("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);
		
	}
	public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
	{
		settlAdjustMClog.debug("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);
		
		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);
		
		settlAdjustMClog.info(" Successfully");
		
		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}
	
	public ResponseEntity<GeneralResponse> errorResponse(boolean status,String msg,long statusCode, Object data)
	{
		settlAdjustMClog.info("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);
		
		GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);
		
		settlAdjustMClog.info(" Successfully");
		
		return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
	}
	public ResponseEntity<GeneralResponse> validations(HoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("Started validations:");
		ResponseEntity<GeneralResponse> response = null;
		try
		{
			
			if(isEmpty(request.getAggregatorId()) && isEmpty(request.getDistributerId()))
				return errorResponse(false,"Aggregator Id And Distributor Id is null - Pass Any Id",500,null);
			
			if(!isEmpty(request.getAggregatorId()) && !isEmpty(request.getDistributerId()))
				return errorResponse(false,"Pass either Aggregator Id or Distributor Id  - Dont Send Both ",500,null);
			
			if(request.getStartDate() == null)
				return errorResponse(false,"Hold Amount Start Date is Null ",500,null);
			
			if(isEmpty(request.getServiceType()))
				return errorResponse(false,"Service Type is Null",500,null);
			
			/*
			 * Date formatdDate = setformatDate("ddMMyyyy", request.getStartDate());
			 * 
			 * if(!(formatdDate.after(new Date()))) return
			 * errorResponse(false,"Start Date is Before Current Date",500,null);
			 */
			
			SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyy");
			Date formatdDate = dateFormat.parse(request.getStartDate());
			Date currDate = dateFormat.parse(dateFormat.format(new Date()));
			
			if(!formatdDate.equals(currDate) && !formatdDate.after(currDate))
				return errorResponse(false,"Start Date is Before Current Date",500,null);
			
			if(isEmpty(request.getAmountToHold()) || Double.parseDouble(request.getAmountToHold()) <= 0.00)
				return errorResponse(false,"Hold Amount is Empty or It is > 0",500,null);
			
			if(isEmpty(request.getMaxAmountPerSettleToHold()) && isEmpty(request.getMaxAmountPerDayToHold()))
				return errorResponse(false,"Per Settle And Per day Amount is Empty  ",500,null);
			
			if(Double.parseDouble(request.getMaxAmountPerSettleToHold()) <= 0.00 )
				return errorResponse(false,"Settle Amount Should > 0  ",500,null);
			
			if(Double.parseDouble(request.getMaxAmountPerDayToHold()) <= 0.00 )
				return errorResponse(false,"Day Settle Amount Should > 0  ",500,null);
			
			if(Double.parseDouble(request.getMaxAmountPerDayToHold()) <  Double.parseDouble(request.getMaxAmountPerSettleToHold()))
				return errorResponse(false,"Settle Amount Should < Day Hold Amount  ",500,null);
			
			 // Need to write code Validator name is correct or not
			
			if(isEmpty(request.getValidatedBy()))
				return errorResponse(false,"Pass Validator  Name",500,null);
			
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured validations........",null);
			throw e;
		}
	
		settlAdjustMClog.info("validations...End");
		
		return response;
	}
	public ResponseEntity<GeneralResponse> createHoldAmountRequest(HoldAmountRequestObject request, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("createHoldAmountRequest.......Started");
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			settlAdjustMClog.info("Input Request:"+ gson.toJson(request));
			
			response = validations(request);
			  if(response != null)
		      {
		    	 return errorResponse(false,response.getBody().getMessage(),500,null);
		      }
			  
			  response = createHoldAmount(request);
			  
//				AUDIT LOGS
			    FpCpAuditLogs auditLogs = new FpCpAuditLogs();

				auditLogs.setFeatureGrpId("SETTL_ADJUST");
				auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
//				0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
				auditLogs.setOperation(5);
				auditLogs.setNewData(new Gson().toJson(request));
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured createHoldAmountRequest.....",null);	
			e.printStackTrace();
				throw e;
			}		
			settlAdjustMClog.info("createHoldAmountRequest...End");
		
		return response;
	}
	private ResponseEntity<GeneralResponse> createHoldAmount(HoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("createHoldAmount..started");
		ResponseEntity<GeneralResponse> response = null;
		SettlementHoldData shd = null;
		Date date = new Date();
		try
		{
			shd = new SettlementHoldData();
			
			if(!isEmpty(request.getAggregatorId()))
				shd.setAggregatorId(Integer.parseInt(request.getAggregatorId()));
			if(!isEmpty(request.getDistributerId()))
				shd.setDistributerId(Integer.parseInt(request.getDistributerId()));
			
			Date formatdDate = setformatDate("ddMMyyyy", request.getStartDate());
			
			shd.setStartDate(formatdDate);
			shd.setContinueDate(formatdDate);
			shd.setAmountToHold(Double.parseDouble(request.getAmountToHold()));
			
			shd.setMaxAmountPerSettleToHold(Double.parseDouble(request.getMaxAmountPerSettleToHold()));
			shd.setMaxAmountPerDayToHold(Double.parseDouble(request.getMaxAmountPerDayToHold()));
			shd.setRemainingAmountToBeHeld(shd.getAmountToHold());
			shd.setRemarks(request.getRemarks());
			shd.setActivityFlag(0);
			shd.setLastRunTime(date);
			shd.setValidatedBy(request.getValidatedBy());
			shd.setValidatorFlag(1);
			shd.setApprovedFlag(0);
			shd.setValidatorReqTimestamp(date);
			shd.setServiceType(request.getServiceType());
			
			if(shd.getAggregatorId() != null)
			{
				SettlementHoldData validation = settlementHoldDataRepository.findByAggregatorIdAndActivityFlagAndValidatorFlagAndApprovedFlagAndRemainingAmountToBeHeldGreaterThanAndServiceType(shd.getAggregatorId(), 
						0, 1, 0, 0, shd.getServiceType());
				if(validation != null)
				{
					return errorResponse(false, "Please Approve/Reject earlier created request for this aggregator ", 200, null);
				}
				
				SettlementHoldData data = settlementHoldDataRepository.findByAggregatorIdAndActivityFlagAndApprovedFlagAndServiceType(shd.getAggregatorId(), 1, 1, shd.getServiceType());				
				if(data != null)
				{
					shd.setAmountToHold(shd.getAmountToHold() + data.getRemainingAmountToBeHeld());
					shd.setRemainingAmountToBeHeld(shd.getAmountToHold());
					
					data.setActivityFlag(0);
					data.setRemarks(data.getRemarks()+"-System Added Existing Amount to New Request");
					data.setLastRunTime(date);
					settlementHoldDataRepository.save(data);
				}
			}
			else if(shd.getDistributerId() != null)
			{
				SettlementHoldData validation = settlementHoldDataRepository.findByDistributerIdAndActivityFlagAndValidatorFlagAndApprovedFlagAndRemainingAmountToBeHeldGreaterThanAndServiceType(shd.getDistributerId(), 
						0, 1, 0, 0, shd.getServiceType());
				if(validation != null)
				{
					return errorResponse(false, "Please Approve/Reject earlier created request for this Distributor ", 200, null);
				}
				
				SettlementHoldData data = settlementHoldDataRepository.findByDistributerIdAndActivityFlagAndApprovedFlagAndServiceType(shd.getDistributerId(), 1, 1, shd.getServiceType());				
				if(data != null)
				{
					shd.setAmountToHold(shd.getAmountToHold() + data.getRemainingAmountToBeHeld());
					shd.setRemainingAmountToBeHeld(shd.getAmountToHold());
					
					data.setActivityFlag(0);
					data.setRemarks(data.getRemarks()+"-System Added Existing Amount to New Request");
					data.setLastRunTime(date);
					settlementHoldDataRepository.save(data);
				}
			}
			settlementHoldDataRepository.save(shd);
			
			response = successResponse(true, "Created Successfully", 200, shd);
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured createHoldAmount.....",null);			
			throw e;
		}		
		settlAdjustMClog.info("createHoldAmount...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> approveHoldAmountRequest(ApproveHoldAmountRequestObject request, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("approveHoldAmountRequest.......Started");
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			 settlAdjustMClog.info("Input Request:"+ gson.toJson(request)); 	
			  if(isEmpty(request.getSettlementHoldId()))
		    	 return errorResponse(false,"Request Id is null",500,null);
		      if(isEmpty(request.getApprovedBy()))
		    	  return errorResponse(false,"Approved By Name is Null",500,null);
		      // Need to write aprove name is correct or not
			  response = approveHoldAmount(request, authenticateUserResponse, ip);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured approveHoldAmountRequest.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("approveHoldAmountRequest...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> cancelHoldAmountRequest(ApproveHoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("cancelHoldAmountRequest.......Started");
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			 settlAdjustMClog.info("Input Request:"+ gson.toJson(request)); 	
			  if(isEmpty(request.getSettlementHoldId()))
		    	 return errorResponse(false,"Request Id is null",500,null);
		      if(isEmpty(request.getApprovedBy()))
		    	  return errorResponse(false,"Approved By Name is Null",500,null);
		      // Need to write aprove name is correct or not
			  response = cancelHoldAmount(request);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured cancelHoldAmountRequest.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("cancelHoldAmountRequest...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> rejectHoldAmountRequest(ApproveHoldAmountRequestObject request, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("rejectHoldAmountRequest.......Started");
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			 settlAdjustMClog.info("Input Request:"+ gson.toJson(request)); 	
			  if(isEmpty(request.getSettlementHoldId()))
		    	 return errorResponse(false,"Request Id is null",500,null);
		      if(isEmpty(request.getApprovedBy()))
		    	  return errorResponse(false,"Approved By Name is Null",500,null);
		      // Need to write aprove name is correct or not
			  response = rejectHoldAmount(request, authenticateUserResponse, ip);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured rejectHoldAmountRequest.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("rejectHoldAmountRequest...End");
		
		return response;
	}
	
	private ResponseEntity<GeneralResponse> approveHoldAmount(ApproveHoldAmountRequestObject request, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("approveHoldAmount..started");
		ResponseEntity<GeneralResponse> response = null;
		SettlementHoldData shd = null;
		Date date = new Date();
		try
		{
			shd = settlementHoldDataRepository.findOne(Integer.parseInt(request.getSettlementHoldId()));
			
			if(shd != null)
			{
//				if( !date.before(shd.getStartDate()))
//					return errorResponse(false,"Approve Date is late so we stopped",500,null);
				
				shd.setActivityFlag(1);
				shd.setApprovedBy(request.getApprovedBy());
				shd.setApprovedFlag(1);
				shd.setApprovedReqTimestamp(date);
				shd.setLastRunTime(date);
				shd.setApprovedRemarks(request.getRemarks());
				settlementHoldDataRepository.save(shd);
				response = successResponse(true,"Successfully Approved",200,null);
				
//				AUDIT LOGS
				FpCpAuditLogs auditLogs = new FpCpAuditLogs();
				
				auditLogs.setFeatureGrpId("SETTL_ADJUST");
				auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
//				0-login,1-read,2-update,3-approval,4-rejection
				auditLogs.setOperation(3);
				auditLogs.setOldData(new Gson().toJson(request));
				auditLogs.setNewData(new Gson().toJson(shd));
				auditLogs.setApprovedByUser(authenticateUserResponse.getUserName());
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				
			}
			else
				 return errorResponse(false,"With out has Record How User is approve-- Fraud",500,null);
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured approveHoldAmount.....",null);			
			throw e;
		}		
		settlAdjustMClog.info("approveHoldAmount...End");
		
		return response;	
	}
	
	private ResponseEntity<GeneralResponse> cancelHoldAmount(ApproveHoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("cancelHoldAmount..started");
		ResponseEntity<GeneralResponse> response = null;
		SettlementHoldData shd = null;
		Date date = new Date();
		try
		{
			shd = settlementHoldDataRepository.findOne(Integer.parseInt(request.getSettlementHoldId()));
			
			if(shd != null)
			{
				shd.setApprovedBy(request.getApprovedBy());
				shd.setApprovedFlag(2);
				shd.setValidatorFlag(2);
				shd.setApprovedReqTimestamp(date);
				shd.setLastRunTime(date);
				shd.setRemarks(request.getRemarks());
				settlementHoldDataRepository.save(shd);
				response = successResponse(true,"Successfully Cancelled",200,null);
				
			}
			else
				 return errorResponse(false,"With out has Record How User is approve-- Fraud",500,null);
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured cancelHoldAmount.....",null);			
			throw e;
		}		
		settlAdjustMClog.info("approveHoldAmount...End");
		
		return response;	
	}
	
	private ResponseEntity<GeneralResponse> rejectHoldAmount(ApproveHoldAmountRequestObject request, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("rejectHoldAmount..started");
		ResponseEntity<GeneralResponse> response = null;
		SettlementHoldData shd = null;
		Date date = new Date();
		try
		{
			shd = settlementHoldDataRepository.findOne(Integer.parseInt(request.getSettlementHoldId()));
			
			if(shd != null)
			{
				shd.setApprovedBy(request.getApprovedBy());
				shd.setApprovedFlag(2);
				shd.setValidatorFlag(1);
				shd.setApprovedReqTimestamp(date);
				shd.setLastRunTime(date);
				shd.setRemarks(request.getRemarks());
				settlementHoldDataRepository.save(shd);
				response = successResponse(true,"Successfully Rejected",200,null);
				
//				AUDIT LOGS
				FpCpAuditLogs auditLogs = new FpCpAuditLogs();
				auditLogs.setFeatureGrpId("SETTL_ADJUST");
				auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
				auditLogs.setUserName(authenticateUserResponse.getUserName());
//				0-login,1-read,2-update,3-approval,4-rejection
				auditLogs.setOperation(4);
				auditLogs.setOldData(new Gson().toJson(request));
				auditLogs.setNewData(new Gson().toJson(shd));
				auditLogs.setRejectedByUser(authenticateUserResponse.getUserName());
				auditLogs.setAuditTimestamp(new Date());
				auditLogs.setIpAddress(ip);
				fpCpAuditLogsRepository.save(auditLogs);

				
			}
			else
				 return errorResponse(false,"With out has Record How User is approve-- Fraud",500,null);
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured rejectHoldAmount.....",null);			
			throw e;
		}		
		settlAdjustMClog.info("rejectHoldAmount...End");
		
		return response;	
	}
	
	public ResponseEntity<GeneralResponse> editHoldAmountRequest(HoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("editHoldAmountRequest.......Started");
		ResponseEntity<GeneralResponse> response = null;
		Gson gson = new GsonBuilder().serializeNulls().create();
		try
		{
			settlAdjustMClog.info("Input Request:"+ gson.toJson(request));
			
			response = validations(request);
			  if(response != null)
		      {
		    	 return errorResponse(false,response.getBody().getMessage(),500,null);
		      }
			  if(isEmpty(request.getSettlementHoldId()))
					return errorResponse(false,"Request iD is null",500,null);
			  
			  response = editHoldAmount(request);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured editHoldAmountRequest.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("editHoldAmountRequest...End");
		
		return response;
	}
	
	private ResponseEntity<GeneralResponse> editHoldAmount(HoldAmountRequestObject request) throws Exception
	{
		settlAdjustMClog.info("editHoldAmount..started");
		ResponseEntity<GeneralResponse> response = null;
		SettlementHoldData shd = null;
		Date date = new Date();
		try
		{
			shd = settlementHoldDataRepository.findOne(Integer.parseInt(request.getSettlementHoldId()));
			
			if(!isEmpty(shd.getApprovedFlag()+""))
				return errorResponse(false,"You Cant able to Edit It is already Approved",200,null);
			
			if(!isEmpty(request.getAggregatorId()))
				shd.setAggregatorId(Integer.parseInt(request.getAggregatorId()));
			if(!isEmpty(request.getDistributerId()))
				shd.setDistributerId(Integer.parseInt(request.getDistributerId()));
			
			Date formatdDate = setformatDate("ddMMyyyy", request.getStartDate());
			
			shd.setStartDate(formatdDate);
			shd.setContinueDate(formatdDate);
			shd.setAmountToHold(Double.parseDouble(request.getAmountToHold()));
			
			shd.setMaxAmountPerSettleToHold(Double.parseDouble(request.getMaxAmountPerSettleToHold()));
			shd.setMaxAmountPerDayToHold(Double.parseDouble(request.getMaxAmountPerDayToHold()));
			shd.setRemainingAmountToBeHeld(shd.getAmountToHold());
			shd.setRemarks("Created");
			shd.setActivityFlag(1);
			shd.setLastRunTime(date);
			shd.setValidatedBy(request.getValidatedBy());
			shd.setValidatorFlag(1);
			shd.setApprovedFlag(0);
			shd.setValidatorReqTimestamp(date);
			
			settlementHoldDataRepository.save(shd);
			
			response = successResponse(true, "Edit Successfully", 200, shd);
		}
		catch (Exception e) {			
			errorResponse(false,"Error Occured editHoldAmount.....",null);			
			throw e;
		}		
		settlAdjustMClog.info("editHoldAmount...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> getValidatorRequests(String fromdate, String todate, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getValidatorRequests.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldData> shdList = null;
		List<SettlementHoldDataObject> holdList = null;
		try
		{
			settlAdjustMClog.info("From Date:"+ fromdate+" -- To Date:"+todate);
			 
			Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
			Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");
			
			if(!(formatdFromDate.before(formatdToDate)  || formatdFromDate.equals(formatdToDate)))
				return errorResponse(false,"From Date is Before To Date",500,null);
			
			//shdList = settlementHoldDataRepository.findByStartDateBetweenAndApprovedFlagIsNotIn(formatdFromDate, formatdToDate, 1);
			
			shdList = settlementHoldDataRepository.findByValidatorReqTimestampBetweenAndApprovedFlagIsNotIn(formatdFromDate, formatdToDate, 1);
			
			if(shdList != null && shdList.size() > 0)
			{
				holdList = convertListToHoldList(shdList);
				response =  successResponse(true, "Validator List", 200, holdList);
			}
			else
				response =  successResponse(true, "Validator List is Empty", 200, holdList);
			
//			AUDIT LOGS
			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("validator request history from "+fromdate+" to "+todate);
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getValidatorRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getValidatorRequests...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> getValidatorHistoryRequests() throws Exception
	{
		settlAdjustMClog.info("getValidatorHistoryRequests.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldData> shdList = null;
		List<SettlementHoldDataObject> holdList = null;
		try
		{
			shdList = settlementHoldDataRepository.getApprovedFlagIsNotIn(1);
			
			if(shdList != null && shdList.size() > 0)
			{
				holdList = convertListToHoldList(shdList);
				response =  successResponse(true, "Validator List", 200, holdList);
			}
			else
				response =  successResponse(true, "Validator List is Empty", 200, holdList);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getValidatorHistoryRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getValidatorHistoryRequests...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> getApprovedRequests(String fromdate, String todate, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getApprovedRequests.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldData> shdList = null;
		List<SettlementHoldDataObject> holdList = null;
		try
		{
			settlAdjustMClog.info("From Date:"+ fromdate+" -- To Date:"+todate);
			 
			Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
			Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");
			
			if(!(formatdFromDate.before(formatdToDate)  || formatdFromDate.equals(formatdToDate)))
				return errorResponse(false,"From Date is Before To Date",500,null);
			
			//shdList = settlementHoldDataRepository.findByStartDateBetweenAndApprovedFlag(formatdFromDate, formatdToDate, 1);
			
			shdList = settlementHoldDataRepository.findByApprovedReqTimestampBetweenAndApprovedFlag(formatdFromDate, formatdToDate, 1);
			
			if(shdList != null && shdList.size() > 0)
			{
				holdList = convertListToHoldList(shdList);
				response =  successResponse(true, "Approved List", 200, holdList);
			}
			else
				response =  successResponse(true, "Approved List is Empty", 200, holdList);
			
//			AUDIT LOGS
			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("approved requests history from "+fromdate+" to "+todate);
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getApprovedRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getApprovedRequests...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> getToApproveRequests(AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getToApproveRequests.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldData> shdList = null;
		List<SettlementHoldDataObject> holdList = null;
		try
		{
			shdList = settlementHoldDataRepository.findByApprovedFlag(0);
			
			if(shdList != null && shdList.size() > 0)
			{
				holdList = convertListToHoldList(shdList);
				response =  successResponse(true, "Approve List", 200, holdList);
			}
			else
				response =  successResponse(true, "Approve List is Empty", 200, holdList);
//			AUDIT LOGS
			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("to approve settlement adjustment requests");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getToApproveRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getToApproveRequests...End");
		
		return response;
	}
	
	private List<SettlementHoldDataObject> convertListToHoldList(List<SettlementHoldData> shdList)
	{
		List<SettlementHoldDataObject> holdList = new ArrayList<>();
		SettlementHoldDataObject shdObject = null;
		settlAdjustMClog.info("Hold Report.......Started");

		//for(SettlementHoldData shd : shdList)
		for(int i=shdList.size() - 1 ; i >= 0; i--)
		{
			SettlementHoldData shd = shdList.get(i);
			shdObject =  new SettlementHoldDataObject();
			
			shdObject.setSettlementHoldId(shd.getId()+"");
			shdObject.setAggregatorId(shd.getAggregatorId()+"");
			shdObject.setDistributerId(shd.getDistributerId()+"");
			shdObject.setStartDate(shd.getStartDate()+"");
			shdObject.setAmountToHold(shd.getAmountToHold()+"");
			shdObject.setMaxAmountPerSettleToHold(String.format("%.2f",shd.getMaxAmountPerSettleToHold()));
			shdObject.setMaxAmountPerDayToHold(String.format("%.2f",shd.getMaxAmountPerDayToHold()));
			shdObject.setActivityFlag(shd.getActivityFlag()+"");
			shdObject.setValidatedBy(shd.getValidatedBy());
			shdObject.setApprovedBy(shd.getApprovedBy());
			shdObject.setApprovedFlag(shd.getApprovedFlag()+"");
			shdObject.setValidatorFlag(shd.getValidatorFlag()+"");
			shdObject.setValRemarks(shd.getRemarks());

			System.out.println("--SERVICE TYPE:"+shd.getServiceType());
			
			if(shd.getValidatorReqTimestamp() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				String strDate = dateFormat.format(shd.getValidatorReqTimestamp());  
				shdObject.setValidatorReqTimestamp(strDate);
			}
			
			if(shd.getApprovedReqTimestamp() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");  
				String strDate = dateFormat.format(shd.getApprovedReqTimestamp());  
				shdObject.setApprovedReqTimestamp(strDate);
			}
			shdObject.setServiceType(shd.getServiceType());
			shdObject.setAppRemarks(shd.getApprovedRemarks());
			holdList.add(shdObject);		
		}
		return holdList;
	}
	
	public ResponseEntity<GeneralResponse> getParentsAndSuperMerchant(AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getParentsAndSuperMerchant.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<Object[]> parentList = null;
		List<Object[]> superMerchantList = null;
		List<ParentSuperMerchantModel> psmList = null;
		try
		{
			psmList = new ArrayList<>();
			
			parentList = parentMerchantMasterRepository.getSettlementEnableParents();
			
			if(parentList != null && parentList.size() > 0)
			{
				convertListToParentSuperMercantList(psmList, parentList);			
			}
			
			superMerchantList = superMerchantMasterRepository.getSettlementsEnableSuperMerchants();
			
			if(superMerchantList != null && superMerchantList.size() > 0)
			{
				convertListToParentSuperMercantList(psmList, superMerchantList);			
			}
			
			if(psmList.size() > 0)
				response =  successResponse(true, "Parent And SuperMerchant List", 200, psmList);
			else
				response =  successResponse(true, "Parent And SuperMerchant  List is Empty", 200, psmList);
//			AUDIT LOGS			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("get parents and supermerchant list");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);

		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getToApproveRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getToApproveRequests...End");
		
		return response;
	}
	
	public ResponseEntity<GeneralResponse> getParentsAndSuperMerchantSpecific(AuthenticateUserResponse authenticateUserResponse, String ip, SpecificParentSuperMSettleModel model) throws Exception
	{
		settlAdjustMClog.info("getParentsAndSuperMerchantSpecific.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<Object[]> parentList = null;
		List<Object[]> superMerchantList = null;
		List<ParentSuperMerchantModel> psmList = null;
		try
		{
			psmList = new ArrayList<>();
			
			if(model.getSettleto() != null && model.getUserId() != null && model.getSettleto().equalsIgnoreCase("P"))
			{
				parentList = parentMerchantMasterRepository.getSettlementEnableParents(model.getUserId());

				if(parentList != null && parentList.size() > 0)
				{
					convertListToParentSuperMercantList(psmList, parentList);			
				}
				
				if(psmList.size() > 0)
					response =  successResponse(true, "Parent List", 200, psmList);
				else
					response =  successResponse(false, "Don't Have Settlements to this Aggregator. Please login with Distributor ", 200, null);
				
			}
			else if(model.getSettleto() != null && model.getUserId() != null && model.getSettleto().equalsIgnoreCase("S"))
			{
				superMerchantList = superMerchantMasterRepository.getSettlementsEnableSuperMerchants(model.getUserId());
				
				if(superMerchantList != null && superMerchantList.size() > 0)
				{
					convertListToParentSuperMercantList(psmList, superMerchantList);			
				}
				if(psmList.size() > 0)
					response =  successResponse(true, "Super Merchant List", 200, psmList);
				else
					response =  successResponse(false, "Don't Have Settlements to this Distributor. Please login with Aggregator ", 200, null);
			}
			else
			{
				response =  errorResponse(false, "Invalid Request", 200, null);
			}
			
//			AUDIT LOGS			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("get parents and supermerchant list");
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);

		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getToApproveRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getToApproveRequests...End");
		
		return response;
	}
	
	private void convertListToParentSuperMercantList(List<ParentSuperMerchantModel> psmList, List<Object[]> list)
	{
		for(int i=list.size() - 1 ; i >= 0; i--)
		{
			ParentSuperMerchantModel psm = new ParentSuperMerchantModel();
			psm.setId(((Integer) list.get(i)[0])+"");
			psm.setOrganization((String) list.get(i)[1]);
			psm.setName((String) list.get(i)[2]);
			psm.setSelfSettleFlag(((Integer) list.get(i)[3])+"");
//			psm.setSelfSettleFlag((list.get(i)[1])+"");
			psm.setInstantSettleFlag((list.get(i)[4])+"");
			psm.setUnqIdOrganization(psm.getId()+"-"+psm.getOrganization());
			psmList.add(psm);
		}
	}
	
	private Map<Integer, String> getParentMasterMap() throws Exception
	{
		Map<Integer,String> parentMap = null;
		try
		{
			List<Object[]> parentList = null;
			
			parentMap = new LinkedHashMap<>();
			
			parentList = parentMerchantMasterRepository.getSettlementEnableParents();
			
			if(parentList != null && parentList.size() > 0)
			{
				for(int i=parentList.size() - 1 ; i >= 0; i--)
				{
					parentMap.put(((Integer) parentList.get(i)[0]), (String) parentList.get(i)[2])	;
				}
			}
		}
		catch (Exception e) 
		{
			errorResponse(false,"Error Occured getToApproveRequests.....",null);	
				throw e;
		}	
		return parentMap;
	}
	
	private Map<Integer, String> getSuperMerchantsMasterMap() throws Exception
	{
		Map<Integer,String> superMerchantMap = null;
		try
		{
			List<Object[]> superMerchantList = null;
			
			superMerchantMap = new LinkedHashMap<>();
			
			superMerchantList = superMerchantMasterRepository.getSettlementsEnableSuperMerchants();
			
			if(superMerchantList != null && superMerchantList.size() > 0)
			{
				for(int i=superMerchantList.size() - 1 ; i >= 0; i--)
				{
					superMerchantMap.put(((Integer) superMerchantList.get(i)[0]), (String) superMerchantList.get(i)[2])	;
				}
			}
		}
		catch (Exception e) 
		{
			errorResponse(false,"Error Occured getToApproveRequests.....",null);	
				throw e;
		}	
		return superMerchantMap;
	}
	public ResponseEntity<GeneralResponse> getSettlementHoldReports(String fromdate, String todate, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getSettlementHoldReports.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldData> shdList = null;
		List<SettlementHoldReportsDataModel> holdReportList = null;
		try
		{
			settlAdjustMClog.info("From Date:"+ fromdate+" -- To Date:"+todate);
			 
			Date formatdFromDate = setformatDate("ddMMyyyyHHmmss", fromdate+"000000");
			Date formatdToDate = setformatDate("ddMMyyyyHHmmss", todate+"235959");
			System.out.println("SS:"+formatdFromDate+"--:"+fromdate);
			Map<Integer, String> parentMap = getParentMasterMap();
			
			Map<Integer,String> superMerchantMap = getSuperMerchantsMasterMap();
			System.out.println("SS:"+formatdToDate+"--:"+todate);
			shdList = settlementHoldDataRepository.findByStartDateBetweenAndApprovedFlag(formatdFromDate, formatdToDate, 1);
			
			if(shdList != null && shdList.size() > 0)
			{
				holdReportList = convertListToHoldList(shdList,parentMap, superMerchantMap );
				response =  successResponse(true, "Reports List", 200, holdReportList);
			}
			else
				response =  successResponse(true, "Reports List is Empty", 200, holdReportList);
			
//			AUDIT LOGS
			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("settlement hold report(endToend) from "+fromdate+" to "+todate);
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getApprovedRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getApprovedRequests...End");
		
		return response;
	}
	
	private List<SettlementHoldReportsDataModel> convertListToHoldList(List<SettlementHoldData> shdList, Map<Integer, String> parentMap, Map<Integer,String> superMerchantMap)
	{
		List<SettlementHoldReportsDataModel> holdReportList = new ArrayList<>();
		SettlementHoldReportsDataModel shRObject = null;
		//for(SettlementHoldData shd : shdList)
		for(int i=shdList.size() - 1 ; i >= 0; i--)
		{
			SettlementHoldData shd = shdList.get(i);
			shRObject =  new SettlementHoldReportsDataModel();
			
			shRObject.setSettlementHoldid(shd.getId()+"");
			
			if(shd.getAggregatorId() != null)
			{
				String value = parentMap.get(shd.getAggregatorId());
				shRObject.setAggrOrDistributor(value); 

			}
			else if(shd.getDistributerId() != null)
			{
				String value = superMerchantMap.get(shd.getDistributerId());
				shRObject.setAggrOrDistributor(value); 

			}
			shRObject.setHoldAmount(String.format("%.2f",shd.getAmountToHold()));
			shRObject.setBalanceDue(String.format("%.2f",shd.getRemainingAmountToBeHeld()));
			shRObject.setRecoverdAmount(String.format("%.2f",(shd.getAmountToHold() - shd.getRemainingAmountToBeHeld())));
			if(!isEmpty(shd.getRemarks()))
			shRObject.setReason(shd.getRemarks().split("-")[0]);
			
			if(shd.getStartDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
				String strDate = dateFormat.format(shd.getStartDate());  
				shRObject.setStartDate(strDate);
			}
			holdReportList.add(shRObject);		
		}
		return holdReportList;
	}
	
	public ResponseEntity<GeneralResponse> getSettlementHoldTxnDetailReports(String settlementHoldid, AuthenticateUserResponse authenticateUserResponse, String ip) throws Exception
	{
		settlAdjustMClog.info("getSettlementHoldReports.......Started");
		ResponseEntity<GeneralResponse>  response = null;
		List<SettlementHoldTxnDetail> shdtList = null;
		List<SettlementHoldReportTxnDetailModel> holdReportList = null;
		try
		{
			settlAdjustMClog.info("From settlementHoldid:"+ settlementHoldid);

			shdtList = settlementHoldTxnDetailRepository.findBySettlementHoldId(Integer.parseInt(settlementHoldid));
			
			if(shdtList != null && shdtList.size() > 0)
			{
				holdReportList = convertListToHoldTxnList(shdtList);
				
				response =  successResponse(true, "Reports List", 200, holdReportList);
			}
			else
				response =  successResponse(true, "Reports List is Empty", 200, holdReportList);
			
//			AUDIT LOGS
			
			FpCpAuditLogs auditLogs = new FpCpAuditLogs();

			auditLogs.setFeatureGrpId("SETTL_ADJUST");
			auditLogs.setFeatureId("SETTL_ADJUSTMENT_CRA");
			auditLogs.setUserName(authenticateUserResponse.getUserName());
//			0-login,1-read,2-update,3-approval,4-rejection,5-create,6-delete
			auditLogs.setOperation(1);
			auditLogs.setViewData("requests reports history Txn details with id "+settlementHoldid);
			auditLogs.setAuditTimestamp(new Date());
			auditLogs.setIpAddress(ip);
			fpCpAuditLogsRepository.save(auditLogs);
		}
		catch (Exception e) {
			errorResponse(false,"Error Occured getApprovedRequests.....",null);	
				throw e;
			}		
			settlAdjustMClog.info("getApprovedRequests...End");
		
		return response;
	}
	
	private List<SettlementHoldReportTxnDetailModel> convertListToHoldTxnList(List<SettlementHoldTxnDetail> shdtList)
	{
		List<SettlementHoldReportTxnDetailModel> holdtxnList = new ArrayList<>();
		SettlementHoldReportTxnDetailModel shdtObject = null;
		//for(SettlementHoldData shd : shdList)
		for(int i= 0 ; i < shdtList.size(); i++)
		{
			SettlementHoldTxnDetail shdt = shdtList.get(i);
			shdtObject =  new SettlementHoldReportTxnDetailModel();
			if(shdt.getRequestedDate() != null)
			{
				SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");  
				String strDate = dateFormat.format(shdt.getRequestedDate());  
				shdtObject.setRequestedDate(strDate);
			}
			shdtObject.setTransactionAmount(String.format("%.2f",shdt.getTransactionsAmount()));
			shdtObject.setHoldAmount(String.format("%.2f",shdt.getHoldAmount()));
			shdtObject.setSettleAmount(String.format("%.2f",shdt.getSettlementAmount()));
			shdtObject.setReferenceNumber(shdt.getReferenceNumber());
			holdtxnList.add(shdtObject);		
		}
		return holdtxnList;
	}
}
package com.apptmyz.fpcontrolpanel.services;

import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;

import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;

@Service
public interface ICBService {

	public ResponseEntity<GeneralResponse> chargeBackRaiseProcess(Workbook workbook,FileUploadModel filedataModel);
	
	public ResponseEntity<GeneralResponse> chargeBackPreArbitrationProcess(Workbook workbook, FileUploadModel filedataModel);
	
	public ResponseEntity<GeneralResponse> chargeBackArbitrationProcess(Workbook workbook, FileUploadModel filedataModel);
	
	public ResponseEntity<GeneralResponse> chargeBackGoodFaithProcess(Workbook workbook, FileUploadModel filedataModel);
}
package com.apptmyz.fpcontrolpanel.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayAnomalyCore;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.entity.ChargebackHolidayList;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.apptmyz.fpsettlementdb.repository.ChargebackHolidayListRepository;

@Component("iciciService")
public class ICICIService extends BaseService implements ICBService{

	public static final Logger log = Logger.getLogger("iciciService");

	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@Autowired
	private ChargebackHolidayListRepository chargebackHolidayListRepository;

	@Override
	public ResponseEntity<GeneralResponse> chargeBackRaiseProcess(Workbook workbook, FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW CBRAISE valid data. so upload the file data to db");
						response = processCWCBRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM CBRAISE valid data. so upload the file data to db");
						response = processMATMCWCBRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP CBRAISE valid data. so upload the file data to db");
						response = processAPCBRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured chargeBackRaiseProcess", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackPreArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Pre Arbitration valid data. so upload the file data to db");
						response = processCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Pre Arbitration valid data. so upload the file data to db");
						response = processMATMCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Pre Arbitration  valid data. so upload the file data to db");
						log.info("File contains AP Pre Arbitration valid data. so upload the file data to db");
						response = processAPPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Pre arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Arbitration valid data. so upload the file data to db");
						response = processCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Arbitration valid data. so upload the file data to db");
						response = processMATMCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Pre Arbitration  valid data. so upload the file data to db");
						response = processAPArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackGoodFaithProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Good Faith valid data. so upload the file data to db");
						response = processCWGoodFaithProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Good Faith valid data. so upload the file data to db");
						response = processMATMCWGoodFaithProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Good Faith valid data. so upload the file data to db");
						response = processAPGoodFaithProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Good Faith", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("CWCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "5, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> MATMCBRaiseHeaderValidation(Row headerRow)
	{   log.info("MATMCBRaiseHeaderValidation .. start");
	ResponseEntity<GeneralResponse> response = null;
	String headersMismatched = null;
	try
	{
		if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
		{
			headersMismatched += "5, ";
		}
		if (headerRow.getCell(12) == null || headerRow.getCell(12).getStringCellValue() == null || headerRow.getCell(12).getStringCellValue().equals("") || headerRow.getCell(12).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
		{
			headersMismatched += "12, ";
		}
		if (headersMismatched != null)
		{
			log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
			response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
					Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
		}
		else
			response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
	}
	catch(Exception e)
	{
		log.error("Exception occured MATMCBRaiseHeaderValidation", e);
		response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
	}
	log.info("MATMCBRaiseHeaderValidation .. end");
	return response;
	}
	private ResponseEntity<GeneralResponse> MATMCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> APCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("APCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(8) == null || headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") || headerRow.getCell(8).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "8, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseDataValidation(Sheet sheet)
	{
		log.info("CWCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> MATMCBRaiseDataValidation(Sheet sheet)
	{
		log.info("MATMCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(12)) == null	|| String.valueOf(row.getCell(12)).equals("") || String.valueOf(row.getCell(12)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(12));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("MATMCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> MATMCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> APCBRaiseDataValidation(Sheet sheet)
	{
		log.info("APCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(8)) == null	|| getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(8)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					// TAT not required for AP
				/*	if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}*/
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> processCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processCWCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processMATMCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPCBRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPCBRaiseProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Pre Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATM Pre Arbitraion Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processMATM Pre Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Pre Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATM Arbitraion Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processMATM Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Good faith Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCW Good Faith Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Good faith Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATMCWGoodFaith..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWGoodFaithProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPGoodFaithProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.ICICI);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPGoodFaithProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found ");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWCBRaiseData ... end");
		return response;
	}
	private ChargeBackManagement checkRRNExistsOrNot(int i, String rrn, List<Integer> duplicateCBRows, List<ChargeBackManagementResponseModel> responseChargeBackDatas)
	{
		ChargeBackManagement chargeBackManagement = null;
		boolean updatedAudit =false;
		try
		{
			chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(rrn,Constants.ICICI);
			if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==1)
			{
				log.info("txn with this rrn is accepted and not yet closed");
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				chargeBackManagement.setLiveFlag(1);
				chargeBackManagementRepository.save(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 4)
			{
				log.info("cb is closed RRN:"+ chargeBackManagement.getTxnNo());
				duplicateCBRows.add((i + 1));
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 0 ) 
			{
				commonTasks.updateAudit(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 2 )
			{
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			// if cb already found
			if(chargeBackManagement != null)
			{
				if(!updatedAudit  && duplicateCBRows.size() == 0)
				{
					commonTasks.updateAudit(chargeBackManagement);
					ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
					responseChargeBackDatas.add(chargeBackManagementResponseModel);
				}
				chargeBackManagement.setSrNo(null);
				chargeBackManagement.setUploadedTimestamp(null);
				chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
				chargeBackManagement.setAggregatorStatusFlag(null);
				chargeBackManagement.setAggregatorUpdatedTimestamp(null);
				chargeBackManagement.setResponseRemarks(null);
				chargeBackManagement.setCbFraudAttachmentsPath(null);
				chargeBackManagement.setMdeclarationAttachmentsPath(null);
				chargeBackManagement.setMpanAttachmentsPath(null);
				chargeBackManagement.setMkycAttachmentsPath(null);
				chargeBackManagement.setCdeclarationAttachmentsPath(null);
				chargeBackManagement.setMtxnlogAttachmentsPath(null);
				chargeBackManagement.setMregistercopyAttachmentsPath(null);
				
				chargeBackManagementRepository.save(chargeBackManagement);
			}
			else if (chargeBackManagement==null)
			{
				chargeBackManagement = new ChargeBackManagement();
			}
		}
		catch(Exception e)
		{
			log.error("Exception Occured checkRRNExistsOrNot", e);
			chargeBackManagement = new ChargeBackManagement();
		}
		return chargeBackManagement;
	}
	private ResponseEntity<GeneralResponse> saveCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Pre Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
							  chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Pre Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWGoodFaithData ... end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveMATMCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveMATMCW CBRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.ICICI);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveMATMCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATMCWCBRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveMATM Pre Arbitration ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.ICICI);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured save Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATM Pre Arbitration  ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveMATM Arbitration ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.ICICI);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured save Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATM Arbitration  ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap,  FileUploadModel filedataModel)
	{
		log.info("saveMATMCWGoodFaithData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.ICICI);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveMATMCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATMCWGoodFaithData ... end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveAPCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPCBRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPPreArbitrationRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +4);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPPreArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveAPArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +4);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPGoodFaithData ... end");
		return response;
	}
}
package com.apptmyz.fpcontrolpanel.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayAnomalyCore;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.entity.ChargebackHolidayList;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.apptmyz.fpsettlementdb.repository.ChargebackHolidayListRepository;

@Component("kotakService")
public class KotakService extends BaseService implements ICBService{

	public static final Logger log = Logger.getLogger("KotakService");
	
	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@Autowired
	private ChargebackHolidayListRepository chargebackHolidayListRepository;

	@Override
	public ResponseEntity<GeneralResponse> chargeBackRaiseProcess(Workbook workbook, FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW CBRAISE valid data. so upload the file data to db");
						response = processCWCBRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP CBRAISE valid data. so upload the file data to db");
						response = processAPCBRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured chargeBackRaiseProcess", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackPreArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Pre Arbitration valid data. so upload the file data to db");
						response = processCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Pre Arbitration  valid data. so upload the file data to db");
						response = processAPPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Pre arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Arbitration valid data. so upload the file data to db");
						response = processCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Arbitration  valid data. so upload the file data to db");
						response = processAPArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Pre arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackGoodFaithProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Good faith valid data. so upload the file data to db");
						response = processCWGoodFaithProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Good faith valid data. so upload the file data to db");
						response = processAPGoodFaithProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Good faith process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("CWCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "5, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}


	private ResponseEntity<GeneralResponse> APCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("APCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(8) == null || headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") || headerRow.getCell(8).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "8, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseDataValidation(Sheet sheet)
	{
		log.info("CWCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> APCBRaiseDataValidation(Sheet sheet)
	{
		log.info("APCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(8)) == null	|| getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(8)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					// TAT not required for AP
					/*	if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}*/
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> processCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processCWCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPCBRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPCBRaiseProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Pre Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Pre Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCWGoodFaithProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWGoodFaithProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPGoodFaithProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.KOTAK);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPGoodFaithProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWCBRaiseData ... end");
		return response;
	}
	private ChargeBackManagement checkRRNExistsOrNot(int i, String rrn, List<Integer> duplicateCBRows, List<ChargeBackManagementResponseModel> responseChargeBackDatas)
	{
		ChargeBackManagement chargeBackManagement = null;
		boolean updatedAudit =false;
		try
		{
			chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(rrn,Constants.KOTAK);
			if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==1)
			{
				log.info("txn with this rrn is accepted and not yet closed");
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				chargeBackManagement.setLiveFlag(1);
				chargeBackManagementRepository.save(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 4)
			{
				log.info("cb is closed RRN:"+ chargeBackManagement.getTxnNo());
				duplicateCBRows.add((i + 1));
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 0 ) 
			{
				commonTasks.updateAudit(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 2 )
			{
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			if(chargeBackManagement != null)
			{
				if(!updatedAudit  && duplicateCBRows.size() == 0)
				{
					commonTasks.updateAudit(chargeBackManagement);
					ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
					responseChargeBackDatas.add(chargeBackManagementResponseModel);
				}
				chargeBackManagement.setSrNo(null);
				chargeBackManagement.setUploadedTimestamp(null);
				chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
				chargeBackManagement.setAggregatorStatusFlag(null);
				chargeBackManagement.setAggregatorUpdatedTimestamp(null);
				chargeBackManagement.setResponseRemarks(null);
				chargeBackManagement.setCbFraudAttachmentsPath(null);
				chargeBackManagementRepository.save(chargeBackManagement);
			}
			else if (chargeBackManagement==null)
			{
				chargeBackManagement = new ChargeBackManagement();
			}
		}
		catch(Exception e)
		{
			log.error("Exception Occured checkRRNExistsOrNot", e);
			chargeBackManagement = new ChargeBackManagement();
		}
		return chargeBackManagement;
	}
	private ResponseEntity<GeneralResponse> saveCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Pre Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Pre Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWGoodFaithData ... end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveAPCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPCBRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPPreArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPPreArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveAP ArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPGoodFaithData ... end");
		return response;
	}
}
package com.apptmyz.fpcontrolpanel.services;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;

import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayAnomalyCore;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.entity.ChargebackHolidayList;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.apptmyz.fpsettlementdb.repository.ChargebackHolidayListRepository;

@Component("nsdlservice")
public class NSDLService extends BaseService implements ICBService{

	public static final Logger log = Logger.getLogger("nsdlService");
	
	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@Autowired
	private ChargebackHolidayListRepository chargebackHolidayListRepository;
	
	@Override
	public ResponseEntity<GeneralResponse> chargeBackRaiseProcess(Workbook workbook, FileUploadModel filedataModel)
	{

		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW CBRAISE valid data. so upload the file data to db");
						response = processCWCBRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM CBRAISE valid data. so upload the file data to db");
						response = processMATMCWCBRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP CBRAISE valid data. so upload the file data to db");
						response = processAPCBRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured chargeBackRaiseProcess", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	
	}

	@Override
	public ResponseEntity<GeneralResponse> chargeBackPreArbitrationProcess(Workbook workbook,
			FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Pre Arbitration valid data. so upload the file data to db");
						response = processCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Pre Arbitration valid data. so upload the file data to db");
						response = processMATMCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Pre Arbitration  valid data. so upload the file data to db");
						log.info("File contains AP Pre Arbitration valid data. so upload the file data to db");
						response = processAPPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Pre arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	@Override
	public ResponseEntity<GeneralResponse> chargeBackArbitrationProcess(Workbook workbook,
			FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Arbitration valid data. so upload the file data to db");
						response = processCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Arbitration valid data. so upload the file data to db");
						response = processMATMCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Pre Arbitration  valid data. so upload the file data to db");
						response = processAPArbitrationRaiseProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	@Override
	public ResponseEntity<GeneralResponse> chargeBackGoodFaithProcess(Workbook workbook, FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Good Faith valid data. so upload the file data to db");
						response = processCWGoodFaithProcess(sheet, filedataModel);
					}
				}					
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.MATMCW))
			{
				response = MATMCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = MATMCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains MATM Good Faith valid data. so upload the file data to db");
						response = processMATMCWGoodFaithProcess(sheet, filedataModel);
					}
				}			
			}
			else if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.AP))
			{
				response = APCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = APCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains AP Good Faith valid data. so upload the file data to db");
						response = processAPGoodFaithProcess(sheet, filedataModel);
					}
				}		
			}
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Good Faith", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("CWCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "5, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> MATMCBRaiseHeaderValidation(Row headerRow)
	{   log.info("MATMCBRaiseHeaderValidation .. start");
	ResponseEntity<GeneralResponse> response = null;
	String headersMismatched = null;
	try
	{
		if (headerRow.getCell(5) == null || headerRow.getCell(5).getStringCellValue() == null || headerRow.getCell(5).getStringCellValue().equals("") || headerRow.getCell(5).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
		{
			headersMismatched += "5, ";
		}
		if (headerRow.getCell(12) == null || headerRow.getCell(12).getStringCellValue() == null || headerRow.getCell(12).getStringCellValue().equals("") || headerRow.getCell(12).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
		{
			headersMismatched += "12, ";
		}
		if (headersMismatched != null)
		{
			log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
			response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
					Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
		}
		else
			response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
	}
	catch(Exception e)
	{
		log.error("Exception occured MATMCBRaiseHeaderValidation", e);
		response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
	}
	log.info("MATMCBRaiseHeaderValidation .. end");
	return response;
	}
	private ResponseEntity<GeneralResponse> MATMCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> APCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("APCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(8) == null || headerRow.getCell(8).getStringCellValue() == null || headerRow.getCell(8).getStringCellValue().equals("") || headerRow.getCell(8).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "8, ";
			}
			if (headerRow.getCell(9) == null || headerRow.getCell(9).getStringCellValue() == null || headerRow.getCell(9).getStringCellValue().equals("") || headerRow.getCell(9).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "9, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseDataValidation(Sheet sheet)
	{
		log.info("CWCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> MATMCBRaiseDataValidation(Sheet sheet)
	{
		log.info("MATMCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(5)) == null	|| getCellValueAccordingToCellType(row.getCell(5)).equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(5)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(5)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(12)) == null	|| String.valueOf(row.getCell(12)).equals("") || String.valueOf(row.getCell(12)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(12));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("MATMCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> MATMCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> MATMCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> APCBRaiseDataValidation(Sheet sheet)
	{
		log.info("APCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(8)) == null	|| getCellValueAccordingToCellType(row.getCell(8)).equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(8)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(8)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					// TAT not required for AP
				/*	if (String.valueOf(row.getCell(9)) == null	|| String.valueOf(row.getCell(9)).equals("") || String.valueOf(row.getCell(9)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(9));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}*/
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured APCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("APCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> APCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> APCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}

	private ResponseEntity<GeneralResponse> processCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processCWCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processMATMCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPCBRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPCBRaiseProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Pre Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATM Pre Arbitraion Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processMATM Pre Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Pre Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Pre Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Arbitration..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATM Arbitraion Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processMATM Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAP Arbitration Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAP Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAP Arbitration Process..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> processCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCW Good faith Process..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCW Good Faith Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Good faith Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processMATMCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processMATMCWGoodFaith..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(5)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveMATMCWGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWGoodFaithProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processAPGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processAPGoodFaithProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(8)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.NSDL);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveAPGoodFaithData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processAPGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processAPGoodFaithProcess..end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found ");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWCBRaiseData ... end");
		return response;
	}
	private ChargeBackManagement checkRRNExistsOrNot(int i, String rrn, List<Integer> duplicateCBRows, List<ChargeBackManagementResponseModel> responseChargeBackDatas)
	{
		ChargeBackManagement chargeBackManagement = null;
		boolean updatedAudit =false;
		try
		{
			chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(rrn,Constants.NSDL);
			if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==1)
			{
				log.info("txn with this rrn is accepted and not yet closed");
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				chargeBackManagement.setLiveFlag(1);
				chargeBackManagementRepository.save(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 4)
			{
				log.info("cb is closed RRN:"+ chargeBackManagement.getTxnNo());
				duplicateCBRows.add((i + 1));
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 0 ) 
			{
				commonTasks.updateAudit(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 2 )
			{
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			// if cb already found
			if(chargeBackManagement != null)
			{
				if(!updatedAudit  && duplicateCBRows.size() == 0)
				{
					commonTasks.updateAudit(chargeBackManagement);
					ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
					responseChargeBackDatas.add(chargeBackManagementResponseModel);
				}
				chargeBackManagement.setSrNo(null);
				chargeBackManagement.setUploadedTimestamp(null);
				chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
				chargeBackManagement.setAggregatorStatusFlag(null);
				chargeBackManagement.setAggregatorUpdatedTimestamp(null);
				chargeBackManagement.setResponseRemarks(null);
				chargeBackManagement.setCbFraudAttachmentsPath(null);
				chargeBackManagement.setMdeclarationAttachmentsPath(null);
				chargeBackManagement.setMpanAttachmentsPath(null);
				chargeBackManagement.setMkycAttachmentsPath(null);
				chargeBackManagement.setCdeclarationAttachmentsPath(null);
				chargeBackManagement.setMtxnlogAttachmentsPath(null);
				chargeBackManagement.setMregistercopyAttachmentsPath(null);
				
				chargeBackManagementRepository.save(chargeBackManagement);
			}
			else if (chargeBackManagement==null)
			{
				chargeBackManagement = new ChargeBackManagement();
			}
		}
		catch(Exception e)
		{
			log.error("Exception Occured checkRRNExistsOrNot", e);
			chargeBackManagement = new ChargeBackManagement();
		}
		return chargeBackManagement;
	}
	private ResponseEntity<GeneralResponse> saveCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Pre Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
							  chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Pre Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCW Arbitration ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCW Arbitration ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");
						chargeBackManagement.setTrnCode(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setBcName(String.valueOf(row.getCell(10)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(11)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(9)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(9)));
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWGoodFaithData ... end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveMATMCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveMATMCW CBRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE_PENDNING_FOR_SETTLEMENTS);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.NSDL);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveMATMCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATMCWCBRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveMATM Pre Arbitration ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.NSDL);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured save Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATM Pre Arbitration  ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveMATM Arbitration ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.NSDL);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured save Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATM Arbitration  ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveMATMCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap,  FileUploadModel filedataModel)
	{
		log.info("saveMATMCWGoodFaithData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(5)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(row.getCell(1) != null ? row.getCell(1).toString() : null );
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setBank(row.getCell(3) != null ? row.getCell(3).toString() : "");
						String s=String.valueOf(row.getCell(4));
						chargeBackManagement.setCardNo(commonTasks.formatCardNo(s));
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(5)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(6))));
						chargeBackManagement.setTxnDate(row.getCell(7) != null ? row.getCell(7).toString() : "");

						chargeBackManagement.setTrnCode(getCellValueAccordingToCellType(row.getCell(9)));
						chargeBackManagement.setChargeBackStatus(String.valueOf(row.getCell(10)));
						chargeBackManagement.setTransactionLogId(String.valueOf(row.getCell(11)));

						chargeBackManagement.setAtmId(String.valueOf(row.getCell(13)));
						chargeBackManagement.setBcName(String.valueOf(row.getCell(14)));
						chargeBackManagement.setIntimationMailSr(String.valueOf(row.getCell(15)));
						chargeBackManagement.setTxnTime(row.getCell(8) != null ? row.getCell(8).toString() : "");
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(12)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(12)));

						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(Constants.NSDL);
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveMATMCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}

		log.info("saveMATMCWGoodFaithData ... end");
		return response;
	}

	private ResponseEntity<GeneralResponse> saveAPCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPCBRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPPreArbitrationRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +4);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Pre Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPPreArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap, FileUploadModel filedataModel)
	{
		log.info("saveAPArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +4);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAP Arbitration", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveAPGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveAPGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(8)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(String.valueOf(row.getCell(3)));
						chargeBackManagement.setAcquirerBank(String.valueOf(row.getCell(4)));
						chargeBackManagement.setBank(String.valueOf(row.getCell(5)));
						chargeBackManagement.setTxnDate(String.valueOf(row.getCell(6)));
						chargeBackManagement.setTxnTime(changeTimeFormatSpecific(row.getCell(7)));
						chargeBackManagement.setTxnNo(String.valueOf(row.getCell(8)));
						chargeBackManagement.setCardNo(String.valueOf(row.getCell(9)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(10))));

						//tat
						try {
							Date cbDate=chargeBackManagement.getChargeBackDate();

							Calendar calendarFrom = Calendar.getInstance();
							calendarFrom.setTime(cbDate);
							calendarFrom.add(Calendar.DATE, +2);
							SimpleDateFormat tatDateFormat=new SimpleDateFormat("dd-MM-yyyy");
							Date findHoliday=calendarFrom.getTime();
							ChargebackHolidayList chargebackHolidayList=chargebackHolidayListRepository.findByStartHolidayDate(findHoliday);
							if(chargebackHolidayList!=null)
							{
								Calendar calendarTat = Calendar.getInstance();
								calendarTat.setTime(chargebackHolidayList.getEndHolidayDate());
								calendarTat.add(Calendar.DATE, +1);
								String tatDate=tatDateFormat.format(calendarTat.getTime());
								chargeBackManagement.setTatDate(tatDate);
								chargeBackManagement.setTat(calendarTat.getTime());
							}
							else
							{
								chargeBackManagement.setTatDate(tatDateFormat.format(findHoliday));
								chargeBackManagement.setTat(findHoliday);
							}
						}

						catch (Exception e) {
							log.error("Parse exception internal", e);
						}
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);

			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveAPGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveAPGoodFaithData ... end");
		return response;
	}
}
package com.apptmyz.fpcontrolpanel.services;

import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
import com.apptmyz.fpcontrolpanel.data.FileUploadModel;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.utils.CommonTasks;
import com.apptmyz.fpcontrolpanel.utils.Constants;
import com.apptmyz.fpsettlementdb.entity.AggregatorThreewayAnomalyCore;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.AggregatorThreewayAnomalyCoreRepository;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.google.gson.GsonBuilder;

@Component("paytmService")
public class PaytmService extends BaseService implements ICBService {

	public static final Logger log = Logger.getLogger("PaytmService");

	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;

	@Autowired
	private CommonTasks commonTasks;

	@Autowired
	private AggregatorThreewayAnomalyCoreRepository aggregatorThreewayAnomalyCoreRepository;

	@Override
	public ResponseEntity<GeneralResponse> chargeBackRaiseProcess(Workbook workbook, FileUploadModel filedataModel)
	{
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW CBRAISE valid data. so upload the file data to db");
						response = processCWCBRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured chargeBackRaiseProcess", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	@Override
	public ResponseEntity<GeneralResponse> chargeBackPreArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {

		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Pre Arbitration valid data. so upload the file data to db");
						response = processCWPreArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Pre Arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackArbitrationProcess(Workbook workbook, FileUploadModel filedataModel) {

		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Arbitration valid data. so upload the file data to db");
						response = processCWArbitrationRaiseProcess(sheet, filedataModel);
					}
				}					
			}
			
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured Arbitration Process", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	
	}
	@Override
	public ResponseEntity<GeneralResponse> chargeBackGoodFaithProcess(Workbook workbook, FileUploadModel filedataModel) {
		ResponseEntity<GeneralResponse> response = null;
		try 
		{
			Sheet sheet = workbook.getSheetAt(0);
			Row headerRow = sheet.getRow(sheet.getFirstRowNum());
			if(filedataModel.getProduct() != null && filedataModel.getProduct().equalsIgnoreCase(Constants.CW))
			{
				response = CWCBRaiseHeaderValidation(headerRow);
				if(response.getBody().isStatus())
				{
					response = CWCBRaiseDataValidation(sheet);
					if(response.getBody().isStatus())
					{
						log.info("File contains CW Good faith valid data. so upload the file data to db");
						response = processCWGoodFaithProcess(sheet, filedataModel);
					}
				}					
			}
			
			else
				response = errorResponse(false, "Product is Not defined", Constants.INVALID_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CW good faith", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		return response;
	}

	private ResponseEntity<GeneralResponse> CWCBRaiseHeaderValidation(Row headerRow)
	{
		log.info("CWCBRaiseHeaderValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		String headersMismatched = null;
		try
		{
			if (headerRow.getCell(4) == null || headerRow.getCell(4).getStringCellValue() == null || headerRow.getCell(4).getStringCellValue().equals("") || headerRow.getCell(4).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(5).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "4, ";
			}
			if (headerRow.getCell(7) == null || headerRow.getCell(7).getStringCellValue() == null || headerRow.getCell(7).getStringCellValue().equals("") || headerRow.getCell(7).getStringCellValue().trim().equals(""))//	|| !headerRow.getCell(3).getStringCellValue().trim().equals("Txn No.")) 
			{
				headersMismatched += "7, ";
			}
			if (headersMismatched != null)
			{
				log.info("File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched");
				response = errorResponse(Constants.FALSE,"File uploaded is not valid. Please follow the sample file\nHeaders in column(s) "+ headersMismatched.replaceAll(", $", "") + " are mismatched",
						Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Header is Valid",Constants.CORRECT_STATUS_CODE, null);
		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseHeaderValidation", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseHeaderValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationHeaderValidation(Row headerRow)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithHeaderValidation(Row headerRow)
	{
		return null;
	}


	private ResponseEntity<GeneralResponse> CWCBRaiseDataValidation(Sheet sheet)
	{
		log.info("CWCBRaiseDataValidation .. Started");
		ResponseEntity<GeneralResponse> response = null;
		List<Integer> rowContainsInavlidTxnNo = new ArrayList<Integer>();// Txn No.
		List<Integer> rowContainsInavlidTAT = new ArrayList<Integer>();// TAT
		String errorMessage = null;
		Row row = null;
		try
		{
			log.info("Uploaded file contains " + (sheet.getLastRowNum() + 1) + " rows");
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					if (getCellValueAccordingToCellType(row.getCell(4)) == null	|| getCellValueAccordingToCellType(row.getCell(4)).equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().equals("") || getCellValueAccordingToCellType(row.getCell(4)).trim().length() != 12 || !getCellValueAccordingToCellType(row.getCell(4)).trim().matches("\\d{12}"))
					{
						rowContainsInavlidTxnNo.add((i + 1));
					}
					if (String.valueOf(row.getCell(7)) == null	|| String.valueOf(row.getCell(7)).equals("") || String.valueOf(row.getCell(7)).trim().equals("")) 
					{
						rowContainsInavlidTAT.add((i + 1));
					}
					else
					{
						Date dateCheck = ChangeDateFormatSpecific(row.getCell(7));
						if(dateCheck == null)
							rowContainsInavlidTAT.add((i + 1));
					}
				}
			}

			if (rowContainsInavlidTxnNo.size() > 0)
			{
				errorMessage = "Upload process was interrupted due to an error. Reason - \n * Row(s) " + getCsvFromList(rowContainsInavlidTxnNo)+ 
						" doesn't contain valid value in 'Txn No./RRN' column";
			}
			if (rowContainsInavlidTAT.size() > 0)
			{ 
				errorMessage = "";
				errorMessage += "Upload process was interrupted due to an error. Reason -\n * Row(s) " + getCsvFromList(rowContainsInavlidTAT)+ 
						" doesn't contain valid Deemed Accepted Date value in 'Deemed Accepted Date' column";
			}
			if(errorMessage != null ) 
			{
				log.info("Detailed records are invalid : message:"+ errorMessage);
				response = errorResponse(Constants.FALSE,errorMessage ,	Constants.INVALID_CHARGE_BACK_FILE_UPLOADED, null);
			}
			else
				response = successResponse(Constants.TRUE,"File Data is Valid",Constants.CORRECT_STATUS_CODE, null);

		}
		catch(Exception e)
		{
			log.error("Exception occured CWCBRaiseDataValidation ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("CWCBRaiseDataValidation .. end");
		return response;
	}
	private ResponseEntity<GeneralResponse> CWCBPreArbitrationRaiseDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBArbitrationDataValidation(Sheet sheet)
	{
		return null;
	}
	private ResponseEntity<GeneralResponse> CWCBGoodFaithDataValidation(Sheet sheet)
	{
		return null;
	}
	
	private ResponseEntity<GeneralResponse> processCWCBRaiseProcess(Sheet sheet, FileUploadModel filedataModel)
	{
		log.info("processCWCBRaiseProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.PAYTM);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWCBRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWCBRaiseProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWCBRaiseProcess..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processCWPreArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("process Pre ArbitrationProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.PAYTM);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWPreArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Pre Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processCWArbitrationRaiseProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("process ArbitrationProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.PAYTM);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWArbitrationRaiseData(sheet, transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured process Pre Arbitration Process ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCW Arbitration Process..end");
		return response;
	}
	private ResponseEntity<GeneralResponse> processCWGoodFaithProcess(Sheet sheet,FileUploadModel filedataModel)
	{
		log.info("processCWGoodFaithProcess..started");
		ResponseEntity<GeneralResponse> response = null;
		Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult = null;
		Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap =  new LinkedHashMap<>();
		List<String> rrns = new ArrayList<String>();
		List<AggregatorThreewayAnomalyCore> threeWayAnomaliesList = null;
		Row row = null;
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				row = sheet.getRow(i);
				if (row != null)
				{
					rrns.add(getCellValueAccordingToCellType(row.getCell(4)));
				}
			}
			log.info("no of rrn = " + rrns.size() + "(" + rrns + ")");
			transactionSearchByRRNResult = getRRNSearchDetails(rrns, Constants.PAYTM);

			threeWayAnomaliesList = aggregatorThreewayAnomalyCoreRepository.fetch3WayAnomalies(rrns);

			for(AggregatorThreewayAnomalyCore threewayanamoly : threeWayAnomaliesList)
			{
				if(!threewayAnomalyCoreMap.containsKey(threewayanamoly.getRrn()))
					threewayAnomalyCoreMap.put(threewayanamoly.getRrn(), threewayanamoly);
			}
			response = saveCWGoodFaithData(sheet,transactionSearchByRRNResult, threewayAnomalyCoreMap, filedataModel);
		}
		catch(Exception e)
		{
			log.error("Exception occured processCWGoodFaithProcess ", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("processCWGoodFaithProcess..end");
		return response;
	}
	
	private ResponseEntity<GeneralResponse> saveCWCBRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult,Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWCBRaiseData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(4)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setTxnDate(row.getCell(3) != null ? row.getCell(3).toString() : "");
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(7)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			
			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWCBRaiseData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWCBRaiseData ... end");
		return response;
	}
	private ChargeBackManagement checkRRNExistsOrNot(int i, String rrn, List<Integer> duplicateCBRows, List<ChargeBackManagementResponseModel> responseChargeBackDatas)
	{
		ChargeBackManagement chargeBackManagement = null;
		boolean updatedAudit =false;
		try
		{
			chargeBackManagement = chargeBackManagementRepository.findByTxnNoAndBankSwitch(rrn,Constants.PAYTM);
			if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag()==1)
			{
				log.info("txn with this rrn is accepted and not yet closed");
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				chargeBackManagement.setLiveFlag(1);
				chargeBackManagementRepository.save(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 4)
			{
				log.info("cb is closed RRN:"+ chargeBackManagement.getTxnNo());
				duplicateCBRows.add((i + 1));
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			} 
			else if (chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 0 ) 
			{
				commonTasks.updateAudit(chargeBackManagement);
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			else if(chargeBackManagement != null && chargeBackManagement.getStatusFlag()!=null && chargeBackManagement.getStatusFlag() == 2 )
			{
				commonTasks.updateAudit(chargeBackManagement);
				updatedAudit=true;
				ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
				responseChargeBackDatas.add(chargeBackManagementResponseModel);
			}
			if(chargeBackManagement != null)
			{
				if(!updatedAudit  && duplicateCBRows.size() == 0)
				{
					commonTasks.updateAudit(chargeBackManagement);
					ChargeBackManagementResponseModel chargeBackManagementResponseModel=commonTasks.getResponseModel(chargeBackManagement);
					responseChargeBackDatas.add(chargeBackManagementResponseModel);
				}
				chargeBackManagement.setSrNo(null);
				chargeBackManagement.setUploadedTimestamp(null);
				chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
				chargeBackManagement.setAggregatorStatusFlag(null);
				chargeBackManagement.setAggregatorUpdatedTimestamp(null);
				chargeBackManagement.setResponseRemarks(null);
				chargeBackManagement.setCbFraudAttachmentsPath(null);
				chargeBackManagementRepository.save(chargeBackManagement);
			}
			else if (chargeBackManagement==null)
			{
				chargeBackManagement = new ChargeBackManagement();
			}
		}
		catch(Exception e)
		{
			log.error("Exception Occured checkRRNExistsOrNot", e);
			chargeBackManagement = new ChargeBackManagement();
		}
		return chargeBackManagement;
	}
	private ResponseEntity<GeneralResponse> saveCWPreArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWPreArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(4)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_PRE_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setTxnDate(row.getCell(3) != null ? row.getCell(3).toString() : "");
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(7)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			
			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Pre Arbitration Data", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWPreArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWArbitrationRaiseData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWArbitrationRaiseData ... Started");

		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(4)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_ARBITRATION_RAISE);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setTxnDate(row.getCell(3) != null ? row.getCell(3).toString() : "");
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(7)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			
			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCW Arbitration Data", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
	
		log.info("saveCWArbitrationRaiseData ... end");
		return response;
	}
	private ResponseEntity<GeneralResponse> saveCWGoodFaithData(Sheet sheet, Map<String, TransactionSearchByRRNResult> transactionSearchByRRNResult, Map<String, AggregatorThreewayAnomalyCore> threewayAnomalyCoreMap , FileUploadModel filedataModel)
	{
		log.info("saveCWGoodFaithData ... Started");
		ResponseEntity<GeneralResponse> response = null;
		Row row = null;
		ChargeBackManagement chargeBackManagement = null;
		List<Integer> emptyRowNos = new ArrayList<Integer>();
		List<Integer> exceptionRowNos = new ArrayList<Integer>();
		List<Integer> duplicateCBRows = new ArrayList<Integer>();
		List<ChargeBackManagement> chargeBackDataList = new ArrayList<ChargeBackManagement>();
		List<ChargeBackManagementResponseModel> responseChargeBackDatas = new ArrayList<ChargeBackManagementResponseModel>();
		try 
		{
			for (int i = 1; i <= sheet.getLastRowNum(); i++)
			{
				try 
				{
					row = sheet.getRow(i);
					if (row != null)
					{
						chargeBackManagement = checkRRNExistsOrNot(i,getCellValueAccordingToCellType(row.getCell(4)), duplicateCBRows, responseChargeBackDatas);

						chargeBackManagement.setCbDate(String.valueOf(row.getCell(1)));
						chargeBackManagement.setChargeBackDate(ChangeDateFormatSpecific(row.getCell(1)));
						chargeBackManagement.setChargeBackType(Constants.CB_GOOD_FAITH);
						chargeBackManagement.setUploadedChargebackType(row.getCell(2) != null ? row.getCell(2).toString() : "");
						chargeBackManagement.setTxnDate(row.getCell(3) != null ? row.getCell(3).toString() : "");
						chargeBackManagement.setTxnNo(getCellValueAccordingToCellType(row.getCell(4)));
						chargeBackManagement.setAmount(Double.parseDouble(getCellValueAccordingToCellType(row.getCell(5))));
						chargeBackManagement.setTatDate(String.valueOf(row.getCell(7)));
						chargeBackManagement.setTat(ChangeDateFormatSpecific(row.getCell(7)));
						
						if(transactionSearchByRRNResult!=null && transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo())!=null)
						{
							chargeBackManagement.setBcTerminalId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getCardAcceptorTerminalIdentification());
							chargeBackManagement.setFingpayTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getFingpayTransactionId());
							chargeBackManagement.setUploadedBy(filedataModel.getUserName());
							if(filedataModel.getOldCbFilesFlag() == null || (filedataModel.getOldCbFilesFlag() != null && filedataModel.getOldCbFilesFlag() == 0))
								chargeBackManagement.setUploadedTimestamp(new Date());
							chargeBackManagement.setSuperMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantId());
							chargeBackManagement.setSuperMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getSuperMerchantName());
							chargeBackManagement.setMerchantId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantId());
							chargeBackManagement.setMerchantName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_name());
							chargeBackManagement.setMerchantLoginId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchant_login_id());
							chargeBackManagement.setParentId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentId());
							chargeBackManagement.setParentName(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getParentMerchantName());
							chargeBackManagement.setTransactionTimestamp(new Date(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getRequestedTimestamp()));
							chargeBackManagement.setTransactionAmount(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getTransactionAmount());
							chargeBackManagement.setTransactionResponseCode(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode());
							chargeBackManagement.setProductType(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getProduct());
							chargeBackManagement.setMerchantTxnId(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getMerchantTransactionId());
							chargeBackManagement.setCountPenaltyDays(0);
							chargeBackManagement.setChargeBackFlag(0);
							chargeBackManagement.setPenaltyFlag(0);
							chargeBackManagement.setFraudFlag(0);
							chargeBackManagement.setNocaSettlementFlag(0);
							chargeBackManagement.setEkycStatusFlag(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getEkycStatusFlag());
							chargeBackManagement.setUpdatedTimestamp(new Date());
							chargeBackManagement.setResponseRemarks("uploaded CB details");

							if(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode() != null && 
									!(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode().equalsIgnoreCase(Constants.TXN_STATUS_00)))
							{
								String responseCode = transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getResponseCode();
								chargeBackManagement.setResponseRemarks(responseCode + " Rejected");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
							}
							else if(chargeBackManagement.getUploadedTimestamp() != null && chargeBackManagement.getTat() != null && chargeBackManagement.getUploadedTimestamp().after(chargeBackManagement.getTat()))
							{
								chargeBackManagement.setResponseRemarks("TAT crossed, Accepted");
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
							}
							else	
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Files_Uploaded);
							chargeBackManagement.setCbOrFraud(Constants.CONTACT_TYPE_CB);
							chargeBackManagement.setBankSwitch(transactionSearchByRRNResult.get(chargeBackManagement.getTxnNo()).getBankSwitch());
							chargeBackManagement.setSrNo(filedataModel.getSrNo());

							if(threewayAnomalyCoreMap.containsKey(chargeBackManagement.getTxnNo()))
							{
								AggregatorThreewayAnomalyCore anamoly = threewayAnomalyCoreMap.get(chargeBackManagement.getTxnNo());
								chargeBackManagement.setThreeWayAnomalyFlag(1);
								chargeBackManagement.setThreeWayFingpayTxnId(anamoly.getFingpayTransactionId());
								chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
								chargeBackManagement.setResponseRemarks("Found in 3-way Anomaly");
								
								ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
								chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
								chargeBackManagementResponseModel.setResponseMessage("Found in 3-way Anomaly ");
								responseChargeBackDatas.add(chargeBackManagementResponseModel);
							}

							chargeBackDataList.add(chargeBackManagement);
						}
						else
						{
							ChargeBackManagementResponseModel chargeBackManagementResponseModel=new ChargeBackManagementResponseModel();
							chargeBackManagementResponseModel.setTxnNo(chargeBackManagement.getTxnNo());
							chargeBackManagementResponseModel.setResponseMessage("RRN Not found");
							responseChargeBackDatas.add(chargeBackManagementResponseModel);
						}
					}
					else
					{
						emptyRowNos.add(i);
					}
				}
				catch(Exception e)
				{
					log.error("Exception occured save record ROW::"+ i , e);
					exceptionRowNos.add(i);
					errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
				}
			}

			log.info("chargeBackDatas = " + chargeBackDataList.toString());
			log.info("chargeBackDatas.size = " + chargeBackDataList.size());
			chargeBackManagementRepository.save(chargeBackDataList);
			log.info("data saved in charge_back_data table");

			if(exceptionRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " Exception rows in row no(s)"+ getCsvFromList(emptyRowNos));

				return successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of Exception rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			
			}
			if(emptyRowNos.size() > 0 && duplicateCBRows.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos)  +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos) +"File contains " + duplicateCBRows.size() + 
						" number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows) , Constants.CORRECT_STATUS_CODE , responseChargeBackDatas);
			}
			else if(emptyRowNos.size() > 0)
			{
				log.info("File contains " + emptyRowNos.size() + " empty rows in row no(s)"+ getCsvFromList(emptyRowNos));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + emptyRowNos.size()+ " no of empty rows in row no(s) " + getCsvFromList(emptyRowNos) , Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else if(duplicateCBRows.size() > 0)
			{
				log.info("File contains " + duplicateCBRows.size() + " number of  duplicate chargeback which are either approved/rejected/completed rows in row no(s)"+ getCsvFromList(duplicateCBRows));

				response = successResponse(Constants.TRUE,	Constants.REQUEST_COMPLETED + "\nFile contains " + duplicateCBRows.size()+
						" number of duplicate chargeback which are either approved/rejected/auto-rejected/completed rows in row no(s) " + getCsvFromList(duplicateCBRows),Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}
			else {
				log.info("Request completed");
				response = successResponse(Constants.TRUE, Constants.REQUEST_COMPLETED,Constants.CORRECT_STATUS_CODE ,responseChargeBackDatas);
			}

		}
		catch(Exception e)
		{
			log.error("Exception occured saveCWGoodFaithData", e);
			response = errorResponse(Constants.FALSE,Constants.ERRORS_EXCEPTION_IN_SERVER,Constants.EXCEPTION_IN_SERVER_STATUS_CODE, null);
		}
		log.info("saveCWGoodFaithData ... end");
		return response;
	}
}
package com.apptmyz.fpcontrolpanel.utils;

interface IStep{
	
}
abstract class BaseStep implements IStep{
	
}
class Task extends BaseStep{
	
}
class BaseTask extends Task{
	
}
public class ABCTask extends BaseTask{

}
package com.apptmyz.fpcontrolpanel.utils;

public class CBHistoryResponseModel {

	private Integer id;
	private String rrn;
	private String productType;
	private String bankSwitch;
	private String txnDate;
	private String txnAmount;
	private String chargebackDate;
	private Integer chargebackStatus;
	private String chargebackTat;
	private String preArbitrationDate;
	private Integer preArbitrationStatus;
	private String preArbitrationTat;
	private String arbitrationDate;
	private Integer arbitrationStatus;
	private String arbitrationTat;
	private String goodFaithDate;
	private Integer goodFaithStatus;
	private String goodFaithTat;
	private String merchantLoginId;
	private Integer superMerchantId;
	private String superMerchantName;
	private String parentName;
	private String merchantName;
	
	public Integer getId() {
		return id;
	}
	public void setId(Integer id) {
		this.id = id;
	}
	public String getRrn() {
		return rrn;
	}
	public void setRrn(String rrn) {
		this.rrn = rrn;
	}
	public String getTxnDate() {
		return txnDate;
	}
	public void setTxnDate(String txnDate) {
		this.txnDate = txnDate;
	}
	public String getTxnAmount() {
		return txnAmount;
	}
	public void setTxnAmount(String txnAmount) {
		this.txnAmount = txnAmount;
	}
	public String getChargebackDate() {
		return chargebackDate;
	}
	public void setChargebackDate(String chargebackDate) {
		this.chargebackDate = chargebackDate;
	}
	public Integer getChargebackStatus() {
		return chargebackStatus;
	}
	public void setChargebackStatus(Integer chargebackStatus) {
		this.chargebackStatus = chargebackStatus;
	}
	public String getChargebackTat() {
		return chargebackTat;
	}
	public void setChargebackTat(String chargebackTat) {
		this.chargebackTat = chargebackTat;
	}
	public String getPreArbitrationDate() {
		return preArbitrationDate;
	}
	public void setPreArbitrationDate(String preArbitrationDate) {
		this.preArbitrationDate = preArbitrationDate;
	}
	public Integer getPreArbitrationStatus() {
		return preArbitrationStatus;
	}
	public void setPreArbitrationStatus(Integer preArbitrationStatus) {
		this.preArbitrationStatus = preArbitrationStatus;
	}
	public String getPreArbitrationTat() {
		return preArbitrationTat;
	}
	public void setPreArbitrationTat(String preArbitrationTat) {
		this.preArbitrationTat = preArbitrationTat;
	}
	public String getArbitrationDate() {
		return arbitrationDate;
	}
	public void setArbitrationDate(String arbitrationDate) {
		this.arbitrationDate = arbitrationDate;
	}
	public Integer getArbitrationStatus() {
		return arbitrationStatus;
	}
	public void setArbitrationStatus(Integer arbitrationStatus) {
		this.arbitrationStatus = arbitrationStatus;
	}
	public String getArbitrationTat() {
		return arbitrationTat;
	}
	public void setArbitrationTat(String arbitrationTat) {
		this.arbitrationTat = arbitrationTat;
	}
	public String getGoodFaithDate() {
		return goodFaithDate;
	}
	public void setGoodFaithDate(String goodFaithDate) {
		this.goodFaithDate = goodFaithDate;
	}
	public Integer getGoodFaithStatus() {
		return goodFaithStatus;
	}
	public void setGoodFaithStatus(Integer goodFaithStatus) {
		this.goodFaithStatus = goodFaithStatus;
	}
	public String getGoodFaithTat() {
		return goodFaithTat;
	}
	public void setGoodFaithTat(String goodFaithTat) {
		this.goodFaithTat = goodFaithTat;
	}
	public String getBankSwitch() {
		return bankSwitch;
	}
	public void setBankSwitch(String bankSwitch) {
		this.bankSwitch = bankSwitch;
	}
	public String getProductType() {
		return productType;
	}
	public void setProductType(String productType) {
		this.productType = productType;
	}
	public String getMerchantLoginId() {
		return merchantLoginId;
	}
	public void setMerchantLoginId(String merchantLoginId) {
		this.merchantLoginId = merchantLoginId;
	}
	public String getSuperMerchantName() {
		return superMerchantName;
	}
	public void setSuperMerchantName(String superMerchantName) {
		this.superMerchantName = superMerchantName;
	}
	public String getParentName() {
		return parentName;
	}
	public void setParentName(String parentName) {
		this.parentName = parentName;
	}
	public Integer getSuperMerchantId() {
		return superMerchantId;
	}
	public void setSuperMerchantId(Integer superMerchantId) {
		this.superMerchantId = superMerchantId;
	}
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.StringReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Random;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.FactoryConfigurationError;
import javax.xml.parsers.ParserConfigurationException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.stereotype.Service;
import org.w3c.dom.CharacterData;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

import com.apptmyz.fpaepsdb.entity.ImpsServiceData;
import com.apptmyz.fpaepsdb.repository.ImpsServiceDataRepository;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.IMPSResponseModel;

@Service
@Configurable
public class CommonRepositoryMethods {
	
	@Autowired
	private ImpsServiceDataRepository impsServiceDataRepository;
	
	@Autowired
	private CommonTasks commonTasks;
	
	@Autowired
	private FilesUtil filesUtil;
	
	private String OTP(int len)
    {
//        System.out.println("Generating OTP using random() : ");
//        System.out.print("You OTP is : ");
 
        // Using numeric values
        String numbers = "0123456789";
 
        // Using random method
        Random rndm_method = new Random();
 
        String otp = "";
 
        for (int i = 0; i < len; i++)
        {
            // Use of charAt() method : to get character value
            // Use of nextInt() as it is scanning the value as int
            otp += numbers.charAt(rndm_method.nextInt(numbers.length()));
        }
        return otp;
    }
	
	public GeneralResponse IMPSP2ATransaction(String beneAccNo, String beneIFSC, double amount, String remName, String remMobile, String requestedTo, Integer requestedUserId){
		GeneralResponse generalResponse = null;
		System.out.println("IMPS Transaction Info : beneAccNo = " + beneAccNo +" beneIFSC = " + beneIFSC +" amount = " + amount + " remName = " + remName + " remMobile = " + remMobile);
		if (commonTasks.check(beneAccNo, beneIFSC, remName, remMobile)) {
			  try {
				  String passCode = filesUtil.getProperty("IMPSPassCode");
				  String retailerCode = filesUtil.getProperty("IMPSretailerCode");
				  String transactionDate = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
				  String paymentRef = filesUtil.getProperty("paymentRef");
				  
				  ImpsServiceData impsServiceData = new ImpsServiceData();
				  impsServiceData.setBeneficiaryAccountNumber(beneAccNo);
				  impsServiceData.setBeneficiaryIfsc(beneIFSC);
				  impsServiceData.setPassCode(passCode);
				  impsServiceData.setPaymentRef(paymentRef);
				  impsServiceData.setRemMobile(remMobile);
				  impsServiceData.setRemName(remName);
				  impsServiceData.setRequestRemarks(requestedTo);
				  impsServiceData.setRequestTimestamp(new Date());
				  impsServiceData.setRequestedUserId(requestedUserId);
				  impsServiceData.setRetailerCode(retailerCode);
				  impsServiceData.setTransactionAmount(amount);
				  impsServiceData.setTransactionDate(transactionDate);
				  impsServiceData.setWebStatus("sent");
				  impsServiceDataRepository.save(impsServiceData);
				  String transactionReferenceNumber = getPaymentRef(impsServiceData.getId());
				  impsServiceData.setTransactionReferenceNumber(transactionReferenceNumber);
				  impsServiceDataRepository.save(impsServiceData);
				  
				  IMPSResponseModel impsResponseModel = doTranscation(beneAccNo, beneIFSC, amount, remName, remMobile, passCode, transactionDate, transactionReferenceNumber, paymentRef, retailerCode);
				  
				  impsServiceData.setResponseActCode(impsResponseModel.getActCode());
				  impsServiceData.setResponseBankRrn(impsResponseModel.getBankRRN());
				  impsServiceData.setResponseBeneficiaryName(impsResponseModel.getBeneName());
				  impsServiceData.setResponseRemarks("");
				  impsServiceData.setResponseResponse(impsResponseModel.getResponse());
				  impsServiceData.setResponseTimestamp(new Date());
				  impsServiceData.setResponseTranRefNo(impsResponseModel.getTranRefNo());
				  impsServiceData.setWebStatus("received");
				  impsServiceDataRepository.save(impsServiceData);
				  if(impsResponseModel.getActCode().equals("0")){
					  generalResponse = new GeneralResponse(Constants.TRUE, Constants.REQUEST_COMPLETED, Constants.CORRECT_STATUS_CODE, impsResponseModel);
				  } else {
					  generalResponse = new GeneralResponse(Constants.FALSE, impsResponseModel.getResponse(), Constants.EXCEPTION_IN_SERVER_STATUS_CODE, impsResponseModel);
				  }
			  } catch (Exception e) {
						e.printStackTrace();
						generalResponse = new GeneralResponse(Constants.FALSE,
								Constants.ERRORS_EXCEPTION_IN_SERVER, 0);
			  } 
		} else {
			generalResponse = new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INCOMPLETE_DATA, 0);
		}
		System.out.println("IMPSP2ATransaction result : " + generalResponse);
		return generalResponse;
	}
	
	public IMPSResponseModel doTranscation(String beneAccNo, String beneIFSC, double amount, String remName, String remMobile, String passCode, String transactionDate, String tranRefNo, String paymentRef, String retailerCode) throws IOException, ParserConfigurationException, FactoryConfigurationError, SAXException {
		String url = 	filesUtil.getProperty("impsserviceurl");//"http://203.199.32.92:7474/imps-web-bc/api/transaction/bc/IBCSpi00062/p2a?";
		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();

		//add reuqest header
		con.setRequestMethod("POST");
		con.setRequestProperty("User-Agent", "Mozilla/5.0");
		con.setRequestProperty("Accept-Language", "en-US,en;q=0.5");

		String urlParameters = "BeneAccNo="+beneAccNo+"&BeneIFSC="+beneIFSC+"&Amount="+amount+"&TranRefNo="+tranRefNo+"&PaymentRef="+paymentRef+"&RemName="+remName+"&RemMobile="+remMobile+"&RetailerCode="+retailerCode+"&PassCode="+passCode+"&TransactionDate="+ transactionDate;

		// Send post request
		con.setDoOutput(true);
		DataOutputStream wr = new DataOutputStream(con.getOutputStream());
		wr.writeBytes(urlParameters);
		wr.flush();
		wr.close();

		int responseCode = con.getResponseCode();
		System.out.println("\nSending 'POST' request to URL : " + url);
		System.out.println("Post parameters : " + urlParameters);
		System.out.println("Response Code : " + responseCode);

		BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
		String inputLine;
		StringBuffer response = new StringBuffer();

		while ((inputLine = in.readLine()) != null) {
			response.append(inputLine);
		}
		in.close();

		//print result
//		System.out.println(response.toString());
//		return parseResponse(response.toString());
		System.out.println("Updated response :"+response.toString());
		System.out.println("Updated parse response :"+parseResponse(response.toString().replace("&", "&amp;")));
		return parseResponse(response.toString().replace("&", "&amp;"));
	}

	private IMPSResponseModel parseResponse(String xmlRecords) throws ParserConfigurationException, FactoryConfigurationError, SAXException, IOException {
		 IMPSResponseModel impsResponseModel = new IMPSResponseModel();
		    DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();
		    InputSource is = new InputSource();
		    is.setCharacterStream(new StringReader(xmlRecords));

		    Document doc = db.parse(is);
		    NodeList nodes = doc.getElementsByTagName("ImpsResponse");

		    for (int i = 0; i < nodes.getLength(); i++) {
		      Element element = (Element) nodes.item(i);

		      NodeList actCode = element.getElementsByTagName("ActCode");
		      Element line = (Element) actCode.item(0);
		      if(line != null){
			      System.out.println("ActCode : " + getCharacterDataFromElement(line));
			      impsResponseModel.setActCode(getCharacterDataFromElement(line));
		      }

		      NodeList response = element.getElementsByTagName("Response");
		      line = (Element) response.item(0);
		      if(line != null){
			      System.out.println("Response : " + getCharacterDataFromElement(line));
			      impsResponseModel.setResponse(getCharacterDataFromElement(line));
		      }
		      
		      NodeList beneName = element.getElementsByTagName("BeneName");
		      line = (Element) beneName.item(0);
		      if(line != null){
			      System.out.println("BeneName : " + getCharacterDataFromElement(line));
			      impsResponseModel.setBeneName(getCharacterDataFromElement(line));
		      }
		      
		      NodeList tranRefNo = element.getElementsByTagName("TranRefNo");
		      line = (Element) tranRefNo.item(0);
		      if(line != null){
			      System.out.println("TranRefNo : " + getCharacterDataFromElement(line));
			      impsResponseModel.setTranRefNo(getCharacterDataFromElement(line));
		      }
		      NodeList bankRRN = element.getElementsByTagName("BankRRN");
		      line = (Element) bankRRN.item(0);
		      if(line != null){
			      System.out.println("BankRRN : " + getCharacterDataFromElement(line));
			      impsResponseModel.setBankRRN(getCharacterDataFromElement(line));
		      }
		    }
			return impsResponseModel;
	}

	public String getCharacterDataFromElement(Element e) {
	    Node child = e.getFirstChild();
	    if (child instanceof CharacterData) {
	      CharacterData cd = (CharacterData) child;
	      return cd.getData();
	    }
	    return "";
	  }
	private String getPaymentRef(int id) {
		return "V"+String.format("%9s", id).replace(" ", "0");
	}

}
package com.apptmyz.fpcontrolpanel.utils;

import java.awt.image.BufferedImage;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.HttpURLConnection;
import java.net.InetAddress;
import java.net.URL;
import java.net.UnknownHostException;
import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;

import javax.imageio.ImageIO;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import javax.servlet.http.HttpServletRequest;

//import java.util.Base64;
import org.apache.commons.codec.binary.Base64;
import org.apache.http.HttpEntity;
import org.apache.http.HttpHeaders;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.ContentType;
import org.apache.http.entity.StringEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.CloseableHttpClient;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.client.LaxRedirectStrategy;

import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.ArrayList;
import java.util.Base64.Decoder;
import sun.misc.BASE64Decoder;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.RequestBody;

import com.apptmyz.fpcarddb.entity.MaCashWithdrawalDataRep;
import com.apptmyz.fpcarddb.repository.MaCashDepositDataRepRepository;
import com.apptmyz.fpcarddb.repository.MaCashWithdrawalDataRepRepository;
import com.apptmyz.fpcontrolpanel.data.ChargeBackManagementResponseModel;
//import com.apptmyz.fpcarddb.entity.MaCashWithdrawalData;
//import com.apptmyz.fpcarddb.repository.MaCashWithdrawalDataRepository;
import com.apptmyz.fpcontrolpanel.data.EmailNotificationModel;
import com.apptmyz.fpcontrolpanel.data.MerchantMasterModal;
import com.apptmyz.fpcontrolpanel.data.MerchantModel;
import com.apptmyz.fpcontrolpanel.data.ValidateMandatoryFieldsResponseDataModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponse;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpcontrolpanel.response.RRNTxnResponseModel;
import com.apptmyz.fpcontrolpanel.services.ChargebackManagementCacheData;
import com.apptmyz.fpsettlementdb.entity.CBFraudManagementAudit;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.CbFraudManagementAuditRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.ByteArrayEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ImprovedDateTypeAdapter;
import com.apptmyz.fpcontrolpanel.data.TimestampAdapter;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.APRrnResponseModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponseAP;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponseRRN;
import com.apptmyz.fpcontrolpanel.response.CwAndMATMRrnResponseModel;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;

import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;

@Service
@Configurable
public class CommonTasks {

	@Autowired
	private FilesUtil fileUtil;

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private CbFraudManagementAuditRepository cbFraudAuditLogsRepository;

	@Autowired
	private MaCashWithdrawalDataRepRepository maCashWithdrawalDataRepRepository;

	@Autowired
	private ChargebackManagementCacheData chargebackManagementCacheData;

	public boolean check(String... args) {
		boolean result = true;

		for (String arg : args) {
			if (arg == null || arg.trim().length() == 0) {
				result = false;
				break;
			}
		}
		return result;
	}

	public String saveImg(String stringImage,String name,HttpServletRequest request )
	{
		String path="";
		String realPath="";
		try { 
			if(stringImage != null && stringImage.length() > 0 )
			{    
				BufferedImage image = null;
				byte[] imageByte;

				BASE64Decoder decoder = new BASE64Decoder();
				imageByte = decoder.decodeBuffer(stringImage);
				ByteArrayInputStream bis = new ByteArrayInputStream(imageByte);
				image = ImageIO.read(bis);
				bis.close(); 

				if(name.lastIndexOf(".") != -1 && name.lastIndexOf(".") != 0)
				{
					realPath  = name;
					System.out.println("update");
				}
				else {
					realPath  = name+".png";
					System.out.println("save");
				}


				File outputfile = new File(realPath);      


				ImageIO.write(image, "png", outputfile); 
				path= outputfile.toString();
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return path;
	}

	public String imageEncode(String schoolImg )
	{
		String encodedFile="";
		String imagePath="";
		try {
			if(schoolImg != null && !schoolImg.equals("") )
			{
				imagePath = schoolImg;
			}



			if(imagePath != null && imagePath.length() > 0 )
			{
				File f2=new File(imagePath);
				if(f2.exists())
				{
					byte fileContent[] = new byte[3000];
					try (FileInputStream fin = new FileInputStream(f2)) {
						while(fin.read(fileContent) >= 0) {
							// Base64.encodeBase64(fileContent);
						}
					}

				}

				imagePath = imagePath.replace("\\", "/");


				byte[] imageInByte;

				File f=new File(imagePath);
				if(f.exists())
				{
					BufferedImage originalImage = ImageIO.read(f);


					// convert BufferedImage to byte array
					ByteArrayOutputStream baos = new ByteArrayOutputStream();
					ImageIO.write(originalImage, "png", baos);
					baos.flush();
					imageInByte = baos.toByteArray();
					baos.close();
					//			encodedFile = Base64.getUrlEncoder().encodeToString(imageInByte);
					encodedFile = Base64.encodeBase64URLSafeString(imageInByte);

				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return encodedFile;
	}

	public String getBase64(String imageName) {
		File file = new File(imageName);
		String imageDataString = null;
		try{
			// Reading a Image file from file system
			FileInputStream imageInFile = new FileInputStream(file);
			byte imageData[] = new byte[(int) file.length()];
			imageInFile.read(imageData);
			// Converting Image byte array into Base64 String
			imageDataString = Base64.encodeBase64String(imageData);
			imageInFile.close();
			System.out.println("Image Successfully Manipulated!");
		} catch (FileNotFoundException e) {
			System.out.println("Image not found" + e);
		} catch (IOException ioe) {
			System.out.println("Exception while reading the Image " + ioe);
		}
		return imageDataString;
	}

	public String md5(String input) {
		StringBuilder sb = new StringBuilder();
		if (null == input)
			return null;

		try {

			MessageDigest md = MessageDigest.getInstance("MD5");
			byte[] hashInBytes = md.digest(input.getBytes(StandardCharsets.UTF_8));


			for (byte b : hashInBytes) {
				sb.append(String.format("%02x", b));
			}
			System.out.println(sb.toString());

		} catch (NoSuchAlgorithmException e) {

			e.printStackTrace();
		}
		return sb.toString();
	}

	public ValidateMandatoryFieldsResponseDataModel validateMandatoryFieldsForExcelMerchntOnboarding(MerchantMasterModal model) {
		boolean valid = true ;
		String message = null; 
		ValidateMandatoryFieldsResponseDataModel validateMandatoryFieldsResponseDataModel = new ValidateMandatoryFieldsResponseDataModel();
		try{

			if(model.getMerchantLoginId() == null || model.getMerchantLoginId().equals("")){
				message ="Mandatory parameters  Merchant Login Id is missing.";
				valid = false;   
			} 
			else if (model.getMerchantLoginPin() == null || model.getMerchantLoginPin().equals("")){
				message ="Mandatory parameters  Merchant Login Pin  is missing.";
				valid = false;   
			} 
			else if (model.getMerchantCityName() == null || model.getMerchantCityName().equals("")){
				message ="Mandatory parameters  Merchant City name  is missing.";
				valid = false;   
			} 
			else if(model.getMerchantName() == null || model.getMerchantName().equals("")){
				message ="Mandatory parameters  Merchant Name  is missing.";
				valid = false;   
			}  

			else if(model.getMerchantAddress() == null || model.getMerchantAddress().equals(""))
			{
				message ="Mandatory parameters  Merchant address is missing.";
				valid = false; 
			}
			else if(model.getMerchantPinCode() == null || model.getMerchantPinCode().equals("")) {
				message ="Mandatory parameters  Merchant pin code is missing.";
				valid = false;
			}
			else if(model.getUserPan() == null || model.getUserPan().equals("")){
				message = "Mandatory parameters User Pan is missing";
				valid = false;
			}
			else{
				valid = true;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			message = "Exception while validation mandatory fields";
			valid = false;
		} 
		finally{
			validateMandatoryFieldsResponseDataModel.setValid(valid);
			validateMandatoryFieldsResponseDataModel.setMessage(message);
		}
		return validateMandatoryFieldsResponseDataModel;

	}

	public ValidateMandatoryFieldsResponseDataModel validateMandatoryField(MerchantModel model) {
		boolean valid = true ;
		String message = null; 
		ValidateMandatoryFieldsResponseDataModel validateMandatoryFieldsResponseDataModel = new ValidateMandatoryFieldsResponseDataModel();
		try{

			if(model.getMerchantLoginId() == null || model.getMerchantLoginId().trim().isEmpty()){
				message ="Mandatory parameters  Merchant Login Id is missing.";
				valid = false;   
			} 
			else if (model.getMerchantLoginPin() == null || model.getMerchantLoginPin().trim().isEmpty()){
				message ="Mandatory parameters  Merchant Login Pin  is missing.";
				valid = false;   
			} 
			else if(model.getMerchantName() == null || model.getMerchantName().trim().isEmpty()){
				message ="Mandatory parameters  Merchant Name  is missing.";
				valid = false;   
			}  
			else if(model.getMerchantAddress() == null){
				message ="Mandatory parameters  Merchant address is missing.";
				valid = false;   
			} 
			else if(model.getMerchantAddress().getMerchantAddress() == null || model.getMerchantAddress().getMerchantAddress().trim().isEmpty())
			{
				message ="Mandatory parameters  Merchant address is missing.";
				valid = false; 
			}
			else if (model.getMerchantCityName() == null || model.getMerchantCityName().trim().isEmpty()){
				message ="Mandatory parameters  Merchant City  is missing.";
				valid = false;    
			} 
			else if(model.getMerchantPinCode() == null || model.getMerchantPinCode().trim().isEmpty()) {
				message ="Mandatory parameters  Merchant pin code is missing.";
				valid = false;
			}
			else if(model.getKyc() == null ){
				message = "Mandatory parameters User Pan is missing";
				valid = false;
			}
			else if(model.getKyc().getUserPan() == null || model.getKyc().getUserPan().trim().isEmpty()){
				message = "Mandatory parameters User Pan is missing";
				valid = false;
			}
			else{
				valid = true;
			}
		}
		catch (Exception e) {
			e.printStackTrace();
			message = "Exception while validation mandatory fields";
			valid = false;
		} 
		finally{
			validateMandatoryFieldsResponseDataModel.setValid(valid);
			validateMandatoryFieldsResponseDataModel.setMessage(message);
		}
		return validateMandatoryFieldsResponseDataModel;

	}

	@SuppressWarnings("deprecation")
	public String toImgFromBase64(String pic,String mName,String ext) {

		String extension = ext;
		String path = fileUtil.getProperty("documentUploadPath");

		// path = new File(".").getCanonicalPath() +"/" + path;

		System.out.println("NEW PATH: " + path);
		System.out.println(pic+"===pic");
		File fileImg = new File(path);
		fileImg.mkdirs();
		//
		//pic = URLDecoder.decode(pic);

		byte[] imgBytes = Base64.decodeBase64(pic);
		System.out.println("imgBytes==="+imgBytes);
		String fileName = (mName + new SimpleDateFormat("yyyyMMddhhmmssSSSS").format(new Date()) + "." + extension).trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

	//	public String postToFpcardGenData(String data, String url, String token) throws UnsupportedOperationException, IOException {
	//		String dataSent ="";
	////		URL urlMatm = new URL(null, "url", new sun.net.www.protocol.https.Handler());
	//		URL    urlMatm            = new URL( url );
	//
	//    	HttpURLConnection connection = (HttpURLConnection) urlMatm.openConnection(); 
	//    	byte[] postData       = data.getBytes( StandardCharsets.UTF_8 );
	//    	String request        = "http://example.com/index.php";
	//    	connection.setDoOutput( true );
	//    	connection.setInstanceFollowRedirects( false );
	//    	connection.setRequestMethod( "POST" );
	//    	connection.setRequestProperty( "charset", "utf-8");
	//    	connection.setUseCaches( false );
	//
	//    	try( DataOutputStream wr = new DataOutputStream( connection.getOutputStream())) {
	//    	   wr.write( postData );
	//    	}
	//    	String redirect = connection.getHeaderField("Location");
	//    	connection.getResponseCode();
	//    	System.out.println("connection.getResponseCode() :"+connection.getResponseCode());
	//    	if (redirect != null){
	//    		System.out.println("in redirect:"+redirect);
	//    		connection = (HttpURLConnection) new URL(redirect).openConnection();
	//    	}
	////    	BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	////    	InputStream in = connection.getInputStream();
	//    	BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
	//    	System.out.println("in "+in);
	//    	System.out.println();
	//    	String inputLine = "";
	////    	while ((inputLine = in.readLine()) != null) {
	////    		dataSent += inputLine;
	////    	}
	//    	while (in != null) {
	//    		dataSent += inputLine;
	//    		
	//    	}
	//    	connection.disconnect();
	//    	System.out.println("data received "+ dataSent);
	//    	return dataSent;
	//    	}

	public String postToFpcardGenData(String data, String url, String token) throws UnsupportedOperationException, IOException {
		System.out.println("url :"+url);	
		System.out.println("data :"+data);
		GeneralResponse genResponse=null;

		HttpClient   httpClient = HttpClientBuilder.create().build();
		//			HttpClient httpClient = HttpClientBuilder.create().setRedirectStrategy(new LaxRedirectStrategy()).build();

		//		     protected static final HttpClientBuilder client = new HttpClientBuilder();


		HttpPost httpPost = new HttpPost(url); 
		//			httpPost.setHeader("Content-Type", "text/plain");
		//			httpPost.setHeader("User-Agent", "Mozilla/5.0");
		//			httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
		//			httpPost.setHeader("token", token);

		Gson gson = new GsonBuilder().serializeNulls().create();
		//			 String requestData=gson.toJson(data);

		//			httpPost.setHeader("deviceImei", headerDeviceImei);
		HttpEntity entity = new ByteArrayEntity(data.getBytes("UTF-8"));

		//		    StringEntity entity1 = new StringEntity(requestData);

		//			 MultipartEntityBuilder builder = MultipartEntityBuilder.create();
		//			    builder.addBinaryBody(
		//			      "file", new File("test.txt"), ContentType.APPLICATION_OCTET_STREAM, "file.ext");
		//			    HttpEntity multipart = builder.build();
		//			    httpPost.setEntity(multipart);

		httpPost.setEntity(entity);


		HttpResponse response = httpClient.execute(httpPost);


		int responseCode = response.getStatusLine().getStatusCode();
		System.out.println("Response Code : " + responseCode);
		String dataSent="";
		if(responseCode == 200){
			dataSent = new BasicResponseHandler().handleResponse(response);
		}

		System.out.println("response data :" +dataSent);
		return dataSent;
	}

	@SuppressWarnings("deprecation")
	public String toBase64(String pic,int serviceId) {

		//		String extension = FilesUtil.getProperty("ImageExtension");
		String path = fileUtil.getProperty("ImagePath");

		// path = new File(".").getCanonicalPath() +"/" + path;

		System.out.println("NEW PATH: " + path);
		File fileImg = new File(path);
		fileImg.mkdirs();
		//
		//		pic = URLDecoder.decode(pic);

		byte[] imgBytes = Base64.decodeBase64(pic);
		String fileName = (new SimpleDateFormat(serviceId+"_yyyyMMddhhmmssSSSS").format(new Date()) + "." + fileUtil.getProperty("ImageExtension")).trim();

		fileImg = null;
		fileImg = new File(path + fileName);

		if (fileImg.exists()) {
			fileImg = null;
			fileImg = new File(path + fileName);
		}

		FileOutputStream fOut;
		try {
			fOut = new FileOutputStream(fileImg);
			fOut.write(imgBytes);
			fOut.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		System.out.println("Output file saved: " + fileImg.getAbsolutePath());
		return fileName;
	}

	public static String getFullResponse(HttpURLConnection con) throws IOException {
		StringBuilder fullResponseBuilder = new StringBuilder();

		// read status and message

		// read headers

		// read response content

		return fullResponseBuilder.toString();
	}

	//	public static void getHeaders(HttpRequest request) {
	//		Enumeration<String> headerNames = request.getHeaderNames();
	//		HttpHeaders headers = new HttpHeaders();
	//		if (headerNames != null) {
	//			while (headerNames.hasMoreElements()) {
	//				String key = headerNames.nextElement();
	//				headers.set(key,  request.getHeader(key));  
	//			}
	//		}
	//	}

	public String getIpAddress(HttpServletRequest request) {
		String ip = request.getRemoteAddr();
		if (ip.equalsIgnoreCase("0:0:0:0:0:0:0:1"))
		{
			InetAddress inetAddress=null;
			String ipAddress=null;
			try {
				inetAddress = InetAddress.getLocalHost();
				ipAddress = inetAddress.getHostAddress();
			} catch (UnknownHostException e) {
				e.printStackTrace();
				ipAddress="";
			}
			ip = ipAddress;
		}
		return ip;
	}

	public HttpResponse callPostMethod(String url, Object model, String token) {

		Gson gson = new GsonBuilder().serializeNulls().create();
		HttpClient httpClient = new DefaultHttpClient();

		try {
			HttpPost httpPost = new HttpPost(url);
			httpPost.setHeader("Content-type", "application/json");
			httpPost.setHeader("User-Agent", "Mozilla/5.0");
			httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpPost.setHeader("token", token);

			String requestData=gson.toJson(model);

			HttpEntity entity = new ByteArrayEntity(requestData.getBytes("UTF-8"));
			httpPost.setEntity(entity);
			HttpResponse responseData = httpClient.execute(httpPost);

			return responseData;

		}

		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}

	}

	public HttpResponse callGetMethod(String url, String token) {

		Gson gson = new GsonBuilder().serializeNulls().create();
		HttpClient httpClient = new DefaultHttpClient();

		try {			
			HttpGet httpGet = new HttpGet(url);
			httpGet.setHeader("Content-type", "application/json");
			httpGet.setHeader("User-Agent", "Mozilla/5.0");
			httpGet.setHeader("Accept-Language", "en-US,en;q=0.5");
			httpGet.setHeader("token", token);

			HttpResponse responseData = httpClient.execute(httpGet);

			return responseData;

		}

		catch(Exception e)
		{
			e.printStackTrace();
			return null;
		}

	}

	public ResponseEntity<GeneralResponse> checkAuthentication(String token) 
	{
		AuthenticateUserResponse authenticateUserResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		// System.out.println("update info:" +
		// gson.toJson(aggregatorDataModal));
		try{
			String jwtData = jwtUtil.parseJWT(token);
			authenticateUserResponse = new Gson().fromJson(jwtData, AuthenticateUserResponse.class);

			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE,
					"Authntication SUCCESS", 200, authenticateUserResponse), HttpStatus.OK);

		} catch (ExpiredJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedJwtException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);

		} catch (MalformedJwtException e2) {
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					com.apptmyz.fpcontrolpanel.utils.Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (SignatureException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (IllegalArgumentException e2) {
			e2.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
			return new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
					Constants.ERROR_INVAILD_TOKEN, Constants.INVALID_STATUS_TOKEN_CODE, null), HttpStatus.OK);
		}

	}

	public void sendEmails(List<EmailNotificationModel> txnlist) {
		System.out.println("sending emails");

		SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
		SimpleDateFormat timeformat = new SimpleDateFormat("HH:mm:SS");
		ArrayList<String> mailList =null;
		ArrayList<String> bccMailList = null;
		DecimalFormat df = new DecimalFormat("##,##,##,##,##,##,###.00"); 
		Session session = null;
		try {
			for(EmailNotificationModel info:txnlist)
			{
				try {
					mailList = new ArrayList<>();
					bccMailList = new ArrayList<>();
					int gmailOrAWS = Integer.parseInt(fileUtil.getProperty("awsemailnotification"));
					System.out.println("awsemailnotification : " + fileUtil.getProperty("awsemailnotification") );
					System.out.println("gmailOrAWS : " + gmailOrAWS);
					if(gmailOrAWS == 1)
					{
						Properties props = new Properties();
						props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
						props.put("mail.smtp.socketFactory.port", "587");
						props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
						props.put("mail.smtp.auth", "true");
						props.put("mail.smtp.port", "587");

						session = Session.getDefaultInstance(props,
								new javax.mail.Authenticator() {
							protected javax.mail.PasswordAuthentication getPasswordAuthentication()
							{
								return new javax.mail.PasswordAuthentication(fileUtil.getProperty("awsemailusername"),fileUtil.getProperty("awsemailpassword"));
							}
						});
						System.out.println("AWS session : " + session);
					}
					else
					{
						Properties props = new Properties();
						props.put("mail.smtp.host", "smtp.gmail.com");
						props.put("mail.smtp.socketFactory.port", "465");
						props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
						props.put("mail.smtp.auth", "true");
						props.put("mail.smtp.port", "465");

						session = Session.getDefaultInstance(props,
								new javax.mail.Authenticator() {
							protected javax.mail.PasswordAuthentication getPasswordAuthentication() 
							{
								return new javax.mail.PasswordAuthentication(fileUtil.getProperty("emailAddressForNotification"), fileUtil.getProperty("pinForNotification"));
							}
						});
						System.out.println("GMAIL session : " + session);
					}
					if(info.getEmailId()!=null) {
						String[] mailIds=info.getEmailId().split(",");
						for(String emailId:mailIds) {
							//									System.out.println(emailId);
							try {
								InternetAddress emailAddr = new InternetAddress(emailId);
								emailAddr.validate();
								mailList.add(emailId);
							} catch (AddressException ex) {
								ex.printStackTrace();
							}
						}
					}else {
						mailList.add("shivani.p@tapits.in");
					}
					//					bccMailList.add("shivani.p@tapits.in");

					String[] mailIds = mailList.toArray(new String[mailList.size()]);
					InternetAddress[] address = new InternetAddress[mailIds.length];
					for(int i =0; i< mailIds.length; i++)
					{
						System.out.println(mailIds[i]);
						try {
							address[i] = new InternetAddress(mailIds[i]);
						} catch (AddressException e) {
							e.printStackTrace();
						}
					}
					String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
					InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
					for(int i =0; i< bccmailIds.length; i++)
					{
						try {
							bccaddress[i] = new InternetAddress(bccmailIds[i]);
						} catch (AddressException e) {
							e.printStackTrace();
						}
					}
					Message message = new MimeMessage(session);
					message.setRecipients(Message.RecipientType.TO, address);
					message.setFrom(new InternetAddress("notifications@tapits.in"));
					message.setRecipients(Message.RecipientType.BCC, bccaddress);

					message.setSubject("Control Panel Notification Fingpay/TAPITS");

					Multipart multipart = new MimeMultipart();

					MimeBodyPart messageBodyPart1 = new MimeBodyPart();
					messageBodyPart1.setText("Dear User\r\n" + 
							"\r\n" + 
							info.getMessage()+" has been done by "+info.getUserName()+" for "+ info.getMasterType() + " "+ info.getMasterName() + " with id "+ info.getPrimaryKeyId() + " on DATE "+dateformat.format(new Date())+" and TIME "+timeformat.format(new Date())+".\r\n" + info.getRequestAction() +".\r\n"+ 
							"Regards,\r\n"+"Fingpay Control Panel");
					multipart.addBodyPart(messageBodyPart1);

					message.setContent(multipart);

					System.out.println("message : " + message.toString());

					javax.mail.Transport.send(message);
				}catch(Exception e) {
					System.out.println("exception is caused due to email");
					e.printStackTrace();
				}
			}
		}catch (Exception e) {
			e.printStackTrace();
		}

	}

	// --------------------------------charge back management

	public TransactionSearchByRRNResult getRRNTxn(String rrn,String bankSwitch) throws ClientProtocolException, IOException
	{	
		TransactionSearchByRRNResult responseModel=null;
		try
		{
			Gson gson = new GsonBuilder()
					.registerTypeAdapter(Timestamp.class, new TimestampAdapter())
					.create();
			String url=fileUtil.getProperty("CW_RRN_Fetch")+rrn;
			URL url1 = new URL(url);
			HttpURLConnection httpURLConnection = (HttpURLConnection)url1.openConnection();
			httpURLConnection.setConnectTimeout(118000);
			httpURLConnection.setRequestMethod("GET");
			httpURLConnection.setDoInput(true);
			httpURLConnection.setDoOutput(true);
			//	      httpURLConnection.setRequestProperty("Authorization",token);
			//	      httpURLConnection.setRequestProperty("Content-Type", "text/xml");
			int responseCode = httpURLConnection.getResponseCode();
			String dataSent="";
			if (responseCode == 200) {
				InputStreamReader content = new InputStreamReader(httpURLConnection.getInputStream());
				int ch = 0;
				while ((ch = content.read()) != -1) {
					dataSent = dataSent + (char)ch;
				}
				content.close();
			} else {
				InputStreamReader content = new InputStreamReader(httpURLConnection.getErrorStream());
				int ch = 0;
				while ((ch = content.read()) != -1) {
					dataSent = dataSent + (char)ch;
				}
				content.close();
			}


			if(dataSent!="")
			{
				RRNTxnResponseModel generalResponse=gson.fromJson(dataSent, RRNTxnResponseModel.class);
				List<TransactionSearchByRRNResult> transactionSearchByRRNResult= generalResponse.getData();
				if(transactionSearchByRRNResult!=null)
				{
					if(transactionSearchByRRNResult.size()>1)
					{
						for(TransactionSearchByRRNResult rrnResult:transactionSearchByRRNResult)
						{
							if(!rrnResult.getProduct().equals("MATMCW") && rrnResult.getBankSwitch()!=null && rrnResult.getBankSwitch().equals(bankSwitch))
							{
								responseModel=gson.fromJson(gson.toJson(rrnResult), TransactionSearchByRRNResult.class);
								return responseModel;
							}
							if(rrnResult.getProduct().equals("MATMCW"))
							{
								responseModel=gson.fromJson(gson.toJson(rrnResult), TransactionSearchByRRNResult.class);
								return responseModel;
							}
						}

					}

					else if(transactionSearchByRRNResult.size()==1)
					{
						responseModel=gson.fromJson(gson.toJson(transactionSearchByRRNResult.get(0)), TransactionSearchByRRNResult.class);
					}

				}

			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return responseModel;
	}


	public CwAndMATMRrnResponseModel getCWtxn(String rrn) throws ClientProtocolException, IOException
	{	
		CwAndMATMRrnResponseModel responseModel=null;
		try
		{
			Gson gson = new GsonBuilder()
					.registerTypeAdapter(Timestamp.class, new TimestampAdapter())
					.create();

			AuthenticateUserResponseRRN tokenRequestCW=new AuthenticateUserResponseRRN();
			tokenRequestCW.setUserType(101);
			String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestCW),60);
			HttpParams httpParameters = new BasicHttpParams();
			HttpConnectionParams.setSoTimeout(httpParameters, 300000);
			HttpClient httpClient = new DefaultHttpClient();
			String url=fileUtil.getProperty("CW_RRN_Fetch")+rrn;
			HttpGet httpGet = new HttpGet(url);

			if(token!=null)
				httpGet.setHeader("token",token);

			HttpResponse responseData = httpClient.execute(httpGet);

			int responseCode = responseData.getStatusLine().getStatusCode();

			String dataSent ="";

			if (responseCode == 200) 
			{
				InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
				int ch = 0;
				while ((ch = content.read()) != -1) {
					dataSent = dataSent + (char)ch;
				}
				content.close();

			} 
			//		    else 
			//				{
			//		   	  InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			//			        int ch = 0;
			//			        while ((ch = content.read()) != -1) {
			//			          dataSent = dataSent + (char)ch;
			//			        }
			//			        content.close();
			//				}
			if(dataSent!="")
			{
				GeneralResponseCWrrnModel generalResponse=gson.fromJson(dataSent, GeneralResponseCWrrnModel.class);
				List<CwAndMATMRrnResponseModel> cwAndMATMRrnResponseModel= generalResponse.getData();
				if(cwAndMATMRrnResponseModel!=null &&  cwAndMATMRrnResponseModel.size()>0)
				{
					responseModel=gson.fromJson(gson.toJson(cwAndMATMRrnResponseModel.get(0)), CwAndMATMRrnResponseModel.class);
				}
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return responseModel;
	}

	public APRrnResponseModel getAPTxn(String rrn) throws ClientProtocolException, IOException
	{	
		APRrnResponseModel responseModel=null;

		try
		{
			GsonBuilder builder = new GsonBuilder(); 

			builder.registerTypeAdapter(Date.class, new ImprovedDateTypeAdapter());

			Gson gson = builder.create();

			AuthenticateUserResponseAP tokenRequestAP=new AuthenticateUserResponseAP();
			tokenRequestAP.setUserType(101);
			String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestAP),60);
			HttpParams httpParameters = new BasicHttpParams();
			HttpConnectionParams.setSoTimeout(httpParameters, 300000);
			HttpClient httpClient = new DefaultHttpClient();
			String url=fileUtil.getProperty("AP_RRN_Fetch")+rrn;
			HttpGet httpGet = new HttpGet(url);

			if(token!=null)
				httpGet.setHeader("token",token);

			HttpResponse responseData = httpClient.execute(httpGet);

			int responseCode = responseData.getStatusLine().getStatusCode();

			String dataSent ="";

			if (responseCode == 200) 
			{
				InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
				int ch = 0;
				while ((ch = content.read()) != -1) {
					dataSent = dataSent + (char)ch;
				}
				content.close();

			} 
			//		    else 
			//				{
			//		   	  InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			//			        int ch = 0;
			//			        while ((ch = content.read()) != -1) {
			//			          dataSent = dataSent + (char)ch;
			//			        }
			//			        content.close();
			//				}
			if(dataSent!="")
			{
				System.out.println("AP txn with rrn "+dataSent);
				responseModel=gson.fromJson(dataSent, APRrnResponseModel.class);
			}
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		return responseModel;
	}


	public CwAndMATMRrnResponseModel getMATMTxn(String rrn) throws ClientProtocolException, IOException
	{	
		CwAndMATMRrnResponseModel responseModel=null;
		try
		{
			Gson gson = new GsonBuilder()
					.registerTypeAdapter(Timestamp.class, new TimestampAdapter())
					.create();

			AuthenticateUserResponseRRN tokenRequestMATM=new AuthenticateUserResponseRRN();
			String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestMATM),60);
			HttpParams httpParameters = new BasicHttpParams();
			HttpConnectionParams.setSoTimeout(httpParameters, 300000);
			HttpClient httpClient = new DefaultHttpClient();

			String url=fileUtil.getProperty("MATM_RRN_Fetch")+rrn;
			HttpGet httpGet = new HttpGet(url);

			if(token!=null)
				httpGet.setHeader("token",token);

			HttpResponse responseData = httpClient.execute(httpGet);

			int responseCode = responseData.getStatusLine().getStatusCode();
			//			 System.out.println("Response code status api : "+responseCode);

			String dataSent ="";

			if (responseCode == 200) 
			{
				InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
				int ch = 0;
				while ((ch = content.read()) != -1) {
					dataSent = dataSent + (char)ch;
				}
				content.close();

			} 
			//		    else 
			//				{
			//		   	  InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			//			        int ch = 0;
			//			        while ((ch = content.read()) != -1) {
			//			          dataSent = dataSent + (char)ch;
			//			        }
			//			        content.close();
			//				}
			if(dataSent!="")
			{
				System.out.println("MATM rrn "+dataSent);
				GeneralResponseCWrrnModel generalResponse=gson.fromJson(dataSent, GeneralResponseCWrrnModel.class);
				//			System.out.println("----------general response ----------"+gson.toJson(generalResponse));
				List<CwAndMATMRrnResponseModel> cwAndMATMRrnResponseModel= generalResponse.getData();
				//			System.out.println("-----cwAndMATMRrnResponseModel---------"+cwAndMATMRrnResponseModel);

				if(cwAndMATMRrnResponseModel!=null && cwAndMATMRrnResponseModel.size()>0)
				{
					//			System.out.println("----------only one -------"+cwAndMATMRrnResponseModel.get(0));

					responseModel=gson.fromJson(gson.toJson(cwAndMATMRrnResponseModel.get(0)), CwAndMATMRrnResponseModel.class);
				}
			}
		}
		catch (Exception e) {
			e.printStackTrace();
		}
		return responseModel;
	}


	/*	public MaCashWithdrawalDataRep getMATMTxnTest(String rrn) {
			MaCashWithdrawalDataRep maCashWithdrawalData=null;

			maCashWithdrawalData=maCashWithdrawalDataRepRepository.findByResponseRrn(rrn);
			if(maCashWithdrawalData!=null)
				System.out.println("not null : "+maCashWithdrawalData.getResponseRrn());
			else
				System.out.println("is null");
			return maCashWithdrawalData;
		}
	 */
	public String formatCardNo(String cardNo) {

		//			if(cardNo!=null && cardNo.contains("'") && cardNo.charAt(0)=='\'' && cardNo.charAt(cardNo.length()-1)=='\'')
		//			{
		//				cardNo=cardNo.substring(1,cardNo.length()-1);
		//			}
		if(cardNo.contains("\'"))
			cardNo=cardNo.replaceAll("\'","");

		return cardNo;
	}

	public String checkFileExtension(String fileName) {
		if(fileName.substring(fileName.lastIndexOf('.')+1).equals("jpg") || fileName.substring(fileName.lastIndexOf('.')+1).equals("jpeg") || fileName.substring(fileName.lastIndexOf('.')+1).equals("JPG") || 
				fileName.substring(fileName.lastIndexOf('.')+1).equals("JPEG") || fileName.substring(fileName.lastIndexOf('.')+1).equals("PNG") || fileName.substring(fileName.lastIndexOf('.')+1).equals("png"))
			return "jpeg";
		if(fileName.substring(fileName.lastIndexOf('.')+1).equals("pdf") || fileName.substring(fileName.lastIndexOf('.')+1).equals("PDF"))
			return "pdf";
		if(fileName.substring(fileName.lastIndexOf('.')+1).equals("xlsx") || fileName.substring(fileName.lastIndexOf('.')+1).equals("XLSX") || fileName.substring(fileName.lastIndexOf('.')+1).equals("xls") || 
				fileName.substring(fileName.lastIndexOf('.')+1).equals("XLS"))
			return "xlsx";
		if(fileName.substring(fileName.lastIndexOf('.')+1).equals("docx") || fileName.substring(fileName.lastIndexOf('.')+1).equals("DOCX") || fileName.substring(fileName.lastIndexOf('.')+1).equals("doc") || 
				fileName.substring(fileName.lastIndexOf('.')+1).equals("DOC"))
			return "docx";
		if(fileName.substring(fileName.lastIndexOf('.')+1).equals("txt") || fileName.substring(fileName.lastIndexOf('.')+1).equals("TXT"))
			return "txt";
		return null;
	}

	public void updateAudit(ChargeBackManagement chargeBackManagement) {

		CBFraudManagementAudit auditlogs=new CBFraudManagementAudit();
		auditlogs.setPrimaryId(chargeBackManagement.getId());
		auditlogs.setChargeBackDate(chargeBackManagement.getChargeBackDate());
		auditlogs.setChargeBackType(chargeBackManagement.getChargeBackType());
		auditlogs.setUploadedChargebackType(chargeBackManagement.getUploadedChargebackType());
		auditlogs.setBank(chargeBackManagement.getBank());
		auditlogs.setCardNo(chargeBackManagement.getCardNo());
		auditlogs.setTxnNo(chargeBackManagement.getTxnNo());
		auditlogs.setAmount(chargeBackManagement.getAmount());
		auditlogs.setTxnDate(chargeBackManagement.getTxnDate());
		auditlogs.setTrnCode(chargeBackManagement.getTrnCode());
		auditlogs.setTat(chargeBackManagement.getTat());
		auditlogs.setBcTerminalId(chargeBackManagement.getBcTerminalId());
		auditlogs.setStatus(chargeBackManagement.getStatus());
		auditlogs.setUploadedBy(chargeBackManagement.getUploadedBy());
		auditlogs.setUploadedTimestamp(chargeBackManagement.getUploadedTimestamp());
		auditlogs.setUpdatedBy(chargeBackManagement.getUpdatedBy());
		auditlogs.setUpdatedTimestamp(chargeBackManagement.getUpdatedTimestamp());
		auditlogs.setFingpayTxnId(chargeBackManagement.getFingpayTxnId());
		auditlogs.setBcResponse(chargeBackManagement.getBcResponse());
		auditlogs.setResponseMessage(chargeBackManagement.getResponseMessage());
		auditlogs.setMerchantId(chargeBackManagement.getMerchantId());
		auditlogs.setEkycStatusFlag(chargeBackManagement.getEkycStatusFlag());
		auditlogs.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
		auditlogs.setMerchantName(chargeBackManagement.getMerchantName());
		auditlogs.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
		auditlogs.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
		auditlogs.setParentId(chargeBackManagement.getParentId());
		auditlogs.setParentName(chargeBackManagement.getParentName());
		auditlogs.setTransactionAmount(chargeBackManagement.getTransactionAmount());
		auditlogs.setTransactionTimestamp(chargeBackManagement.getTransactionTimestamp());
		auditlogs.setTransactionResponseCode(chargeBackManagement.getTransactionResponseCode());
		auditlogs.setProductType(chargeBackManagement.getProductType());
		auditlogs.setStatusFlag(chargeBackManagement.getStatusFlag());
		auditlogs.setAggregatorStatusFlag(chargeBackManagement.getAggregatorStatusFlag());
		auditlogs.setAggregatorUpdatedTimestamp(chargeBackManagement.getAggregatorUpdatedTimestamp());
		auditlogs.setResponseRemarks(chargeBackManagement.getResponseRemarks());
		auditlogs.setCountPenaltyDays(chargeBackManagement.getCountPenaltyDays());
		auditlogs.setChargeBackAmount(chargeBackManagement.getChargeBackAmount());
		auditlogs.setPenaltyAmount(chargeBackManagement.getPenaltyAmount());
		auditlogs.setThreeWayAnomalyFlag(chargeBackManagement.getThreeWayAnomalyFlag());
		auditlogs.setThreeWayFingpayTxnId(chargeBackManagement.getThreeWayFingpayTxnId());
		auditlogs.setChargeBackFlag(chargeBackManagement.getChargeBackFlag());
		auditlogs.setPenaltyFlag(chargeBackManagement.getPenaltyFlag());
		auditlogs.setFraudFlag(chargeBackManagement.getFraudFlag());
		auditlogs.setChargebackTimestamp(chargeBackManagement.getChargebackTimestamp());
		auditlogs.setPenaltyTimestamp(chargeBackManagement.getPenaltyTimestamp());
		auditlogs.setFraudTimestamp(chargeBackManagement.getFraudTimestamp());
		auditlogs.setNocaSettlementFlag(chargeBackManagement.getNocaSettlementFlag());
		auditlogs.setCbType(chargeBackManagement.getCbType());
		auditlogs.setCbOrFraud(chargeBackManagement.getCbOrFraud());
		auditlogs.setBankSwitch(chargeBackManagement.getBankSwitch());
		auditlogs.setCbFraudAttachmentsPath(chargeBackManagement.getCbFraudAttachmentsPath());
		auditlogs.setCbDate(chargeBackManagement.getCbDate());
		auditlogs.setTxnTime(chargeBackManagement.getTxnTime());
		auditlogs.setTatDate(chargeBackManagement.getTatDate());
		auditlogs.setLiveFlag(chargeBackManagement.getLiveFlag());
		auditlogs.setChargebackStatus(chargeBackManagement.getChargebackStatus());
		auditlogs.setTransactionLogId(chargeBackManagement.getTransactionLogId());
		auditlogs.setAtmId(chargeBackManagement.getAtmId());     
		auditlogs.setBcName(chargeBackManagement.getBcName());
		auditlogs.setIntimationMailSr(chargeBackManagement.getIntimationMailSr());
		auditlogs.setCbRemarks(chargeBackManagement.getCbRemarks());
		auditlogs.setAcquirerBank(chargeBackManagement.getAcquirerBank());
		auditlogs.setMerchantTxnId(chargeBackManagement.getMerchantTxnId());
		auditlogs.setSrNo(chargeBackManagement.getSrNo());
		auditlogs.setMdeclarationAttachmentsPath(chargeBackManagement.getMdeclarationAttachmentsPath());
		auditlogs.setMpanAttachmentsPath(chargeBackManagement.getMpanAttachmentsPath());
		auditlogs.setMkycAttachmentsPath(chargeBackManagement.getMkycAttachmentsPath());
		auditlogs.setCdeclarationAttachmentsPath(chargeBackManagement.getCdeclarationAttachmentsPath());
		auditlogs.setMtxnlogAttachmentsPath(chargeBackManagement.getMtxnlogAttachmentsPath());
		auditlogs.setMregistercopyAttachmentsPath(chargeBackManagement.getMregistercopyAttachmentsPath());
		cbFraudAuditLogsRepository.save(auditlogs);
	}



	public ChargeBackManagementResponseModel getResponseModel(ChargeBackManagement chargeBackManagement) {

		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		ChargeBackManagementResponseModel responseChargeBackData = new ChargeBackManagementResponseModel();
		responseChargeBackData.setChargeBackDate(chargeBackManagement.getCbDate());
		responseChargeBackData.setCbDate(chargeBackManagement.getCbDate());
		responseChargeBackData.setChargeBackType(chargeBackManagement.getChargeBackType());
		responseChargeBackData.setBank(chargeBackManagement.getBank());
		responseChargeBackData.setCardNo(chargeBackManagement.getCardNo());
		responseChargeBackData.setTxnNo(chargeBackManagement.getTxnNo());
		responseChargeBackData.setAmount(chargeBackManagement.getAmount());
		responseChargeBackData.setTxnDate(chargeBackManagement.getTxnDate());
		responseChargeBackData.setTrnCode(chargeBackManagement.getTrnCode());
		responseChargeBackData.setTat(chargeBackManagement.getTatDate());
		responseChargeBackData.setBcTerminalId(chargeBackManagement.getBcTerminalId());
		responseChargeBackData.setFingpayTxnId(chargeBackManagement.getFingpayTxnId());
		responseChargeBackData.setBcResponse(chargeBackManagement.getBcResponse());
		responseChargeBackData.setResponseMessage(chargeBackManagement.getResponseMessage());
		responseChargeBackData.setUploadedBy(chargeBackManagement.getUpdatedBy());
		if(chargeBackManagement.getUpdatedTimestamp()!=null)
			responseChargeBackData.setUploadedTimestamp(formatter.format(chargeBackManagement.getUploadedTimestamp() ));
		responseChargeBackData.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
		responseChargeBackData.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
		responseChargeBackData.setMerchantId(chargeBackManagement.getMerchantId());
		responseChargeBackData.setMerchantName(chargeBackManagement.getMerchantName());
		responseChargeBackData.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
		responseChargeBackData.setParentId(chargeBackManagement.getParentId());
		responseChargeBackData.setParentName(chargeBackManagement.getParentName());
		if(chargeBackManagement.getTransactionTimestamp()!=null)
			responseChargeBackData.setTransactionTimestamp(formatter.format(chargeBackManagement.getTransactionTimestamp()));
		responseChargeBackData.setTransactionAmount(chargeBackManagement.getTransactionAmount());
		responseChargeBackData.setTransactionResponseCode(chargeBackManagement.getTransactionResponseCode());
		responseChargeBackData.setProductType(chargeBackManagement.getProductType());
		if(chargeBackManagement.getUpdatedTimestamp()!=null)
			responseChargeBackData.setUpdatedTimestamp(formatter.format(chargeBackManagement.getUpdatedTimestamp()));
		responseChargeBackData.setResponseRemarks(chargeBackManagement.getResponseRemarks());
		responseChargeBackData.setStatusFlag(chargeBackManagement.getStatusFlag());
		responseChargeBackData.setId(chargeBackManagement.getId());
		responseChargeBackData.setChargeBackAmount(chargeBackManagement.getChargeBackAmount());
		responseChargeBackData.setPenaltyAmount(chargeBackManagement.getPenaltyAmount());
		responseChargeBackData.setChargeBackFlag(chargeBackManagement.getChargeBackFlag());
		responseChargeBackData.setPenaltyFlag(chargeBackManagement.getPenaltyFlag());
		responseChargeBackData.setFraudFlag(chargeBackManagement.getFraudFlag());
		if(chargeBackManagement.getChargebackTimestamp()!=null)
			responseChargeBackData.setChargebackTimestamp(formatter.format(chargeBackManagement.getChargebackTimestamp()));
		if(chargeBackManagement.getPenaltyTimestamp()!=null)
			responseChargeBackData.setPenaltyTimestamp(formatter.format(chargeBackManagement.getPenaltyTimestamp()));
		if(chargeBackManagement.getFraudTimestamp()!=null)
			responseChargeBackData.setFraudTimestamp(formatter.format(chargeBackManagement.getFraudTimestamp()));
		responseChargeBackData.setCbOrFraud(chargeBackManagement.getCbOrFraud());
		Map<Integer,String> cbtype=chargebackManagementCacheData.getCBtypeDetailsMap();
		responseChargeBackData.setCbType(cbtype.get(chargeBackManagement.getCbType()));
		responseChargeBackData.setThreeWayAnomalyFlag(chargeBackManagement.getThreeWayAnomalyFlag());
		responseChargeBackData.setEkycStatusFlag(chargeBackManagement.getEkycStatusFlag());
		responseChargeBackData.setNocaSettlementFlag(chargeBackManagement.getNocaSettlementFlag());
		responseChargeBackData.setBankSwitch(chargeBackManagement.getBankSwitch());
		responseChargeBackData.setCbFraudAttachmentsPath(chargeBackManagement.getCbFraudAttachmentsPath());
		responseChargeBackData.setTxnTime(chargeBackManagement.getTxnTime());
		responseChargeBackData.setLiveFlag(chargeBackManagement.getLiveFlag());
		responseChargeBackData.setTatDate(chargeBackManagement.getTatDate());
		responseChargeBackData.setUploadedChargebackType(chargeBackManagement.getUploadedChargebackType());
		responseChargeBackData.setChargebackStatus(chargeBackManagement.getChargebackStatus());
		responseChargeBackData.setAtmId(chargeBackManagement.getAtmId());     
		responseChargeBackData.setBcName(chargeBackManagement.getBcName());
		responseChargeBackData.setTransactionLogId(chargeBackManagement.getTransactionLogId());
		responseChargeBackData.setIntimationMailSr(chargeBackManagement.getIntimationMailSr());
		responseChargeBackData.setCbRemarks(chargeBackManagement.getCbRemarks());
		responseChargeBackData.setAcquirerBank(chargeBackManagement.getAcquirerBank());
		responseChargeBackData.setMerchantTxnId(chargeBackManagement.getMerchantTxnId());
		responseChargeBackData.setSrNo(chargeBackManagement.getSrNo());
		if(chargeBackManagement.getAggregatorUpdatedTimestamp()!=null)
			responseChargeBackData.setAggregatorUpdatedTimestamp(formatter.format(chargeBackManagement.getAggregatorUpdatedTimestamp()));
		responseChargeBackData.setMdeclarationAttachmentsPath(chargeBackManagement.getMdeclarationAttachmentsPath());
		responseChargeBackData.setMpanAttachmentsPath(chargeBackManagement.getMpanAttachmentsPath());
		responseChargeBackData.setMkycAttachmentsPath(chargeBackManagement.getMkycAttachmentsPath());
		responseChargeBackData.setCdeclarationAttachmentsPath(chargeBackManagement.getCdeclarationAttachmentsPath());
		responseChargeBackData.setMtxnlogAttachmentsPath(chargeBackManagement.getMtxnlogAttachmentsPath());
		responseChargeBackData.setMregistercopyAttachmentsPath(chargeBackManagement.getMregistercopyAttachmentsPath());
		
		return responseChargeBackData;
	}

	public ChargeBackManagementResponseModel getResponseModelAudit(CBFraudManagementAudit chargeBackManagement) {

		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		ChargeBackManagementResponseModel responseChargeBackData = new ChargeBackManagementResponseModel();
		responseChargeBackData.setChargeBackDate(chargeBackManagement.getCbDate());
		responseChargeBackData.setCbDate(chargeBackManagement.getCbDate());
		responseChargeBackData.setChargeBackType(chargeBackManagement.getChargeBackType());
		responseChargeBackData.setBank(chargeBackManagement.getBank());
		responseChargeBackData.setCardNo(chargeBackManagement.getCardNo());
		responseChargeBackData.setTxnNo(chargeBackManagement.getTxnNo());
		responseChargeBackData.setAmount(chargeBackManagement.getAmount());
		responseChargeBackData.setTxnDate(chargeBackManagement.getTxnDate());
		responseChargeBackData.setTrnCode(chargeBackManagement.getTrnCode());
		responseChargeBackData.setTat(chargeBackManagement.getTatDate());
		responseChargeBackData.setBcTerminalId(chargeBackManagement.getBcTerminalId());
		responseChargeBackData.setFingpayTxnId(chargeBackManagement.getFingpayTxnId());
		responseChargeBackData.setBcResponse(chargeBackManagement.getBcResponse());
		responseChargeBackData.setResponseMessage(chargeBackManagement.getResponseMessage());
		responseChargeBackData.setUploadedBy(chargeBackManagement.getUpdatedBy());
		if(chargeBackManagement.getUpdatedTimestamp()!=null)
			responseChargeBackData.setUploadedTimestamp(formatter.format(chargeBackManagement.getUploadedTimestamp() ));
		responseChargeBackData.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
		responseChargeBackData.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
		responseChargeBackData.setMerchantId(chargeBackManagement.getMerchantId());
		responseChargeBackData.setMerchantName(chargeBackManagement.getMerchantName());
		responseChargeBackData.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
		responseChargeBackData.setParentId(chargeBackManagement.getParentId());
		responseChargeBackData.setParentName(chargeBackManagement.getParentName());
		if(chargeBackManagement.getTransactionTimestamp()!=null)
			responseChargeBackData.setTransactionTimestamp(formatter.format(chargeBackManagement.getTransactionTimestamp()));
		responseChargeBackData.setTransactionAmount(chargeBackManagement.getTransactionAmount());
		responseChargeBackData.setTransactionResponseCode(chargeBackManagement.getTransactionResponseCode());
		responseChargeBackData.setProductType(chargeBackManagement.getProductType());
		if(chargeBackManagement.getUpdatedTimestamp()!=null)
			responseChargeBackData.setUpdatedTimestamp(formatter.format(chargeBackManagement.getUpdatedTimestamp()));
		responseChargeBackData.setResponseRemarks(chargeBackManagement.getResponseRemarks());
		responseChargeBackData.setStatusFlag(chargeBackManagement.getStatusFlag());
		responseChargeBackData.setId(chargeBackManagement.getId());
		responseChargeBackData.setChargeBackAmount(chargeBackManagement.getChargeBackAmount());
		responseChargeBackData.setPenaltyAmount(chargeBackManagement.getPenaltyAmount());
		responseChargeBackData.setChargeBackFlag(chargeBackManagement.getChargeBackFlag());
		responseChargeBackData.setPenaltyFlag(chargeBackManagement.getPenaltyFlag());
		responseChargeBackData.setFraudFlag(chargeBackManagement.getFraudFlag());
		if(chargeBackManagement.getChargebackTimestamp()!=null)
			responseChargeBackData.setChargebackTimestamp(formatter.format(chargeBackManagement.getChargebackTimestamp()));
		if(chargeBackManagement.getPenaltyTimestamp()!=null)
			responseChargeBackData.setPenaltyTimestamp(formatter.format(chargeBackManagement.getPenaltyTimestamp()));
		if(chargeBackManagement.getFraudTimestamp()!=null)
			responseChargeBackData.setFraudTimestamp(formatter.format(chargeBackManagement.getFraudTimestamp()));
		responseChargeBackData.setCbOrFraud(chargeBackManagement.getCbOrFraud());
		Map<Integer,String> cbtype=chargebackManagementCacheData.getCBtypeDetailsMap();
		responseChargeBackData.setCbType(cbtype.get(chargeBackManagement.getCbType()));
		responseChargeBackData.setThreeWayAnomalyFlag(chargeBackManagement.getThreeWayAnomalyFlag());
		responseChargeBackData.setEkycStatusFlag(chargeBackManagement.getEkycStatusFlag());
		responseChargeBackData.setNocaSettlementFlag(chargeBackManagement.getNocaSettlementFlag());
		responseChargeBackData.setBankSwitch(chargeBackManagement.getBankSwitch());
		responseChargeBackData.setCbFraudAttachmentsPath(chargeBackManagement.getCbFraudAttachmentsPath());
		responseChargeBackData.setTxnTime(chargeBackManagement.getTxnTime());
		responseChargeBackData.setLiveFlag(chargeBackManagement.getLiveFlag());
		responseChargeBackData.setUploadedChargebackType(chargeBackManagement.getUploadedChargebackType());
		responseChargeBackData.setTatDate(chargeBackManagement.getTatDate());
		responseChargeBackData.setChargebackStatus(chargeBackManagement.getChargebackStatus());
		responseChargeBackData.setAtmId(chargeBackManagement.getAtmId());     
		responseChargeBackData.setBcName(chargeBackManagement.getBcName());
		responseChargeBackData.setTransactionLogId(chargeBackManagement.getTransactionLogId());
		responseChargeBackData.setIntimationMailSr(chargeBackManagement.getIntimationMailSr());
		responseChargeBackData.setCbRemarks(chargeBackManagement.getCbRemarks());
		responseChargeBackData.setAcquirerBank(chargeBackManagement.getAcquirerBank());
		responseChargeBackData.setMerchantTxnId(chargeBackManagement.getMerchantTxnId());
		responseChargeBackData.setSrNo(chargeBackManagement.getSrNo());
		responseChargeBackData.setMdeclarationAttachmentsPath(chargeBackManagement.getMdeclarationAttachmentsPath());
		responseChargeBackData.setMpanAttachmentsPath(chargeBackManagement.getMpanAttachmentsPath());
		responseChargeBackData.setMkycAttachmentsPath(chargeBackManagement.getMkycAttachmentsPath());
		responseChargeBackData.setCdeclarationAttachmentsPath(chargeBackManagement.getCdeclarationAttachmentsPath());
		responseChargeBackData.setMtxnlogAttachmentsPath(chargeBackManagement.getMtxnlogAttachmentsPath());
		responseChargeBackData.setMregistercopyAttachmentsPath(chargeBackManagement.getMregistercopyAttachmentsPath());
		
		return responseChargeBackData;
	}

	public ChargeBackManagementResponseModel getChargebackManagementModel1(ChargeBackManagement chargeBackManagement) {

		ChargeBackManagementResponseModel responseChargeBackData=new ChargeBackManagementResponseModel();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

		responseChargeBackData.setChargeBackDate(sdf.format(chargeBackManagement.getChargeBackDate()));
		responseChargeBackData.setChargeBackType(chargeBackManagement.getChargeBackType());
		responseChargeBackData.setBank(chargeBackManagement.getBank());
		responseChargeBackData.setCardNo(chargeBackManagement.getCardNo());
		responseChargeBackData.setTxnNo(chargeBackManagement.getTxnNo());
		responseChargeBackData.setAmount(chargeBackManagement.getAmount());
		responseChargeBackData.setTxnDate(chargeBackManagement.getTxnDate());
		responseChargeBackData.setTrnCode(chargeBackManagement.getTrnCode());
		responseChargeBackData.setTat(chargeBackManagement.getTatDate());
		responseChargeBackData.setBcTerminalId(chargeBackManagement.getBcTerminalId());
		responseChargeBackData.setFingpayTxnId(chargeBackManagement.getFingpayTxnId());
		responseChargeBackData.setBcResponse(chargeBackManagement.getBcResponse());
		responseChargeBackData.setResponseMessage(chargeBackManagement.getResponseMessage());
		responseChargeBackData.setUploadedBy(chargeBackManagement.getUpdatedBy());
		responseChargeBackData.setUploadedTimestamp(formatter.format(chargeBackManagement.getUploadedTimestamp()));
		responseChargeBackData.setSuperMerchantId(chargeBackManagement.getSuperMerchantId());
		responseChargeBackData.setSuperMerchantName(chargeBackManagement.getSuperMerchantName());
		responseChargeBackData.setMerchantId(chargeBackManagement.getMerchantId());
		responseChargeBackData.setMerchantName(chargeBackManagement.getMerchantName());
		responseChargeBackData.setMerchantLoginId(chargeBackManagement.getMerchantLoginId());
		responseChargeBackData.setParentId(chargeBackManagement.getParentId());
		responseChargeBackData.setParentName(chargeBackManagement.getParentName());
		responseChargeBackData.setTransactionTimestamp(formatter.format(chargeBackManagement.getTransactionTimestamp()));
		responseChargeBackData.setTransactionAmount(chargeBackManagement.getTransactionAmount());
		responseChargeBackData.setTransactionResponseCode(chargeBackManagement.getTransactionResponseCode());
		responseChargeBackData.setProductType(chargeBackManagement.getProductType());
		responseChargeBackData.setUpdatedTimestamp(formatter.format(chargeBackManagement.getUpdatedTimestamp()));
		responseChargeBackData.setResponseRemarks(chargeBackManagement.getResponseRemarks());
		responseChargeBackData.setStatusFlag(chargeBackManagement.getStatusFlag());
		responseChargeBackData.setId(chargeBackManagement.getId());
		responseChargeBackData.setCbOrFraud(chargeBackManagement.getCbOrFraud());
		responseChargeBackData.setEkycStatusFlag(chargeBackManagement.getEkycStatusFlag());
		responseChargeBackData.setBankSwitch(chargeBackManagement.getBankSwitch());
		responseChargeBackData.setCbFraudAttachmentsPath(chargeBackManagement.getCbFraudAttachmentsPath());
		responseChargeBackData.setCbDate(chargeBackManagement.getCbDate());
		responseChargeBackData.setTxnTime(chargeBackManagement.getTxnTime());
		responseChargeBackData.setTatDate(chargeBackManagement.getTatDate());
		responseChargeBackData.setUploadedChargebackType(chargeBackManagement.getUploadedChargebackType());
		responseChargeBackData.setLiveFlag(chargeBackManagement.getLiveFlag());
		responseChargeBackData.setMerchantTxnId(chargeBackManagement.getMerchantTxnId());
		responseChargeBackData.setSrNo(chargeBackManagement.getSrNo());
		responseChargeBackData.setMdeclarationAttachmentsPath(chargeBackManagement.getMdeclarationAttachmentsPath());
		responseChargeBackData.setMpanAttachmentsPath(chargeBackManagement.getMpanAttachmentsPath());
		responseChargeBackData.setMkycAttachmentsPath(chargeBackManagement.getMkycAttachmentsPath());
		responseChargeBackData.setCdeclarationAttachmentsPath(chargeBackManagement.getCdeclarationAttachmentsPath());
		responseChargeBackData.setMtxnlogAttachmentsPath(chargeBackManagement.getMtxnlogAttachmentsPath());
		responseChargeBackData.setMregistercopyAttachmentsPath(chargeBackManagement.getMregistercopyAttachmentsPath());
		return responseChargeBackData;
	}
	 public String getThreeWayReferenceNumber(String number) {
			SimpleDateFormat format = new SimpleDateFormat("ddMMyyHHmmss");
			String referenceNumber=number+format.format(new Date());
			return referenceNumber;  
		}
	 
	 public String postthreewaydata(String url, String data) {

		 String dataSent = "";
		 try{
			 System.out.println("Start posting");
			 System.out.println("URL :"+url);
			 System.out.println("DATA :"+data);
			 System.out.println("DATA :"+data) ;
			 HttpParams httpParameters = new BasicHttpParams();  
			 //							HttpConnectionParams.setSoTimeout(httpParameters, 100000);
			 HttpClient httpclient = new DefaultHttpClient(httpParameters);
			 HttpPost httpPost = new HttpPost(url); 
			 httpPost.setHeader("Content-type", "application/json");
			 httpPost.setHeader("User-Agent", "Mozilla/5.0");
			 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
			 HttpEntity entity = new ByteArrayEntity(data.getBytes("UTF-8"));
			 httpPost.setEntity(entity);

			 HttpResponse response = httpclient.execute(httpPost);

			 int responseCode = response.getStatusLine().getStatusCode();
			 System.out.println("Response Code = " + responseCode);
			 System.out.println("Response Code : " + responseCode);

			 if (responseCode == 200){
				 /*	InputStreamReader content = new InputStreamReader(response.getEntity().getContent());
	int ch = 0;
	while ((ch = content.read()) != -1) {
	dataSent = dataSent + (char)ch;
 }
 content.close();*/
				 if(responseCode == 200){
					 dataSent = new BasicResponseHandler().handleResponse(response);
				 }
				 System.out.println("dataSent" +dataSent);
			 }
			 System.out.println("---End ----");  
		 }
		 catch (Exception e) {
			 e.printStackTrace();
			 System.out.println("Exception in posting request to app server : " + e.getMessage());
		 }
		 System.out.println("dataSent = "+dataSent);
		 return dataSent;

	 } 
	 public String postthreewaymatmdata(String url, String data) {

		 String dataSent = "";
		 try{
			 System.out.println("Start posting");
			 System.out.println("URL :"+url);
			 System.out.println("DATA :"+data);
			 System.out.println("DATA :"+data) ;
			 HttpParams httpParameters = new BasicHttpParams();  
			 //							HttpConnectionParams.setSoTimeout(httpParameters, 100000);
			 HttpClient httpclient = new DefaultHttpClient(httpParameters);
			 HttpPost httpPost = new HttpPost(url); 
			 httpPost.setHeader("Content-type", "application/json");
			 httpPost.setHeader("User-Agent", "Mozilla/5.0");
			 httpPost.setHeader("Accept-Language", "en-US,en;q=0.5");
			 HttpEntity entity = new ByteArrayEntity(data.getBytes("UTF-8"));
			 httpPost.setEntity(entity);

			 HttpResponse response = httpclient.execute(httpPost);

			 int responseCode = response.getStatusLine().getStatusCode();
			 System.out.println("Response Code = " + responseCode);
			 System.out.println("Response Code : " + responseCode);

			 if (responseCode == 200){
				 /*	InputStreamReader content = new InputStreamReader(response.getEntity().getContent());
	int ch = 0;
	while ((ch = content.read()) != -1) {
	dataSent = dataSent + (char)ch;
 }
 content.close();*/
				 if(responseCode == 200){
					 dataSent = new BasicResponseHandler().handleResponse(response);
				 }
				 System.out.println("dataSent" +dataSent);
			 }
			 System.out.println("---End ----");  
		 }
		 catch (Exception e) {
			 e.printStackTrace();
			 System.out.println("Exception in posting request to app server : " + e.getMessage());
		 }
		 System.out.println("dataSent = "+dataSent);
		 return dataSent;

	 } 
	 
		public ResponseEntity<GeneralResponse> errorResponse(boolean status,String errorMsg,long statusCode, Object data)
		{
			System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",Error status code:"+statusCode+",data:"+data);

			GeneralResponse errorResponse = new GeneralResponse(status,errorMsg,statusCode,data);

			System.out.println("Erros hadled Successfully");

			return new ResponseEntity<GeneralResponse>(errorResponse,HttpStatus.OK);
		}	

		public void errorResponse(boolean status,String errorMsg, Object data)
		{
			System.out.println("Error Response Occured: status:"+ status+",errorMeg:"+errorMsg+",data:"+data);

		}
		public ResponseEntity<GeneralResponse> successResponse(boolean status,String msg,long statusCode, Object data)
		{
			System.out.println("Response Occured: status:"+ status+",Msg:"+msg+",status code:"+statusCode+",data:"+data);

			GeneralResponse response = new GeneralResponse(status,msg,statusCode,data);

			System.out.println(" Successfully");

			return new ResponseEntity<GeneralResponse>(response,HttpStatus.OK);
		}

	
}
package com.apptmyz.fpcontrolpanel.utils;

import com.apptmyz.fpcontrolpanel.response.GeneralResponse;

public class Constants {

	public static final String CONTENT_TYPE_JSON = "application/json";
	public static final String CONTENT_TYPE_CSV = "text/csv";
	public static final String CHARACTER_ENCODING_UTF_8 = "UTF-8";

	public static final String SHARE_APP_URL_ANDROID = "SHARE_APP_URL_ANDROID";
	public static final String SHARE_APP_URL_IOS = "SHARE_APP_URL_IOS";
	public static final String SHARE_APP_URL_PC = "SHARE_APP_URL_PC";

	public final static String URL_PARAMETER_ACTION_VALUE_CREATE_UPDATE = "create";
	public final static String URL_PARAMETER_ACTION_VALUE_DELETE = "delete";
	public final static String URL_PARAMETER_ACTION_VALUE_SUBMIT = "submit";

	public final static String URL_PARAMETER_ACTION_VALUE_GET = "get";
	public final static String URL_PARAMETER_ACTION_VALUE_RESET = "reset";
	public final static String URL_PARAMETER_ACTION_VALUE_ADD = "add";

	public final static String ERROR_SHARE_APP_URL = "Share url not available";

	public final static String ERROR_UNKNOWN = "Unknown";
	public final static String ERROR_URL_PARAMETER = "Missing request parameter(s)";
	public final static String ERROR_PARSING_REQUEST_DATA = "Error parsing request data ";
	public final static String ERROR_REQUEST_DATA_NOT_VALID = "Request data not valid";
	public final static String ERROR_IN_VALID_BANK_SWITCH = "Request data has invalid bankswitch";
	public final static String ERROR_IN_VALID_CB_TYPE = "Request data has invalid CBType";

	public final static String ERROR_URL_ACTION_PARAMETER = "Action missing in the request";
	public final static String ERROR_INVAILD_ACTION = "Invalid action";

	public final static String ERROR_RECORD_NOT_FOUND = "Record not found";
	public final static String ERROR_REMOVE_RECORD = "Problem in deleting record";

	public final static String ERROR_URL_PASSWORD_PARAMETER = "Password missing in the request";

	public static final String IMAGE_PATH = "";
	public static final boolean TRUE = true;
	public static final boolean FALSE = false;
	public static final String ACTIVATION_FAILURE = "Activation code is not valid";
	public static final String CORRECT_SESSION_NO_USER_SESSION_AVAILABLE = "No User Session availabel";
	public static final String CORRECT_SESSION_USER_SESSION_CLEARED = "User Session Cleared";
	public static final String ERRORS_SESSION_NOT_CLEARED = "Some error occured in session clearance";
	public static final String UESR_TYPE = "usertype";
	public static final String REQUEST_COMPLETED = "Request Completed";
	public static final String REQUEST_INCOMPLETE = "Request Incomplete";
	public static final String ERRORS_EXCEPTION_IN_SERVER = "Exception in server";
	public static final String ERROR_REQUEST_ITEM_TYPE_NOT_VALID = "Item type not valid";
	public static final String URL_PARAMETER_FROM_DATE = "fromDate";
	public static final String URL_PARAMETER_TO_DATE = "toDate";

	public static final String SUCCESSFUL = "successful";
	public static final String FAILED = "failed";
	public static final String ERROR_INCOMPLETE_DATA = "Incomplete data sent to the server";
	public static final String ERROR_NO_DATA = "No Devices Available for Requested Data";
	public static final String NO_DATA_AVAILABLE = "No data available for the requested data.";
	public static final Object ADS = "AD";
	public static final Object NEWS = "NEWS";
	public static final String ERROR_AUTHENTICATION = "Incorrect merchantId or pin";
	public static final String NO_LOCATION = "Location not available";
	public static final String ERROR_NO_DATA_AVAILABLE = "No Data Available";
	public static final String ERROR_INVAILD_MERCHANT_ID = "Invalid Merchant id";
	public static final String ERROR_INVAILD_MERCHANT_PIN = "Invalid Merchant Pin";
	public static final String ERROR_INVAILD_SESSION = "Signout/Session Expired";
	public static final String ERROR_INVAILD_MERCHANT_DATA = "Invalid Merchant Data";
	public static final String ERRORS_TRANSACTION_EXCEPTION = "Transaction Failed";
	public static final String ERRORS_INVALID_TRANSACTION = "Invalid Transaction";
	public static final String DES_ALG = "DESede/CBC/PKCS5Padding";
	public static final String DES_KEY = "DESede";
	public static final String ERROR_TRANSACTION_LIMIT = "Transaction amount limit exceeded";
	
	
	public static final long CORRECT_STATUS_CODE = 10000;
	public static final long ERROR_TRANSACTION_LIMIT_STATUS_CODE = 10001;
	public static final long INVALID_STATUS_CODE = 10002;
	public static final long SERVER_TIME_OUT_STATUS_CODE = 10003;
	public static final long EXCEPTION_IN_SERVER_STATUS_CODE = 10004;
	public static final long ERROR_INCOMPLETE_DATA_STATUS_CODE = 10005;
	public static final long ERROR_INVAILD_SESSION_STATUS_CODE = 10006;
	public static final long ERROR_AADHAAR_PHONE_NUMBER_MAP_STATUS_CODE = 10009;
	public static final long ERROR_LAST_USED_TRANSACTION_FAILED_STATUS_CODE = 10010;
	public static final long ERROR_INVAILD_ACTION_CODE = 10011;
	public static final long ERROR_BIOMETRIC_DATA_DID_NOT_MATCH = 10012;
	public static final long ERROR_REVERSAL_STATUS_CODE = 10013;
	public static final long CORRECT_REVERSAL_STATUS_CODE = 10014;
	public static final long ERROR_REFERENCE_ID_NOT_FOUND = 10015;
	
	
	
	public static final String ERROR_TRANSACTION_FAILED = "Transaction failed.";
	public static final String ERROR_UPDATE_AADHAAR_NUMBER = "Link Aadhaar to MobileNumber";
	public static final String LAST_USED_TRANSACTION_FAILED = "Last used transaction failed.";
	
	public static GeneralResponse INVALID_SEESION = new GeneralResponse(TRUE, ERROR_INVAILD_SESSION, ERROR_INVAILD_SESSION_STATUS_CODE,null);
	
	public static final String DATEFORMAT = "dd/MM/yyyy HH:mm:ss";
	public static final String ERROR_INVAILD_OTP = "Invalid OTP";
	public static final String ERRORS_INVALID_BANK_DETAILS = "Invalid Bank Details";
	public static final long ERRORS_INVALID_BANK_DETAILS_CODE = 10016;
	public static final String ERRORS_INVALID_PAN_DETAILS = "Invalid PAN Details";
	public static final long ERRORS_INVALID_PAN_DETAILS_CODE = 10017;
	public static final String ERROR_INVAILD_TOKEN = "Invalid token";
	public static final long INVALID_STATUS_TOKEN_CODE = 10018;
	public static final String ERROR_WEB_AUTHENTICATION = "Incorrect username or password";
	public static final String MERCHANTID_ALREADY_EXISTS="Merchant loginId already exists";
	public static final String SUPERMERCHANTID_ALREADY_EXISTS="Super Merchant loginId already exists";
	public static final String ENTER_VALID_BANK_DETAILS = "enter valid account number and ifsc";
	public static final String ENTER_VALID_PAN_DETAILS = "enter valid pan number";
	public static final String NO_ACCESS_DISTRIBUTOR_SETTLEMENT = "aggregator is already enabled with the settlement";
	public static final String NO_ACCESS_MERCHANT_SETTLEMENT = "distributor is already enabled with the settlement";
	public static final String NO_ACCESS_SETTLEMENT = "distributor or merchant are already enabled with the settlement";
	public static final String NO_ACCESS_MER_SETTLEMENT = " merchant are already enabled with the settlement";
	public static final String VALID_TRANSACTION_TYPE = "enter valid transaction type";
	public static final String SUCCESS_NO_BANK_DETAILS = "Merchant is created successfully but with invalid Bank Details";
	public static final String SUCCESS_NO_PAN_DETAILS = "Merchant is created successfully but with invalid Pan Details";
	public static final String SELECT_DISTRIBUTOR = "SELECT DISTRIBUTOR FROM THE DROPDOWN";
	public static final String PARENTID_ALREADY_EXISTS = "Parent Login Id already exists";
	public static final String INVALID_HASH = "Hash doesn't match";
	public static final String PASSWORD_INCORRECT_RESET ="Please enter the valid current password";
	public static final int SUPER_MERCHANT_ID_SVATANTRA = 410;
	public static final Integer SUPER_MERCHANT_ID_SATIN = 35;
	public static final Integer PARENT_ID_SATIN = 18;
	public static final String CASH_DEPOSIT_SERVICE_TYPE = "CD";
	public static final String ENTER_VALID_VOTER_ID_DETAILS = "Invalid Voter Id Details";
	public static final String MINISTATEMENT_SERVICE_TYPE = "MS";

	public static final Integer INVALID_CHARGE_BACK_FILE_UPLOADED = 20000;
	public static final long FAILED_STATUS_CODE = 10016;
	
	public static final Integer Charge_Back_Files_Uploaded=0;
	public static final Integer Charge_Back_Approved=1;
	public static final Integer Charge_Back_Rejected=2;
	public static final Integer Charge_Back_Auto_Rejected=3;
	public static final Integer Charge_Back_Completed=4;
	
	public static final String CHARGEBACK_APPROVED="Chargeback Approved";
	public static final String CHARGEBACK_REJECTED="Chargeback Rejected";
	public static final String CHARGEBACK_REJECTED_FAILED="Chargeback Rejected Failed";
	
	public static final Integer Noca_Settlement_flag=1;
	
	public static final Integer Fraud_Completed = 5;
	
	public static final Integer cbtype_CB_Raise = 1;
	public static final Integer cbtype_CB_Pre_Arbitration = 2;
	public static final Integer cbtype_CB_Arbitration = 3;
	public static final Integer cbtype_Good_Faith = 4;
	public static final Integer cbtype_MATM_Anolmaly = 6;
	

	public static final String MATMCW = "MATMCW";
	public static final String CW = "CW";
	public static final String AP = "AP";
	
	public static final String CW_EXCEL_ESTATEMENT_TEMPLATE_HEADERS = "CB Dt.,CB Type,BANK,Card No,Txn No.,Amt.,Txn Dt,TRN Code,TAT,BC Terminal ID,Chargeback Status from BC (Accept /Reject),Transaction log id,merchant name,merchant login id,Aggregator Name";
	public static final String MATMCW_EXCEL_ESTATEMENT_TEMPLATE_HEADERS = "CB Date,CB Type,BANK,Card No,Txn,Txn Amt.,Trx Date,TxnTime,TRN Code,Chargeback Status,Transaction Log id,Deadline,ATM Id,BC Name,Agent Name,Agent Login Id,Aggregator Name";
	public static final String AP_EXCEL_ESTATEMENT_TEMPLATE_HEADERS = "CB Date,AdjDate,AdjType,Acquirer,Issuer,TxnDate,TxnTime,RRN,CardNo,TxnAmount,Aggregator,Status,TAT,Merchant txn ID,Agent Name, Agent Login Id";

	public static final String CONTACT_TYPE_CB = "CHARGEBACK";
	public static final String CONTACT_TYPE_FRAUD = "FRAUD";
	public static final String CONTACT_TYPE_SETTLEMENT = "SETTLEMENT";
	public static final String CONTACT_TYPE_COMMISSION = "COMMISSION";
	
	public static final String STATUS_NOTIFICATION = "STATUS";
	public static final String REMINDER_NOTIFICATION = "REMINDER";
	public static final String DAY_NOTIFICATION = "DAY";

	public static final String CB_RAISE = "Chargeback Raise";
	public static final String CB_RAISE_PENDNING_FOR_SETTLEMENTS = "Chargeback Raise - Pending for Settlement";
	public static final String CB_PRE_ARBITRATION_RAISE = "Pre-Arbitration Raise";
	public static final String CB_ARBITRATION_RAISE = "Arbitration Raise";
	public static final String CB_GOOD_FAITH = "Good Faith Chargeback";

	public static final String TXN_STATUS_FP999 = "FP999";
	public static final String TXN_STATUS_91 = "91";
	public static final String TXN_STATUS_FP031 = "FP031";
	public static final String TXN_STATUS_00 = "00";
	
	public static final String INCIDENT_ASSIGNED= "Chargeback Assgined";
	public static final String STATUS_CHANGED_SUCCESSFULLY = "Status Changed Successfully";
	
	public static final Integer SAVE = 1;
	public static final Integer UPDATE = 2;
	
	public static final String INITIATED = "initiated";
	public static final String SUCCESS = "Success";
	public static final String FAILURE = "Failure";
	
	public static final String PAYTM = "PAYTM";
	public static final String KOTAK = "KOTAK";
	public static final String ICICI = "ICICI";
	public static final String NSDL = "NSDL";
	
	public static final long INVALID_CHARGE_BACK_TYPE_UPLOADED = 30000;
	
	
	public static final String SETTLEMENT_TYPE_MERCHANT = "M";
	public static final String SETTLEMENT_TYPE_SUPER_MERCHANT = "S";
	public static final String SETTLEMENT_TYPE_PARENT = "P";
	
	public static final int ADD_UPDATED_RECORDS = 1;
	public static final int ADD_UPDATED_OLD_RECORDS = 0;
	
	public static final int APPROVED_FLAG = 1;
	public static final int REJECTED_FLAG = 2;
	public static final String DISABLE_ALL_SERVICES = "ALL";
	
	public static final int ACTIVE_FLAG = 1;
	
	public static final String SERVICE_TYPE_AADHAR_PAY = "AP";
	public static final String SERVICE_TYPE_CASH_WITHDRAWEL = "CW";
	public static final String SERVICE_TYPE_CASH_DEPOSIT = "CD";
	public static final String SERVICE_TYPE_MPOS = "MP";
	public static final String SERVICE_TYPE_UPI = "UP";
	public static final String SERVICE_TYPE_UPI_STATIC_QR = "UQ";
	public static final String SERVICE_TYPE_DROP_CASH = "DC";
	public static final String SERVICE_TYPE_COLLECT_DROP_CASH = "CDC";
	public static final String SERVICE_TYPE_CUSTOMER_DROP_CASH = "CUDC";
	public static final String SERVICE_TYPE_PAYMENT_GATEWAY = "PG";
	public static final String SERVICE_TYPE_DYNAMIC_QR = "DQR";
	public static final String SERVICE_TYPE_CORPORATE_COLLECT_DROP_CASH = "CURCDC";
	public static final String SERVICE_TYPE_MATM_CW = "MATMCW";
	public static final String SERVICE_TYPE_NEO_INSURANCE = "INSURANCE";
	public static final String SERVICE_TYPE_NEO_GOLD = "GLD";
	
	
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

import org.springframework.stereotype.Service;

@Service
public class FilesUtil {
	// private static final String file = "bulkUpload.properties";
	private static Properties props = null;
	private static String fileName = "application.properties";
	private static void loadPropertiesFromClasspath() throws IOException {
		props = new Properties();
		InputStream inputStream = FilesUtil.class.getClassLoader()
				.getResourceAsStream(fileName);

		if (inputStream == null) {
			throw new FileNotFoundException("Property file 'bulkUpload.properties' not found in the classpath");
		}

		props.load(inputStream);
	}

	public String getProperty(String key) {
		if (props == null) {
			try {
				loadPropertiesFromClasspath();
			} catch (Exception IOException) {
				return null;
			}
		}
		return props.getProperty(key);
	}

	public static String getProperty(String key, String defaultValue) {
		if (props == null) {
			try {
				loadPropertiesFromClasspath();
			} catch (Exception IOException) {
				return null;
			}
		}
		return props.getProperty(key, defaultValue);
	}

	public int getIntProperty(String key) {
		String property = getProperty(key);

		if (property == null) {
			return -1;
		}
		try {
			return Integer.parseInt(property);
		} catch (NumberFormatException nfe) {
			return (Integer) null;
		}
	}
}
package com.apptmyz.fpcontrolpanel.utils;

import java.util.List;

import com.apptmyz.fpcontrolpanel.response.CwAndMATMRrnResponseModel;

public class GeneralResponseCWrrnModel {

	private boolean status;
	private String message;
	private List<CwAndMATMRrnResponseModel> data;
	private long statusCode;
	public boolean isStatus() {
		return status;
	}
	public void setStatus(boolean status) {
		this.status = status;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	public List<CwAndMATMRrnResponseModel> getData() {
		return data;
	}
	public void setData(List<CwAndMATMRrnResponseModel> data) {
		this.data = data;
	}
	public long getStatusCode() {
		return statusCode;
	}
	public void setStatusCode(long statusCode) {
		this.statusCode = statusCode;
	}
	
	
}
/*******************************************************************************
 * DISCLAIMER: The sample code or utility or tool described herein
 *    is provided on an "as is" basis, without warranty of any kind.
 *    UIDAI does not warrant or guarantee the individual success
 *    developers may have in implementing the sample code on their
 *    environment. 
 *    
 *    UIDAI does not warrant, guarantee or make any representations
 *    of any kind with respect to the sample code and does not make
 *    any representations or warranties regarding the use, results
 *    of use, accuracy, timeliness or completeness of any data or
 *    information relating to the sample code. UIDAI disclaims all
 *    warranties, express or implied, and in particular, disclaims
 *    all warranties of merchantability, fitness for a particular
 *    purpose, and warranties related to the code, or any service
 *    or software related thereto. 
 *    
 *    UIDAI is not responsible for and shall not be liable directly
 *    or indirectly for any direct, indirect damages or costs of any
 *    type arising out of use or any action taken by you or others
 *    related to the sample code.
 *    
 *    THIS IS NOT A SUPPORTED SOFTWARE.
 ******************************************************************************/
package com.apptmyz.fpcontrolpanel.utils;

import java.security.MessageDigest;
import java.security.Security;
/**
 * A utility class to create SHA-256 hashes
 * 
 * @author UIDAI
 *
 */
public class HashGenerator {

	//static String KEY_AES = "e07ecd01e6fca0b2";
	public byte[] generateSha256Hash(byte[] message) {
		Security.addProvider(new org.bouncycastle.jce.provider.BouncyCastleProvider());
		String algorithm = "SHA-256";
		String SECURITY_PROVIDER = "BC";

		byte[] hash = null;

		MessageDigest digest;
		try {
			digest = MessageDigest.getInstance(algorithm, SECURITY_PROVIDER);
			digest.reset();
			hash = digest.digest(message);
		} catch (Exception e) {
			e.printStackTrace();
		}

		return hash;
	}
//	public static String generateBcrypt(String value) {
//        String bcryptHash = BCrypt.hashpw(value, BCrypt.gensalt());
//        return bcryptHash;
//	}
	
	public static void main(String[] args) {
//		System.out.println(new String(Base64.encode(generateSha256Hash("268928810048".getBytes()))));
	}
	
	/*public static String encrypt(String value) {
	        try {
	            byte[] key = KEY_AES.getBytes("UTF-8");
	            byte[] ivs = KEY_AES.getBytes("UTF-8");
	            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
	            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
	            AlgorithmParameterSpec paramSpec = new IvParameterSpec(ivs);
	            cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, paramSpec);
	            return Base64.encode(cipher.doFinal(value.getBytes("UTF-8"))).replace("\r\n", "");
	        } catch (Exception e) {
	            e.printStackTrace();
	        }
	        return null;
	    }
	
	public static String decrypt(String encrypted) {
        try {
        	byte[] key = KEY_AES.getBytes("UTF-8");
            byte[] ivs = KEY_AES.getBytes("UTF-8");
            Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5PADDING");
            SecretKeySpec secretKeySpec = new SecretKeySpec(key, "AES");
            IvParameterSpec iv = new IvParameterSpec(ivs);
            cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, iv);
            byte[] original = cipher.doFinal(Base64.decode(encrypted));
            return new String(original);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }*/
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.UnsupportedEncodingException;
import java.util.Calendar;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Configurable;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jws;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@Service
@Configurable
public class JwtUtil {
	
	private String key = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9";
	
	public String createJWTToken(String data, int min) throws UnsupportedEncodingException{
		
		Calendar c = Calendar.getInstance();
		c.add(Calendar.MINUTE, min);
		Date expirationDate = c.getTime();
		
		String jwt = Jwts.builder()
				  .setSubject("FIngPay/AuthServices")
				  .setExpiration(expirationDate)
				  .claim("name", "TokenData")
				  .claim("scope", "Merchant/payments")
				  .claim("data", data)
				  .signWith(
				    SignatureAlgorithm.HS256,
				    key.getBytes("UTF-8")
				  ).compact();
//		System.out.println(jwt);
		return jwt;
	}
	
	public String parseJWT(String jwt) throws ExpiredJwtException, UnsupportedJwtException, MalformedJwtException, SignatureException, IllegalArgumentException, UnsupportedEncodingException{
		Jws<Claims> claims = Jwts.parser()
				  .setSigningKey(key.getBytes("UTF-8"))
				  .parseClaimsJws(jwt);
				String name = (String) claims.getBody().get("name");
				String scope = (String) claims.getBody().get("scope");
				String data = (String) claims.getBody().get("data");
				
//				System.out.println(name);	
//				System.out.println(scope);
//				System.out.println(data);
				return data;
	}
	
	  public static void main(String[] args) throws UnsupportedEncodingException {
//		  String data = "{\"status\":true,\"message\":\"Aadhar Number already mapped with this phonenumber\",\"data\":10007,\"statusCode\":0}";
//		  System.out.println(createJWTToken(data, 10000));
//		  parseJWT(createJWTToken(data, 1));
		  JwtUtil j=new JwtUtil();
		  String data="eyJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJGSW5nUGF5L0F1dGhTZXJ2aWNlcyIsImV4cCI6MTYzMDMzMjYxMCwibmFtZSI6IlRva2VuRGF0YSIsInNjb3BlIjoiTWVyY2hhbnQvcGF5bWVudHMiLCJkYXRhIjoie1widXNlcklkXCI6NDgsXCJ1c2VybmFtZVwiOlwidnlzaG5hdmlcIixcInVzZXJUeXBlXCI6MTAxLFwiYWN0aXZlRmxhZ1wiOjEsXCJhZG1pblJhZGlvQnV0dG9uXCI6MSxcImZvcmNlUHdkQ2hhbmdlXCI6ZmFsc2V9In0.kPzUC8LZrySmOl1eLKflUCNxGwLAjpSbnH6BemAbyzo";
		  System.out.println(j.parseJWT(data));
	  }

}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

@Component
public class SimpleCORSFilter implements Filter {


	public SimpleCORSFilter() {
	}

	@Override
	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {

		HttpServletRequest request = (HttpServletRequest) req;
		HttpServletResponse response = (HttpServletResponse) res;

		response.setHeader("Access-Control-Allow-Origin", "*");
		response.setHeader("Access-Control-Allow-Credentials", "true");
		response.setHeader("Access-Control-Allow-Methods", "POST, GET");
		response.setHeader("Access-Control-Max-Age", "3600");
		response.setHeader("Access-Control-Allow-Headers", "Content-Type, Accept, X-Requested-With, remember-me, token,charset");
		response.setHeader("Access-Control-Expose-Headers", "token");

		if("OPTIONS".equalsIgnoreCase(request.getMethod())) {
		    response.setStatus(HttpServletResponse.SC_OK);
		    chain.doFilter(request, response);
		} else {
		    chain.doFilter(request, response);
		};
	}

	@Override
	public void init(FilterConfig filterConfig) throws ServletException {
		// TODO Auto-generated method stub

	}

	@Override
	public void destroy() {
		// TODO Auto-generated method stub

	}
}
package com.apptmyz.fpcontrolpanel.utils;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;

public class Test {

	public static void main(String[] args) {
			
			String ec2Files = "AERQI474437131405222111031,AERQI474437121405222111030,AERQI474437111405222111035,AERQI474437101405222111030,AERQI47443791405222111031,AERQI47443781405222111030,AERQI47443771405222111032,AERQI47443761405222111030,AERQI47443751405222111031,AERQI47443741405222111030,AERQI47443731405222111033,AERQI47443721405222111030,AERQI47443711405222111031,AERQI474370171405222111030,AERQI474370161405222111030,AERQI474370151405222111032,AERQI474370141405222111030,AERQI474370131405222111031,AERQI474370121405222111030,AERQI474370111405222111034,AERQI474370101405222111030,AERQI47437091405222111031,AERQI47437081405222111030,AERQI47437071405222111032,AERQI47437061405222111030,AERQI47437051405222111031,AERQI47437041405222111030,AERQI47437031405222111033,AERQI47437021405222111030,AERQI47437011405222111031,AERQI474311251405221911060,AERQI474311241405221911061,AERQI474311231405221911060,AERQI474311221405221911062,AERQI474311211405221911060,AERQI474311201405221911061,AERQI474311191405221911060,AERQI474311181405221911066,AERQI474311171405221911060,AERQI474311161405221911061,AERQI474311151405221911060,AERQI474311141405221911062,AERQI474311131405221911060,AERQI474311121405221911061,AERQI474311111405221911060,AERQI474311101405221911063,AERQI47431191405221911060,AERQI47431181405221911061,AERQI47431171405221911060,AERQI47431161405221911062,AERQI47431151405221911060,AERQI47431141405221911061,AERQI47431131405221911060,AERQI47431121405221911064,AERQI47431111405221911060,AERQI474240311405221911051,AERQI474240301405221911050,AERQI474240291405221911052,AERQI474240281405221911050,AERQI474240271405221911051,AERQI474240261405221911050,AERQI474240251405221911053,AERQI474240241405221911050,AERQI474240231405221911051,AERQI474240221405221911050,AERQI474240211405221911052,AERQI474240201405221911050,AERQI474240191405221911051,AERQI474240181405221911050,AERQI474240171405221911055,AERQI474240161405221911050,AERQI474240151405221911051,AERQI474240141405221911050,AERQI474240131405221911052,AERQI474240121405221911050,AERQI474240111405221911051,AERQI474240101405221911050,AERQI47424091405221911053,AERQI47424081405221911050,AERQI47424071405221911051,AERQI47424061405221911050,AERQI47424051405221911052,AERQI47424041405221911050,AERQI47424031405221911051,AERQI47424021405221911050,AERQI47424011405221911054,AERQI474182201405221711040,AERQI474182191405221711041,AERQI474182181405221711040,AERQI474182171405221711044,AERQI474182161405221711040,AERQI474182151405221711041,AERQI474182141405221711040,AERQI474182131405221711042,AERQI474182121405221711040,AERQI474182111405221711041,AERQI474182101405221711040,AERQI47418291405221711043,AERQI47418281405221711040,AERQI47418271405221711041,AERQI47418261405221711040,AERQI47418251405221711042,AERQI47418241405221711040,AERQI47418231405221711041,AERQI47418221405221711040,AERQI47418211405221711046,AERQI474114241405221711030,AERQI474114231405221711031,AERQI474114221405221711030,AERQI474114211405221711032,AERQI474114201405221711030,AERQI474114191405221711031,AERQI474114181405221711030,AERQI474114171405221711033,AERQI474114161405221711030,AERQI474114151405221711031,AERQI474114141405221711030,AERQI474114131405221711032,AERQI474114121405221711030,AERQI474114111405221711031,AERQI474114101405221711030,AERQI47411491405221711034,AERQI47411481405221711030,AERQI47411471405221711031,AERQI47411461405221711030,AERQI47411451405221711032,AERQI47411441405221711030,AERQI47411431405221711031,AERQI47411421405221711030,AERQI47411411405221711033,AERQI2189231405221529110,AERQI2189221405221529115,AERQI2189211405221529110,AERQI2189201405221529111,AERQI2189191405221529110,AERQI2189181405221529112,AERQI2189171405221529110,AERQI2189161405221529111,AERQI2189151405221529110,AERQI2189141405221529113,AERQI2189131405221529110,AERQI2189121405221529111,AERQI2189111405221529110,AERQI2189101405221529112,AERQI218991405221529110,AERQI218981405221529111,AERQI218971405221529110,AERQI218961405221529114,AERQI218951405221529110,AERQI218941405221529111,AERQI218931405221529110,AERQI218921405221529112,AERQI218911405221529110,AERQI474055161405221511030,AERQI474055151405221511033,AERQI474055141405221511030,AERQI474055131405221511031,AERQI474055121405221511030,AERQI474055111405221511032,AERQI474055101405221511030,AERQI47405591405221511031,AERQI47405581405221511030,AERQI47405571405221511025,AERQI47405561405221511020,AERQI47405551405221511021,AERQI47405541405221511020,AERQI47405531405221511022,AERQI47405521405221511020,AERQI47405511405221511021,AERQI473988161405221511020,AERQI473988151405221511023,AERQI473988141405221511020,AERQI473988131405221511021,AERQI473988121405221511020,AERQI473988111405221511022,AERQI473988101405221511020,AERQI47398891405221511021,AERQI47398881405221511020,AERQI47398871405221511024,AERQI47398861405221511020,AERQI47398851405221511021,AERQI47398841405221511020,AERQI47398831405221511022,AERQI47398821405221511020,AERQI47398811405221511021,AERQI473931291405221311053,AERQI473931281405221311052,AERQI473931271405221311052,AERQI473931261405221311052,AERQI473931251405221311056,AERQI473931241405221311052,AERQI473931231405221311052,AERQI473931221405221311052,AERQI473931211405221311053,AERQI473931201405221311051,AERQI473931191405221311050,AERQI473931181405221311052,AERQI473931171405221311050,AERQI473931161405221311051,AERQI473931151405221311050,AERQI473931141405221311053,AERQI473931131405221311050,AERQI473931121405221311051,AERQI473931111405221311050,AERQI473931101405221311052,AERQI47393191405221311050,AERQI47393181405221311051,AERQI47393171405221311050,AERQI47393161405221311055,AERQI47393151405221311050,AERQI47393141405221311051,AERQI47393131405221311050,AERQI47393121405221311052,AERQI47393111405221311050,AERQI473864321405221311041,AERQI473864311405221311040,AERQI473864301405221311043,AERQI473864291405221311040,AERQI473864281405221311041,AERQI473864271405221311040,AERQI473864261405221311042,AERQI473864251405221311040,AERQI473864241405221311041,AERQI473864231405221311040,AERQI473864221405221311044,AERQI473864211405221311040,AERQI473864201405221311041,AERQI473864191405221311040,AERQI473864181405221311042,AERQI473864171405221311040,AERQI473864161405221311041,AERQI473864151405221311040,AERQI473864141405221311043,AERQI473864131405221311040,AERQI473864121405221311041,AERQI473864111405221311040,AERQI473864101405221311042,AERQI47386491405221311040,AERQI47386481405221311041,AERQI47386471405221311040,AERQI47386461405221311046,AERQI47386451405221311040,AERQI47386441405221311041,AERQI47386431405221311040,AERQI47386421405221311042,AERQI47386411405221311040,AERQI47380528140522111107111115,AERQI473805271405221111070,AERQI473805261405221111071,AERQI473805251405221111070,AERQI473805241405221111072,AERQI473805231405221111070,AERQI473805221405221111071,AERQI473805211405221111070,AERQI47380520140522111107111115,AERQI473805191405221111070,AERQI473805181405221111071,AERQI473805171405221111070,AERQI473805161405221111072,AERQI473805151405221111070,AERQI473805141405221111071,AERQI473805131405221111070,AERQI47380512140522111107111115,AERQI473805111405221111070,AERQI473805101405221111071,AERQI47380591405221111070,AERQI47380581405221111072,AERQI47380571405221111070,AERQI47380561405221111071,AERQI47380551405221111070,AERQI4738054140522111107113,AERQI47380531405221111070,AERQI47380521405221111071,AERQI47380511405221111070,AERQI473735341405221111062,AERQI473735331405221111060,AERQI473735321405221111061,AERQI473735311405221111060,AERQI4737353014052211110612,AERQI473735291405221111060,AERQI473735281405221111061,AERQI473735271405221111060,AERQI473735261405221111062,AERQI473735251405221111060,AERQI473735241405221111061,AERQI473735231405221111061114,AERQI473735221405221111060,AERQI473735211405221111061,AERQI473735201405221111060,AERQI473735191405221111062,AERQI473735181405221111060,AERQI473735171405221111061,AERQI473735161405221111060,AERQI4737351514052211110612,AERQI473735141405221111060,AERQI473735131405221111061,AERQI473735121405221111060,AERQI473735111405221111062,AERQI473735101405221111060,AERQI47373591405221111061,AERQI47373581405221111060,AERQI47373571405221111061113,AERQI47373561405221111060,AERQI47373551405221111061,AERQI47373541405221111060,AERQI47373531405221111062,AERQI47373521405221111060,AERQI47373511405221111061,AERQI473679141405220911050,AERQI473679131405220911052,AERQI473679121405220911040,AERQI473679111405220911041,AERQI473679101405220911040,AERQI47367991405220911044,AERQI47367981405220911040,AERQI47367971405220911041,AERQI47367961405220911040,AERQI47367951405220911042,AERQI47367941405220911040,AERQI47367931405220911041,AERQI47367921405220911040,AERQI47367911405220911043,AERQI473611271405220911040,AERQI473611261405220911040,AERQI473611251405220911041,AERQI473611241405220911040,AERQI473611231405220911042,AERQI473611221405220911040,AERQI473611211405220911041,AERQI473611201405220911040,AERQI473611191405220911046,AERQI473611181405220911040,AERQI473611171405220911041,AERQI473611161405220911040,AERQI473611151405220911042,AERQI473611141405220911040,AERQI473611131405220911041,AERQI473611121405220911040,AERQI473611111405220911043,AERQI473611101405220911040,AERQI47361191405220911041,AERQI47361181405220911040,AERQI47361171405220911042,AERQI47361161405220911040,AERQI47361151405220911041,AERQI47361141405220911040,AERQI47361131405220911044,AERQI47361121405220911040,AERQI47361111405220911041,AERQI2188201405220835470,AERQI2188191405220835471,AERQI2188181405220835470,AERQI2188171405220835473,AERQI2188161405220835470,AERQI2188151405220835471,AERQI2188141405220835470,AERQI2188131405220835472,AERQI2188121405220835470,AERQI2188111405220835471,AERQI2188101405220835470,AERQI218891405220835475,AERQI218881405220835470,AERQI218871405220835471,AERQI218861405220835470,AERQI218851405220835472,AERQI218841405220835470,AERQI218831405220835471,AERQI218821405220835470,AERQI218811405220835473,AERQI47357721405220613017,AERQI47357711405220613016,AERQI47356621405220611028,AERQI47356611405220611027,AERQI473507314052206110110,AERQI47350721405220611017,AERQI47350711405220611018";
			String[] ec2A = ec2Files.split(",");
			
			String excelFIle = "AERQI2188111405220835471,AERQI473611251405220911041,AERQI473931131405221311050,AERQI2189201405221529111,AERQI474182131405221711042,AERQI47431131405221911060,AERQI473735121405221111060,AERQI47405581405221511030,AERQI47398891405221511021,AERQI218931405221529110,AERQI474114241405221711030,AERQI47431191405221911060,AERQI474311111405221911060,AERQI474311101405221911063,AERQI218821405220835470,AERQI473735101405221111060,AERQI473805101405221111071,AERQI473931191405221311050,AERQI474055141405221511030,AERQI473988131405221511021,AERQI474182191405221711041,AERQI474240161405221911050,AERQI47367931405220911041,AERQI473931111405221311050,AERQI47386481405221311041,AERQI473988121405221511020,AERQI474311231405221911060,AERQI474240171405221911055,AERQI474370161405222111030,AERQI218861405220835470,AERQI473805151405221111070,AERQI473735241405221111061,AERQI47424091405221911053,AERQI2188141405220835470,AERQI2188181405220835470,AERQI473735251405221111060,AERQI473735261405221111062,AERQI473864271405221311040,AERQI474055151405221511033,AERQI474311131405221911060,AERQI218891405220835475,AERQI47380571405221111070,AERQI473805131405221111070,AERQI473735131405221111061,AERQI47393131405221311050,AERQI474311121405221911061,AERQI47405531405221511022,AERQI473988151405221511023,AERQI47411411405221711033,AERQI474370171405222111030,AERQI47443771405222111032,AERQI47386431405221311040,AERQI473864231405221311040,AERQI473931231405221311052,AERQI47398871405221511024,AERQI474114191405221711031,AERQI474240181405221911050,AERQI474311171405221911060,AERQI47431161405221911062,AERQI47361121405220911040,AERQI473735161405221111060,AERQI473931281405221311052,AERQI47398831405221511022,AERQI2189121405221529111,AERQI218961405221529114,AERQI47431141405221911061,AERQI47431121405221911064,AERQI47437091405222111031,AERQI47361171405220911042,AERQI47411441405221711030,AERQI47424021405221911050,AERQI474311201405221911061,AERQI47350711405220611018,AERQI218851405220835472,AERQI2188171405220835473,AERQI473805241405221111072,AERQI2189111405221529110,AERQI47418271405221711041,AERQI474311221405221911062,AERQI473805211405221111070,AERQI473988141405221511020,AERQI2189101405221529112,AERQI47418291405221711043,AERQI47424051405221911052,AERQI2188121405220835470,AERQI47367961405220911040,AERQI47361131405220911044,AERQI47380551405221111070,AERQI473805271405221111070,AERQI473864121405221311041,AERQI474114151405221711031,AERQI474311191405221911060,AERQI47424071405221911051,AERQI474311141405221911062,AERQI218841405220835470,AERQI473931231405221311050,AERQI47405551405221511021,AERQI474240191405221911051,AERQI473805231405221111070,AERQI47393191405221311050,AERQI473931221405221311052,AERQI2189141405221529113,AERQI47424061405221911050,AERQI47431181405221911061,AERQI47356621405220611028,AERQI473611201405220911040,AERQI473864261405221311042,AERQI2189181405221529112,AERQI474437121405222111030,AERQI474437111405222111035,AERQI473507314052206110110,AERQI473611231405220911042,AERQI47373581405221111060,AERQI473864111405221311040,AERQI473931171405221311050,AERQI473931211405221311050,AERQI473864161405221311041,AERQI473931291405221311053,AERQI474240121405221911050,AERQI473735141405221111060,AERQI473735311405221111060,AERQI47398861405221511020,AERQI473988111405221511022,AERQI218991405221529110,AERQI47411481405221711030,AERQI474240251405221911053,AERQI473864301405221311043,AERQI47437081405222111030,AERQI473611141405220911040,AERQI47380531405221111070,AERQI47373531405221111062,AERQI473864311405221311040,AERQI473864321405221311041,AERQI473864181405221311042,AERQI474182101405221711040,AERQI474240301405221911050,AERQI474311161405221911061,AERQI47361161405220911040,AERQI473931271405221311050,AERQI474055131405221511031,AERQI47411491405221711034,AERQI2188131405220835472,AERQI473611121405220911040,AERQI473805111405221111070,AERQI473735341405221111062,AERQI473931271405221311052,AERQI47418251405221711042,AERQI474437101405222111030,AERQI47361111405220911041,AERQI218911405221529110,AERQI218971405221529110,AERQI2189191405221529110,AERQI473735181405221111060,AERQI47443741405222111030,AERQI47443761405222111030,AERQI47437031405222111033,AERQI2188191405220835471,AERQI2189221405221529115,AERQI474114141405221711030,AERQI47418241405221711040,AERQI47424011405221911054,AERQI473611261405220911040,AERQI474114101405221711030,AERQI47424081405221911050,AERQI474240211405221911052,AERQI473931151405221311050,AERQI473931101405221311052,AERQI474055161405221511030,AERQI47418261405221711040,AERQI47431111405221911060,AERQI474240151405221911051,AERQI47437041405222111030,AERQI47386491405221311040,AERQI218941405221529111,AERQI474114131405221711032,AERQI474311211405221911060,AERQI473735111405221111062,AERQI474240131405221911052,AERQI474370131405222111031,AERQI47443751405222111031,AERQI474437131405222111031,AERQI47361181405220911040,AERQI47367991405220911044,AERQI47373591405221111061,AERQI473931181405221311052,AERQI2189171405221529110,AERQI218811405220835473,AERQI47361141405220911040,AERQI473735331405221111060,AERQI473735191405221111062,AERQI473864171405221311040,AERQI2189151405221529110,AERQI2189231405221529110,AERQI474182171405221711044,AERQI2188151405220835471,AERQI473611101405220911040,AERQI47367921405220911040,AERQI47373541405221111060,AERQI47386471405221311040,AERQI473864241405221311041,AERQI473805251405221111070,AERQI473679101405220911040,AERQI47393171405221311050,AERQI473931201405221311051,AERQI47411421405221711030,AERQI474182141405221711040,AERQI474240201405221911050,AERQI474240221405221911050,AERQI473864131405221311040,AERQI473931251405221311050,AERQI474311151405221911060,AERQI47437011405222111031,AERQI473611181405220911040,AERQI473931261405221311052,AERQI473864221405221311044,AERQI47356611405220611027,AERQI47367941405220911040,AERQI473679121405220911040,AERQI473611211405220911041,AERQI47393141405221311051,AERQI4737353014052211110612,AERQI47398881405221511020,AERQI474182111405221711041,AERQI47357721405220613017,AERQI218871405220835471,AERQI473611161405220911040,AERQI473611111405220911043,AERQI473735271405221111060,AERQI47380521405221111071,AERQI473931241405221311052,AERQI473735231405221111061114,AERQI473988101405221511020,AERQI218981405221529111,AERQI474182161405221711040,AERQI47424041405221911050,AERQI474240281405221911050,AERQI474240231405221911051,AERQI473805171405221111070,AERQI473864211405221311040,AERQI47386461405221311046,AERQI474240141405221911050,AERQI473679141405220911050,AERQI47373521405221111060,AERQI473805141405221111071,AERQI47398821405221511020,AERQI474055121405221511030,AERQI474114111405221711031,AERQI474114231405221711031,AERQI218831405220835471,AERQI47361151405220911041,AERQI473735221405221111060,AERQI473805161405221111072,AERQI473931161405221311051,AERQI47386421405221311042,AERQI47405541405221511020,AERQI47411461405221711030,AERQI47431171405221911060,AERQI47443781405222111030,AERQI47443731405222111033,AERQI2188201405220835470,AERQI473611241405220911040,AERQI47367971405220911041,AERQI473679111405220911041,AERQI47405561405221511020,AERQI474182151405221711041,AERQI47431151405221911060,AERQI474240311405221911051,AERQI474311241405221911061,AERQI218881405220835470,AERQI2188101405220835470,AERQI473611191405220911046,AERQI473735171405221111061,AERQI473864101405221311042,AERQI47405511405221511021,AERQI473805191405221111070,AERQI474114181405221711030,AERQI474114201405221711030,AERQI47437051405222111031,AERQI473805261405221111071,AERQI47386451405221311040,AERQI4738054140522111107113,AERQI47405521405221511020,AERQI474055101405221511030,AERQI2189131405221529110,AERQI474240101405221911050,AERQI47437061405222111030,AERQI473735211405221111061,AERQI47398851405221511021,AERQI474182201405221711040,AERQI47350721405220611017,AERQI473611271405220911040,AERQI47393181405221311051,AERQI47418221405221711040,AERQI47418281405221711040,AERQI47424031405221911051,AERQI47373511405221111061,AERQI47373571405221111061113,AERQI473931211405221311053,AERQI473931251405221311056,AERQI473988161405221511020,AERQI474114171405221711033,AERQI474370101405222111030,AERQI47398841405221511020,AERQI47405571405221511025,AERQI474114221405221711030,AERQI47418211405221711046,AERQI47367981405220911040,AERQI47373551405221111061,AERQI473864291405221311040,AERQI473931121405221311051,AERQI47398811405221511021,AERQI47411431405221711031,AERQI47418231405221711041,AERQI474182181405221711040,AERQI474240111405221911051,AERQI474240291405221911052,AERQI47443721405222111030,AERQI473679131405220911052,AERQI47393121405221311052,AERQI473931141405221311053,AERQI474055111405221511032,AERQI47380581405221111072,AERQI473864251405221311040,AERQI474114211405221711032,AERQI474370141405222111030,AERQI47386411405221311040,AERQI473864281405221311041,AERQI474240261405221911050,AERQI474240271405221911051,AERQI47357711405220613016,AERQI47373561405221111060,AERQI47380591405221111070,AERQI473864201405221311041,AERQI474114161405221711030,AERQI474370121405222111030,AERQI47437071405222111032,AERQI473611131405220911041,AERQI473735321405221111061,AERQI47393111405221311050,AERQI474311251405221911060,AERQI47367951405220911042,AERQI473805221405221111071,AERQI474182121405221711040,AERQI47411471405221711031,AERQI474370111405222111034,AERQI2188161405220835470,AERQI473611221405220911040,AERQI473611171405220911041,AERQI473611151405220911042,AERQI47380511405221111070,AERQI47380561405221111071,AERQI218951405221529110,AERQI474114121405221711030,AERQI47386441405221311041,AERQI2189211405221529110,AERQI2189161405221529111,AERQI218921405221529112,AERQI47411451405221711032,AERQI473735201405221111060,AERQI473735281405221111061,AERQI473805181405221111071,AERQI47361191405220911041,AERQI473864151405221311040,AERQI47393151405221311050,AERQI473931291405221311050,AERQI4737351514052211110612,AERQI47393161405221311055,AERQI474240241405221911050,AERQI474311181405221911066,AERQI47443711405222111031,AERQI474370151405222111032,AERQI47367911405220911043,AERQI473735291405221111060,AERQI473864191405221311040,AERQI473864141405221311043,AERQI47405591405221511031,AERQI47437021405222111030,AERQI47443791405222111031";		
			String[] exceA = excelFIle.split(",");
			
			Map<String, Integer> excelMap = new HashMap<String,Integer>();
			Map<String, Integer> vec2Map = new HashMap<String,Integer>();
			System.out.println("LENGHT:"+ exceA.length );
			for(int i =0 ;i< exceA.length ; i++)
			{
				
				if(excelMap.containsKey(exceA[i]))
				{
					System.out.println("Duplicate Key:" +exceA[i] );
				}
				else
				{
					excelMap.put(exceA[i], 1);
				}
			}
			for(int i =0 ;i< ec2A.length ; i++)
			{
				if(vec2Map.containsKey(ec2A[i]))
				{
					System.out.println("Duplicate EC2 Key:" +ec2A[i] );
				}
				else
				{
					vec2Map.put(ec2A[i], 1);
				}
			}
			
			for(Map.Entry<String, Integer> map : excelMap.entrySet())
			{
				if(!vec2Map.containsKey(map.getKey()))
				{
					System.out.println(map.getKey());
				}else
					vec2Map.remove(map.getKey());
			}
			System.out.println("===============================================");
			for(Map.Entry<String, Integer> map : vec2Map.entrySet())
			{
					System.out.println(map.getKey());
				
			}
			/*System.out.println("Stan: " + getCWStan(1));
			System.out.println("Stan BI: " + getBIStan(1));
			System.out.println("Stan AP: " + getAPStan(1));
			System.out.println("Stan AP: " + getCDStan(1));
			
			System.out.println("Stan: " + getStan(7902476));
			System.out.println("Stan BI: " + getBIStan(7902476));
			System.out.println("Stan AP: " + getAPStan(7902476));
			
			System.out.println("Stan: " + getStan(9999999));
			System.out.println("Stan BI: " + getBIStan(9999999));
			System.out.println("Stan AP: " + getAPStan(9999999));
			
			System.out.println("Stan: " + getStan(1));
			System.out.println("Stan BI: " + getBIStan(1));
			System.out.println("Stan AP: " + getAPStan(1));
			CommonTasks commonTasks = new CommonTasks();*/
		
	String ss = null;
	System.out.println("TED:"+ null);
	
		/*IStep step = new Task() ;
		
		ABCTask aaa = (ABCTask) step;*/
		
	for(int i= 0 ;i<10 ;i++)
	{
		String datevao = java.util.Base64.getEncoder().encodeToString((new SimpleDateFormat("yyMMddhhmmsss").format(new Date()) + i).getBytes());
		System.out.println("DATA DVO::"+ datevao);
		System.out.println("DATA DVO::"+ datevao.substring(datevao.length()-6,datevao.length()));
		
	}
	}
		
		public static String getCWStan(int id) {
			int num = id % 1000000;
			num = num % 400000;
			return String.format("%6s", num).replace(" ", "0");
		}
		
		public static String getBIStan(int id) {
			int num = id % 1000000;
			num = num % 400000;
			num += 400000;
			return String.format("%6s", num).replace(" ", "0");
		}

		public static String getAPStan(int id) {
			int num = id % 100000;
			num += 900000;
			return String.format("%6s", num).replace(" ", "0");
		}
		
		public static String getCDStan(int id) {
			int num = id % 100000;
			num += 800000;
			return String.format("%6s", num).replace(" ", "0");
		}
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;

import com.itextpdf.text.pdf.codec.Base64;

public class TestDoc {

	public static void main(String[] args) {

//		String encodedImage="";
		String encodedImage="dGVzdCB0ZXh0";
		byte[] decodedString = Base64.decode(encodedImage);
		System.out.println("********** pdf decoded *********");

		
		try {
			FileOutputStream out = new FileOutputStream("D:\\TestDoc\\Testtext1.txt");
			out.write(decodedString);
			out.close();
			System.out.println("file saved");

		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("Exception Occured: "+ e.getMessage());
		}

	
	}

}
package com.apptmyz.fpcontrolpanel.utils;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.Session;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;

public class TestEmail {

	public static void main(String[] args){
		Session session = null;
		ArrayList<String> mailList =null;
		ArrayList<String> ccMailList = null;
		ArrayList<String> bccMailList = null;
		SimpleDateFormat format = new SimpleDateFormat("yyyy/MM/dd");
		List<ChargeBackManagement> cbList = new ArrayList<ChargeBackManagement>();
	try{
		
		
			mailList = new ArrayList<>();
			bccMailList = new ArrayList<>();
			ccMailList = new ArrayList<>();
			
			int gmailOrAWS = 1;
			System.out.println("gmailOrAWS : " + gmailOrAWS);
			if(gmailOrAWS == 1)
			{
				Properties props = new Properties();
				props.put("mail.smtp.host", "email-smtp.ap-south-1.amazonaws.com");
				props.put("mail.smtp.socketFactory.port", "587");
				props.put("mail.smtp.socketFactory.class","javax.net.ssl.SSLSocketFactory");
				props.put("mail.smtp.auth", "true");
				props.put("mail.smtp.port", "587");

				session = Session.getDefaultInstance(props,
						new javax.mail.Authenticator() {
					protected javax.mail.PasswordAuthentication getPasswordAuthentication()
					{
						return new javax.mail.PasswordAuthentication("AKIA6J4CMD72T5AF3LUV","BFuZ4n7KyaXMZQC/vop0O8RqnkCXvhqPPfgLU67QAldH");
					}
				});
				System.out.println("AWS session : " + session);
				
				String[] mailIds1 = " disputes@mahagram.in".split(",");  //sm.getEmailId().split(",");
				for(String emailId:mailIds1)
				{
					try {
						InternetAddress emailAddr = new InternetAddress(emailId);
						emailAddr.validate();
						mailList.add(emailId);
					} catch (AddressException ex) {
						ex.printStackTrace();
					}
				}
				
				bccMailList.add("bhaskar@tapits.in");
				
				
				ccMailList.add("support1@tapits.in");
				ccMailList.add("support@tapits.in");
				ccMailList.add("recon@tapits.in");
				
				String[] mailIds = mailList.toArray(new String[mailList.size()]);
				InternetAddress[] address = new InternetAddress[mailIds.length];
				for(int i =0; i< mailIds.length; i++)
				{
					try {
						address[i] = new InternetAddress(mailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] bccmailIds = bccMailList.toArray(new String[bccMailList.size()]);
				InternetAddress[] bccaddress = new InternetAddress[bccmailIds.length];
				for(int i =0; i< bccmailIds.length; i++)
				{
					try {
						bccaddress[i] = new InternetAddress(bccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				String[] ccmailIds = ccMailList.toArray(new String[ccMailList.size()]);
				InternetAddress[] ccaddress = new InternetAddress[ccmailIds.length];
				for(int i =0; i< ccmailIds.length; i++)
				{
					try {
						ccaddress[i] = new InternetAddress(ccmailIds[i]);
					} catch (AddressException e) {
						e.printStackTrace();
					}
				}
				
				System.out.println("EMAILS DONE : " + session);
				String emailMessage = "";

				emailMessage += "<table style = 'border: 1px solid black;border-collapse: collapse; text-align : center;'>"
						+ "<thead style = 'border: 1px solid black;border-collapse: collapse; background-color :  #c80707; font-family : Times New Roman;  font-size: 15px;color: white'	>"
						+ "<tr><th style = 'border: 1px solid black;'>CB Date</th>"
						+ " <th style = 'border: 1px solid black;'>CB Type</th> "
						+ "<th style = 'border: 1px solid black;'>RRN</th>"
						+ "<th style = 'border: 1px solid black;'>Card No.</th> "
						+ "<th style = 'border: 1px solid black;'>Amount</th> "
						+ "<th style = 'border: 1px solid black;'>Txn Date</th>"
						+ "<th style = 'border: 1px solid black;'>Product</th>"
						+ "<th style = 'border: 1px solid black;'>Bank</th>"
						+ " <th style = 'border: 1px solid black;'>Transaction Log ID</th>"
						+ " <th style = 'border: 1px solid black;'>Merchant Login ID</th>"
						+ "<th style = 'border: 1px solid black;'>Merchant Name</th>"
						+ "<th style = 'border: 1px solid black;'>Deemed Accepted Date</th>"
						+ " </tr>"
						+ "</thead>"
						+ "<tbody>";

				ChargeBackManagement bb = new ChargeBackManagement();
				bb.setCbDate("31-Mar-2022");
				bb.setChargeBackType("Chargeback Raise");
				bb.setTxnNo("208817511440");
				bb.setCardNo("");
				bb.setAmount(Double.parseDouble("1500"));
				bb.setTxnDate("29-Mar-2022");
				bb.setProductType("CW");
				bb.setBank("");
				bb.setMerchantTxnId("BH45758FE8AA9A4D0FA53F27A97C10AD92");
				bb.setMerchantLoginId("BC4246510154");
				bb.setMerchantName("Subhash Yadav");
				bb.setTatDate("02-Apl-22");
				bb.setSuperMerchantName("Mahagram Payments private limited");
				
				cbList.add(bb);
				for(ChargeBackManagement cb : cbList)
				{


					emailMessage += "<tr><th style = 'border: 1px solid black;'>"+cb.getCbDate()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getChargeBackType()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnNo()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getCardNo()+"</th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getAmount()+" </th>"
							+ " <th style = 'border: 1px solid black;'>"+cb.getTxnDate()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getProductType()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getBank()+"</th> "
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantTxnId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantLoginId()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getMerchantName()+"</th>"
							+ "<th style = 'border: 1px solid black;'>"+cb.getTatDate()+"</th>"
							+ " </tr>";


				}
				emailMessage += " </tbody> </table>";

				
					Message message = new MimeMessage(session);

					message.setRecipients(Message.RecipientType.TO, address);
					message.setFrom(new InternetAddress("disputes@tapits.in"));
					message.setRecipients(Message.RecipientType.BCC, bccaddress);
					message.setRecipients(Message.RecipientType.CC, ccaddress);

					message.setSubject("Deemed Accepted Chargebacks |"+ cbList.get(0).getSuperMerchantName()+" |Fingpay -TAT DATE:"+format.format(new Date()));

					String fullmessage = "Dear Sir/Ma'am," + 
							"<br><br>" + 
							"You have not taken any action on these disputes and today was the last day for action.<b> Hence these disputes have been deemed accepted.</b><br><br>" + 
							emailMessage 
							+ "<br><br>"
							+ "<p> For all these disputes, a penalty of Rs.100 per day from the date of Transaction or as per the discretion of the regulatory authority will be payable.</p>"
							+ "<br>Please implement the 3 way recon API to reduce chargebacks."
							+ "In case of any issue, please contact the disputes team at support@tapits.in.<br>" + 
							"Thank you, <br> Fingpay.";
					System.out.println("FULL message : "+ fullmessage);
					message.setContent(fullmessage, "text/html");

					System.out.println("message : " + message.toString());

					javax.mail.Transport.send(message);

			}
			
			
	}catch(Exception e){
		e.printStackTrace();
	}
	}
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.client.ClientProtocolException;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkDataModel;
import com.apptmyz.fpcontrolpanel.data.ApproveRejectBulkModel;
import com.apptmyz.fpcontrolpanel.data.AuthenticateUserResponseAnalytics;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpsettlementdb.entity.ChargeBackManagement;
import com.apptmyz.fpsettlementdb.repository.ChargeBackManagementRepository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureException;
import io.jsonwebtoken.UnsupportedJwtException;

@RestController
@RequestMapping(value = "/api/test/db")
public class TestFile {
	
	@Autowired
	private ChargeBackManagementRepository chargeBackManagementRepository;
	@GetMapping("/{id}")
	public void testDbConnectivity(HttpServletRequest request,HttpServletResponse response,HttpSession httpSession,@PathVariable Integer id) throws ClientProtocolException, IOException
	{
		ChargeBackManagement chargeBackManagement=chargeBackManagementRepository.findOne(id);
		System.out.println(chargeBackManagement.getUploadedBy() + chargeBackManagement.getUploadedTimestamp());
		System.out.println(chargeBackManagement.getTatDate());
		
		List<ChargeBackManagement> chargeBack = chargeBackManagementRepository.findTop10ByOrderByIdDesc();
		System.out.println("list: "+new GsonBuilder().serializeNulls().create().toJson(chargeBack));
	} 
	
//	@PostMapping(path = "/bulk")
//	public ResponseEntity<GeneralResponse> approveRejectBulk(HttpServletRequest request, HttpServletResponse response,
//			HttpSession httpSession,@RequestBody String dataSent, @RequestHeader("token") String token)
//					throws UnsupportedEncodingException, ParseException {
//		System.out.println("-----------start approve/reject maker checker----------");
//		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
//		ResponseEntity<GeneralResponse> generalResponse = null;
//		Gson gson = new GsonBuilder().serializeNulls().create();
//
//		System.out.println("approve or reject data from device : " + dataSent);
//
//		logger.info("approve or reject data from device : " + dataSent);
//		
//		ApproveRejectBulkModel dataModel = null;
//		List<Integer> invalidChargebackType = new ArrayList<Integer>();
//		List<Integer> validChargebackType = new ArrayList<Integer>();
//		String errorMessage = null;
//		try {
//			dataModel = gson.fromJson(dataSent, ApproveRejectBulkModel.class);
//		} catch (Exception e) {
//			e.printStackTrace();
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
//					HttpStatus.OK);
//		}
//			if (generalResponse == null )//generalResponse == null  && dataModel != null && dataModel.getApproveRejectBulkDataModel() != null) 
//			{
//				for(ApproveRejectBulkDataModel approveRejectBulkDataModel : dataModel.getApproveRejectBulkDataModel())
//				{
//					System.out.println("approveRejectBulkDataModel : "+gson.toJson(approveRejectBulkDataModel));
//					if(approveRejectBulkDataModel.getId()!=null && approveRejectBulkDataModel.getAction() != null )
//					{
//						if(approveRejectBulkDataModel.getAction().equals("approve"))
//						{
//							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
//							{
//								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
//								if(chargeBackManagement != null)
//								{
//									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
//									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
//									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
//									chargeBackManagementRepository.save(chargeBackManagement);
//									
//									validChargebackType.add(approveRejectBulkDataModel.getId());
//								}
//							}
//							else
//							{
//								invalidChargebackType.add(approveRejectBulkDataModel.getId());
//							}
//						}
//						else if(approveRejectBulkDataModel.getAction().equals("reject"))
//						{
//							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
//							{
//								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
//								if(chargeBackManagement != null)
//								{
//									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
//									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
//									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
//									chargeBackManagementRepository.save(chargeBackManagement);
//									
//									validChargebackType.add(approveRejectBulkDataModel.getId());
//								}
//							}
//							else
//							{
//								invalidChargebackType.add(approveRejectBulkDataModel.getId());
//							}
//						}
//					}
//				}
//				if(invalidChargebackType.size() > 0)
//				{
//					errorMessage = "Bulk upload process was interrupted due to an error. Reason - \n * Id's " + gson.toJson(invalidChargebackType)+ 
//							" chargeback type is neither Chargeback Raise nor Chargeback Raise - Pending for Settlement.";
//					if(validChargebackType.size() > 0)
//					{
//						errorMessage += "Whereas, Bulk accept/reject successful for records "+gson.toJson(validChargebackType);
//					}
//				}
//				if(errorMessage != null)
//				{
//					logger.info("Detailed records are invalid : message:"+ errorMessage);
//					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,errorMessage ,Constants.INVALID_CHARGE_BACK_TYPE_UPLOADED, null),HttpStatus.OK);
//				}
//				
//				else
//					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, "Bulk accept/reject successful", 0, null),HttpStatus.OK);
//			}
//		
//		
//		logger.info("-----------end approve/reject maker cheker-----------" + gson.toJson(generalResponse));
//		return generalResponse;
//	}

	
	@PostMapping(path = "/bulk")
	public ResponseEntity<GeneralResponse> approveRejectBulk(HttpServletRequest request, HttpServletResponse response,
			HttpSession httpSession, @RequestBody List<ApproveRejectBulkDataModel> dataSent, @RequestHeader("token") String token)
					throws UnsupportedEncodingException, ParseException {
		System.out.println("-----------start approve/reject maker checker----------");
		Logger logger = Logger.getLogger("ApproveRejectMakerChecker");
		ResponseEntity<GeneralResponse> generalResponse = null;
		Gson gson = new GsonBuilder().serializeNulls().create();

		
		System.out.println("approve or reject data from device : " + gson.toJson(dataSent));

		logger.info("approve or reject data from device : " + dataSent);
//		ApproveRejectBulkModel dataModel = null;
		List<Integer> invalidChargebackType = new ArrayList<Integer>();
		List<Integer> validChargebackType = new ArrayList<Integer>();
		String errorMessage = null;
//		try {
//			dataModel = gson.fromJson(dataSent, ApproveRejectBulkModel.class);
//		} catch (Exception e) {
//			e.printStackTrace();
//			generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,
//					Constants.ERROR_PARSING_REQUEST_DATA, Constants.ERROR_INCOMPLETE_DATA_STATUS_CODE, null),
//					HttpStatus.OK);
//		}
		
			logger.info("agg/read/ Permission validation true");

			if (generalResponse == null  && dataSent != null) 
			{
				for(ApproveRejectBulkDataModel approveRejectBulkDataModel : dataSent)
				{
					System.out.println("---approveRejectBulkDataModel---"+gson.toJson(approveRejectBulkDataModel));
					if(approveRejectBulkDataModel.getId()!=null && approveRejectBulkDataModel.getAction() != null )
					{
						if(approveRejectBulkDataModel.getAction().equals("approve"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Approved);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
								}
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
						else if(approveRejectBulkDataModel.getAction().equals("reject"))
						{
							if(approveRejectBulkDataModel.getChargeBackType() != null && (approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise") || approveRejectBulkDataModel.getChargeBackType().equals("Chargeback Raise - Pending for Settlement")))
							{
								ChargeBackManagement chargeBackManagement = chargeBackManagementRepository.findOne(approveRejectBulkDataModel.getId());
								if(chargeBackManagement != null)
								{
									chargeBackManagement.setStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorStatusFlag(Constants.Charge_Back_Rejected);
									chargeBackManagement.setAggregatorUpdatedTimestamp(new Date());
									chargeBackManagementRepository.save(chargeBackManagement);
									
									validChargebackType.add(approveRejectBulkDataModel.getId());
									System.out.println("before chargebackmanagement : "+gson.toJson(chargeBackManagement));
								}
								System.out.println("after chargebackmanagement : "+gson.toJson(chargeBackManagement));
							}
							else
							{
								invalidChargebackType.add(approveRejectBulkDataModel.getId());
							}
						}
					}
				}
				if(invalidChargebackType.size() > 0)
				{
					errorMessage = "Bulk upload process was interrupted due to an error. Reason - \n * Id's " + gson.toJson(invalidChargebackType)+ 
							" chargeback type is neither Chargeback Raise nor Chargeback Raise - Pending for Settlement.";
					if(validChargebackType.size() > 0)
					{
						errorMessage += "Whereas, Bulk accept/reject successful for records "+gson.toJson(validChargebackType);
					}
				}
				if(errorMessage != null)
				{
					logger.info("Detailed records are invalid : message:"+ errorMessage);
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.FALSE,errorMessage ,Constants.INVALID_CHARGE_BACK_TYPE_UPLOADED, null),HttpStatus.OK);
				}
				
				else
					generalResponse = new ResponseEntity<GeneralResponse>(new GeneralResponse(Constants.TRUE, "Bulk accept/reject successful", 0, null),HttpStatus.OK);
			}
			System.out.println("-----------end approve/reject maker cheker-----------" + gson.toJson(generalResponse));
			return generalResponse;
		
		} 
		
	}

	
package com.apptmyz.fpcontrolpanel.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URL;
import java.security.KeyStore;
import java.security.SecureRandom;

import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSocketFactory;

public class TestSSLContext {

	private static SSLSocketFactory getFactory( File pKeyFile, String pKeyPassword ) throws Exception {
		  KeyManagerFactory keyManagerFactory =
		    KeyManagerFactory.getInstance("SunX509");
		  KeyStore keyStore =
		    KeyStore.getInstance("PKCS12");

		  InputStream keyInput = new FileInputStream(pKeyFile);
		  keyStore.load(keyInput, pKeyPassword.toCharArray());
		  keyInput.close();

		  keyManagerFactory.init(keyStore, pKeyPassword.toCharArray());

		  SSLContext context = SSLContext.getInstance("TLS");
		  context.init(
		    keyManagerFactory.getKeyManagers(),
		    null,
		    new SecureRandom()
		  );

		  return context.getSocketFactory();
		}
	
	public static void main(String[] args){
		try{


		URL url = new URL("https://someurl");
		HttpsURLConnection con = (HttpsURLConnection) url.openConnection();
		con.setSSLSocketFactory(getFactory(new File("file.p12"), "secret"));
		
		}catch(Exception e){
			e.printStackTrace();
		}

	}
}
package com.apptmyz.fpcontrolpanel.utils;

import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.math.BigDecimal;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.entity.ByteArrayEntity;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.apptmyz.fpcarddb.entity.MaCashWithdrawalDataRep;
//import com.apptmyz.fpcarddb.entity.MaCashWithdrawalData;
//import com.apptmyz.fpcarddb.repository.MaCashWithdrawalDataRepository;
import com.apptmyz.fpcontrolpanel.data.ImprovedDateTypeAdapter;
import com.apptmyz.fpcontrolpanel.data.TimestampAdapter;
import com.apptmyz.fpcontrolpanel.data.TransactionSearchByRRNResult;
import com.apptmyz.fpcontrolpanel.response.APRrnResponseModel;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponseAP;
import com.apptmyz.fpcontrolpanel.response.AuthenticateUserResponseRRN;
import com.apptmyz.fpcontrolpanel.response.CwAndMATMRrnResponseModel;
import com.apptmyz.fpcontrolpanel.response.GeneralResponse;
import com.apptmyz.fpsettlementdb.entity.AccountStatementDataV2;
import com.apptmyz.fpsettlementdb.repository.AccountStatementDataV2Repository;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializer;

import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.params.BasicHttpParams;
import org.apache.http.params.HttpConnectionParams;
import org.apache.http.params.HttpParams;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;

@RestController
@RequestMapping(value = "/api/token")
public class TestToken {

	@Autowired
	private JwtUtil jwtUtil;

	@Autowired
	private AccountStatementDataV2Repository accountStatementDataV2Repository;
	
//	@Autowired
//	private MaCashWithdrawalDataRepository maCashWithdrawalDataRepository;
	
	@GetMapping("/testCW/{rrn}")
	public void testTokenCW(HttpServletRequest request,HttpServletResponse response,HttpSession httpSession,@PathVariable String rrn) throws ClientProtocolException, IOException
	{	
		Gson gson = new GsonBuilder().serializeNulls().create();
		//Gson gson = new GsonBuilder().registerTypeAdapter(Timestamp.class, new TimestampAdapter()).create();

		AuthenticateUserResponseRRN tokenRequestCW=new AuthenticateUserResponseRRN();
		tokenRequestCW.setUserType(101);
		String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestCW),60);
		HttpParams httpParameters = new BasicHttpParams();
		HttpConnectionParams.setSoTimeout(httpParameters, 300000);
		HttpClient httpClient = new DefaultHttpClient();
		String url="https://fpanalytics.tapits.in/fpaepsanalytics/api/transactionSearchRRN/"+rrn;
		HttpGet httpGet = new HttpGet(url);


		if(token!=null)
			httpGet.setHeader("token",token);

		HttpResponse responseData = httpClient.execute(httpGet);

		int responseCode = responseData.getStatusLine().getStatusCode();
		System.out.println("Response code status api : "+responseCode);

		String dataSent ="";

		if (responseCode == 200) 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();

		} 
		else 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();
		}
		System.out.println("CW rrn "+dataSent);
		GeneralResponse generalResponse=gson.fromJson(dataSent, GeneralResponse.class);
		System.out.println("general status : "+generalResponse.isStatus());
		System.out.println("general data : "+gson.toJson(generalResponse.getData()));
	//	CwAndMATMRrnResponseModel responseModel=gson.fromJson(gson.toJson(generalResponse.getData()), CwAndMATMRrnResponseModel.class);
		List<TransactionSearchByRRNResult> responseModel=(List<TransactionSearchByRRNResult>) generalResponse.getData();
		TransactionSearchByRRNResult r=gson.fromJson(gson.toJson(responseModel.get(0)), TransactionSearchByRRNResult.class);
		System.out.println("rrr:"+r.getResponseRrn());
		//	TransactionSearchByRRNResult responseModel1=gson.fromJson(responseModel.get(0), TransactionSearchByRRNResult.class);
		//System.out.println("------------CW rrn------"+responseModel.getResponseRrn());
//		System.out.println("responseModel: "+responseModel);
//		System.out.println("responseModel in list: "+responseModel.get(0));
		  //  Date dateStart = new Date(responseModel.getRequestedTimestamp());
		  //  DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		    //System.out.println(formatter.format(dateStart));
		System.out.println("----------in common tasks paytm- status api----------post data ended ------------------------");

	}
	@PostMapping("/testAP/{rrn}")
	public void testTokenAP(HttpServletRequest request,HttpServletResponse response,HttpSession httpSession,@PathVariable String rrn) throws ClientProtocolException, IOException
	{	
		//Gson gson = new GsonBuilder().serializeNulls().create();
		GsonBuilder builder = new GsonBuilder(); 

		// Register an adapter to manage the date types as long values 
		builder.registerTypeAdapter(Date.class, new ImprovedDateTypeAdapter());

		Gson gson = builder.create();

		AuthenticateUserResponseAP tokenRequestAP=new AuthenticateUserResponseAP();
		tokenRequestAP.setUserType(101);
		String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestAP),60);
		HttpParams httpParameters = new BasicHttpParams();
		HttpConnectionParams.setSoTimeout(httpParameters, 300000);
		HttpClient httpClient = new DefaultHttpClient();
		String url="https://fingpayap.tapits.in/fpaepsweb/api/Merchant/merchantInfo/aadhaarPay/rrn/"+rrn;
		HttpGet httpGet = new HttpGet(url);

		if(token!=null)
			httpGet.setHeader("token",token);

		HttpResponse responseData = httpClient.execute(httpGet);

		int responseCode = responseData.getStatusLine().getStatusCode();
		System.out.println("Response code status api : "+responseCode);

		String dataSent ="";

		if (responseCode == 200) 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();

		} 
		else 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();
		}
		System.out.println("AP rrn "+dataSent);
		APRrnResponseModel responseModel=gson.fromJson(dataSent, APRrnResponseModel.class);
		System.out.println("------------AP rrn------"+responseModel.getResponseRrn());
		//		long start = Long.parseLong(String.valueOf(responseModel.getRequestedTimestamp()));//ap
		//		long end = Long.parseLong(String.valueOf(responseModel.getResposeTimestamp()));
		//	    Date dateStart = new Date(start);
		//	    Date dateEnd = new Date(end);
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		System.out.println(formatter.format(responseModel.getRequestedTimestamp()));
		System.out.println(formatter.format(responseModel.getResposeTimestamp()));
		System.out.println("----------in common tasks paytm- status api----------post data ended ------------------------");

	}

	@PostMapping("/testMATM/{rrn}")
	public void testTokenMATM(HttpServletRequest request,HttpServletResponse response,HttpSession httpSession,@PathVariable String rrn) throws ClientProtocolException, IOException
	{	
		//		Gson gson = new GsonBuilder().serializeNulls().create();
		Gson gson = new GsonBuilder()
				.registerTypeAdapter(Timestamp.class, new TimestampAdapter())
				.create();

		AuthenticateUserResponseRRN tokenRequestMATM=new AuthenticateUserResponseRRN();
		String token=jwtUtil.createJWTToken(gson.toJson(tokenRequestMATM),60);
		HttpParams httpParameters = new BasicHttpParams();
		HttpConnectionParams.setSoTimeout(httpParameters, 300000);
		HttpClient httpClient = new DefaultHttpClient();
		String url="https://fpanalytics.tapits.in//fpaepsanalytics/matm/api/reports/rrnsearch/"+rrn;
		HttpGet httpGet = new HttpGet(url);


		if(token!=null)
			httpGet.setHeader("token",token);

		HttpResponse responseData = httpClient.execute(httpGet);

		int responseCode = responseData.getStatusLine().getStatusCode();
		System.out.println("Response code status api : "+responseCode);

		String dataSent ="";

		if (responseCode == 200) 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();

		} 
		else 
		{
			InputStreamReader content = new InputStreamReader(responseData.getEntity().getContent());
			int ch = 0;
			while ((ch = content.read()) != -1) {
				dataSent = dataSent + (char)ch;
			}
			content.close();
		}
		System.out.println("MATM rrn "+dataSent);
		GeneralResponse generalResponse=gson.fromJson(dataSent, GeneralResponse.class);

		CwAndMATMRrnResponseModel responseModel=gson.fromJson(gson.toJson(generalResponse.getData()), CwAndMATMRrnResponseModel.class);
		System.out.println("------------MATM rrn------"+responseModel.getResponseRrn());
		long start = Long.parseLong(String.valueOf(responseModel.getRequestedTimestamp()));//ap
		long end = Long.parseLong(String.valueOf(responseModel.getResposeTimestamp()));
		Date dateStart = new Date(start);
		Date dateEnd = new Date(end);
		DateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		System.out.println(formatter.format(dateStart));
		System.out.println(formatter.format(dateEnd));
		System.out.println("----------in common tasks paytm- status api----------post data ended ------------------------");

	}

	@PostMapping("/testdate")
	public void testdate(HttpServletRequest request,HttpServletResponse response,HttpSession httpSession) throws ClientProtocolException, IOException, ParseException
	{
		 new SimpleDateFormat("yyyy-MM-dd");
		  new SimpleDateFormat("dd-MM-yyyy");
	List<AccountStatementDataV2> a=accountStatementDataV2Repository.findByRrn("121318983628");
	for(AccountStatementDataV2 a1:a)
	{
//    String date=dateFormat.format(a1.getTranDate());
//    System.out.println("before : "+date);
//    Date d=dateFormatter.parse(dateFormatter.format(a1.getTranDate()));
//	System.out.println("after : "+	d);
//	String s=dateFormatter.format(d);
//	System.out.println(s);
//	 String date1=dateFormat.format(a1.getTranDate());
//	    System.out.println("before1 : "+date);
//		System.out.println("after1 : "+	dateFormatter.parse(date1));
		
//		MaCashWithdrawalData maCashWithdrawalData=null;
//		
//		maCashWithdrawalData=maCashWithdrawalDataRepository.findByResponseRrn("111311185223");
//		System.out.println("id : "+maCashWithdrawalData.getId());
		MaCashWithdrawalDataRep responseModelMATM=null;
		//responseModelMATM = commonTasks.getMATMTxnTest("111311185223");
		if(responseModelMATM!=null)
		System.out.println("id : "+responseModelMATM.getResponseRrn());
		else
			System.out.println("null--");
	}
	}
}
server.session.cookie.secure=true
spring.datasource.driver-class-name=com.mysql.jdbc.Driver

spring.datasource.url=jdbc:mysql://fingpaydb.fingpayment.local:3306/fpcontrolpanel
#spring.datasource.url=jdbc:mysql://new-fingpaydb.cmh4vgt6bl1j.ap-south-1.rds.amazonaws.com:3306/fpsettlement
#spring.datasource.url=jdbc:mysql://new-fingpaydb.cmh4vgt6bl1j.ap-south-1.rds.amazonaws.com:3306/fpsettlementdb_uat
spring.datasource.username=fingpaydb
spring.datasource.password=Rds$3211
spring.datasource.name=fpcontrolpanel
#server.port=8083

#spring.datasource.url=jdbc:mysql://localhost:3306/fpsettlementdb_uat
#spring.datasource.username=root
#spring.datasource.password=root
#spring.datasource.name=fpsettlementdb_uat

spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
spring.jpa.hibernate.ddl-auto=none
#spring.jpa.generate-ddl=true
spring.jpa.generate-ddl=false
spring.jpa.show-sql=false

awsemailnotification = 1
awsemailusername = AKIA6J4CMD72T5AF3LUV
awsemailpassword = BFuZ4n7KyaXMZQC/vop0O8RqnkCXvhqPPfgLU67QAldH

emailaddressfornotification = notifications@tapits.in
pinForNotification=Tapits@1234567

#spring.datasource.tomcat.max-wait=60000
#spring.datasource.tomcat.max-active=1200
#spring.datasource.tomcat.max-idle=100
#spring.datasource.tomcat.min-idle=50

spring.datasource.test-while-idle=true
spring.datasource.test-on-borrow=true
server.max-http-header-size=48000


logging.level.root=info
logging.level.org.org.org.springframework.web=DEBUG
logging.level.org.org.org.org.springframework.core=warn
logging.level.org.org.org.springframework.boot=warn
logging.level.org.org.hibernate=error

cancelledChequeImgsPath = /usr/fingpay/controlpanel/cancelchequeimages/
documentUploadPath=/usr/fingpay/controlpanel/bulkUploadFiles/
#uploadTerminalMappingUrl=http://app2.tapits.local/fpcardgendata/api/microatm/datamigration/uploadTerminalMapping


uploadTerminalMappingUrl=https://fpma.tapits.in/fpcardwebservice/api/microatm/datamigration/uploadTerminalMapping
uploadMatmAggMposMapping=https://fpma.tapits.in/fpcardwebservice/api/microatm/datamigration/aggregator/mposserialnumber/mapping



ImagePath=/usr/fingpay/controlpanel/images/	

#uploadTerminalMappingUrl=https://fpma.tapits.in/fpcardwebservice/apirejected_cb_attachments_pathicroatm/datamigration/aggregator/mposserialnumber/mapping

#ImagePath=/usr/fingpay/controlpanel/images/rejected_cb_attachments_path

ImageExtension=png

fraudMerchantsUploadPath = /usr/fingpay/controlpanel/fraudMerchantsUpload/
impsserviceurl = https://impsbc.icicibank.co.in:7474/imps-web-bc/api/transaction/bc/IBCTap00326/p2a?

chargebackfilesUploadPath = /home/ec2-user/chargeback/


parent.compliace.docpath=/home/ec2-user/compliance/parent/
supermerchant.compliance.docpath=/home/ec2-user/compliance/supermerchant/

#CW_RRN_Fetch=https://fpanalytics.tapits.in/fpaepsanalytics/api/transactionSearchRRN/
#CW_RRN_Fetch=https://fpuat.tapits.in/fpaepsanalytics/api/cwPartitionSearchRRN/
#CW_RRN_Fetch=http://10.0.8.8:8080/fpekyctest/api/v1/rrnsearch/rrn/
CW_RRN_Fetch=https://fpekyc.tapits.in/fpdockyc/api/v1/rrnsearch/rrn/
#AP_RRN_Fetch=https://fingpayap.tapits.in/fpaepsweb/api/Merchant/merchantInfo/aadhaarPay/rrn/
#MATM_RRN_Fetch=https://fpanalytics.tapits.in//fpaepsanalytics/matm/api/reports/rrnsearch/


documentUploadPathCB_mngt=/usr/fingpay/chargeBackManagement/
documentUploadPathFraud_mngt=/usr/fingpay/fraudManagement/
UploadfilePathCB_mngt=/usr/fingpay/aggregator_supermerchant_upload_files/
rejected_cb_attachments_path=/usr/fingpay/chargeBackManagement/attachments/

complaintManagementUAT = 0

fundtransferUAT = 0

postthreewayUrl=http://10.0.5.239:8080/fpaepsAnalysis/threewayUploadAndAnamolyGeneration

postthreewaymatmUrl=http://10.0.5.239:8080/fpaepsAnalysis/threewayUploadAndAnamolyGenerationMatmcw

threewaydocumentUploadPath=/usr/fingpay/aeps/threeway/<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE isopackager SYSTEM "genericpackager.dtd">
<isopackager>
	<isofield id="0" length="4" name="MESSAGE TYPE INDICATOR"
		class="org.jpos.iso.IFA_NUMERIC" />
	<!-- <isofield id="1" length="64" name="BIT MAP" class="org.jpos.iso.IFA_BITMAP"/> -->
	<isofield id="2" length="19" name="IIN, AADHARNUMBER"
		class="org.jpos.iso.IFA_LLCHAR" />
	<isofield id="3" length="6" name="PROCESSING CODE"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="4" length="12" name="AMOUNT, TRANSACTION"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="11" length="10" name="STAN NUMBER"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="11" length="6" name="SYSTEM TRACE AUDIT NUMBER"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="22" length="3" name="POS ENTRY MODE"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="24" length="3" name="RESERVED ISO USE"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="25" length="2" name="RESERVED ISO USE"
		class="org.jpos.iso.IFA_NUMERIC" />
	<isofield id="36" length="999" name="TRANSACTION"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="39" length="999" name="RESPONSE"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="41" length="8" name="TERMINAL ID"
		class="org.jpos.iso.IFA_LLCHAR" />
	<isofield id="42" length="999" name="MERCHANT ID"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="60" length="999" name="PIDBLOCK"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="62" length="999" name="RESPONSE UID AUTH CODE"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="102" length="999"
		name="RESPONSE DEBIT ACCOUNT NUMBER" class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="103" length="999"
		name="RESPONSE CREDIT ACCOUNT NUMBER" class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="120" length="999" name="DETAILS OF TRANSACTIONS"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="125" length="999"
		name="AEPS TRANSACTION IDENTIFIER" class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="126" length="999" name="TLV DATA"
		class="org.jpos.iso.IFA_LLLCHAR" />
	<isofield id="127" length="999" name="AEPS ADDITIONAL FIELD"
		class="org.jpos.iso.IFA_LLLCHAR" />
</isopackager>#
log4j.appender.AadhaarPay = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AadhaarPay.File = /u01/icici/AEPS/logs/AadhaarPay.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.AadhaarPay.Append=true
log4j.appender.AadhaarPay.Encoding=UTF-8
log4j.appender.AadhaarPay.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AadhaarPay.layout = org.apache.log4j.PatternLayout
log4j.appender.AadhaarPay.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AadhaarPay = DEBUG, AadhaarPay

#
log4j.appender.CashWithdrawal = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashWithdrawal.File = /u01/icici/AEPS/logs/CashWithdrawal.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CashWithdrawal.Append=true
log4j.appender.CashWithdrawal.Encoding=UTF-8
log4j.appender.CashWithdrawal.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashWithdrawal.layout = org.apache.log4j.PatternLayout
log4j.appender.CashWithdrawal.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashWithdrawal = DEBUG, CashWithdrawal

#
log4j.appender.DMTController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.DMTController.File = /u01/icici/AEPS/logs/DMTController.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.DMTController.Append=true
log4j.appender.DMTController.Encoding=UTF-8
log4j.appender.DMTController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.DMTController.layout = org.apache.log4j.PatternLayout
log4j.appender.DMTController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.DMTController = DEBUG, DMTController

#
log4j.appender.MPOSService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.MPOSService.File = /u01/icici/AEPS/logs/MPOSService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.MPOSService.Append=true
log4j.appender.MPOSService.Encoding=UTF-8
log4j.appender.MPOSService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.MPOSService.layout = org.apache.log4j.PatternLayout
log4j.appender.MPOSService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.MPOSService = DEBUG, MPOSService

##
#log4j.appender.UPIController = org.apache.log4j.DailyRollingFileAppender
#log4j.appender.UPIController.File = /u01/icici/AEPS/logs/UPIController.log
##log4j.appender.file.MaxFileSize = 5MB
##log4j.appender.file.MaxBackupIndex = 10
#log4j.appender.UPIController.Encoding=UTF-8
#log4j.appender.UPIController.DatePattern='.'yyyy-MM-dd'.log'
#log4j.appender.UPIController.layout = org.apache.log4j.PatternLayout
#log4j.appender.UPIController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
#log4j.logger.UPIController = DEBUG, UPIController

#
log4j.appender.DemandSheetDataByLoanAccountNumberLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.File = /u01/icici/AEPS/logs/DemandSheetDataByLoanAccountNumberLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.Append=true
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.Encoding=UTF-8
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.DemandSheetDataByLoanAccountNumberLogger = DEBUG, DemandSheetDataByLoanAccountNumberLogger

#
log4j.appender.BalanceInquiry = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BalanceInquiry.File = /u01/icici/AEPS/logs/BalanceInquiry.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BalanceInquiry.Append=true
log4j.appender.BalanceInquiry.Encoding=UTF-8
log4j.appender.BalanceInquiry.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BalanceInquiry.layout = org.apache.log4j.PatternLayout
log4j.appender.BalanceInquiry.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BalanceInquiry = DEBUG, BalanceInquiry

#
log4j.appender.collectedDataBasedOnDateLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.collectedDataBasedOnDateLogger.File = /u01/icici/AEPS/logs/collectedDataBasedOnDateLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.collectedDataBasedOnDateLogger.Append=true
log4j.appender.collectedDataBasedOnDateLogger.Encoding=UTF-8
log4j.appender.collectedDataBasedOnDateLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.collectedDataBasedOnDateLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.collectedDataBasedOnDateLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.collectedDataBasedOnDateLogger = DEBUG, collectedDataBasedOnDateLogger

#
log4j.appender.dropCashAgentRequestForQrLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dropCashAgentRequestForQrLogger.File = /u01/icici/AEPS/logs/dropCashAgentRequestForQrLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.dropCashAgentRequestForQrLogger.Append=true
log4j.appender.dropCashAgentRequestForQrLogger.Encoding=UTF-8
log4j.appender.dropCashAgentRequestForQrLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.dropCashAgentRequestForQrLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.dropCashAgentRequestForQrLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.dropCashAgentRequestForQrLogger = DEBUG, dropCashAgentRequestForQrLogger

#
log4j.appender.collectCashBcRequestLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.collectCashBcRequestLogger.File = /u01/icici/AEPS/logs/collectCashBcRequestLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.collectCashBcRequestLogger.Append=true
log4j.appender.collectCashBcRequestLogger.Encoding=UTF-8
log4j.appender.collectCashBcRequestLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.collectCashBcRequestLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.collectCashBcRequestLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.collectCashBcRequestLogger = DEBUG, collectCashBcRequestLogger

#
log4j.appender.MiniStatement = org.apache.log4j.DailyRollingFileAppender
log4j.appender.MiniStatement.File = /u01/icici/AEPS/logs/MiniStatement.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.MiniStatement.Append=true
log4j.appender.MiniStatement.Encoding=UTF-8
log4j.appender.MiniStatement.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.MiniStatement.layout = org.apache.log4j.PatternLayout
log4j.appender.MiniStatement.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.MiniStatement = DEBUG, MiniStatement

#
log4j.appender.AuthenticateController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AuthenticateController.File = /u01/icici/AEPS/logs/AuthenticateController.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.AuthenticateController.Append=true
log4j.appender.AuthenticateController.Encoding=UTF-8
log4j.appender.AuthenticateController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AuthenticateController.layout = org.apache.log4j.PatternLayout
log4j.appender.AuthenticateController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AuthenticateController = DEBUG, AuthenticateController

#
log4j.appender.AadhaarPayV2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AadhaarPayV2.File = /u01/icici/AEPS/logs/AadhaarPayV2.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.AadhaarPayV2.Append=true
log4j.appender.AadhaarPayV2.Encoding=UTF-8
log4j.appender.AadhaarPayV2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AadhaarPayV2.layout = org.apache.log4j.PatternLayout
log4j.appender.AadhaarPayV2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AadhaarPayV2 = DEBUG, AadhaarPayV2

#
log4j.appender.UPIController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.UPIController.File = /u01/icici/AEPS/logs/UPIController.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.UPIController.Append=true
log4j.appender.UPIController.Encoding=UTF-8
log4j.appender.UPIController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.UPIController.layout = org.apache.log4j.PatternLayout
log4j.appender.UPIController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.UPIController = DEBUG, UPIController

#
log4j.appender.UPIQRController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.UPIQRController.File = /u01/icici/AEPS/logs/UPIQRController.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.UPIQRController.Append=true
log4j.appender.UPIQRController.Encoding=UTF-8
log4j.appender.UPIQRController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.UPIQRController.layout = org.apache.log4j.PatternLayout
log4j.appender.UPIQRController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.UPIQRController = DEBUG, UPIQRController

#
log4j.appender.IRISServices = org.apache.log4j.DailyRollingFileAppender
log4j.appender.IRISServices.File = /u01/icici/AEPS/logs/IRISServices.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.IRISServices.Append=true
log4j.appender.IRISServices.Encoding=UTF-8
log4j.appender.IRISServices.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.IRISServices.layout = org.apache.log4j.PatternLayout
log4j.appender.IRISServices.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.IRISServices = DEBUG, IRISServices

#
log4j.appender.CorporateServicesControllerLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CorporateServicesControllerLogger.File = /u01/icici/AEPS/logs/CorporateServicesControllerLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CorporateServicesControllerLogger.Append=true
log4j.appender.CorporateServicesControllerLogger.Encoding=UTF-8
log4j.appender.CorporateServicesControllerLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CorporateServicesControllerLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.CorporateServicesControllerLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CorporateServicesControllerLogger = DEBUG, CorporateServicesController

#
log4j.appender.DemandSheetDataByLoanAccountNumberLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.File = /u01/icici/AEPS/logs/DemandSheetDataByLoanAccountNumberLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.Append=true
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.Encoding=UTF-8
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.DemandSheetDataByLoanAccountNumberLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.DemandSheetDataByLoanAccountNumberLogger = DEBUG, DemandSheetDataByLoanAccountNumberLogger

#
log4j.appender.CorporateServicesController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CorporateServicesController.File = /u01/icici/AEPS/logs/CorporateServicesController.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CorporateServicesController.Append=true
log4j.appender.CorporateServicesController.Encoding=UTF-8
log4j.appender.CorporateServicesController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CorporateServicesController.layout = org.apache.log4j.PatternLayout
log4j.appender.CorporateServicesController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CorporateServicesController = DEBUG, CorporateServicesController

#
log4j.appender.CashDeposit = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashDeposit.File = /u01/icici/AEPS/logs/CashDeposit.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CashDeposit.Append=true
log4j.appender.CashDeposit.Encoding=UTF-8
log4j.appender.CashDeposit.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashDeposit.layout = org.apache.log4j.PatternLayout
log4j.appender.CashDeposit.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashDeposit = DEBUG, CashDeposit

#
log4j.appender.FundTransferAdhaarToAccount = org.apache.log4j.DailyRollingFileAppender
log4j.appender.FundTransferAdhaarToAccount.File = /u01/icici/AEPS/logs/FundTransferAdhaarToAccount.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.FundTransferAdhaarToAccount.Append=true
log4j.appender.FundTransferAdhaarToAccount.Encoding=UTF-8
log4j.appender.FundTransferAdhaarToAccount.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.FundTransferAdhaarToAccount.layout = org.apache.log4j.PatternLayout
log4j.appender.FundTransferAdhaarToAccount.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.FundTransferAdhaarToAccount = DEBUG, FundTransferAdhaarToAccount


#
log4j.appender.FundTransferAdhaarToAdhaar = org.apache.log4j.DailyRollingFileAppender
log4j.appender.FundTransferAdhaarToAdhaar.File = /u01/icici/AEPS/logs/FundTransferAdhaarToAdhaar.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.FundTransferAdhaarToAdhaar.Append=true
log4j.appender.FundTransferAdhaarToAdhaar.Encoding=UTF-8
log4j.appender.FundTransferAdhaarToAdhaar.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.FundTransferAdhaarToAdhaar.layout = org.apache.log4j.PatternLayout
log4j.appender.FundTransferAdhaarToAdhaar.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.FundTransferAdhaarToAdhaar = DEBUG, FundTransferAdhaarToAdhaar

#
log4j.appender.bajajSendOtpLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.bajajSendOtpLogger.File = /u01/icici/AEPS/logs/bajajSendOtpLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.bajajSendOtpLogger.Append=true
log4j.appender.bajajSendOtpLogger.Encoding=UTF-8
log4j.appender.bajajSendOtpLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.bajajSendOtpLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.bajajSendOtpLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.bajajSendOtpLogger = DEBUG, bajajSendOtpLogger


#
log4j.appender.BajajAgentPostPaymentService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BajajAgentPostPaymentService.File = /u01/icici/AEPS/logs/BajajAgentPostPaymentService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BajajAgentPostPaymentService.Append=true
log4j.appender.BajajAgentPostPaymentService.Encoding=UTF-8
log4j.appender.BajajAgentPostPaymentService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BajajAgentPostPaymentService.layout = org.apache.log4j.PatternLayout
log4j.appender.BajajAgentPostPaymentService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BajajAgentPostPaymentService = DEBUG, BajajAgentPostPaymentService


#
log4j.appender.BajajAgentRequestService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BajajAgentRequestService.File = /u01/icici/AEPS/logs/BajajAgentRequestService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BajajAgentRequestService.Append=true
log4j.appender.BajajAgentRequestService.Encoding=UTF-8
log4j.appender.BajajAgentRequestService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BajajAgentRequestService.layout = org.apache.log4j.PatternLayout
log4j.appender.BajajAgentRequestService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BajajAgentRequestService = DEBUG, BajajAgentRequestService

#
log4j.appender.SvatantraPostPaymentService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SvatantraPostPaymentService.File = /u01/icici/AEPS/logs/SvatantraPostPaymentService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.SvatantraPostPaymentService.Append=true
log4j.appender.SvatantraPostPaymentService.Encoding=UTF-8
log4j.appender.SvatantraPostPaymentService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SvatantraPostPaymentService.layout = org.apache.log4j.PatternLayout
log4j.appender.SvatantraPostPaymentService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SvatantraPostPaymentService = DEBUG, SvatantraPostPaymentService

#
log4j.appender.SvatantraCustomerRequestService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SvatantraCustomerRequestService.File = /u01/icici/AEPS/logs/SvatantraCustomerRequestService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.SvatantraCustomerRequestService.Append=true
log4j.appender.SvatantraCustomerRequestService.Encoding=UTF-8
log4j.appender.SvatantraCustomerRequestService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SvatantraCustomerRequestService.layout = org.apache.log4j.PatternLayout
log4j.appender.SvatantraCustomerRequestService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SvatantraCustomerRequestService = DEBUG, SvatantraCustomerRequestService

#
log4j.appender.BajajCustomerRequeryLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BajajCustomerRequeryLogger.File = /u01/icici/AEPS/logs/BajajCustomerRequeryLogger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BajajCustomerRequeryLogger.Append=true
log4j.appender.BajajCustomerRequeryLogger.Encoding=UTF-8
log4j.appender.BajajCustomerRequeryLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BajajCustomerRequeryLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.BajajCustomerRequeryLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BajajCustomerRequeryLogger = DEBUG, BajajCustomerRequeryLogger

#
log4j.appender.PostPaymentInitiateV2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PostPaymentInitiateV2.File = /u01/icici/AEPS/logs/PostPaymentInitiateV2.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PostPaymentInitiateV2.Append=true
log4j.appender.PostPaymentInitiateV2.Encoding=UTF-8
log4j.appender.PostPaymentInitiateV2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PostPaymentInitiateV2.layout = org.apache.log4j.PatternLayout
log4j.appender.PostPaymentInitiateV2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PostPaymentInitiateV2 = DEBUG, PostPaymentInitiateV2

#
log4j.appender.AgentRequestV2Logger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AgentRequestV2Logger.File = /u01/icici/AEPS/logs/AgentRequestV2Logger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.AgentRequestV2Logger.Append=true
log4j.appender.AgentRequestV2Logger.Encoding=UTF-8
log4j.appender.AgentRequestV2Logger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AgentRequestV2Logger.layout = org.apache.log4j.PatternLayout
log4j.appender.AgentRequestV2Logger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AgentRequestV2Logger = DEBUG, AgentRequestV2Logger

#
log4j.appender.PostPaymentV3Service = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PostPaymentV3Service.File = /u01/icici/AEPS/logs/PostPaymentV3Service.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PostPaymentV3Service.Append=true
log4j.appender.PostPaymentV3Service.Encoding=UTF-8
log4j.appender.PostPaymentV3Service.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PostPaymentV3Service.layout = org.apache.log4j.PatternLayout
log4j.appender.PostPaymentV3Service.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PostPaymentV3Service = DEBUG, PostPaymentV3Service

#
log4j.appender.SvatantraPostPaymentV2Service = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SvatantraPostPaymentV2Service.File = /u01/icici/AEPS/logs/SvatantraPostPaymentV2Service.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.SvatantraPostPaymentV2Service.Append=true
log4j.appender.SvatantraPostPaymentV2Service.Encoding=UTF-8
log4j.appender.SvatantraPostPaymentV2Service.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SvatantraPostPaymentV2Service.layout = org.apache.log4j.PatternLayout
log4j.appender.SvatantraPostPaymentV2Service.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SvatantraPostPaymentV2Service = DEBUG, SvatantraPostPaymentV2Service

#
log4j.appender.SvatantraInitiatePaymentService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SvatantraInitiatePaymentService.File = /u01/icici/AEPS/logs/SvatantraInitiatePaymentService.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.SvatantraInitiatePaymentService.Append=true
log4j.appender.SvatantraInitiatePaymentService.Encoding=UTF-8
log4j.appender.SvatantraInitiatePaymentService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SvatantraInitiatePaymentService.layout = org.apache.log4j.PatternLayout
log4j.appender.SvatantraInitiatePaymentService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SvatantraInitiatePaymentService = DEBUG, SvatantraInitiatePaymentService

#
log4j.appender.MiniStatement = org.apache.log4j.DailyRollingFileAppender
log4j.appender.MiniStatement.File = /u01/icici/AEPS/logs/MiniStatement.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.MiniStatement.Append=true
log4j.appender.MiniStatement.Encoding=UTF-8
log4j.appender.MiniStatement.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.MiniStatement.layout = org.apache.log4j.PatternLayout
log4j.appender.MiniStatement.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.MiniStatement = DEBUG, MiniStatement

#
log4j.appender.AgentRequestV3Logger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AgentRequestV3Logger.File = /u01/icici/AEPS/logs/AgentRequestV3Logger.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.AgentRequestV3Logger.Append=true
log4j.appender.AgentRequestV3Logger.Encoding=UTF-8
log4j.appender.AgentRequestV3Logger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AgentRequestV3Logger.layout = org.apache.log4j.PatternLayout
log4j.appender.AgentRequestV3Logger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AgentRequestV3Logger = DEBUG, AgentRequestV3Logger

#
log4j.appender.dropCashAgentRequestv2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dropCashAgentRequestv2.File = /u01/icici/AEPS/logs/dropCashAgentRequestv2.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.dropCashAgentRequestv2.Append=true
log4j.appender.dropCashAgentRequestv2.Encoding=UTF-8
log4j.appender.dropCashAgentRequestv2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.dropCashAgentRequestv2.layout = org.apache.log4j.PatternLayout
log4j.appender.dropCashAgentRequestv2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.dropCashAgentRequestv2 = DEBUG, dropCashAgentRequestv2

#
log4j.appender.dropCashAgentRequestV3 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.dropCashAgentRequestV3.File = /u01/icici/AEPS/logs/dropCashAgentRequestV3.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.dropCashAgentRequestV3.Append=true
log4j.appender.dropCashAgentRequestV3.Encoding=UTF-8
log4j.appender.dropCashAgentRequestV3.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.dropCashAgentRequestV3.layout = org.apache.log4j.PatternLayout
log4j.appender.dropCashAgentRequestV3.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.dropCashAgentRequestV3 = DEBUG, dropCashAgentRequestV3

#
log4j.appender.collectCashBcRequestV2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.collectCashBcRequestV2.File = /u01/icici/AEPS/logs/collectCashBcRequestV2.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.collectCashBcRequestV2.Append=true
log4j.appender.collectCashBcRequestV2.Encoding=UTF-8
log4j.appender.collectCashBcRequestV2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.collectCashBcRequestV2.layout = org.apache.log4j.PatternLayout
log4j.appender.collectCashBcRequestV2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.collectCashBcRequestV2 = DEBUG, collectCashBcRequestV2

#
log4j.appender.BajajCustomerPostPaymentInitiate = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BajajCustomerPostPaymentInitiate.File = /u01/icici/AEPS/logs/BajajCustomerPostPaymentInitiate.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BajajCustomerPostPaymentInitiate.Append=true
log4j.appender.BajajCustomerPostPaymentInitiate.Encoding=UTF-8
log4j.appender.BajajCustomerPostPaymentInitiate.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BajajCustomerPostPaymentInitiate.layout = org.apache.log4j.PatternLayout
log4j.appender.BajajCustomerPostPaymentInitiate.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BajajCustomerPostPaymentInitiate = DEBUG, BajajCustomerPostPaymentInitiate

#
log4j.appender.BajajCustomerPostPaymentV2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BajajCustomerPostPaymentV2.File = /u01/icici/AEPS/logs/BajajCustomerPostPaymentV2.log
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.BajajCustomerPostPaymentV2.Append=true
log4j.appender.BajajCustomerPostPaymentV2.Encoding=UTF-8
log4j.appender.BajajCustomerPostPaymentV2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BajajCustomerPostPaymentV2.layout = org.apache.log4j.PatternLayout
log4j.appender.BajajCustomerPostPaymentV2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BajajCustomerPostPaymentV2 = DEBUG, BajajCustomerPostPaymentV2


#
log4j.appender.PaymentGateWayRequestFromDevice = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayRequestFromDevice.File = /u01/icici/AEPS/logs/PaymentGateWayRequestFromDevice.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayRequestFromDevice.Append=true
log4j.appender.PaymentGateWayRequestFromDevice.Encoding=UTF-8
log4j.appender.PaymentGateWayRequestFromDevice.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayRequestFromDevice.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayRequestFromDevice.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayRequestFromDevice = DEBUG, PaymentGateWayRequestFromDevice

#
log4j.appender.PaymentGateWayURLRequest = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayURLRequest.File = /u01/icici/AEPS/logs/PaymentGateWayURLRequest.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayURLRequest.Append=true
log4j.appender.PaymentGateWayURLRequest.Encoding=UTF-8
log4j.appender.PaymentGateWayURLRequest.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayURLRequest.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayURLRequest.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayURLRequest = DEBUG, PaymentGateWayURLRequest

#
log4j.appender.CashFreeCallBackRequestDataModel = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashFreeCallBackRequestDataModel.File = /u01/icici/AEPS/logs/CashFreeCallBackRequestDataModel.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CashFreeCallBackRequestDataModel.Append=true
log4j.appender.CashFreeCallBackRequestDataModel.Encoding=UTF-8
log4j.appender.CashFreeCallBackRequestDataModel.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashFreeCallBackRequestDataModel.layout = org.apache.log4j.PatternLayout
log4j.appender.CashFreeCallBackRequestDataModel.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashFreeCallBackRequestDataModel = DEBUG, CashFreeCallBackRequestDataModel

#
log4j.appender.PaymentGateWayHistoryLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayHistoryLogger.File = /u01/icici/AEPS/logs/PaymentGateWayHistoryLogger.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayHistoryLogger.Append=true
log4j.appender.PaymentGateWayHistoryLogger.Encoding=UTF-8
log4j.appender.PaymentGateWayHistoryLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayHistoryLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayHistoryLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayHistoryLogger = DEBUG, PaymentGateWayHistoryLogger

#
log4j.appender.samastaCashDropCallBack = org.apache.log4j.DailyRollingFileAppender
log4j.appender.samastaCashDropCallBack.File = /u01/icici/AEPS/logs/samastaCashDropCallBack.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.samastaCashDropCallBack.Append=true
log4j.appender.samastaCashDropCallBack.Encoding=UTF-8
log4j.appender.samastaCashDropCallBack.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.samastaCashDropCallBack.layout = org.apache.log4j.PatternLayout
log4j.appender.samastaCashDropCallBack.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.samastaCashDropCallBack = DEBUG, samastaCashDropCallBack


# 
log4j.appender.ThreewayReconAggregatorsLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ThreewayReconAggregatorsLogger.File = /u01/icici/AEPS/logs/ThreewayReconAggregatorsLogger.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.ThreewayReconAggregatorsLogger.Append=true
log4j.appender.ThreewayReconAggregatorsLogger.Encoding=UTF-8
log4j.appender.ThreewayReconAggregatorsLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.ThreewayReconAggregatorsLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.ThreewayReconAggregatorsLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.ThreewayReconAggregatorsLogger = DEBUG, ThreewayReconAggregatorsLogger

#
log4j.appender.PaymentGateWayURLRequest = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayURLRequest.File = /u01/icici/AEPS/logs/PaymentGateWayURLRequest.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayURLRequest.Append=true
log4j.appender.PaymentGateWayURLRequest.Encoding=UTF-8
log4j.appender.PaymentGateWayURLRequest.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayURLRequest.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayURLRequest.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayURLRequest = DEBUG, PaymentGateWayURLRequest

#
log4j.appender.CashFreeCallBackRequestDataModel = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashFreeCallBackRequestDataModel.File = /u01/icici/AEPS/logs/CashFreeCallBackRequestDataModel.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.CashFreeCallBackRequestDataModel.Append=true
log4j.appender.CashFreeCallBackRequestDataModel.Encoding=UTF-8
log4j.appender.CashFreeCallBackRequestDataModel.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashFreeCallBackRequestDataModel.layout = org.apache.log4j.PatternLayout
log4j.appender.CashFreeCallBackRequestDataModel.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashFreeCallBackRequestDataModel = DEBUG, CashFreeCallBackRequestDataModel

#
log4j.appender.PaymentGateWayHistoryLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayHistoryLogger.File = /u01/icici/AEPS/logs/PaymentGateWayHistoryLogger.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayHistoryLogger.Append=true
log4j.appender.PaymentGateWayHistoryLogger.Encoding=UTF-8
log4j.appender.PaymentGateWayHistoryLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayHistoryLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayHistoryLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayHistoryLogger = DEBUG, PaymentGateWayHistoryLogger

#
log4j.appender.PaymentGateWayRequestFromDeviceV2 = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaymentGateWayRequestFromDeviceV2.File = /u01/icici/AEPS/logs/PaymentGateWayRequestFromDeviceV2.log
#
#log4j.appender.file.MaxFileSize = 5MB
#log4j.appender.file.MaxBackupIndex = 10
log4j.appender.PaymentGateWayRequestFromDeviceV2.Append=true
log4j.appender.PaymentGateWayRequestFromDeviceV2.Encoding=UTF-8
log4j.appender.PaymentGateWayRequestFromDeviceV2.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaymentGateWayRequestFromDeviceV2.layout = org.apache.log4j.PatternLayout
log4j.appender.PaymentGateWayRequestFromDeviceV2.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaymentGateWayRequestFromDeviceV2 = DEBUG, PaymentGateWayRequestFromDeviceV2

#
log4j.appender.svatantraDemandDataPgUpiQr = org.apache.log4j.DailyRollingFileAppender
log4j.appender.svatantraDemandDataPgUpiQr.File = /u01/icici/AEPS/logs/svatantraDemandDataPgUpiQr.log
log4j.appender.svatantraDemandDataPgUpiQr.Append=true
log4j.appender.svatantraDemandDataPgUpiQr.Encoding=UTF-8
log4j.appender.svatantraDemandDataPgUpiQr.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.svatantraDemandDataPgUpiQr.layout = org.apache.log4j.PatternLayout
log4j.appender.svatantraDemandDataPgUpiQr.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.svatantraDemandDataPgUpiQr = DEBUG, svatantraDemandDataPgUpiQr

#
log4j.appender.CashDepositOtpMerchantPHPService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashDepositOtpMerchantPHPService.File = /u01/icici/AEPS/logs/CashDepositOtpMerchantPHPService.log
log4j.appender.CashDepositOtpMerchantPHPService.Append=true
log4j.appender.CashDepositOtpMerchantPHPService.Encoding=UTF-8
log4j.appender.CashDepositOtpMerchantPHPService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashDepositOtpMerchantPHPService.layout = org.apache.log4j.PatternLayout
log4j.appender.CashDepositOtpMerchantPHPService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashDepositOtpMerchantPHPService = DEBUG, CashDepositOtpMerchantPHPService

#
log4j.appender.CashDepositGenOtpService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashDepositGenOtpService.File = /u01/icici/AEPS/logs/CashDepositGenOtpService.log
log4j.appender.CashDepositGenOtpService.Append=true
log4j.appender.CashDepositGenOtpService.Encoding=UTF-8
log4j.appender.CashDepositGenOtpService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashDepositGenOtpService.layout = org.apache.log4j.PatternLayout
log4j.appender.CashDepositGenOtpService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashDepositGenOtpService = DEBUG, CashDepositGenOtpService

#
log4j.appender.CashDepositWithOtpValidate = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashDepositWithOtpValidate.File = /u01/icici/AEPS/logs/CashDepositWithOtpValidate.log
log4j.appender.CashDepositWithOtpValidate.Append=true
log4j.appender.CashDepositWithOtpValidate.Encoding=UTF-8
log4j.appender.CashDepositWithOtpValidate.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashDepositWithOtpValidate.layout = org.apache.log4j.PatternLayout
log4j.appender.CashDepositWithOtpValidate.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashDepositWithOtpValidate = DEBUG, CashDepositWithOtpValidate

#
log4j.appender.CashDepositWithOtpTransaction = org.apache.log4j.DailyRollingFileAppender
log4j.appender.CashDepositWithOtpTransaction.File = /u01/icici/AEPS/logs/CashDepositWithOtpTransaction.log
log4j.appender.CashDepositWithOtpTransaction.Append=true
log4j.appender.CashDepositWithOtpTransaction.Encoding=UTF-8
log4j.appender.CashDepositWithOtpTransaction.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.CashDepositWithOtpTransaction.layout = org.apache.log4j.PatternLayout
log4j.appender.CashDepositWithOtpTransaction.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.CashDepositWithOtpTransaction = DEBUG, CashDepositWithOtpTransaction

#
log4j.appender.TwoFactorAuthentication = org.apache.log4j.DailyRollingFileAppender
log4j.appender.TwoFactorAuthentication.File = /u01/icici/AEPS/logs/TwoFactorAuthentication.log
log4j.appender.TwoFactorAuthentication.Append=true
log4j.appender.TwoFactorAuthentication.Encoding=UTF-8
log4j.appender.TwoFactorAuthentication.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.TwoFactorAuthentication.layout = org.apache.log4j.PatternLayout
log4j.appender.TwoFactorAuthentication.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.TwoFactorAuthentication = DEBUG, TwoFactorAuthentication


#
log4j.appender.FacialVerfication = org.apache.log4j.DailyRollingFileAppender
log4j.appender.FacialVerfication.File = /u01/icici/AEPS/logs/FacialVerfication.log
log4j.appender.FacialVerfication.Append=true
log4j.appender.FacialVerfication.Encoding=UTF-8
log4j.appender.FacialVerfication.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.FacialVerfication.layout = org.apache.log4j.PatternLayout
log4j.appender.FacialVerfication.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.FacialVerfication = DEBUG, FacialVerfication

#
log4j.appender.EKycController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.EKycController.File = /u01/icici/AEPS/logs/EKycController.log
log4j.appender.EKycController.Append=true
log4j.appender.EKycController.Encoding=UTF-8
log4j.appender.EKycController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.EKycController.layout = org.apache.log4j.PatternLayout
log4j.appender.EKycController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.EKycController = DEBUG, EKycController


#
log4j.appender.UPICallBackLogger = org.apache.log4j.DailyRollingFileAppender
log4j.appender.UPICallBackLogger.File = /u01/icici/AEPS/logs/UPICallBackLogger.log
log4j.appender.UPICallBackLogger.Append=true
log4j.appender.UPICallBackLogger.Encoding=UTF-8
log4j.appender.UPICallBackLogger.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.UPICallBackLogger.layout = org.apache.log4j.PatternLayout
log4j.appender.UPICallBackLogger.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.UPICallBackLogger = DEBUG, UPICallBackLogger


#
log4j.appender.SamastaCashDropInitiatePayment = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SamastaCashDropInitiatePayment.File = /u01/icici/AEPS/logs/SamastaCashDropInitiatePayment.log
log4j.appender.SamastaCashDropInitiatePayment.Append=true
log4j.appender.SamastaCashDropInitiatePayment.Encoding=UTF-8
log4j.appender.SamastaCashDropInitiatePayment.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SamastaCashDropInitiatePayment.layout = org.apache.log4j.PatternLayout
log4j.appender.SamastaCashDropInitiatePayment.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SamastaCashDropInitiatePayment = DEBUG, UPICallBackLogger


log4j.appender.BankDetailsMC = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BankDetailsMC.File = /u01/controlpanel/logs/BankDetailsMC.log
#log4j.appender.BankDetailsMC.File = F:/FingPay/git_projects/fpcontrolpanel_GitProject/fpcontrolpanel/home/logs/BankDetailsMC.log
log4j.appender.BankDetailsMC.Append=true
log4j.appender.BankDetailsMC.Encoding=UTF-8
log4j.appender.BankDetailsMC.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BankDetailsMC.layout = org.apache.log4j.PatternLayout
log4j.appender.BankDetailsMC.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BankDetailsMC = DEBUG, BankDetailsMC

log4j.appender.SettlAdjustMC = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SettlAdjustMC.File = /u01/controlpanel/logs/SettlAdjustMC.log
#log4j.appender.SettlAdjustMC.File = F:/FingPay/git_projects/fpcontrolpanel_GitProject/fpcontrolpanel/home/logs/SettlAdjustMC.log
log4j.appender.SettlAdjustMC.Append=true
log4j.appender.SettlAdjustMC.Encoding=UTF-8
log4j.appender.SettlAdjustMC.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SettlAdjustMC.layout = org.apache.log4j.PatternLayout
log4j.appender.SettlAdjustMC.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SettlAdjustMC = DEBUG, SettlAdjustMC

log4j.appender.SettlDetailsMC = org.apache.log4j.DailyRollingFileAppender
log4j.appender.SettlDetailsMC.File = /u01/controlpanel/logs/SettlDetailsMC.log
#log4j.appender.SettlDetailsMC.File = F:/FingPay/git_projects/fpcontrolpanel_GitProject/fpcontrolpanel/home/logs/SettlDetailsMC.log
log4j.appender.SettlDetailsMC.Append=true
log4j.appender.SettlDetailsMC.Encoding=UTF-8
log4j.appender.SettlDetailsMC.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.SettlDetailsMC.layout = org.apache.log4j.PatternLayout
log4j.appender.SettlDetailsMC.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.SettlDetailsMC = DEBUG, SettlDetailsMC

log4j.appender.UPIRefund = org.apache.log4j.DailyRollingFileAppender
log4j.appender.UPIRefund.File = /u01/controlpanel/logs/UPIRefund.log
#log4j.appender.SettlDetailsMC.File = F:/FingPay/git_projects/fpcontrolpanel_GitProject/fpcontrolpanel/home/logs/UPIRefund.log
log4j.appender.UPIRefund.Append=true
log4j.appender.UPIRefund.Encoding=UTF-8
log4j.appender.UPIRefund.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.UPIRefund.layout = org.apache.log4j.PatternLayout
log4j.appender.UPIRefund.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.UPIRefund = DEBUG, UPIRefund

log4j.appender.OTPCall = org.apache.log4j.DailyRollingFileAppender
log4j.appender.OTPCall.File = /u01/controlpanel/logs/OTPCall.log
log4j.appender.OTPCall.Append=true
log4j.appender.OTPCall.Encoding=UTF-8
log4j.appender.OTPCall.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.OTPCall.layout = org.apache.log4j.PatternLayout
log4j.appender.OTPCall.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.OTPCall = DEBUG, OTPCall

log4j.appender.Ekycreports = org.apache.log4j.DailyRollingFileAppender
log4j.appender.Ekycreports.File = /u01/controlpanel/logs/Ekycreports.log
log4j.appender.Ekycreports.Append=true
log4j.appender.Ekycreports.Encoding=UTF-8
log4j.appender.Ekycreports.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.Ekycreports.layout = org.apache.log4j.PatternLayout
log4j.appender.Ekycreports.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.Ekycreports = DEBUG, Ekycreports

log4j.appender.ControlPanelAccessPermissions = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ControlPanelAccessPermissions.File = /u01/controlpanel/logs/ControlPanelAccessPermissions.log
log4j.appender.ControlPanelAccessPermissions.Append=true
log4j.appender.ControlPanelAccessPermissions.Encoding=UTF-8
log4j.appender.ControlPanelAccessPermissions.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.ControlPanelAccessPermissions.layout = org.apache.log4j.PatternLayout
log4j.appender.ControlPanelAccessPermissions.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.ControlPanelAccessPermissions = DEBUG, ControlPanelAccessPermissions

log4j.appender.BlockFraudMerchantController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BlockFraudMerchantController.File = /u01/controlpanel/logs/BlockFraudMerchantController.log
log4j.appender.BlockFraudMerchantController.Append=true
log4j.appender.BlockFraudMerchantController.Encoding=UTF-8
log4j.appender.BlockFraudMerchantController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BlockFraudMerchantController.layout = org.apache.log4j.PatternLayout
log4j.appender.BlockFraudMerchantController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BlockFraudMerchantController = DEBUG, BlockFraudMerchantController


log4j.appender.AssignFeaturePermission = org.apache.log4j.DailyRollingFileAppender
log4j.appender.AssignFeaturePermission.File = /u01/controlpanel/logs/AssignFeaturePermission.log
log4j.appender.AssignFeaturePermission.Append=true
log4j.appender.AssignFeaturePermission.Encoding=UTF-8
log4j.appender.AssignFeaturePermission.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.AssignFeaturePermission.layout = org.apache.log4j.PatternLayout
log4j.appender.AssignFeaturePermission.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.AssignFeaturePermission = DEBUG, AssignFeaturePermission

log4j.appender.EmailNotificationsController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.EmailNotificationsController.File = /u01/controlpanel/logs/EmailNotificationsController.log
log4j.appender.EmailNotificationsController.Append=true
log4j.appender.EmailNotificationsController.Encoding=UTF-8
log4j.appender.EmailNotificationsController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.EmailNotificationsController.layout = org.apache.log4j.PatternLayout
log4j.appender.EmailNotificationsController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.EmailNotificationsController = DEBUG, EmailNotificationsController

log4j.appender.BaseService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.BaseService.File = /u01/controlpanel/logs/BaseService.log
log4j.appender.BaseService.Append=true
log4j.appender.BaseService.Encoding=UTF-8
log4j.appender.BaseService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.BaseService.layout = org.apache.log4j.PatternLayout
log4j.appender.BaseService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.BaseService = DEBUG, BaseService

log4j.appender.iciciService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.iciciService.File = /u01/controlpanel/logs/ICICIService.log
log4j.appender.iciciService.Append=true
log4j.appender.iciciService	.Encoding=UTF-8
log4j.appender.iciciService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.iciciService.layout = org.apache.log4j.PatternLayout
log4j.appender.iciciService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.iciciService = DEBUG, iciciService

log4j.appender.KotakService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.KotakService.File = /u01/controlpanel/logs/KotakService.log
log4j.appender.KotakService.Append=true
log4j.appender.KotakService.Encoding=UTF-8
log4j.appender.KotakService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.KotakService.layout = org.apache.log4j.PatternLayout
log4j.appender.KotakService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.KotakService = DEBUG, KotakService

log4j.appender.PaytmService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.PaytmService.File = /u01/controlpanel/logs/PaytmService.log
log4j.appender.PaytmService.Append=true
log4j.appender.PaytmService.Encoding=UTF-8
log4j.appender.PaytmService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.PaytmService.layout = org.apache.log4j.PatternLayout
log4j.appender.PaytmService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.PaytmService = DEBUG, PaytmService

log4j.appender.nsdlService = org.apache.log4j.DailyRollingFileAppender
log4j.appender.nsdlService.File = /u01/controlpanel/logs/nsdlService.log
log4j.appender.nsdlService.Append=true
log4j.appender.nsdlService.Encoding=UTF-8
log4j.appender.nsdlService.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.nsdlService.layout = org.apache.log4j.PatternLayout
log4j.appender.nsdlService.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.nsdlService = DEBUG, nsdlService

log4j.appender.UploadChargebackFileManagement = org.apache.log4j.DailyRollingFileAppender
log4j.appender.UploadChargebackFileManagement.File = /u01/controlpanel/logs/UploadChargebackFileManagement.log
log4j.appender.UploadChargebackFileManagement.Append=true
log4j.appender.UploadChargebackFileManagement.Encoding=UTF-8
log4j.appender.UploadChargebackFileManagement.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.UploadChargebackFileManagement.layout = org.apache.log4j.PatternLayout
log4j.appender.UploadChargebackFileManagement.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.UploadChargebackFileManagement = DEBUG, UploadChargebackFileManagement

log4j.appender.ChargeBackManagementController = org.apache.log4j.DailyRollingFileAppender
log4j.appender.ChargeBackManagementController.File = /u01/controlpanel/logs/ChargeBackManagementController.log
log4j.appender.ChargeBackManagementController.Append=true
log4j.appender.ChargeBackManagementController.Encoding=UTF-8
log4j.appender.ChargeBackManagementController.DatePattern='.'yyyy-MM-dd'.log'
log4j.appender.ChargeBackManagementController.layout = org.apache.log4j.PatternLayout
log4j.appender.ChargeBackManagementController.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %-5p %c{1}:%L - %m%n
log4j.logger.ChargeBackManagementController = DEBUG, ChargeBackManagementController


